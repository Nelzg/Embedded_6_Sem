
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029854  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000049c0  08029a28  08029a28  00039a28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  0802e3e8  0802e3e8  0003e3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802e400  0802e400  00207b90  2**0
                  CONTENTS
  5 .ARM          00000008  0802e400  0802e400  0003e400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802e408  0802e408  00207b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  0802e408  0802e408  0003e408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802e424  0802e424  0003e424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  0802e42c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00015274  20000124  0802e550  00040124  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20015398  0802e550  00045398  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00207b90  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  00210000  2**2
                  ALLOC
 14 ExtFlashSection 001b7760  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00000408  901b7760  901b7760  00207760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000028  901b7b68  901b7b68  00207b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   000d092c  00000000  00000000  00207bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00017e2f  00000000  00000000  002d84ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003210  00000000  00000000  002f0320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00005578  00000000  00000000  002f3530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00039444  00000000  00000000  002f8aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00070585  00000000  00000000  00331eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00127a6f  00000000  00000000  003a2471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  004c9ee0  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009dc8  00000000  00000000  004c9fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    000508f9  00000000  00000000  004d3d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08029a0c 	.word	0x08029a0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	08029a0c 	.word	0x08029a0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000df0:	4901      	ldr	r1, [pc, #4]	; (8000df8 <vApplicationIdleHook+0x8>)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f007 bf08 	b.w	8008c08 <vTaskSetApplicationTaskTag>
 8000df8:	08001e09 	.word	0x08001e09

08000dfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f006 f904 	bl	800700c <osDelay>
  for(;;)
 8000e04:	e7fb      	b.n	8000dfe <StartDefaultTask+0x2>
	...

08000e08 <SystemClock_Config>:
{
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e10:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	a80a      	add	r0, sp, #40	; 0x28
 8000e14:	f027 fbfa 	bl	802860c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	2214      	movs	r2, #20
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	a803      	add	r0, sp, #12
 8000e1e:	f027 fbf5 	bl	802860c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e24:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <SystemClock_Config+0x94>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5c:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e60:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e64:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e68:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f005 f88c 	bl	8005f88 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e70:	f004 fd3e 	bl	80058f0 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e76:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e78:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e82:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8e:	f005 fa67 	bl	8006360 <HAL_RCC_ClockConfig>
}
 8000e92:	b014      	add	sp, #80	; 0x50
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <main>:
{
 8000ea0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ea4:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eaa:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eac:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eae:	f04f 4910 	mov.w	r9, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eb2:	f027 fbab 	bl	802860c <memset>
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eb6:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000eb8:	f003 fc44 	bl	8004744 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ebc:	4bc6      	ldr	r3, [pc, #792]	; (80011d8 <main+0x338>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ebe:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ec0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ec4:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ec6:	e9cd 930e 	strd	r9, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eca:	f003 fc59 	bl	8004780 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ece:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ed0:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ed2:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ed6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000eda:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ede:	f003 fc4f 	bl	8004780 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f003 fc3c 	bl	8004760 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eec:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ef0:	4aba      	ldr	r2, [pc, #744]	; (80011dc <main+0x33c>)
 8000ef2:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000efe:	6953      	ldr	r3, [r2, #20]
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f0e:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f12:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f1a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f1e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f22:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000f26:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f28:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f2c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f2e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f32:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f34:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000f38:	d2f9      	bcs.n	8000f2e <main+0x8e>
    } while(sets-- != 0U);
 8000f3a:	3b20      	subs	r3, #32
 8000f3c:	f113 0f20 	cmn.w	r3, #32
 8000f40:	d1f2      	bne.n	8000f28 <main+0x88>
 8000f42:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f46:	6953      	ldr	r3, [r2, #20]
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f56:	f003 fb59 	bl	800460c <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2400      	movs	r4, #0
  SystemClock_Config();
 8000f5c:	f7ff ff54 	bl	8000e08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	2214      	movs	r2, #20
 8000f62:	2100      	movs	r1, #0
 8000f64:	a80d      	add	r0, sp, #52	; 0x34
 8000f66:	f027 fb51 	bl	802860c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b9d      	ldr	r3, [pc, #628]	; (80011e0 <main+0x340>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	489d      	ldr	r0, [pc, #628]	; (80011e4 <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2701      	movs	r7, #1
 8000f74:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000f80:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  hdma2d.Instance = DMA2D;
 8000f84:	4d98      	ldr	r5, [pc, #608]	; (80011e8 <main+0x348>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f86:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8e:	4e97      	ldr	r6, [pc, #604]	; (80011ec <main+0x34c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f90:	f002 0210 	and.w	r2, r2, #16
 8000f94:	9202      	str	r2, [sp, #8]
 8000f96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa2:	f002 0202 	and.w	r2, r2, #2
 8000fa6:	9203      	str	r2, [sp, #12]
 8000fa8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	f002 0201 	and.w	r2, r2, #1
 8000fb8:	9204      	str	r2, [sp, #16]
 8000fba:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000fca:	9205      	str	r2, [sp, #20]
 8000fcc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fdc:	9206      	str	r2, [sp, #24]
 8000fde:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe2:	f042 0208 	orr.w	r2, r2, #8
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fea:	f002 0208 	and.w	r2, r2, #8
 8000fee:	9207      	str	r2, [sp, #28]
 8000ff0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001000:	9208      	str	r2, [sp, #32]
 8001002:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001006:	f042 0220 	orr.w	r2, r2, #32
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
 800100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100e:	f002 0220 	and.w	r2, r2, #32
 8001012:	9209      	str	r2, [sp, #36]	; 0x24
 8001014:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
 800101e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001020:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001024:	920a      	str	r2, [sp, #40]	; 0x28
 8001026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001036:	920b      	str	r2, [sp, #44]	; 0x2c
 8001038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	f042 0204 	orr.w	r2, r2, #4
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	930c      	str	r3, [sp, #48]	; 0x30
 800104c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800104e:	f003 feeb 	bl	8004e28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2108      	movs	r1, #8
 8001056:	4866      	ldr	r0, [pc, #408]	; (80011f0 <main+0x350>)
 8001058:	f003 fee6 	bl	8004e28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	4864      	ldr	r0, [pc, #400]	; (80011f4 <main+0x354>)
 8001064:	f003 fee0 	bl	8004e28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	21c0      	movs	r1, #192	; 0xc0
 800106c:	4862      	ldr	r0, [pc, #392]	; (80011f8 <main+0x358>)
 800106e:	f003 fedb 	bl	8004e28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	4861      	ldr	r0, [pc, #388]	; (80011fc <main+0x35c>)
 8001078:	f003 fed6 	bl	8004e28 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 800107c:	a90d      	add	r1, sp, #52	; 0x34
 800107e:	4859      	ldr	r0, [pc, #356]	; (80011e4 <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001088:	f003 fd48 	bl	8004b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800108c:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800108e:	a90d      	add	r1, sp, #52	; 0x34
 8001090:	4857      	ldr	r0, [pc, #348]	; (80011f0 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800109a:	f003 fd3f 	bl	8004b1c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800109e:	a90d      	add	r1, sp, #52	; 0x34
 80010a0:	4854      	ldr	r0, [pc, #336]	; (80011f4 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f003 fd37 	bl	8004b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 80010ae:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	a90d      	add	r1, sp, #52	; 0x34
 80010b2:	4851      	ldr	r0, [pc, #324]	; (80011f8 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f003 fd2e 	bl	8004b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80010c0:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010c2:	a90d      	add	r1, sp, #52	; 0x34
 80010c4:	484d      	ldr	r0, [pc, #308]	; (80011fc <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f003 fd25 	bl	8004b1c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <main+0x360>)
 80010d4:	494b      	ldr	r1, [pc, #300]	; (8001204 <main+0x364>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010d6:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80010d8:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010da:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010dc:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010e0:	f003 fb7a 	bl	80047d8 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 80010e4:	4948      	ldr	r1, [pc, #288]	; (8001208 <main+0x368>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010e6:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010e8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010ec:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 80010f0:	e9c5 1400 	strd	r1, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80010f4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010f8:	f003 fc10 	bl	800491c <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010fc:	4639      	mov	r1, r7
 80010fe:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001100:	4d42      	ldr	r5, [pc, #264]	; (800120c <main+0x36c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001102:	f003 fcc3 	bl	8004a8c <HAL_DMA2D_ConfigLayer>
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800110c:	4940      	ldr	r1, [pc, #256]	; (8001210 <main+0x370>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800110e:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001110:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001112:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001114:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001116:	e9c6 3205 	strd	r3, r2, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800111e:	e9c6 2a08 	strd	r2, sl, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001122:	f04f 0a02 	mov.w	sl, #2
 8001126:	2207      	movs	r2, #7
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001128:	e9c6 1400 	strd	r1, r4, [r6]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800112c:	a90d      	add	r1, sp, #52	; 0x34
  SdramTiming.RCDDelay = 2;
 800112e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001132:	e9c6 9803 	strd	r9, r8, [r6, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001136:	e9cd a20d 	strd	sl, r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 800113a:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 800113e:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001142:	f005 fc63 	bl	8006a0c <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001146:	4629      	mov	r1, r5
 8001148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114c:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 800114e:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001150:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001154:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001158:	f005 fc78 	bl	8006a4c <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800115c:	4638      	mov	r0, r7
 800115e:	f003 fa79 	bl	8004654 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001162:	4629      	mov	r1, r5
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800116a:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 800116e:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001172:	f005 fc6b 	bl	8006a4c <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 8001176:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001178:	4629      	mov	r1, r5
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001180:	e9c5 b800 	strd	fp, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001184:	e9c5 3402 	strd	r3, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001188:	f005 fc60 	bl	8006a4c <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800118c:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001196:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001198:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 800119a:	9b01      	ldr	r3, [sp, #4]
    Command.AutoRefreshNumber      = 1;
 800119c:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800119e:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011a0:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011a4:	f005 fc52 	bl	8006a4c <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011a8:	f240 712b 	movw	r1, #1835	; 0x72b
 80011ac:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 80011ae:	4d19      	ldr	r5, [pc, #100]	; (8001214 <main+0x374>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011b0:	f005 fc6b 	bl	8006a8a <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011b4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011bc:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 80011be:	f240 2615 	movw	r6, #533	; 0x215
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011c2:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <main+0x378>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <main+0x37c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c8:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 80011ca:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80011d2:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80011d6:	e023      	b.n	8001220 <main+0x380>
 80011d8:	0300001b 	.word	0x0300001b
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020400 	.word	0x40020400
 80011e8:	2000017c 	.word	0x2000017c
 80011ec:	200002fc 	.word	0x200002fc
 80011f0:	40022800 	.word	0x40022800
 80011f4:	40022000 	.word	0x40022000
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40021800 	.word	0x40021800
 8001200:	20000158 	.word	0x20000158
 8001204:	40023000 	.word	0x40023000
 8001208:	4002b000 	.word	0x4002b000
 800120c:	20000140 	.word	0x20000140
 8001210:	a0000140 	.word	0xa0000140
 8001214:	200001bc 	.word	0x200001bc
 8001218:	20404768 	.word	0x20404768
 800121c:	40005c00 	.word	0x40005c00
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001220:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001224:	f003 ff9f 	bl	8005166 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001228:	4621      	mov	r1, r4
 800122a:	4628      	mov	r0, r5
 800122c:	f004 f978 	bl	8005520 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001230:	4621      	mov	r1, r4
 8001232:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8001234:	4d3d      	ldr	r5, [pc, #244]	; (800132c <main+0x48c>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001236:	f004 f999 	bl	800556c <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800123a:	2234      	movs	r2, #52	; 0x34
 800123c:	4621      	mov	r1, r4
 800123e:	eb0d 0002 	add.w	r0, sp, r2
 8001242:	f027 f9e3 	bl	802860c <memset>
  hltdc.Instance = LTDC;
 8001246:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <main+0x490>)
  hltdc.Init.VerticalSync = 9;
 8001248:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 800124a:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.TotalHeigh = 285;
 800124c:	f240 2c35 	movw	ip, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8001250:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001252:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8001254:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001258:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 800125c:	2309      	movs	r3, #9
 800125e:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8001262:	230b      	movs	r3, #11
 8001264:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8001268:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800126c:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 800126e:	e9c5 6309 	strd	r6, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8001272:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001276:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 800127a:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800127e:	f004 fa21 	bl	80056c4 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001282:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001284:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 8001288:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 800128c:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001290:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 8001292:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.ImageHeight = 272;
 8001294:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001296:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 800129a:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.Alpha0 = 0;
 800129e:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012a2:	2105      	movs	r1, #5
 80012a4:	e9cd e114 	strd	lr, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 80012a8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 80012ac:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 80012b0:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012b4:	4622      	mov	r2, r4
 80012b6:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012b8:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012bc:	f004 facd 	bl	800585a <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 80012c0:	481c      	ldr	r0, [pc, #112]	; (8001334 <main+0x494>)
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <main+0x498>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012c4:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 80012c6:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012ca:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012ce:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012d2:	f04f 0818 	mov.w	r8, #24
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012d6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012da:	e9c0 8304 	strd	r8, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012de:	f004 fc17 	bl	8005b10 <HAL_QSPI_Init>
  BSP_QSPI_Init();
 80012e2:	f003 f811 	bl	8004308 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 80012e6:	f002 ff55 	bl	8004194 <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80012ea:	205c      	movs	r0, #92	; 0x5c
 80012ec:	f003 fa16 	bl	800471c <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 80012f0:	f000 fb4a 	bl	8001988 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 80012f4:	f000 fb73 	bl	80019de <MX_TouchGFX_Init>
  osKernelInitialize();
 80012f8:	f005 fdf8 	bl	8006eec <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <main+0x49c>)
 80012fe:	4621      	mov	r1, r4
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <main+0x4a0>)
 8001302:	f005 fe2d 	bl	8006f60 <osThreadNew>
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <main+0x4a4>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001308:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <main+0x4a8>)
 800130a:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800130c:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800130e:	480f      	ldr	r0, [pc, #60]	; (800134c <main+0x4ac>)
 8001310:	f005 fe26 	bl	8006f60 <osThreadNew>
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <main+0x4b0>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <main+0x4b4>)
 8001318:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800131a:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <main+0x4b8>)
 800131e:	f005 fe1f 	bl	8006f60 <osThreadNew>
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <main+0x4bc>)
 8001324:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001326:	f005 fdfb 	bl	8006f20 <osKernelStart>
  while (1)
 800132a:	e7fe      	b.n	800132a <main+0x48a>
 800132c:	20000208 	.word	0x20000208
 8001330:	40016800 	.word	0x40016800
 8001334:	200002b0 	.word	0x200002b0
 8001338:	a0001000 	.word	0xa0001000
 800133c:	08029ab0 	.word	0x08029ab0
 8001340:	08000dfd 	.word	0x08000dfd
 8001344:	20000154 	.word	0x20000154
 8001348:	08029a8c 	.word	0x08029a8c
 800134c:	080019e3 	.word	0x080019e3
 8001350:	20000150 	.word	0x20000150
 8001354:	08029ad4 	.word	0x08029ad4
 8001358:	080031ad 	.word	0x080031ad
 800135c:	20000330 	.word	0x20000330

08001360 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001360:	6802      	ldr	r2, [r0, #0]
 8001362:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001364:	429a      	cmp	r2, r3
 8001366:	d101      	bne.n	800136c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001368:	f003 b962 	b.w	8004630 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40001000 	.word	0x40001000

08001374 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001374:	4770      	bx	lr
	...

08001378 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_MspInit+0x38>)
{
 800137a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800137c:	210f      	movs	r1, #15
 800137e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001384:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800139c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013aa:	f003 b977 	b.w	800469c <HAL_NVIC_SetPriority>
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013b4:	6802      	ldr	r2, [r0, #0]
{
 80013b6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_CRC_MspInit+0x28>)
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d10b      	bne.n	80013d6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013be:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80013c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013d6:	b002      	add	sp, #8
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023000 	.word	0x40023000

080013e0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_DMA2D_MspInit+0x3c>)
{
 80013e2:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013e4:	6802      	ldr	r2, [r0, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d115      	bne.n	8001416 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013ea:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013ee:	2105      	movs	r1, #5
 80013f0:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013fa:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001406:	f003 f949 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800140a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800140c:	b003      	add	sp, #12
 800140e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001412:	f003 b975 	b.w	8004700 <HAL_NVIC_EnableIRQ>
}
 8001416:	b003      	add	sp, #12
 8001418:	f85d fb04 	ldr.w	pc, [sp], #4
 800141c:	4002b000 	.word	0x4002b000

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b510      	push	{r4, lr}
 8001422:	b0a8      	sub	sp, #160	; 0xa0
 8001424:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	2214      	movs	r2, #20
 8001428:	2100      	movs	r1, #0
 800142a:	a802      	add	r0, sp, #8
 800142c:	f027 f8ee 	bl	802860c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	2284      	movs	r2, #132	; 0x84
 8001432:	2100      	movs	r1, #0
 8001434:	a807      	add	r0, sp, #28
 8001436:	f027 f8e9 	bl	802860c <memset>
  if(hi2c->Instance==I2C3)
 800143a:	6822      	ldr	r2, [r4, #0]
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_I2C_MspInit+0x7c>)
 800143e:	429a      	cmp	r2, r3
 8001440:	d12a      	bne.n	8001498 <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001446:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001448:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144a:	f005 f857 	bl	80064fc <HAL_RCCEx_PeriphCLKConfig>
 800144e:	b108      	cbz	r0, 8001454 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001450:	f7ff ff90 	bl	8001374 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001454:	4c12      	ldr	r4, [pc, #72]	; (80014a0 <HAL_I2C_MspInit+0x80>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001456:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800145c:	4811      	ldr	r0, [pc, #68]	; (80014a4 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6323      	str	r3, [r4, #48]	; 0x30
 8001466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001470:	2312      	movs	r3, #18
 8001472:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800147c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800147e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001480:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001482:	f003 fb4b 	bl	8004b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800148c:	6423      	str	r3, [r4, #64]	; 0x40
 800148e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001498:	b028      	add	sp, #160	; 0xa0
 800149a:	bd10      	pop	{r4, pc}
 800149c:	40005c00 	.word	0x40005c00
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40021c00 	.word	0x40021c00

080014a8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 80014a8:	6802      	ldr	r2, [r0, #0]
{
 80014aa:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_I2C_MspDeInit+0x2c>)
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d10f      	bne.n	80014d2 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014b8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014c0:	f003 fc10 	bl	8004ce4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80014ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014ce:	f003 bc09 	b.w	8004ce4 <HAL_GPIO_DeInit>
}
 80014d2:	bd08      	pop	{r3, pc}
 80014d4:	40005c00 	.word	0x40005c00
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40021c00 	.word	0x40021c00

080014e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	b0ac      	sub	sp, #176	; 0xb0
 80014e4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	2214      	movs	r2, #20
 80014e8:	2100      	movs	r1, #0
 80014ea:	a806      	add	r0, sp, #24
 80014ec:	f027 f88e 	bl	802860c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	2284      	movs	r2, #132	; 0x84
 80014f2:	2100      	movs	r1, #0
 80014f4:	a80b      	add	r0, sp, #44	; 0x2c
 80014f6:	f027 f889 	bl	802860c <memset>
  if(hltdc->Instance==LTDC)
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_LTDC_MspInit+0x140>)
 80014fe:	429a      	cmp	r2, r3
 8001500:	f040 808c 	bne.w	800161c <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001504:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001506:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001508:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800150a:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800150c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001510:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001512:	2302      	movs	r3, #2
 8001514:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800151e:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001522:	f004 ffeb 	bl	80064fc <HAL_RCCEx_PeriphCLKConfig>
 8001526:	b108      	cbz	r0, 800152c <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 8001528:	f7ff ff24 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800152c:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001532:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001536:	a906      	add	r1, sp, #24
 8001538:	483b      	ldr	r0, [pc, #236]	; (8001628 <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800153a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
 8001540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001542:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800154c:	f042 0210 	orr.w	r2, r2, #16
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
 8001552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001554:	f002 0210 	and.w	r2, r2, #16
 8001558:	9201      	str	r2, [sp, #4]
 800155a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800155c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
 8001564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001566:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800156a:	9202      	str	r2, [sp, #8]
 800156c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
 8001576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001578:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800157c:	9203      	str	r2, [sp, #12]
 800157e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
 8001588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800158e:	9204      	str	r2, [sp, #16]
 8001590:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	9305      	str	r3, [sp, #20]
 80015a2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2310      	movs	r3, #16
 80015a6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ae:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b0:	f003 fab4 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80015b4:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015b8:	a906      	add	r1, sp, #24
 80015ba:	481c      	ldr	r0, [pc, #112]	; (800162c <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015bc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015c6:	f003 faa9 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80015ca:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015cc:	a906      	add	r1, sp, #24
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015da:	f003 fa9f 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e2:	a906      	add	r1, sp, #24
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015ea:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015f0:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f2:	f003 fa93 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80015f6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015fa:	a906      	add	r1, sp, #24
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fe:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001608:	f003 fa88 	bl	8004b1c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800160c:	2058      	movs	r0, #88	; 0x58
 800160e:	4622      	mov	r2, r4
 8001610:	2105      	movs	r1, #5
 8001612:	f003 f843 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001616:	2058      	movs	r0, #88	; 0x58
 8001618:	f003 f872 	bl	8004700 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800161c:	b02c      	add	sp, #176	; 0xb0
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	40016800 	.word	0x40016800
 8001624:	40023800 	.word	0x40023800
 8001628:	40021000 	.word	0x40021000
 800162c:	40022400 	.word	0x40022400
 8001630:	40022800 	.word	0x40022800
 8001634:	40021800 	.word	0x40021800
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	2214      	movs	r2, #20
 800163e:	2100      	movs	r1, #0
{
 8001640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001644:	b08a      	sub	sp, #40	; 0x28
 8001646:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	eb0d 0002 	add.w	r0, sp, r2
 800164c:	f026 ffde 	bl	802860c <memset>
  if(hqspi->Instance==QUADSPI)
 8001650:	6822      	ldr	r2, [r4, #0]
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_QSPI_MspInit+0xc8>)
 8001654:	429a      	cmp	r2, r3
 8001656:	d151      	bne.n	80016fc <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800165c:	2403      	movs	r4, #3
 800165e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	a905      	add	r1, sp, #20
 8001668:	4828      	ldr	r0, [pc, #160]	; (800170c <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800166a:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001670:	639a      	str	r2, [r3, #56]	; 0x38
 8001672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001674:	f002 0202 	and.w	r2, r2, #2
 8001678:	9201      	str	r2, [sp, #4]
 800167a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167e:	f042 0210 	orr.w	r2, r2, #16
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
 8001684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001686:	f002 0210 	and.w	r2, r2, #16
 800168a:	9202      	str	r2, [sp, #8]
 800168c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001690:	f042 0202 	orr.w	r2, r2, #2
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
 8001696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001698:	f002 0202 	and.w	r2, r2, #2
 800169c:	9203      	str	r2, [sp, #12]
 800169e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a2:	f042 0208 	orr.w	r2, r2, #8
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	9304      	str	r3, [sp, #16]
 80016b0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016b6:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ba:	f003 fa2f 	bl	8004b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016be:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	a905      	add	r1, sp, #20
 80016c2:	4813      	ldr	r0, [pc, #76]	; (8001710 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016c8:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016ce:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f003 fa24 	bl	8004b1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	a905      	add	r1, sp, #20
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016d8:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f003 fa1b 	bl	8004b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 80016e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ea:	a905      	add	r1, sp, #20
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ee:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f8:	f003 fa10 	bl	8004b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80016fc:	b00a      	add	sp, #40	; 0x28
 80016fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001702:	bf00      	nop
 8001704:	a0001000 	.word	0xa0001000
 8001708:	40023800 	.word	0x40023800
 800170c:	40021000 	.word	0x40021000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020c00 	.word	0x40020c00

08001718 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 8001718:	6802      	ldr	r2, [r0, #0]
{
 800171a:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_QSPI_MspDeInit+0x34>)
 800171e:	429a      	cmp	r2, r3
 8001720:	d113      	bne.n	800174a <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001724:	2104      	movs	r1, #4
 8001726:	480b      	ldr	r0, [pc, #44]	; (8001754 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001728:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800172a:	f023 0302 	bic.w	r3, r3, #2
 800172e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001730:	f003 fad8 	bl	8004ce4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8001734:	2144      	movs	r1, #68	; 0x44
 8001736:	4808      	ldr	r0, [pc, #32]	; (8001758 <HAL_QSPI_MspDeInit+0x40>)
 8001738:	f003 fad4 	bl	8004ce4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 800173c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001746:	f003 bacd 	b.w	8004ce4 <HAL_GPIO_DeInit>
}
 800174a:	bd08      	pop	{r3, pc}
 800174c:	a0001000 	.word	0xa0001000
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020400 	.word	0x40020400
 800175c:	40020c00 	.word	0x40020c00

08001760 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001762:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001764:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001766:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <HAL_SDRAM_MspInit+0xb0>)
 800176a:	681e      	ldr	r6, [r3, #0]
 800176c:	2e00      	cmp	r6, #0
 800176e:	d14d      	bne.n	800180c <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 8001770:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001774:	2503      	movs	r5, #3
 8001776:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8001778:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177e:	4826      	ldr	r0, [pc, #152]	; (8001818 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	639a      	str	r2, [r3, #56]	; 0x38
 8001788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001796:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179e:	f003 f9bd 	bl	8004b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80017a2:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a6:	a901      	add	r1, sp, #4
 80017a8:	481c      	ldr	r0, [pc, #112]	; (800181c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b4:	f003 f9b2 	bl	8004b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80017b8:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017bc:	a901      	add	r1, sp, #4
 80017be:	4818      	ldr	r0, [pc, #96]	; (8001820 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f003 f9a7 	bl	8004b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d2:	a901      	add	r1, sp, #4
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e0:	f003 f99c 	bl	8004b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80017e4:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017e6:	a901      	add	r1, sp, #4
 80017e8:	480f      	ldr	r0, [pc, #60]	; (8001828 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ea:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f4:	f003 f992 	bl	8004b1c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f8:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	a901      	add	r1, sp, #4
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017fe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f003 f988 	bl	8004b1c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800180c:	b007      	add	sp, #28
 800180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001810:	20000334 	.word	0x20000334
 8001814:	40023800 	.word	0x40023800
 8001818:	40021000 	.word	0x40021000
 800181c:	40021800 	.word	0x40021800
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40021400 	.word	0x40021400
 8001828:	40021c00 	.word	0x40021c00
 800182c:	40020800 	.word	0x40020800

08001830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b510      	push	{r4, lr}
 8001832:	4601      	mov	r1, r0
 8001834:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001836:	2200      	movs	r2, #0
 8001838:	2036      	movs	r0, #54	; 0x36
 800183a:	f002 ff2f 	bl	800469c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800183e:	2036      	movs	r0, #54	; 0x36
 8001840:	f002 ff5e 	bl	8004700 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001846:	a901      	add	r1, sp, #4
 8001848:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800184a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800184c:	4c13      	ldr	r4, [pc, #76]	; (800189c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800184e:	f042 0210 	orr.w	r2, r2, #16
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800185e:	f004 fe2f 	bl	80064c0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001862:	f004 fe1d 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001868:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 800186a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800186c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001870:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_InitTick+0x74>)
 8001874:	fbb0 f0f3 	udiv	r0, r0, r3
 8001878:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800187a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800187c:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800187e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001880:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001884:	f005 fa72 	bl	8006d6c <HAL_TIM_Base_Init>
 8001888:	b920      	cbnz	r0, 8001894 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800188a:	4620      	mov	r0, r4
 800188c:	f005 f916 	bl	8006abc <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001890:	b008      	add	sp, #32
 8001892:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e7fb      	b.n	8001890 <HAL_InitTick+0x60>
 8001898:	40023800 	.word	0x40023800
 800189c:	20000338 	.word	0x20000338
 80018a0:	40001000 	.word	0x40001000
 80018a4:	000f4240 	.word	0x000f4240

080018a8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018a8:	4770      	bx	lr

080018aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler>

080018ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler>

080018ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler>

080018b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <UsageFault_Handler>

080018b2 <DebugMon_Handler>:
 80018b2:	4770      	bx	lr

080018b4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b4:	4801      	ldr	r0, [pc, #4]	; (80018bc <TIM6_DAC_IRQHandler+0x8>)
 80018b6:	f005 b943 	b.w	8006b40 <HAL_TIM_IRQHandler>
 80018ba:	bf00      	nop
 80018bc:	20000338 	.word	0x20000338

080018c0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018c0:	4801      	ldr	r0, [pc, #4]	; (80018c8 <LTDC_IRQHandler+0x8>)
 80018c2:	f003 bf6d 	b.w	80057a0 <HAL_LTDC_IRQHandler>
 80018c6:	bf00      	nop
 80018c8:	20000208 	.word	0x20000208

080018cc <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018cc:	4801      	ldr	r0, [pc, #4]	; (80018d4 <DMA2D_IRQHandler+0x8>)
 80018ce:	f003 b853 	b.w	8004978 <HAL_DMA2D_IRQHandler>
 80018d2:	bf00      	nop
 80018d4:	2000017c 	.word	0x2000017c

080018d8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80018d8:	2001      	movs	r0, #1
 80018da:	4770      	bx	lr

080018dc <_kill>:

int _kill(int pid, int sig)
{
 80018dc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018de:	f026 fe37 	bl	8028550 <__errno>
 80018e2:	2316      	movs	r3, #22
 80018e4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ea:	bd08      	pop	{r3, pc}

080018ec <_exit>:

void _exit (int status)
{
 80018ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018ee:	f026 fe2f 	bl	8028550 <__errno>
 80018f2:	2316      	movs	r3, #22
 80018f4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80018f6:	e7fe      	b.n	80018f6 <_exit+0xa>

080018f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	460d      	mov	r5, r1
 80018fc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	460e      	mov	r6, r1
 8001900:	1b73      	subs	r3, r6, r5
 8001902:	429c      	cmp	r4, r3
 8001904:	dc01      	bgt.n	800190a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001906:	4620      	mov	r0, r4
 8001908:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800190a:	f3af 8000 	nop.w
 800190e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	e7f5      	b.n	8001900 <_read+0x8>

08001914 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	460d      	mov	r5, r1
 8001918:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	460e      	mov	r6, r1
 800191c:	1b73      	subs	r3, r6, r5
 800191e:	429c      	cmp	r4, r3
 8001920:	dc01      	bgt.n	8001926 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001922:	4620      	mov	r0, r4
 8001924:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001926:	f816 0b01 	ldrb.w	r0, [r6], #1
 800192a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	e7f5      	b.n	800191c <_write+0x8>

08001930 <_close>:

int _close(int file)
{
	return -1;
}
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	4770      	bx	lr

08001936 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800193a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800193c:	604b      	str	r3, [r1, #4]
}
 800193e:	4770      	bx	lr

08001940 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001940:	2001      	movs	r0, #1
 8001942:	4770      	bx	lr

08001944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001944:	2000      	movs	r0, #0
 8001946:	4770      	bx	lr

08001948 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <_sbrk+0x30>)
{
 800194a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800194c:	6811      	ldr	r1, [r2, #0]
{
 800194e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001950:	b909      	cbnz	r1, 8001956 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001952:	490a      	ldr	r1, [pc, #40]	; (800197c <_sbrk+0x34>)
 8001954:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	6810      	ldr	r0, [r2, #0]
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <_sbrk+0x38>)
 800195a:	4c0a      	ldr	r4, [pc, #40]	; (8001984 <_sbrk+0x3c>)
 800195c:	4403      	add	r3, r0
 800195e:	1b09      	subs	r1, r1, r4
 8001960:	428b      	cmp	r3, r1
 8001962:	d906      	bls.n	8001972 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001964:	f026 fdf4 	bl	8028550 <__errno>
 8001968:	230c      	movs	r3, #12
 800196a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800196c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001970:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001972:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001974:	e7fc      	b.n	8001970 <_sbrk+0x28>
 8001976:	bf00      	nop
 8001978:	20000384 	.word	0x20000384
 800197c:	20015398 	.word	0x20015398
 8001980:	20050000 	.word	0x20050000
 8001984:	00000a00 	.word	0x00000a00

08001988 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8001988:	4770      	bx	lr
	...

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001990:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001992:	e003      	b.n	800199c <LoopCopyDataInit>

08001994 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001996:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001998:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800199a:	3104      	adds	r1, #4

0800199c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019a4:	d3f6      	bcc.n	8001994 <CopyDataInit>
  ldr  r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019a8:	e002      	b.n	80019b0 <LoopFillZerobss>

080019aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019ac:	f842 3b04 	str.w	r3, [r2], #4

080019b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019b4:	d3f9      	bcc.n	80019aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019b6:	f002 fd3f 	bl	8004438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f026 fde1 	bl	8028580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff fa6f 	bl	8000ea0 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80019c8:	0802e42c 	.word	0x0802e42c
  ldr  r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019d0:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 80019d4:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 80019d8:	20015398 	.word	0x20015398

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>

080019de <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80019de:	f001 b843 	b.w	8002a68 <touchgfx_init>

080019e2 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80019e2:	f001 b8b1 	b.w	8002b48 <touchgfx_taskEntry>

080019e6 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80019e6:	6840      	ldr	r0, [r0, #4]
    }
 80019e8:	4770      	bx	lr

080019ea <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80019ea:	6041      	str	r1, [r0, #4]
    }
 80019ec:	4770      	bx	lr
	...

080019f0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80019f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80019f4:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 80019f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fc:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001a04:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	4770      	bx	lr
 8001a18:	e0001000 	.word	0xe0001000
 8001a1c:	c5acce55 	.word	0xc5acce55

08001a20 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001a20:	1a51      	subs	r1, r2, r1
 8001a22:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001a26:	fbb1 f0f3 	udiv	r0, r1, r3
 8001a2a:	4770      	bx	lr

08001a2c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001a2c:	4b01      	ldr	r3, [pc, #4]	; (8001a34 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001a2e:	6858      	ldr	r0, [r3, #4]
}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e0001000 	.word	0xe0001000

08001a38 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001a38:	4770      	bx	lr

08001a3a <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001a3a:	b510      	push	{r4, lr}
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	210c      	movs	r1, #12
 8001a40:	f026 fd26 	bl	8028490 <_ZdlPvj>
 8001a44:	4620      	mov	r0, r4
 8001a46:	bd10      	pop	{r4, pc}

08001a48 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a48:	6803      	ldr	r3, [r0, #0]
{
 8001a4a:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a4c:	691b      	ldr	r3, [r3, #16]
{
 8001a4e:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001a50:	b131      	cbz	r1, 8001a60 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a52:	4798      	blx	r3
 8001a54:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001a56:	6863      	ldr	r3, [r4, #4]
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	4418      	add	r0, r3
 8001a5c:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001a5e:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001a60:	4798      	blx	r3
 8001a62:	60a0      	str	r0, [r4, #8]
}
 8001a64:	e7fb      	b.n	8001a5e <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001a68 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a6a:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001a6c:	4a02      	ldr	r2, [pc, #8]	; (8001a78 <_ZN20STM32TouchController4initEv+0x10>)
 8001a6e:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	4718      	bx	r3
 8001a74:	20000010 	.word	0x20000010
 8001a78:	20000388 	.word	0x20000388

08001a7c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001a7c:	4770      	bx	lr

08001a7e <_ZN20STM32TouchControllerD0Ev>:
 8001a7e:	b510      	push	{r4, lr}
 8001a80:	4604      	mov	r4, r0
 8001a82:	2104      	movs	r1, #4
 8001a84:	f026 fd04 	bl	8028490 <_ZdlPvj>
 8001a88:	4620      	mov	r0, r4
 8001a8a:	bd10      	pop	{r4, pc}

08001a8c <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001a8e:	4d0a      	ldr	r5, [pc, #40]	; (8001ab8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001a90:	460c      	mov	r4, r1
    if (tsDriver)
 8001a92:	682b      	ldr	r3, [r5, #0]
 8001a94:	b913      	cbnz	r3, 8001a9c <_ZN20STM32TouchController11sampleTouchERlS0_+0x10>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 8001a96:	2000      	movs	r0, #0
}
 8001a98:	b003      	add	sp, #12
 8001a9a:	bd30      	pop	{r4, r5, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2070      	movs	r0, #112	; 0x70
 8001aa0:	9201      	str	r2, [sp, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	9901      	ldr	r1, [sp, #4]
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d0f5      	beq.n	8001a96 <_ZN20STM32TouchController11sampleTouchERlS0_+0xa>
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	2070      	movs	r0, #112	; 0x70
 8001aae:	4622      	mov	r2, r4
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4798      	blx	r3
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	e7ef      	b.n	8001a98 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
 8001ab8:	20000388 	.word	0x20000388

08001abc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001abc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001abe:	2301      	movs	r3, #1
{
 8001ac0:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001acc:	f10d 0217 	add.w	r2, sp, #23
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <TS_IO_Write+0x30>)
 8001ad8:	f003 fbaf 	bl	800523a <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001adc:	b110      	cbz	r0, 8001ae4 <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <TS_IO_Write+0x30>)
 8001ae0:	f003 fb92 	bl	8005208 <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001ae4:	b007      	add	sp, #28
 8001ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aea:	bf00      	nop
 8001aec:	200001bc 	.word	0x200001bc

08001af0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001af0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001af2:	2300      	movs	r3, #0
{
 8001af4:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001afa:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001afe:	2301      	movs	r3, #1
 8001b00:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001b04:	f10d 0117 	add.w	r1, sp, #23
 8001b08:	9100      	str	r1, [sp, #0]
 8001b0a:	4601      	mov	r1, r0
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <TS_IO_Read+0x34>)
 8001b0e:	f003 fc4b 	bl	80053a8 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001b12:	b110      	cbz	r0, 8001b1a <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <TS_IO_Read+0x34>)
 8001b16:	f003 fb77 	bl	8005208 <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001b1a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001b1e:	b007      	add	sp, #28
 8001b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b24:	200001bc 	.word	0x200001bc

08001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001b28:	2803      	cmp	r0, #3
 8001b2a:	d823      	bhi.n	8001b74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8001b2c:	e8df f000 	tbb	[pc, r0]
 8001b30:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b36:	2110      	movs	r1, #16
 8001b38:	4810      	ldr	r0, [pc, #64]	; (8001b7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	fab2 f282 	clz	r2, r2
 8001b40:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b42:	f003 b971 	b.w	8004e28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b48:	2140      	movs	r1, #64	; 0x40
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	fab2 f282 	clz	r2, r2
 8001b50:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001b52:	480b      	ldr	r0, [pc, #44]	; (8001b80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001b54:	e7f5      	b.n	8001b42 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	fab2 f282 	clz	r2, r2
 8001b60:	0952      	lsrs	r2, r2, #5
 8001b62:	e7f6      	b.n	8001b52 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	4806      	ldr	r0, [pc, #24]	; (8001b84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	fab2 f282 	clz	r2, r2
 8001b70:	0952      	lsrs	r2, r2, #5
 8001b72:	e7e6      	b.n	8001b42 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000038c 	.word	0x2000038c
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40021800 	.word	0x40021800

08001b88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001b88:	2803      	cmp	r0, #3
 8001b8a:	d823      	bhi.n	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8001b8c:	e8df f000 	tbb	[pc, r0]
 8001b90:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001b96:	2110      	movs	r1, #16
 8001b98:	4810      	ldr	r0, [pc, #64]	; (8001bdc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	3a00      	subs	r2, #0
 8001b9e:	bf18      	it	ne
 8001ba0:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001ba2:	f003 b941 	b.w	8004e28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001ba8:	2140      	movs	r1, #64	; 0x40
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	3a00      	subs	r2, #0
 8001bae:	bf18      	it	ne
 8001bb0:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001bb2:	480b      	ldr	r0, [pc, #44]	; (8001be0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001bb4:	e7f5      	b.n	8001ba2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	3a00      	subs	r2, #0
 8001bbe:	bf18      	it	ne
 8001bc0:	2201      	movne	r2, #1
 8001bc2:	e7f6      	b.n	8001bb2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bc6:	2140      	movs	r1, #64	; 0x40
 8001bc8:	4806      	ldr	r0, [pc, #24]	; (8001be4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	3a00      	subs	r2, #0
 8001bce:	bf18      	it	ne
 8001bd0:	2201      	movne	r2, #1
 8001bd2:	e7e6      	b.n	8001ba2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000038c 	.word	0x2000038c
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40021800 	.word	0x40021800

08001be8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001be8:	2803      	cmp	r0, #3
 8001bea:	d80f      	bhi.n	8001c0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8001bec:	e8df f000 	tbb	[pc, r0]
 8001bf0:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001bf8:	f003 b91b 	b.w	8004e32 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001bfc:	2140      	movs	r1, #64	; 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001c00:	e7fa      	b.n	8001bf8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	e7fb      	b.n	8001bfe <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c06:	2140      	movs	r1, #64	; 0x40
 8001c08:	4803      	ldr	r0, [pc, #12]	; (8001c18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001c0a:	e7f5      	b.n	8001bf8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40021800 	.word	0x40021800

08001c1c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001c1c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001c1e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001c22:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001c26:	4770      	bx	lr

08001c28 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001c28:	2000      	movs	r0, #0
 8001c2a:	4770      	bx	lr

08001c2c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001c2c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c2e:	3900      	subs	r1, #0
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001c32:	bf18      	it	ne
 8001c34:	2101      	movne	r1, #1
 8001c36:	7019      	strb	r1, [r3, #0]
    }
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200150f3 	.word	0x200150f3

08001c40 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001c40:	2000      	movs	r0, #0
 8001c42:	4770      	bx	lr

08001c44 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001c44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c46:	b10b      	cbz	r3, 8001c4c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4718      	bx	r3
        }
    }
 8001c4c:	4770      	bx	lr

08001c4e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001c4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c52:	4770      	bx	lr

08001c54 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001c54:	6840      	ldr	r0, [r0, #4]
 8001c56:	6803      	ldr	r3, [r0, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	4718      	bx	r3

08001c5c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001c5c:	4770      	bx	lr
	...

08001c60 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001c64:	f001 f84c 	bl	8002d00 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001c72:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8001c76:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001c78:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001c7a:	4d06      	ldr	r5, [pc, #24]	; (8001c94 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001c7c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001c80:	4628      	mov	r0, r5
 8001c82:	f7ff feb5 	bl	80019f0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001c86:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001c88:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001c8a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001c8e:	bd38      	pop	{r3, r4, r5, pc}
 8001c90:	c0000000 	.word	0xc0000000
 8001c94:	2000039c 	.word	0x2000039c

08001c98 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001c98:	f001 b80c 	b.w	8002cb4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001c9c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001c9c:	f001 b810 	b.w	8002cc0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001ca0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001ca0:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001ca2:	f001 f85f 	bl	8002d64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001ca6:	4910      	ldr	r1, [pc, #64]	; (8001ce8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001cae:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001cb2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cb6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cba:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001cbe:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001cc2:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cc4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cc8:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cca:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001cce:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cd0:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001cd4:	d2f9      	bcs.n	8001cca <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001cd6:	3b20      	subs	r3, #32
 8001cd8:	f113 0f20 	cmn.w	r3, #32
 8001cdc:	d1f2      	bne.n	8001cc4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001cde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ce2:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001cec:	f001 b848 	b.w	8002d80 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001cf0 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001cf0:	f000 bfbc 	b.w	8002c6c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001cf4 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001cf4:	f001 b962 	b.w	8002fbc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001cf8 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001cf8:	f001 b96a 	b.w	8002fd0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001cfc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001cfc:	f000 bfc0 	b.w	8002c80 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001d00 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001d04:	f015 fdb4 	bl	8017870 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001d14:	4718      	bx	r3

08001d16 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001d16:	f015 b805 	b.w	8016d24 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001d1a <_ZN11TouchGFXHALD0Ev>:
 8001d1a:	b510      	push	{r4, lr}
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	217c      	movs	r1, #124	; 0x7c
 8001d20:	f026 fbb6 	bl	8028490 <_ZdlPvj>
 8001d24:	4620      	mov	r0, r4
 8001d26:	bd10      	pop	{r4, pc}

08001d28 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001d28:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001d2c:	b11b      	cbz	r3, 8001d36 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001d2e:	6840      	ldr	r0, [r0, #4]
 8001d30:	6803      	ldr	r3, [r0, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4718      	bx	r3
    }
 8001d36:	4618      	mov	r0, r3
 8001d38:	4770      	bx	lr
	...

08001d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001d3c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001d42:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001d44:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001d48:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001d4a:	428c      	cmp	r4, r1
 8001d4c:	d009      	beq.n	8001d62 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001d4e:	b93a      	cbnz	r2, 8001d60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d50:	490a      	ldr	r1, [pc, #40]	; (8001d7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d54:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d56:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001d58:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001d5a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d5c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001d5e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001d60:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	d0fc      	beq.n	8001d60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d66:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d68:	4904      	ldr	r1, [pc, #16]	; (8001d7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d6a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d6c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d6e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001d70:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001d72:	2200      	movs	r2, #0
 8001d74:	e7f3      	b.n	8001d5e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001d76:	bf00      	nop
 8001d78:	200150ec 	.word	0x200150ec
 8001d7c:	200150ea 	.word	0x200150ea
 8001d80:	200150e8 	.word	0x200150e8

08001d84 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001d84:	b570      	push	{r4, r5, r6, lr}
 8001d86:	460d      	mov	r5, r1
 8001d88:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001d8a:	b935      	cbnz	r5, 8001d9a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001d8e:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001d96:	f026 fba9 	bl	80284ec <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001d9a:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001d9e:	3a00      	subs	r2, #0
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001da2:	bf18      	it	ne
 8001da4:	2201      	movne	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001da8:	6803      	ldr	r3, [r0, #0]
    }
 8001daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db2:	4718      	bx	r3
 8001db4:	08029b38 	.word	0x08029b38
 8001db8:	08029b70 	.word	0x08029b70
 8001dbc:	08029bbe 	.word	0x08029bbe
 8001dc0:	200150f2 	.word	0x200150f2

08001dc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001dc4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	428b      	cmp	r3, r1
 8001dcc:	d803      	bhi.n	8001dd6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d905      	bls.n	8001de2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001dd8:	219e      	movs	r1, #158	; 0x9e
 8001dda:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001ddc:	4807      	ldr	r0, [pc, #28]	; (8001dfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001dde:	f026 fb85 	bl	80284ec <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001de4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001de8:	801a      	strh	r2, [r3, #0]
    }
 8001dea:	bd08      	pop	{r3, pc}
 8001dec:	200150e8 	.word	0x200150e8
 8001df0:	200150ea 	.word	0x200150ea
 8001df4:	08029c03 	.word	0x08029c03
 8001df8:	08029c66 	.word	0x08029c66
 8001dfc:	08029bbe 	.word	0x08029bbe
 8001e00:	200150ee 	.word	0x200150ee
 8001e04:	200150f0 	.word	0x200150f0

08001e08 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001e08:	4601      	mov	r1, r0
 8001e0a:	b508      	push	{r3, lr}
        return instance;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <IdleTaskHook+0x14>)
 8001e0e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001e10:	b101      	cbz	r1, 8001e14 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001e12:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001e14:	f015 fd46 	bl	80178a4 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001e18:	2001      	movs	r0, #1
 8001e1a:	bd08      	pop	{r3, pc}
 8001e1c:	200150f4 	.word	0x200150f4

08001e20 <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <_GLOBAL__sub_I_instrumentation+0x10>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	4a02      	ldr	r2, [pc, #8]	; (8001e34 <_GLOBAL__sub_I_instrumentation+0x14>)
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000039c 	.word	0x2000039c
 8001e34:	08029b00 	.word	0x08029b00

08001e38 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e38:	2101      	movs	r1, #1
 8001e3a:	2200      	movs	r2, #0
{
 8001e3c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e3e:	4608      	mov	r0, r1
 8001e40:	f005 f99a 	bl	8007178 <osSemaphoreNew>
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e46:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e48:	b928      	cbnz	r0, 8001e56 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e4c:	2128      	movs	r1, #40	; 0x28
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e52:	f026 fb4b 	bl	80284ec <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2104      	movs	r1, #4
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f005 fa52 	bl	8007304 <osMessageQueueNew>
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e62:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e64:	b918      	cbnz	r0, 8001e6e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e6c:	e7f0      	b.n	8001e50 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e6e:	bd08      	pop	{r3, pc}
 8001e70:	200003ac 	.word	0x200003ac
 8001e74:	08029d84 	.word	0x08029d84
 8001e78:	08029dcd 	.word	0x08029dcd
 8001e7c:	08029dfc 	.word	0x08029dfc
 8001e80:	200003a8 	.word	0x200003a8
 8001e84:	08029e6e 	.word	0x08029e6e

08001e88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	f005 b9c8 	b.w	8007224 <osSemaphoreAcquire>
 8001e94:	200003ac 	.word	0x200003ac

08001e98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001e98:	4b01      	ldr	r3, [pc, #4]	; (8001ea0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	f005 b9fc 	b.w	8007298 <osSemaphoreRelease>
 8001ea0:	200003ac 	.word	0x200003ac

08001ea4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	f005 b9bb 	b.w	8007224 <osSemaphoreAcquire>
 8001eae:	bf00      	nop
 8001eb0:	200003ac 	.word	0x200003ac

08001eb4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001eb4:	f7ff bff0 	b.w	8001e98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001eb8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001ebc:	4903      	ldr	r1, [pc, #12]	; (8001ecc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	6800      	ldr	r0, [r0, #0]
 8001ec2:	f005 ba65 	b.w	8007390 <osMessageQueuePut>
 8001ec6:	bf00      	nop
 8001ec8:	200003a8 	.word	0x200003a8
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ed0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4c07      	ldr	r4, [pc, #28]	; (8001ef4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ed6:	a901      	add	r1, sp, #4
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6820      	ldr	r0, [r4, #0]
 8001edc:	f005 fa9a 	bl	8007414 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	a901      	add	r1, sp, #4
 8001ee8:	6820      	ldr	r0, [r4, #0]
 8001eea:	f005 fa93 	bl	8007414 <osMessageQueueGet>
}
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd10      	pop	{r4, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200003a8 	.word	0x200003a8

08001ef8 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001ef8:	6803      	ldr	r3, [r0, #0]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	4718      	bx	r3

08001efe <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001efe:	2001      	movs	r0, #1
 8001f00:	4770      	bx	lr

08001f02 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f02:	6803      	ldr	r3, [r0, #0]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	4718      	bx	r3

08001f08 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001f0a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
 8001f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f16:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001f1a:	9201      	str	r2, [sp, #4]
 8001f1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f24:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001f2c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001f30:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <_ZN8STM32DMA10initializeEv+0x40>)
 8001f32:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <_ZN8STM32DMA10initializeEv+0x44>)
 8001f3a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001f3c:	b002      	add	sp, #8
 8001f3e:	4770      	bx	lr
 8001f40:	40023800 	.word	0x40023800
 8001f44:	2000017c 	.word	0x2000017c
 8001f48:	08001f91 	.word	0x08001f91
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f50:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f54:	4770      	bx	lr
	...

08001f58 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f5e:	6003      	str	r3, [r0, #0]
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <_ZN8STM32DMAD1Ev+0x1c>)
 8001f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f6a:	f3bf 8f6f 	isb	sy
}
 8001f6e:	4770      	bx	lr
 8001f70:	0802a030 	.word	0x0802a030
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f78:	b510      	push	{r4, lr}
 8001f7a:	4604      	mov	r4, r0
}
 8001f7c:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001f80:	f7ff ffea 	bl	8001f58 <_ZN8STM32DMAD1Ev>
 8001f84:	4620      	mov	r0, r4
 8001f86:	f026 fa83 	bl	8028490 <_ZdlPvj>
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	bd10      	pop	{r4, pc}
	...

08001f90 <DMA2D_XferCpltCallback>:
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <DMA2D_XferCpltCallback+0xc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001f96:	6803      	ldr	r3, [r0, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	4718      	bx	r3
 8001f9c:	200150f4 	.word	0x200150f4

08001fa0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <_ZN8STM32DMAC1Ev+0x30>)
 8001fa6:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001fa8:	2600      	movs	r6, #0
 8001faa:	4625      	mov	r5, r4
 8001fac:	2260      	movs	r2, #96	; 0x60
 8001fae:	6060      	str	r0, [r4, #4]
 8001fb0:	7226      	strb	r6, [r4, #8]
 8001fb2:	7266      	strb	r6, [r4, #9]
 8001fb4:	f845 3b20 	str.w	r3, [r5], #32
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f015 fdaf 	bl	8017b1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001fbe:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8001fc2:	60ee      	str	r6, [r5, #12]
 8001fc4:	3524      	adds	r5, #36	; 0x24
 8001fc6:	42ab      	cmp	r3, r5
 8001fc8:	d1fb      	bne.n	8001fc2 <_ZN8STM32DMAC1Ev+0x22>
}
 8001fca:	4620      	mov	r0, r4
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
 8001fce:	bf00      	nop
 8001fd0:	0802a030 	.word	0x0802a030

08001fd4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001fd4:	b508      	push	{r3, lr}
    switch (format)
 8001fd6:	290b      	cmp	r1, #11
 8001fd8:	d80b      	bhi.n	8001ff2 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001fda:	e8df f001 	tbb	[pc, r1]
 8001fde:	0612      	.short	0x0612
 8001fe0:	0a0a0a10 	.word	0x0a0a0a10
 8001fe4:	0808080a 	.word	0x0808080a
 8001fe8:	0808      	.short	0x0808
 8001fea:	2001      	movs	r0, #1
}
 8001fec:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001fee:	2005      	movs	r0, #5
        break;
 8001ff0:	e7fc      	b.n	8001fec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001ff4:	2166      	movs	r1, #102	; 0x66
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001ff8:	4805      	ldr	r0, [pc, #20]	; (8002010 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001ffa:	f026 fa77 	bl	80284ec <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001ffe:	2000      	movs	r0, #0
 8002000:	e7f4      	b.n	8001fec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002002:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002004:	e7f2      	b.n	8001fec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002006:	bf00      	nop
 8002008:	08029eb0 	.word	0x08029eb0
 800200c:	08029ecb 	.word	0x08029ecb
 8002010:	08029f15 	.word	0x08029f15

08002014 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002014:	b508      	push	{r3, lr}
    switch (format)
 8002016:	290a      	cmp	r1, #10
 8002018:	d809      	bhi.n	800202e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 800201a:	e8df f001 	tbb	[pc, r1]
 800201e:	0610      	.short	0x0610
 8002020:	0808080e 	.word	0x0808080e
 8002024:	06060608 	.word	0x06060608
 8002028:	06          	.byte	0x06
 8002029:	00          	.byte	0x00
 800202a:	2001      	movs	r0, #1
}
 800202c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002030:	2187      	movs	r1, #135	; 0x87
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002036:	f026 fa59 	bl	80284ec <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800203a:	2000      	movs	r0, #0
 800203c:	e7f6      	b.n	800202c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800203e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002040:	e7f4      	b.n	800202c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002042:	bf00      	nop
 8002044:	08029eb0 	.word	0x08029eb0
 8002048:	08029f85 	.word	0x08029f85
 800204c:	08029f15 	.word	0x08029f15

08002050 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002054:	7f4f      	ldrb	r7, [r1, #29]
{
 8002056:	460c      	mov	r4, r1
 8002058:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800205a:	4639      	mov	r1, r7
 800205c:	f7ff ffba 	bl	8001fd4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002060:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002064:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002066:	4648      	mov	r0, r9
 8002068:	4641      	mov	r1, r8
 800206a:	f7ff ffb3 	bl	8001fd4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800206e:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002070:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002072:	4648      	mov	r0, r9
 8002074:	f7ff ffce 	bl	8002014 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002078:	8aa1      	ldrh	r1, [r4, #20]
 800207a:	8b62      	ldrh	r2, [r4, #26]
 800207c:	4b42      	ldr	r3, [pc, #264]	; (8002188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800207e:	1a52      	subs	r2, r2, r1
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002082:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002084:	8b22      	ldrh	r2, [r4, #24]
 8002086:	1a52      	subs	r2, r2, r1
 8002088:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800208a:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800208c:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800208e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002092:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002094:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002096:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002098:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800209a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800209c:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800209e:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80020a2:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020a4:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80020a8:	d026      	beq.n	80020f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80020aa:	d810      	bhi.n	80020ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80020ac:	2920      	cmp	r1, #32
 80020ae:	ea45 0402 	orr.w	r4, r5, r2
 80020b2:	d062      	beq.n	800217a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020b4:	2940      	cmp	r1, #64	; 0x40
 80020b6:	d060      	beq.n	800217a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020b8:	2904      	cmp	r1, #4
 80020ba:	d05e      	beq.n	800217a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020bc:	432a      	orrs	r2, r5
 80020be:	4b32      	ldr	r3, [pc, #200]	; (8002188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020c0:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020c6:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020c8:	d05b      	beq.n	8002182 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020ca:	4a30      	ldr	r2, [pc, #192]	; (800218c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020cc:	e040      	b.n	8002150 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80020ce:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80020d2:	d007      	beq.n	80020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80020d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80020d8:	d1f0      	bne.n	80020bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020de:	f042 0209 	orr.w	r2, r2, #9
 80020e2:	e003      	b.n	80020ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020e8:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ec:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 80020ee:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80020f0:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80020f2:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020f4:	6158      	str	r0, [r3, #20]
 80020f6:	e02a      	b.n	800214e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80020f8:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020fa:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80020fc:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002102:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002104:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8002106:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002108:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800210a:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 800210c:	b142      	cbz	r2, 8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800210e:	2a01      	cmp	r2, #1
 8002110:	d021      	beq.n	8002156 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002112:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002114:	f240 1111 	movw	r1, #273	; 0x111
 8002118:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800211a:	481f      	ldr	r0, [pc, #124]	; (8002198 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800211c:	f026 f9e6 	bl	80284ec <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002120:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8002122:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002124:	8861      	ldrh	r1, [r4, #2]
 8002126:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800212a:	3901      	subs	r1, #1
 800212c:	f022 0210 	bic.w	r2, r2, #16
 8002130:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002134:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	f042 0220 	orr.w	r2, r2, #32
 800213e:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	0692      	lsls	r2, r2, #26
 8002144:	d4fc      	bmi.n	8002140 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002146:	2210      	movs	r2, #16
 8002148:	609a      	str	r2, [r3, #8]
            if (blend)
 800214a:	2800      	cmp	r0, #0
 800214c:	d0bd      	beq.n	80020ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002150:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8002152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002156:	8862      	ldrh	r2, [r4, #2]
                if (blitOp.alpha == 255)
 8002158:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800215c:	69d9      	ldr	r1, [r3, #28]
 800215e:	f102 34ff 	add.w	r4, r2, #4294967295
                if (blitOp.alpha == 255)
 8002162:	bf18      	it	ne
 8002164:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002166:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 800216a:	f022 0210 	bic.w	r2, r2, #16
 800216e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002172:	f042 0210 	orr.w	r2, r2, #16
 8002176:	61da      	str	r2, [r3, #28]
                break;
 8002178:	e7dd      	b.n	8002136 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800217a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 800217e:	61dc      	str	r4, [r3, #28]
 8002180:	e7b7      	b.n	80020f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002182:	f240 2201 	movw	r2, #513	; 0x201
 8002186:	e7e3      	b.n	8002150 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002188:	4002b000 	.word	0x4002b000
 800218c:	00010201 	.word	0x00010201
 8002190:	08029fd0 	.word	0x08029fd0
 8002194:	08029fea 	.word	0x08029fea
 8002198:	08029f15 	.word	0x08029f15
 800219c:	00020201 	.word	0x00020201

080021a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021a4:	7f89      	ldrb	r1, [r1, #30]
 80021a6:	f7ff ff35 	bl	8002014 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021ac:	8aa6      	ldrh	r6, [r4, #20]
 80021ae:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021b0:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021b2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021b6:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021b8:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021ba:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021bc:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021be:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80021c2:	6826      	ldr	r6, [r4, #0]
 80021c4:	68e1      	ldr	r1, [r4, #12]
 80021c6:	2e08      	cmp	r6, #8
 80021c8:	d10d      	bne.n	80021e6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021ca:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021cc:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021ce:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021d0:	4a0e      	ldr	r2, [pc, #56]	; (800220c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 80021d2:	7f20      	ldrb	r0, [r4, #28]
 80021d4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80021d8:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80021da:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80021dc:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021de:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021e0:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80021e2:	601a      	str	r2, [r3, #0]
    }
}
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80021e6:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80021e8:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80021ea:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 80021ec:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80021ee:	0a0a      	lsrs	r2, r1, #8
 80021f0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80021f4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80021f8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80021fc:	4302      	orrs	r2, r0
 80021fe:	430a      	orrs	r2, r1
 8002200:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8002204:	e7ed      	b.n	80021e2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002206:	bf00      	nop
 8002208:	4002b000 	.word	0x4002b000
 800220c:	00010009 	.word	0x00010009
 8002210:	00020201 	.word	0x00020201
 8002214:	00030201 	.word	0x00030201

08002218 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002218:	6940      	ldr	r0, [r0, #20]
 800221a:	4770      	bx	lr

0800221c <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:
    }

    AVIErrors getLastError()
    {
        return lastError;
    }
 800221c:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8002220:	4770      	bx	lr

08002222 <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8002222:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002224:	b923      	cbnz	r3, 8002230 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 8002226:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002228:	3800      	subs	r0, #0
 800222a:	bf18      	it	ne
 800222c:	2001      	movne	r0, #1
 800222e:	4770      	bx	lr
 8002230:	2001      	movs	r0, #1
}
 8002232:	4770      	bx	lr

08002234 <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002234:	6880      	ldr	r0, [r0, #8]
 8002236:	4770      	bx	lr

08002238 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002238:	3004      	adds	r0, #4
{
 800223a:	b510      	push	{r4, lr}
 800223c:	460c      	mov	r4, r1
    *data = videoInfo;
 800223e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 8002244:	bd10      	pop	{r4, pc}

08002246 <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 8002246:	4770      	bx	lr

08002248 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002248:	b508      	push	{r3, lr}
    assert(0);
 800224a:	4a03      	ldr	r2, [pc, #12]	; (8002258 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 800224c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8002250:	4b02      	ldr	r3, [pc, #8]	; (800225c <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8002252:	4803      	ldr	r0, [pc, #12]	; (8002260 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002254:	f026 f94a 	bl	80284ec <__assert_func>
 8002258:	0802a078 	.word	0x0802a078
 800225c:	0802ba0f 	.word	0x0802ba0f
 8002260:	0802a0d3 	.word	0x0802a0d3

08002264 <_ZN20SoftwareMJPEGDecoderD0Ev>:
 8002264:	b510      	push	{r4, lr}
 8002266:	4604      	mov	r4, r0
 8002268:	2148      	movs	r1, #72	; 0x48
 800226a:	f026 f911 	bl	8028490 <_ZdlPvj>
 800226e:	4620      	mov	r0, r4
 8002270:	bd10      	pop	{r4, pc}
	...

08002274 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8002274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002278:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800227a:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 800227c:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002280:	4605      	mov	r5, r0
 8002282:	460e      	mov	r6, r1
 8002284:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002286:	2b00      	cmp	r3, #0
 8002288:	d052      	beq.n	8002330 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800228a:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 800228c:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 800228e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002338 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002292:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 8002296:	f00d fa45 	bl	800f724 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 800229a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800229e:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 80022a0:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 80022a2:	a824      	add	r0, sp, #144	; 0x90
 80022a4:	f007 f95f 	bl	8009566 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 80022a8:	463a      	mov	r2, r7
 80022aa:	4631      	mov	r1, r6
 80022ac:	a824      	add	r0, sp, #144	; 0x90
 80022ae:	f008 f8f3 	bl	800a498 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 80022b2:	2101      	movs	r1, #1
 80022b4:	a824      	add	r0, sp, #144	; 0x90
 80022b6:	f007 fa5f 	bl	8009778 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 80022ba:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 80022bc:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 80022be:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 80022c2:	f007 fafd 	bl	80098c0 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80022c6:	f8bd 6298 	ldrh.w	r6, [sp, #664]	; 0x298
 80022ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80022cc:	f8bd 729c 	ldrh.w	r7, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 80022d0:	429e      	cmp	r6, r3
 80022d2:	bf28      	it	cs
 80022d4:	461e      	movcs	r6, r3
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80022d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80022d8:	429f      	cmp	r7, r3
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80022da:	eb06 0846 	add.w	r8, r6, r6, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 80022de:	bf28      	it	cs
 80022e0:	461f      	movcs	r7, r3
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80022e2:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
 80022e4:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
        while (cinfo.output_scanline < height)
 80022e8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80022ea:	429f      	cmp	r7, r3
 80022ec:	d91a      	bls.n	8002324 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb0>
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80022ee:	2201      	movs	r2, #1
 80022f0:	a901      	add	r1, sp, #4
 80022f2:	a824      	add	r0, sp, #144	; 0x90
 80022f4:	f007 fb2d 	bl	8009952 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 80022f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80022fa:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 80022fe:	4298      	cmp	r0, r3
 8002300:	d90e      	bls.n	8002320 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 8002302:	7859      	ldrb	r1, [r3, #1]
 8002304:	789a      	ldrb	r2, [r3, #2]
 8002306:	00c9      	lsls	r1, r1, #3
 8002308:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 800230c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8002310:	430a      	orrs	r2, r1
 8002312:	f813 1b03 	ldrb.w	r1, [r3], #3
 8002316:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 800231a:	f824 2b02 	strh.w	r2, [r4], #2
            while (RGB_matrix < RGB_end)
 800231e:	e7ee      	b.n	80022fe <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8a>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002320:	4434      	add	r4, r6
        while (cinfo.output_scanline < height)
 8002322:	e7e1      	b.n	80022e8 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
        jpeg_finish_decompress(&cinfo);
 8002324:	a824      	add	r0, sp, #144	; 0x90
 8002326:	f007 fa49 	bl	80097bc <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 800232a:	a824      	add	r0, sp, #144	; 0x90
 800232c:	f007 f968 	bl	8009600 <jpeg_destroy_decompress>
}
 8002330:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 8002334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002338:	fffff800 	.word	0xfffff800

0800233c <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 800233e:	6002      	str	r2, [r0, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002346:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800234a:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 800234e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8002352:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8002356:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800235a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 800235e:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002362:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 8002366:	4770      	bx	lr
 8002368:	0802a3d8 	.word	0x0802a3d8

0800236c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 800236c:	b420      	push	{r5}
 800236e:	460d      	mov	r5, r1
 8002370:	4611      	mov	r1, r2
 8002372:	461a      	mov	r2, r3
    if (reader != 0)
 8002374:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002376:	b13b      	cbz	r3, 8002388 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002378:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800237a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800237c:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 800237e:	4428      	add	r0, r5
}
 8002380:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 8002384:	f026 bd8c 	b.w	8028ea0 <strncmp>
        src = (const char*)movieData + offset;
 8002388:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800238a:	e7f8      	b.n	800237e <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

0800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 800238c:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800238e:	b510      	push	{r4, lr}
    if (reader != 0)
 8002390:	b173      	cbz	r3, 80023b0 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002392:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002394:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 8002396:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002398:	1853      	adds	r3, r2, r1
 800239a:	5c52      	ldrb	r2, [r2, r1]
 800239c:	7898      	ldrb	r0, [r3, #2]
 800239e:	785c      	ldrb	r4, [r3, #1]
 80023a0:	0400      	lsls	r0, r0, #16
 80023a2:	78db      	ldrb	r3, [r3, #3]
 80023a4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80023a8:	4310      	orrs	r0, r2
 80023aa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80023ae:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 80023b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80023b2:	5858      	ldr	r0, [r3, r1]
 80023b4:	e7fb      	b.n	80023ae <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

080023b6 <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80023b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023b8:	b143      	cbz	r3, 80023cc <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80023ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023bc:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80023be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80023c0:	185a      	adds	r2, r3, r1
 80023c2:	5c58      	ldrb	r0, [r3, r1]
 80023c4:	7852      	ldrb	r2, [r2, #1]
 80023c6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80023ca:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 80023cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80023ce:	5a58      	ldrh	r0, [r3, r1]
}
 80023d0:	4770      	bx	lr
	...

080023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	4604      	mov	r4, r0
    if (reader != 0)
 80023d8:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 80023da:	460d      	mov	r5, r1
 80023dc:	4616      	mov	r6, r2
    if (reader != 0)
 80023de:	b1d8      	cbz	r0, 8002418 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80023e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d208      	bcs.n	80023f8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80023e6:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 80023ea:	2164      	movs	r1, #100	; 0x64
 80023ec:	480d      	ldr	r0, [pc, #52]	; (8002424 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80023ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 80023f4:	f026 f87a 	bl	80284ec <__assert_func>
        reader->seek(offset);
 80023f8:	6803      	ldr	r3, [r0, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80023fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002400:	4632      	mov	r2, r6
 8002402:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002404:	6803      	ldr	r3, [r0, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	4798      	blx	r3
 800240a:	b910      	cbnz	r0, 8002412 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 800240c:	230d      	movs	r3, #13
 800240e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 8002412:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 8002414:	6425      	str	r5, [r4, #64]	; 0x40
}
 8002416:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002418:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800241a:	4408      	add	r0, r1
 800241c:	e7fb      	b.n	8002416 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 800241e:	bf00      	nop
 8002420:	0802a162 	.word	0x0802a162
 8002424:	0802a0d3 	.word	0x0802a0d3
 8002428:	0802a14f 	.word	0x0802a14f

0800242c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 800242c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002430:	6943      	ldr	r3, [r0, #20]
{
 8002432:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002434:	b92b      	cbnz	r3, 8002442 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002438:	21a9      	movs	r1, #169	; 0xa9
 800243a:	4a23      	ldr	r2, [pc, #140]	; (80024c8 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800243c:	4823      	ldr	r0, [pc, #140]	; (80024cc <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 800243e:	f026 f855 	bl	80284ec <__assert_func>
    readData(currentMovieOffset, 8);
 8002442:	2208      	movs	r2, #8
 8002444:	6981      	ldr	r1, [r0, #24]
 8002446:	f7ff ffc5 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800244a:	69a1      	ldr	r1, [r4, #24]
 800244c:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800244e:	f243 0630 	movw	r6, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002452:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002454:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002458:	f7ff ff98 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800245c:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800245e:	69a1      	ldr	r1, [r4, #24]
 8002460:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002462:	440d      	add	r5, r1
 8002464:	f105 0208 	add.w	r2, r5, #8
 8002468:	429a      	cmp	r2, r3
 800246a:	d224      	bcs.n	80024b6 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x8a>
        frameNumber++;
 800246c:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800246e:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 8002470:	2208      	movs	r2, #8
 8002472:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002474:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 8002478:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800247a:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 800247c:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 800247e:	f7ff ffa9 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 8002482:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8002486:	4620      	mov	r0, r4
 8002488:	4641      	mov	r1, r8
 800248a:	f7ff ff94 	bl	80023b6 <_ZN20SoftwareMJPEGDecoder6getU16Em>
 800248e:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002490:	f108 0104 	add.w	r1, r8, #4
 8002494:	4620      	mov	r0, r4
 8002496:	f7ff ff79 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800249a:	45b1      	cmp	r9, r6
        chunkSize = getU32(currentMovieOffset + 4);
 800249c:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800249e:	d1de      	bne.n	800245e <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80024a0:	f108 0102 	add.w	r1, r8, #2
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff ff86 	bl	80023b6 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80024aa:	42b8      	cmp	r0, r7
 80024ac:	d1d7      	bne.n	800245e <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
 80024ae:	2d00      	cmp	r5, #0
 80024b0:	d0d5      	beq.n	800245e <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 80024b2:	2001      	movs	r0, #1
 80024b4:	e004      	b.n	80024c0 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x94>
    frameNumber = 1;
 80024b6:	2301      	movs	r3, #1
    return false;
 80024b8:	2000      	movs	r0, #0
    frameNumber = 1;
 80024ba:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 80024bc:	6a23      	ldr	r3, [r4, #32]
 80024be:	61a3      	str	r3, [r4, #24]
}
 80024c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024c4:	0802a1a4 	.word	0x0802a1a4
 80024c8:	0802a1ed 	.word	0x0802a1ed
 80024cc:	0802a0d3 	.word	0x0802a0d3

080024d0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 80024d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024d4:	4604      	mov	r4, r0
 80024d6:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80024da:	468a      	mov	sl, r1
 80024dc:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 80024de:	6981      	ldr	r1, [r0, #24]
 80024e0:	2208      	movs	r2, #8
{
 80024e2:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 80024e4:	f7ff ff76 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80024e8:	69a7      	ldr	r7, [r4, #24]
 80024ea:	4620      	mov	r0, r4
 80024ec:	1d39      	adds	r1, r7, #4
 80024ee:	f7ff ff4d 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80024f2:	f107 0108 	add.w	r1, r7, #8
 80024f6:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80024f8:	4606      	mov	r6, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7ff ff6a 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 8002500:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002502:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 8002504:	b933      	cbnz	r3, 8002514 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 8002506:	4b3c      	ldr	r3, [pc, #240]	; (80025f8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 8002508:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800250c:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 800250e:	483c      	ldr	r0, [pc, #240]	; (8002600 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 8002510:	f025 ffec 	bl	80284ec <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002514:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 8002516:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002518:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 800251c:	f00d f902 	bl	800f724 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 8002520:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002524:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 8002526:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 8002528:	a824      	add	r0, sp, #144	; 0x90
 800252a:	f007 f81c 	bl	8009566 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 800252e:	4632      	mov	r2, r6
 8002530:	4639      	mov	r1, r7
 8002532:	a824      	add	r0, sp, #144	; 0x90
 8002534:	f007 ffb0 	bl	800a498 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 8002538:	2101      	movs	r1, #1
 800253a:	a824      	add	r0, sp, #144	; 0x90
 800253c:	f007 f91c 	bl	8009778 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 8002540:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 8002542:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 8002544:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 8002548:	f007 f9ba 	bl	80098c0 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 800254c:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
    while (cinfo.output_scanline < startY)
 8002550:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002552:	42b3      	cmp	r3, r6
 8002554:	d205      	bcs.n	8002562 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x92>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002556:	2201      	movs	r2, #1
 8002558:	a901      	add	r1, sp, #4
 800255a:	a824      	add	r0, sp, #144	; 0x90
 800255c:	f007 f9f9 	bl	8009952 <jpeg_read_scanlines>
    while (cinfo.output_scanline < startY)
 8002560:	e7f6      	b.n	8002550 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
    const uint32_t startX = area.x;
 8002562:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 8002566:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800256a:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 800256e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 8002570:	fb08 5506 	mla	r5, r8, r6, r5
 8002574:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 8002576:	f8ba 6002 	ldrh.w	r6, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 800257a:	f8df b088 	ldr.w	fp, [pc, #136]	; 8002604 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 800257e:	b23f      	sxth	r7, r7
 8002580:	429f      	cmp	r7, r3
 8002582:	bf28      	it	cs
 8002584:	461f      	movcs	r7, r3
 8002586:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800258a:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800258e:	441e      	add	r6, r3
 8002590:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 8002592:	b236      	sxth	r6, r6
 8002594:	429e      	cmp	r6, r3
 8002596:	bf28      	it	cs
 8002598:	461e      	movcs	r6, r3
    while (cinfo.output_scanline < endY)
 800259a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800259c:	42b3      	cmp	r3, r6
 800259e:	d21f      	bcs.n	80025e0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80025a0:	2201      	movs	r2, #1
 80025a2:	a901      	add	r1, sp, #4
 80025a4:	a824      	add	r0, sp, #144	; 0x90
 80025a6:	f007 f9d4 	bl	8009952 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 80025aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80025ac:	4649      	mov	r1, r9
 80025ae:	4452      	add	r2, sl
 80025b0:	42b9      	cmp	r1, r7
 80025b2:	f102 0203 	add.w	r2, r2, #3
 80025b6:	d211      	bcs.n	80025dc <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 80025b8:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 80025bc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80025c0:	00c0      	lsls	r0, r0, #3
 80025c2:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 80025c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80025ca:	4303      	orrs	r3, r0
 80025cc:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 80025d0:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 80025d4:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 80025d8:	3101      	adds	r1, #1
 80025da:	e7e9      	b.n	80025b0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe0>
        lineptr += framebuffer_width; //move to next line
 80025dc:	4445      	add	r5, r8
    while (cinfo.output_scanline < endY)
 80025de:	e7dc      	b.n	800259a <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xca>
    jpeg_finish_decompress(&cinfo);
 80025e0:	a824      	add	r0, sp, #144	; 0x90
 80025e2:	f007 f8eb 	bl	80097bc <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 80025e6:	a824      	add	r0, sp, #144	; 0x90
 80025e8:	f007 f80a 	bl	8009600 <jpeg_destroy_decompress>
}
 80025ec:	2001      	movs	r0, #1
 80025ee:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 80025f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f6:	bf00      	nop
 80025f8:	0802a220 	.word	0x0802a220
 80025fc:	0802a276 	.word	0x0802a276
 8002600:	0802a0d3 	.word	0x0802a0d3
 8002604:	fffff800 	.word	0xfffff800

08002608 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002608:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800260a:	6803      	ldr	r3, [r0, #0]
 800260c:	bf38      	it	cc
 800260e:	2101      	movcc	r1, #1
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 8002612:	b570      	push	{r4, r5, r6, lr}
 8002614:	460d      	mov	r5, r1
 8002616:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002618:	4798      	blx	r3
 800261a:	42a8      	cmp	r0, r5
 800261c:	d204      	bcs.n	8002628 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	4620      	mov	r0, r4
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	4798      	blx	r3
 8002626:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002628:	1e6b      	subs	r3, r5, #1
 800262a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800262c:	2210      	movs	r2, #16
 800262e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002630:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002634:	f106 0108 	add.w	r1, r6, #8
 8002638:	f7ff fecc 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800263c:	f106 0110 	add.w	r1, r6, #16
 8002640:	4620      	mov	r0, r4
 8002642:	f7ff fea3 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002646:	6a23      	ldr	r3, [r4, #32]
 8002648:	3b04      	subs	r3, #4
 800264a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800264c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002650:	bd70      	pop	{r4, r5, r6, pc}
	...

08002654 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 8002654:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8002658:	2100      	movs	r1, #0
{
 800265a:	4604      	mov	r4, r0
    readData(0, 72);
 800265c:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 800265e:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002660:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 8002664:	f7ff feb6 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002668:	69a7      	ldr	r7, [r4, #24]
 800266a:	2304      	movs	r3, #4
 800266c:	4a63      	ldr	r2, [pc, #396]	; (80027fc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800266e:	4639      	mov	r1, r7
 8002670:	4620      	mov	r0, r4
 8002672:	f7ff fe7b 	bl	800236c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002676:	b140      	cbz	r0, 800268a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 8002678:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800267a:	4a61      	ldr	r2, [pc, #388]	; (8002800 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800267c:	21f1      	movs	r1, #241	; 0xf1
        lastError = AVI_ERROR_NOT_RIFF;
 800267e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 8002682:	4b60      	ldr	r3, [pc, #384]	; (8002804 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002684:	4860      	ldr	r0, [pc, #384]	; (8002808 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002686:	f025 ff31 	bl	80284ec <__assert_func>
    currentMovieOffset += 8;
 800268a:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800268e:	2304      	movs	r3, #4
 8002690:	4a5e      	ldr	r2, [pc, #376]	; (800280c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002692:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002694:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002696:	f7ff fe69 	bl	800236c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800269a:	b130      	cbz	r0, 80026aa <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800269c:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800269e:	4a58      	ldr	r2, [pc, #352]	; (8002800 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026a0:	21f9      	movs	r1, #249	; 0xf9
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80026a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 80026a6:	4b5a      	ldr	r3, [pc, #360]	; (8002810 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80026a8:	e7ec      	b.n	8002684 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 80026aa:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 80026ae:	2304      	movs	r3, #4
 80026b0:	4a58      	ldr	r2, [pc, #352]	; (8002814 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80026b2:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80026b4:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80026b6:	f7ff fe59 	bl	800236c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80026ba:	4606      	mov	r6, r0
 80026bc:	b138      	cbz	r0, 80026ce <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80026be:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80026c0:	4a4f      	ldr	r2, [pc, #316]	; (8002800 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026c2:	f44f 7180 	mov.w	r1, #256	; 0x100
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80026c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 80026ca:	4b53      	ldr	r3, [pc, #332]	; (8002818 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80026cc:	e7da      	b.n	8002684 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80026ce:	f107 0110 	add.w	r1, r7, #16
 80026d2:	4620      	mov	r0, r4
 80026d4:	f7ff fe5a 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80026d8:	4605      	mov	r5, r0
 80026da:	b920      	cbnz	r0, 80026e6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 80026dc:	4b4f      	ldr	r3, [pc, #316]	; (800281c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80026de:	f44f 7183 	mov.w	r1, #262	; 0x106
 80026e2:	4a47      	ldr	r2, [pc, #284]	; (8002800 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026e4:	e7ce      	b.n	8002684 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 80026e6:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 80026ea:	2304      	movs	r3, #4
 80026ec:	4a4c      	ldr	r2, [pc, #304]	; (8002820 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80026ee:	4620      	mov	r0, r4
 80026f0:	4641      	mov	r1, r8
 80026f2:	f7ff fe3b 	bl	800236c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d04b      	beq.n	8002792 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80026fa:	2306      	movs	r3, #6
 80026fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 8002700:	2304      	movs	r3, #4
 8002702:	4a48      	ldr	r2, [pc, #288]	; (8002824 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002704:	f107 0118 	add.w	r1, r7, #24
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff fe2f 	bl	800236c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800270e:	2800      	cmp	r0, #0
 8002710:	d041      	beq.n	8002796 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002712:	2307      	movs	r3, #7
 8002714:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002718:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800271a:	4f43      	ldr	r7, [pc, #268]	; (8002828 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 800271c:	220c      	movs	r2, #12
 800271e:	4620      	mov	r0, r4
 8002720:	4629      	mov	r1, r5
 8002722:	f7ff fe57 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002726:	f105 0608 	add.w	r6, r5, #8
 800272a:	2304      	movs	r3, #4
 800272c:	463a      	mov	r2, r7
 800272e:	4620      	mov	r0, r4
 8002730:	4631      	mov	r1, r6
 8002732:	f7ff fe1b 	bl	800236c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002736:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800273a:	2800      	cmp	r0, #0
 800273c:	d04a      	beq.n	80027d4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d14a      	bne.n	80027d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002744:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002746:	42ab      	cmp	r3, r5
 8002748:	d84a      	bhi.n	80027e0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800274a:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800274e:	1d29      	adds	r1, r5, #4
 8002750:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002752:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002754:	9101      	str	r1, [sp, #4]
 8002756:	f7ff fe19 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800275a:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800275c:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800275e:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002760:	4620      	mov	r0, r4
 8002762:	f7ff fe13 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002766:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002768:	2204      	movs	r2, #4
 800276a:	4620      	mov	r0, r4
 800276c:	4631      	mov	r1, r6
 800276e:	f7ff fe31 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002772:	2304      	movs	r3, #4
 8002774:	4a2d      	ldr	r2, [pc, #180]	; (800282c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002776:	4631      	mov	r1, r6
 8002778:	4620      	mov	r0, r4
 800277a:	f7ff fdf7 	bl	800236c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800277e:	2800      	cmp	r0, #0
 8002780:	d139      	bne.n	80027f6 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 8002782:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002784:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 8002786:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002788:	69a3      	ldr	r3, [r4, #24]
 800278a:	6223      	str	r3, [r4, #32]
}
 800278c:	b002      	add	sp, #8
 800278e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002792:	2601      	movs	r6, #1
 8002794:	e7b4      	b.n	8002700 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 8002796:	2e00      	cmp	r6, #0
 8002798:	d0be      	beq.n	8002718 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800279a:	f107 0120 	add.w	r1, r7, #32
 800279e:	4620      	mov	r0, r4
 80027a0:	f7ff fdf4 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80027a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80027a8:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80027ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80027b0:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff fdea 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80027b8:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80027bc:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff fde4 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80027c4:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80027c8:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fdde 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80027d0:	6120      	str	r0, [r4, #16]
 80027d2:	e7a1      	b.n	8002718 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0b8      	beq.n	800274a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80027d8:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80027da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 80027de:	e7d5      	b.n	800278c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x138>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff fdd3 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80027e6:	3008      	adds	r0, #8
        readData(listOffset, 12);
 80027e8:	220c      	movs	r2, #12
        listOffset += listSize;
 80027ea:	4405      	add	r5, r0
        readData(listOffset, 12);
 80027ec:	4620      	mov	r0, r4
 80027ee:	4629      	mov	r1, r5
 80027f0:	f7ff fdf0 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027f4:	e797      	b.n	8002726 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80027f6:	230b      	movs	r3, #11
 80027f8:	e7ef      	b.n	80027da <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80027fa:	bf00      	nop
 80027fc:	0802a2d0 	.word	0x0802a2d0
 8002800:	0802a2ee 	.word	0x0802a2ee
 8002804:	0802a2d5 	.word	0x0802a2d5
 8002808:	0802a0d3 	.word	0x0802a0d3
 800280c:	0802a31b 	.word	0x0802a31b
 8002810:	0802a320 	.word	0x0802a320
 8002814:	0802a338 	.word	0x0802a338
 8002818:	0802a33d 	.word	0x0802a33d
 800281c:	0802a353 	.word	0x0802a353
 8002820:	0802a35f 	.word	0x0802a35f
 8002824:	0802a364 	.word	0x0802a364
 8002828:	0802a369 	.word	0x0802a369
 800282c:	0802a36e 	.word	0x0802a36e

08002830 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002830:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 8002834:	2200      	movs	r2, #0
 8002836:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 8002838:	f7ff bf0c 	b.w	8002654 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

0800283c <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800283c:	b510      	push	{r4, lr}
    movieData = 0;
 800283e:	2300      	movs	r3, #0
{
 8002840:	4604      	mov	r4, r0
 8002842:	4608      	mov	r0, r1
    movieData = 0;
 8002844:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 8002846:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002848:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4798      	blx	r3
 800284e:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002850:	4620      	mov	r0, r4
}
 8002852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002856:	f7ff befd 	b.w	8002654 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

0800285a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 800285a:	b4f0      	push	{r4, r5, r6, r7}
 800285c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8002860:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 8002864:	b12a      	cbz	r2, 8002872 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002866:	b123      	cbz	r3, 8002872 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 8002868:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 800286c:	bcf0      	pop	{r4, r5, r6, r7}
 800286e:	f7ff bd01 	b.w	8002274 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 8002872:	bcf0      	pop	{r4, r5, r6, r7}
 8002874:	4770      	bx	lr
	...

08002878 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800287c:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800287e:	6943      	ldr	r3, [r0, #20]
{
 8002880:	4604      	mov	r4, r0
 8002882:	460f      	mov	r7, r1
 8002884:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002886:	b92b      	cbnz	r3, 8002894 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 800288a:	2176      	movs	r1, #118	; 0x76
 800288c:	4a2a      	ldr	r2, [pc, #168]	; (8002938 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 800288e:	482b      	ldr	r0, [pc, #172]	; (800293c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8002890:	f025 fe2c 	bl	80284ec <__assert_func>
    readData(currentMovieOffset, 8);
 8002894:	2208      	movs	r2, #8
 8002896:	6981      	ldr	r1, [r0, #24]
 8002898:	f7ff fd9c 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 800289c:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800289e:	4620      	mov	r0, r4
 80028a0:	f106 0a08 	add.w	sl, r6, #8
 80028a4:	1d31      	adds	r1, r6, #4
 80028a6:	f7ff fd71 	bl	800238c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80028aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028ac:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80028b0:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d231      	bcs.n	800291a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo = getU16(currentMovieOffset);
 80028b6:	4631      	mov	r1, r6
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff fd7c 	bl	80023b6 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80028be:	f243 0330 	movw	r3, #12336	; 0x3030
 80028c2:	4298      	cmp	r0, r3
 80028c4:	d11d      	bne.n	8002902 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80028c6:	1cb1      	adds	r1, r6, #2
 80028c8:	4620      	mov	r0, r4
 80028ca:	f7ff fd74 	bl	80023b6 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80028ce:	f246 3364 	movw	r3, #25444	; 0x6364
 80028d2:	4298      	cmp	r0, r3
 80028d4:	d115      	bne.n	8002902 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80028d6:	b1a5      	cbz	r5, 8002902 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80028d8:	462a      	mov	r2, r5
 80028da:	4651      	mov	r1, sl
 80028dc:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 80028de:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80028e2:	f7ff fd77 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80028e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80028e8:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80028ea:	462a      	mov	r2, r5
 80028ec:	4620      	mov	r0, r4
 80028ee:	f8cd 8000 	str.w	r8, [sp]
 80028f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80028f6:	463b      	mov	r3, r7
 80028f8:	f7ff ffaf 	bl	800285a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80028fc:	6963      	ldr	r3, [r4, #20]
 80028fe:	3301      	adds	r3, #1
 8002900:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002902:	69a3      	ldr	r3, [r4, #24]
 8002904:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 8002906:	b18d      	cbz	r5, 800292c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 8002908:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800290a:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800290c:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800290e:	3301      	adds	r3, #1
 8002910:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002914:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002916:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002918:	d10a      	bne.n	8002930 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 800291a:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 800291c:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 800291e:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8002920:	61a3      	str	r3, [r4, #24]
}
 8002922:	f080 0001 	eor.w	r0, r0, #1
 8002926:	b004      	add	sp, #16
 8002928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            currentMovieOffset += 8;
 800292c:	3308      	adds	r3, #8
 800292e:	e7eb      	b.n	8002908 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8002930:	2000      	movs	r0, #0
 8002932:	e7f6      	b.n	8002922 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002934:	0802a1a4 	.word	0x0802a1a4
 8002938:	0802a373 	.word	0x0802a373
 800293c:	0802a0d3 	.word	0x0802a0d3

08002940 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002940:	2001      	movs	r0, #1
 8002942:	4770      	bx	lr

08002944 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002944:	200c      	movs	r0, #12
 8002946:	4770      	bx	lr

08002948 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002948:	230c      	movs	r3, #12
 800294a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800294e:	3008      	adds	r0, #8
 8002950:	4770      	bx	lr

08002952 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002952:	230c      	movs	r3, #12
 8002954:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002958:	3008      	adds	r0, #8
 800295a:	4770      	bx	lr

0800295c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800295c:	2001      	movs	r0, #1
 800295e:	4770      	bx	lr

08002960 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002960:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002964:	4770      	bx	lr

08002966 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002966:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800296a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800296e:	3008      	adds	r0, #8
 8002970:	4770      	bx	lr

08002972 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002972:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002976:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800297a:	3008      	adds	r0, #8
 800297c:	4770      	bx	lr

0800297e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 800297e:	2001      	movs	r0, #1
 8002980:	4770      	bx	lr

08002982 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002982:	2010      	movs	r0, #16
 8002984:	4770      	bx	lr

08002986 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002986:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800298a:	3008      	adds	r0, #8
 800298c:	4770      	bx	lr

0800298e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800298e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002992:	3008      	adds	r0, #8
 8002994:	4770      	bx	lr

08002996 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002996:	4608      	mov	r0, r1
 8002998:	f000 be16 	b.w	80035c8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

0800299c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800299e:	b510      	push	{r4, lr}
 80029a0:	4604      	mov	r4, r0
 80029a2:	6003      	str	r3, [r0, #0]
 80029a4:	f013 ff0a 	bl	80167bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80029a8:	4620      	mov	r0, r4
 80029aa:	bd10      	pop	{r4, pc}
 80029ac:	0802a480 	.word	0x0802a480

080029b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80029b0:	b510      	push	{r4, lr}
 80029b2:	4604      	mov	r4, r0
 80029b4:	f7ff fff2 	bl	800299c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80029b8:	2114      	movs	r1, #20
 80029ba:	4620      	mov	r0, r4
 80029bc:	f025 fd68 	bl	8028490 <_ZdlPvj>
 80029c0:	4620      	mov	r0, r4
 80029c2:	bd10      	pop	{r4, pc}

080029c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80029c6:	b510      	push	{r4, lr}
 80029c8:	4604      	mov	r4, r0
 80029ca:	6003      	str	r3, [r0, #0]
 80029cc:	f013 fef6 	bl	80167bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80029d0:	4620      	mov	r0, r4
 80029d2:	bd10      	pop	{r4, pc}
 80029d4:	0802a44c 	.word	0x0802a44c

080029d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80029d8:	b510      	push	{r4, lr}
 80029da:	4604      	mov	r4, r0
 80029dc:	f7ff fff2 	bl	80029c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80029e0:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80029e4:	4620      	mov	r0, r4
 80029e6:	f025 fd53 	bl	8028490 <_ZdlPvj>
 80029ea:	4620      	mov	r0, r4
 80029ec:	bd10      	pop	{r4, pc}
	...

080029f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80029f2:	b510      	push	{r4, lr}
 80029f4:	4604      	mov	r4, r0
 80029f6:	6003      	str	r3, [r0, #0]
 80029f8:	f013 fee0 	bl	80167bc <_ZN8touchgfx17AbstractPartitionD1Ev>
 80029fc:	4620      	mov	r0, r4
 80029fe:	bd10      	pop	{r4, pc}
 8002a00:	0802a418 	.word	0x0802a418

08002a04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a04:	b510      	push	{r4, lr}
 8002a06:	4604      	mov	r4, r0
 8002a08:	f7ff fff2 	bl	80029f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a0c:	2118      	movs	r1, #24
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f025 fd3e 	bl	8028490 <_ZdlPvj>
 8002a14:	4620      	mov	r0, r4
 8002a16:	bd10      	pop	{r4, pc}

08002a18 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <_ZN12FrontendHeapD1Ev+0x24>)
 8002a1a:	b510      	push	{r4, lr}
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	6003      	str	r3, [r0, #0]
 8002a20:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
 8002a24:	f7ff ffba 	bl	800299c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a28:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002a2c:	f7ff ffca 	bl	80029c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a30:	f104 0014 	add.w	r0, r4, #20
 8002a34:	f7ff ffdc 	bl	80029f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a38:	4620      	mov	r0, r4
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	0802a4b4 	.word	0x0802a4b4

08002a40 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002a40:	b508      	push	{r3, lr}
 8002a42:	4802      	ldr	r0, [pc, #8]	; (8002a4c <__tcf_0+0xc>)
 8002a44:	f7ff ffe8 	bl	8002a18 <_ZN12FrontendHeapD1Ev>
 8002a48:	bd08      	pop	{r3, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200003b4 	.word	0x200003b4

08002a50 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002a50:	b510      	push	{r4, lr}
 8002a52:	4604      	mov	r4, r0
 8002a54:	f7ff ffe0 	bl	8002a18 <_ZN12FrontendHeapD1Ev>
 8002a58:	f44f 714d 	mov.w	r1, #820	; 0x334
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f025 fd17 	bl	8028490 <_ZdlPvj>
 8002a62:	4620      	mov	r0, r4
 8002a64:	bd10      	pop	{r4, pc}
	...

08002a68 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002a68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002a6c:	f000 fc36 	bl	80032dc <_ZN14BitmapDatabase11getInstanceEv>
 8002a70:	2400      	movs	r4, #0
 8002a72:	4605      	mov	r5, r0
 8002a74:	f000 fc36 	bl	80032e4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002a78:	4623      	mov	r3, r4
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	4628      	mov	r0, r5
 8002a80:	9400      	str	r4, [sp, #0]
 8002a82:	f019 feef 	bl	801c864 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <touchgfx_init+0xb4>)
 8002a88:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002a8a:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002a8c:	4d25      	ldr	r5, [pc, #148]	; (8002b24 <touchgfx_init+0xbc>)
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f001 fa6c 	bl	8003f6c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002a94:	4824      	ldr	r0, [pc, #144]	; (8002b28 <touchgfx_init+0xc0>)
 8002a96:	f019 fe4d 	bl	801c734 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002a9a:	782b      	ldrb	r3, [r5, #0]
 8002a9c:	f3bf 8f5b 	dmb	ish
 8002aa0:	07db      	lsls	r3, r3, #31
 8002aa2:	d435      	bmi.n	8002b10 <touchgfx_init+0xa8>
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	f025 fcf5 	bl	8028494 <__cxa_guard_acquire>
 8002aaa:	b388      	cbz	r0, 8002b10 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002aac:	4c1f      	ldr	r4, [pc, #124]	; (8002b2c <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <touchgfx_init+0xc8>)
 8002ab0:	f504 76ee 	add.w	r6, r4, #476	; 0x1dc
 8002ab4:	f104 0014 	add.w	r0, r4, #20
 8002ab8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002abc:	f504 77e2 	add.w	r7, r4, #452	; 0x1c4
 8002ac0:	6023      	str	r3, [r4, #0]
 8002ac2:	6060      	str	r0, [r4, #4]
 8002ac4:	f8c4 8008 	str.w	r8, [r4, #8]
 8002ac8:	60e7      	str	r7, [r4, #12]
 8002aca:	6126      	str	r6, [r4, #16]
 8002acc:	f013 fe78 	bl	80167c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002ad0:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <touchgfx_init+0xcc>)
 8002ad2:	4640      	mov	r0, r8
 8002ad4:	6163      	str	r3, [r4, #20]
 8002ad6:	f013 fe73 	bl	80167c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <touchgfx_init+0xd0>)
 8002adc:	4638      	mov	r0, r7
 8002ade:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ae0:	f013 fe6e 	bl	80167c0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <touchgfx_init+0xd4>)
 8002ae6:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
 8002aea:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
 8002aee:	f001 fab9 	bl	8004064 <_ZN5ModelC1Ev>
 8002af2:	4622      	mov	r2, r4
 8002af4:	f504 71ec 	add.w	r1, r4, #472	; 0x1d8
 8002af8:	4630      	mov	r0, r6
 8002afa:	f001 faa9 	bl	8004050 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002afe:	4630      	mov	r0, r6
 8002b00:	f000 fd62 	bl	80035c8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002b04:	480e      	ldr	r0, [pc, #56]	; (8002b40 <touchgfx_init+0xd8>)
 8002b06:	f025 fd0f 	bl	8028528 <atexit>
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f025 fcce 	bl	80284ac <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <touchgfx_init+0xdc>)
}
 8002b12:	b002      	add	sp, #8
 8002b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002b18:	f7ff b8a2 	b.w	8001c60 <_ZN11TouchGFXHAL10initializeEv>
 8002b1c:	20015150 	.word	0x20015150
 8002b20:	20001508 	.word	0x20001508
 8002b24:	200003b0 	.word	0x200003b0
 8002b28:	20000008 	.word	0x20000008
 8002b2c:	200003b4 	.word	0x200003b4
 8002b30:	0802a4b4 	.word	0x0802a4b4
 8002b34:	0802a418 	.word	0x0802a418
 8002b38:	0802a44c 	.word	0x0802a44c
 8002b3c:	0802a480 	.word	0x0802a480
 8002b40:	08002a41 	.word	0x08002a41
 8002b44:	2000148c 	.word	0x2000148c

08002b48 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002b48:	4801      	ldr	r0, [pc, #4]	; (8002b50 <touchgfx_taskEntry+0x8>)
 8002b4a:	f014 b952 	b.w	8016df2 <_ZN8touchgfx3HAL9taskEntryEv>
 8002b4e:	bf00      	nop
 8002b50:	2000148c 	.word	0x2000148c

08002b54 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002b54:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002b56:	4e23      	ldr	r6, [pc, #140]	; (8002be4 <_GLOBAL__sub_I_touchgfx_init+0x90>)
{
public:

    STM32TouchController() {}
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002b5a:	4c24      	ldr	r4, [pc, #144]	; (8002bec <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002b5c:	4630      	mov	r0, r6
static LCD16bpp display;
 8002b5e:	4d24      	ldr	r5, [pc, #144]	; (8002bf0 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002b60:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002b62:	f7ff fa1d 	bl	8001fa0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002b66:	4628      	mov	r0, r5
 8002b68:	f01c ff88 	bl	801fa7c <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002b6c:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002b74:	4820      	ldr	r0, [pc, #128]	; (8002bf8 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002b76:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002b78:	661a      	str	r2, [r3, #96]	; 0x60
 8002b7a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002b7e:	671a      	str	r2, [r3, #112]	; 0x70
 8002b80:	60dc      	str	r4, [r3, #12]
 8002b82:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002b86:	491d      	ldr	r1, [pc, #116]	; (8002bfc <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002b88:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002b8c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002b90:	6759      	str	r1, [r3, #116]	; 0x74
 8002b92:	2101      	movs	r1, #1
 8002b94:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002b98:	4919      	ldr	r1, [pc, #100]	; (8002c00 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002b9a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002b9c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002ba0:	8001      	strh	r1, [r0, #0]
 8002ba2:	4818      	ldr	r0, [pc, #96]	; (8002c04 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002ba4:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002ba6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002baa:	4817      	ldr	r0, [pc, #92]	; (8002c08 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          lastRenderMethod(HARDWARE)
 8002bac:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002bb0:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002bb4:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002bb8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8002bbc:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002bc0:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002bc4:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002bc8:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002bcc:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002bd0:	8001      	strh	r1, [r0, #0]
 8002bd2:	480e      	ldr	r0, [pc, #56]	; (8002c0c <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002bd8:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002bda:	490d      	ldr	r1, [pc, #52]	; (8002c10 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002bdc:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002bde:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002be0:	601a      	str	r2, [r3, #0]
}
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	200006ec 	.word	0x200006ec
 8002be8:	08029b28 	.word	0x08029b28
 8002bec:	200006e8 	.word	0x200006e8
 8002bf0:	2000150c 	.word	0x2000150c
 8002bf4:	2000148c 	.word	0x2000148c
 8002bf8:	200150e8 	.word	0x200150e8
 8002bfc:	01000001 	.word	0x01000001
 8002c00:	200150f4 	.word	0x200150f4
 8002c04:	200150ee 	.word	0x200150ee
 8002c08:	200150ea 	.word	0x200150ea
 8002c0c:	200150f0 	.word	0x200150f0
 8002c10:	200150ec 	.word	0x200150ec
 8002c14:	08029cb4 	.word	0x08029cb4

08002c18 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002c18:	4801      	ldr	r0, [pc, #4]	; (8002c20 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002c1a:	f7ff b99d 	b.w	8001f58 <_ZN8STM32DMAD1Ev>
 8002c1e:	bf00      	nop
 8002c20:	200006ec 	.word	0x200006ec

08002c24 <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002c24:	4910      	ldr	r1, [pc, #64]	; (8002c68 <SCB_CleanInvalidateDCache+0x44>)
 8002c26:	2300      	movs	r3, #0
{
 8002c28:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002c2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002c2e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002c32:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c36:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c3a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002c3e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002c42:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c44:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002c48:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c4a:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 8002c4e:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002c50:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002c54:	d2f9      	bcs.n	8002c4a <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 8002c56:	3b20      	subs	r3, #32
 8002c58:	f113 0f20 	cmn.w	r3, #32
 8002c5c:	d1f2      	bne.n	8002c44 <SCB_CleanInvalidateDCache+0x20>
 8002c5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c62:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002c6e:	2290      	movs	r2, #144	; 0x90
 8002c70:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002c74:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e100 	.word	0xe000e100

08002c80 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002c80:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002c82:	490a      	ldr	r1, [pc, #40]	; (8002cac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002c84:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002c86:	480a      	ldr	r0, [pc, #40]	; (8002cb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002c88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002c92:	6911      	ldr	r1, [r2, #16]
 8002c94:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002c98:	3901      	subs	r1, #1
 8002c9a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002c9e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002ca6:	4770      	bx	lr
 8002ca8:	40016800 	.word	0x40016800
 8002cac:	20001588 	.word	0x20001588
 8002cb0:	20001586 	.word	0x20001586

08002cb4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002cb4:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002cb6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002cba:	4770      	bx	lr
 8002cbc:	40016800 	.word	0x40016800

08002cc0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002cc0:	4b02      	ldr	r3, [pc, #8]	; (8002ccc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002cc2:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002cc4:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002cca:	4770      	bx	lr
 8002ccc:	40016800 	.word	0x40016800

08002cd0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	03db      	lsls	r3, r3, #15
 8002cd6:	d501      	bpl.n	8002cdc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 8002cd8:	f7ff bfa4 	b.w	8002c24 <SCB_CleanInvalidateDCache>
    }
}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002ce4:	4770      	bx	lr

08002ce6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002ce6:	2338      	movs	r3, #56	; 0x38
 8002ce8:	fb01 3103 	mla	r1, r1, r3, r3
 8002cec:	2300      	movs	r3, #0
 8002cee:	5443      	strb	r3, [r0, r1]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002cf0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002cf4:	b90b      	cbnz	r3, 8002cfa <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002cf6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002cf8:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 8002cfa:	4770      	bx	lr

08002cfc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002cfc:	4770      	bx	lr
	...

08002d00 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	4604      	mov	r4, r0
    HAL::initialize();
 8002d04:	f014 f863 	bl	8016dce <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002d0c:	f017 f954 	bl	8019fb8 <_ZN8touchgfx11Application11getInstanceEv>
 8002d10:	4601      	mov	r1, r0
 8002d12:	4620      	mov	r0, r4
 8002d14:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002d20:	2300      	movs	r3, #0
 8002d22:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002d26:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002d2a:	4a06      	ldr	r2, [pc, #24]	; (8002d44 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002d2c:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002d2e:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8002d32:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8002d34:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002d38:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
 8002d3c:	c007f800 	.word	0xc007f800
 8002d40:	20001d54 	.word	0x20001d54
 8002d44:	20001d0c 	.word	0x20001d0c
 8002d48:	c00bf400 	.word	0xc00bf400

08002d4c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002d4c:	f014 b826 	b.w	8016d9c <_ZN8touchgfx3HAL10beginFrameEv>

08002d50 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002d50:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8002d54:	b113      	cbz	r3, 8002d5c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8002d56:	4b02      	ldr	r3, [pc, #8]	; (8002d60 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8002d5c:	f014 b82a 	b.w	8016db4 <_ZN8touchgfx3HAL8endFrameEv>
 8002d60:	20001584 	.word	0x20001584

08002d64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002d64:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002d66:	f013 ffe3 	bl	8016d30 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	03db      	lsls	r3, r3, #15
 8002d70:	d503      	bpl.n	8002d7a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002d72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 8002d76:	f7ff bf55 	b.w	8002c24 <SCB_CleanInvalidateDCache>
}
 8002d7a:	bd08      	pop	{r3, pc}
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002d80:	f014 b93f 	b.w	8017002 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002d84 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002d84:	b510      	push	{r4, lr}
 8002d86:	4604      	mov	r4, r0
 8002d88:	2158      	movs	r1, #88	; 0x58
 8002d8a:	f025 fb81 	bl	8028490 <_ZdlPvj>
 8002d8e:	4620      	mov	r0, r4
 8002d90:	bd10      	pop	{r4, pc}
	...

08002d94 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    bool getIsPlaying(const Handle handle)
 8002d94:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002d96:	b131      	cbz	r1, 8002da6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002d9a:	f240 1197 	movw	r1, #407	; 0x197
 8002d9e:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002da0:	4804      	ldr	r0, [pc, #16]	; (8002db4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002da2:	f025 fba3 	bl	80284ec <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002da6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8002daa:	bd08      	pop	{r3, pc}
 8002dac:	0802a4c0 	.word	0x0802a4c0
 8002db0:	0802a4d4 	.word	0x0802a4d4
 8002db4:	0802a661 	.word	0x0802a661

08002db8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002db8:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002dba:	b131      	cbz	r1, 8002dca <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002dbe:	f240 1191 	movw	r1, #401	; 0x191
 8002dc2:	4a06      	ldr	r2, [pc, #24]	; (8002ddc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002dc4:	4806      	ldr	r0, [pc, #24]	; (8002de0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002dc6:	f025 fb91 	bl	80284ec <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002dca:	6840      	ldr	r0, [r0, #4]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	6803      	ldr	r3, [r0, #0]
    }
 8002dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4718      	bx	r3
 8002dd8:	0802a4c0 	.word	0x0802a4c0
 8002ddc:	0802a6a3 	.word	0x0802a6a3
 8002de0:	0802a661 	.word	0x0802a661

08002de4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    uint32_t getCurrentFrameNumber(const Handle handle)
 8002de4:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002de6:	b129      	cbz	r1, 8002df4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002de8:	4b03      	ldr	r3, [pc, #12]	; (8002df8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002dea:	217a      	movs	r1, #122	; 0x7a
 8002dec:	4a03      	ldr	r2, [pc, #12]	; (8002dfc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002dee:	4804      	ldr	r0, [pc, #16]	; (8002e00 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002df0:	f025 fb7c 	bl	80284ec <__assert_func>
    }
 8002df4:	6900      	ldr	r0, [r0, #16]
 8002df6:	bd08      	pop	{r3, pc}
 8002df8:	0802a4c0 	.word	0x0802a4c0
 8002dfc:	0802a854 	.word	0x0802a854
 8002e00:	0802a661 	.word	0x0802a661

08002e04 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002e04:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002e06:	b129      	cbz	r1, 8002e14 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002e0a:	2183      	movs	r1, #131	; 0x83
 8002e0c:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002e0e:	4806      	ldr	r0, [pc, #24]	; (8002e28 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002e10:	f025 fb6c 	bl	80284ec <__assert_func>
        stream.tickCount = 0;
 8002e14:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 8002e16:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8002e18:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002e1c:	bd08      	pop	{r3, pc}
 8002e1e:	bf00      	nop
 8002e20:	0802a4c0 	.word	0x0802a4c0
 8002e24:	0802aa0c 	.word	0x0802aa0c
 8002e28:	0802a661 	.word	0x0802a661

08002e2c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002e30:	b129      	cbz	r1, 8002e3e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002e32:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 8002e34:	21a4      	movs	r1, #164	; 0xa4
 8002e36:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 8002e38:	4827      	ldr	r0, [pc, #156]	; (8002ed8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 8002e3a:	f025 fb57 	bl	80284ec <__assert_func>
        switch (cmd)
 8002e3e:	2a05      	cmp	r2, #5
 8002e40:	d834      	bhi.n	8002eac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002e42:	e8df f002 	tbb	[pc, r2]
 8002e46:	2903      	.short	0x2903
 8002e48:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 8002e4c:	6840      	ldr	r0, [r0, #4]
 8002e4e:	6803      	ldr	r3, [r0, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	4798      	blx	r3
 8002e54:	b350      	cbz	r0, 8002eac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 8002e56:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002e5c:	f004 f932 	bl	80070c4 <osMutexAcquire>
                stream.cancelDecoding = false;
 8002e60:	2300      	movs	r3, #0
                stream.isPlaying = true;
 8002e62:	2201      	movs	r2, #1
                if (stream.isStopped)
 8002e64:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 8002e68:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 8002e6c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 8002e70:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 8002e72:	6163      	str	r3, [r4, #20]
                if (stream.isStopped)
 8002e74:	b101      	cbz	r1, 8002e78 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 8002e76:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 8002e78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 8002e7c:	6263      	str	r3, [r4, #36]	; 0x24
                if (stream.nextBuffer == 0)
 8002e7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e80:	b92b      	cbnz	r3, 8002e8e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 8002e82:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 8002e84:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 8002e86:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 8002e8a:	f004 fa05 	bl	8007298 <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 8002e8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 8002e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 8002e94:	f004 b946 	b.w	8007124 <osMutexRelease>
            stream.isPlaying = false;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002e9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 8002ea2:	e003      	b.n	8002eac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 8002ea4:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002eaa:	6143      	str	r3, [r0, #20]
    }
 8002eac:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002eae:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002eb4:	6143      	str	r3, [r0, #20]
 8002eb6:	e7f2      	b.n	8002e9e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e7ed      	b.n	8002e9e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 8002ec2:	3b00      	subs	r3, #0
 8002ec4:	bf18      	it	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 8002ecc:	e7ee      	b.n	8002eac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002ece:	bf00      	nop
 8002ed0:	0802a4c0 	.word	0x0802a4c0
 8002ed4:	0802abcb 	.word	0x0802abcb
 8002ed8:	0802a661 	.word	0x0802a661

08002edc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4616      	mov	r6, r2
        assert(handle < no_streams);
 8002ee2:	b129      	cbz	r1, 8002ef0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002ee4:	4b31      	ldr	r3, [pc, #196]	; (8002fac <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 8002ee6:	21e7      	movs	r1, #231	; 0xe7
 8002ee8:	4a31      	ldr	r2, [pc, #196]	; (8002fb0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 8002eea:	4832      	ldr	r0, [pc, #200]	; (8002fb4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 8002eec:	f025 fafe 	bl	80284ec <__assert_func>
        if (stream.isPlaying)
 8002ef0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ef4:	b133      	cbz	r3, 8002f04 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002ef6:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8002efe:	6943      	ldr	r3, [r0, #20]
 8002f00:	4413      	add	r3, r2
 8002f02:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002f04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d04d      	beq.n	8002fa6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002f0a:	69e1      	ldr	r1, [r4, #28]
 8002f0c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002f10:	4353      	muls	r3, r2
 8002f12:	68a2      	ldr	r2, [r4, #8]
 8002f14:	434a      	muls	r2, r1
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d220      	bcs.n	8002f5c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002f1a:	6a23      	ldr	r3, [r4, #32]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d042      	beq.n	8002fa6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f26:	f004 f8cd 	bl	80070c4 <osMutexAcquire>
            if (stream.seek_to_frame > 0)
 8002f2a:	6a23      	ldr	r3, [r4, #32]
 8002f2c:	b10b      	cbz	r3, 8002f32 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	62e3      	str	r3, [r4, #44]	; 0x2c
            if (stream.nextBuffer != 0)
 8002f32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f34:	b9fb      	cbnz	r3, 8002f76 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 8002f36:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 8002f38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f3a:	f004 f8f3 	bl	8007124 <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 8002f3e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002f42:	b90b      	cbnz	r3, 8002f48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 8002f44:	6a23      	ldr	r3, [r4, #32]
 8002f46:	b13b      	cbz	r3, 8002f58 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 8002f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f4a:	b92b      	cbnz	r3, 8002f58 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 8002f4c:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 8002f4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 8002f50:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 8002f54:	f004 f9a0 	bl	8007298 <osSemaphoreRelease>
    }
 8002f58:	4628      	mov	r0, r5
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 8002f5c:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8002f60:	2800      	cmp	r0, #0
 8002f62:	d0dd      	beq.n	8002f20 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8002f6a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8002f6c:	bf98      	it	ls
 8002f6e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8002f72:	6262      	str	r2, [r4, #36]	; 0x24
 8002f74:	e7d4      	b.n	8002f20 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 8002f76:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 8002f78:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 8002f7c:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 8002f7e:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 8002f80:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 8002f82:	68e2      	ldr	r2, [r4, #12]
 8002f84:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 8002f86:	68a2      	ldr	r2, [r4, #8]
 8002f88:	3201      	adds	r2, #1
 8002f8a:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002f8c:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 8002f8e:	6833      	ldr	r3, [r6, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 8002f94:	2d00      	cmp	r5, #0
 8002f96:	d1ce      	bne.n	8002f36 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 8002f98:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1cb      	bne.n	8002f38 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 8002fa0:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8002fa4:	e7c8      	b.n	8002f38 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 8002fa6:	2501      	movs	r5, #1
 8002fa8:	e7c9      	b.n	8002f3e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 8002faa:	bf00      	nop
 8002fac:	0802a4c0 	.word	0x0802a4c0
 8002fb0:	0802ada2 	.word	0x0802ada2
 8002fb4:	0802a661 	.word	0x0802a661
 8002fb8:	200150f4 	.word	0x200150f4

08002fbc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002fbe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fc8:	609a      	str	r2, [r3, #8]
}
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100

08002fd0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002fd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002fda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002fea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fee:	f3bf 8f6f 	isb	sy
}
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100

08002ff8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002ff8:	b538      	push	{r3, r4, r5, lr}
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002ffa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002ffe:	bb3b      	cbnz	r3, 8003050 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x58>
        streams[handle].isActive = true;
 8003000:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003002:	6083      	str	r3, [r0, #8]
 8003004:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 8003006:	6382      	str	r2, [r0, #56]	; 0x38
                streams[i] = Stream();
 8003008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800300c:	6143      	str	r3, [r0, #20]
 800300e:	8782      	strh	r2, [r0, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003010:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003014:	6183      	str	r3, [r0, #24]
 8003016:	61c3      	str	r3, [r0, #28]
 8003018:	6203      	str	r3, [r0, #32]
 800301a:	6243      	str	r3, [r0, #36]	; 0x24
 800301c:	6283      	str	r3, [r0, #40]	; 0x28
 800301e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003020:	6303      	str	r3, [r0, #48]	; 0x30
 8003022:	6343      	str	r3, [r0, #52]	; 0x34
 8003024:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003028:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 800302a:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 800302e:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 8003032:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 8003034:	630b      	str	r3, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003036:	6c82      	ldr	r2, [r0, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 8003038:	6103      	str	r3, [r0, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800303a:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 800303e:	e9d0 1510 	ldrd	r1, r5, [r0, #64]	; 0x40
 8003042:	4429      	add	r1, r5
 8003044:	428c      	cmp	r4, r1
 8003046:	d90a      	bls.n	800305e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x66>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 800304a:	2158      	movs	r1, #88	; 0x58
 800304c:	4a08      	ldr	r2, [pc, #32]	; (8003070 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 800304e:	e003      	b.n	8003058 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x60>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 8003052:	f240 11f5 	movw	r1, #501	; 0x1f5
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 8003058:	4808      	ldr	r0, [pc, #32]	; (800307c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 800305a:	f025 fa47 	bl	80284ec <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 800305e:	6302      	str	r2, [r0, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003060:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003064:	6484      	str	r4, [r0, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 8003066:	6342      	str	r2, [r0, #52]	; 0x34
    }
 8003068:	4618      	mov	r0, r3
 800306a:	bd38      	pop	{r3, r4, r5, pc}
 800306c:	0802b100 	.word	0x0802b100
 8003070:	0802b140 	.word	0x0802b140
 8003074:	0802af46 	.word	0x0802af46
 8003078:	0802af76 	.word	0x0802af76
 800307c:	0802a661 	.word	0x0802a661

08003080 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003080:	b510      	push	{r4, lr}
        return instance;
 8003082:	4c14      	ldr	r4, [pc, #80]	; (80030d4 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	b323      	cbz	r3, 80030d2 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_LTDC_LineEventCallback+0x58>)
 800308a:	4a14      	ldr	r2, [pc, #80]	; (80030dc <HAL_LTDC_LineEventCallback+0x5c>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	8811      	ldrh	r1, [r2, #0]
 8003090:	428b      	cmp	r3, r1
 8003092:	d113      	bne.n	80030bc <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_LTDC_LineEventCallback+0x60>)
 8003096:	8819      	ldrh	r1, [r3, #0]
 8003098:	f002 fc0c 	bl	80058b4 <HAL_LTDC_ProgramLineEvent>
 800309c:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800309e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80030a2:	3301      	adds	r3, #1
 80030a4:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80030a8:	f7fe ff06 	bl	8001eb8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80030ac:	6820      	ldr	r0, [r4, #0]
 80030ae:	f014 fbdf 	bl	8017870 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80030b2:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80030b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 80030b8:	f7fe bd36 	b.w	8001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80030bc:	f002 fbfa 	bl	80058b4 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80030c0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80030c2:	6803      	ldr	r3, [r0, #0]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 80030c8:	2000      	movs	r0, #0
    }
 80030ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80030ce:	f7fe bd5b 	b.w	8001b88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80030d2:	bd10      	pop	{r4, pc}
 80030d4:	200150f4 	.word	0x200150f4
 80030d8:	40016800 	.word	0x40016800
 80030dc:	20001588 	.word	0x20001588
 80030e0:	20001586 	.word	0x20001586

080030e4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 80030e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80030e8:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 80030ea:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 80030ee:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
            MUTEX_LOCK(mutexBuffers);
 80030f2:	f04f 31ff 	mov.w	r1, #4294967295
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 80030f6:	b91b      	cbnz	r3, 8003100 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x1c>
                SEM_WAIT(semDecode);
 80030f8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80030fa:	f004 f893 	bl	8007224 <osSemaphoreAcquire>
                continue;
 80030fe:	e7f6      	b.n	80030ee <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
            MUTEX_LOCK(mutexBuffers);
 8003100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003102:	f003 ffdf 	bl	80070c4 <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003106:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if (stream.seek_to_frame > 0)
 800310a:	6a26      	ldr	r6, [r4, #32]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 800310c:	42bb      	cmp	r3, r7
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 800310e:	6865      	ldr	r5, [r4, #4]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003110:	bf08      	it	eq
 8003112:	6b67      	ldreq	r7, [r4, #52]	; 0x34
            if (stream.seek_to_frame > 0)
 8003114:	b336      	cbz	r6, 8003164 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                decoder->gotoFrame(stream.seek_to_frame);
 8003116:	682b      	ldr	r3, [r5, #0]
 8003118:	4631      	mov	r1, r6
 800311a:	4628      	mov	r0, r5
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	4798      	blx	r3
                stream.seek_to_frame = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	6223      	str	r3, [r4, #32]
                stream.cancelDecoding = false;
 8003124:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003128:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800312a:	f003 fffb 	bl	8007124 <osMutexRelease>
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 800312e:	682b      	ldr	r3, [r5, #0]
 8003130:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003134:	4639      	mov	r1, r7
 8003136:	f8cd 8000 	str.w	r8, [sp]
 800313a:	4628      	mov	r0, r5
 800313c:	695e      	ldr	r6, [r3, #20]
 800313e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003142:	47b0      	blx	r6
            MUTEX_LOCK(mutexBuffers);
 8003144:	f04f 31ff 	mov.w	r1, #4294967295
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 8003148:	4606      	mov	r6, r0
            MUTEX_LOCK(mutexBuffers);
 800314a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800314c:	f003 ffba 	bl	80070c4 <osMutexAcquire>
            if (stream.cancelDecoding)
 8003150:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8003154:	b1c3      	cbz	r3, 8003188 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                stream.cancelDecoding = false;
 8003156:	2300      	movs	r3, #0
 8003158:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 800315c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800315e:	f003 ffe1 	bl	8007124 <osMutexRelease>
 8003162:	e7c4      	b.n	80030ee <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                if (stream.skip_frames > 0)
 8003164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0de      	beq.n	8003128 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                    decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 800316a:	682b      	ldr	r3, [r5, #0]
 800316c:	4628      	mov	r0, r5
 800316e:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 8003172:	4798      	blx	r3
 8003174:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003176:	4401      	add	r1, r0
 8003178:	4628      	mov	r0, r5
 800317a:	47c8      	blx	r9
                    stream.frameCount += stream.skip_frames;
 800317c:	68a3      	ldr	r3, [r4, #8]
 800317e:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    stream.skip_frames = 0;
 8003180:	6266      	str	r6, [r4, #36]	; 0x24
                    stream.frameCount += stream.skip_frames;
 8003182:	4413      	add	r3, r2
 8003184:	60a3      	str	r3, [r4, #8]
 8003186:	e7cf      	b.n	8003128 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                stream.nextBuffer = decodeBuffer;
 8003188:	62e7      	str	r7, [r4, #44]	; 0x2c
                if (hasMoreFrames)
 800318a:	b15e      	cbz	r6, 80031a4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	4628      	mov	r0, r5
 8003190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003192:	4798      	blx	r3
 8003194:	3801      	subs	r0, #1
 8003196:	60e0      	str	r0, [r4, #12]
                stream.doDecodeNewFrame = false;
 8003198:	2300      	movs	r3, #0
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 800319a:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
                stream.doDecodeNewFrame = false;
 800319e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80031a2:	e7db      	b.n	800315c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    stream.frameNumberNext = 1;
 80031a4:	2301      	movs	r3, #1
 80031a6:	60e3      	str	r3, [r4, #12]
 80031a8:	e7f6      	b.n	8003198 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb4>
	...

080031ac <videoTaskFunc>:
    videoController.decoderTaskEntry();
 80031ac:	4801      	ldr	r0, [pc, #4]	; (80031b4 <videoTaskFunc+0x8>)
{
 80031ae:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80031b0:	f7ff ff98 	bl	80030e4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 80031b4:	20001d54 	.word	0x20001d54

080031b8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 80031c0:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80031c2:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 80031c4:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 80031c6:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 80031c8:	f04f 31ff 	mov.w	r1, #4294967295
 80031cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031ce:	f003 ff79 	bl	80070c4 <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 80031d2:	2138      	movs	r1, #56	; 0x38
 80031d4:	fb01 4305 	mla	r3, r1, r5, r4
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	b10a      	cbz	r2, 80031e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 80031dc:	2200      	movs	r2, #0
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
 80031e0:	fb01 4505 	mla	r5, r1, r5, r4
        }
        stream.cancelDecoding = true;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 80031ea:	2300      	movs	r3, #0
 80031ec:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 80031f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 80031f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 80031f6:	f003 bf95 	b.w	8007124 <osMutexRelease>

080031fa <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    void setVideoData(const Handle handle, VideoDataReader& reader)
 80031fa:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 80031fc:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    void setVideoData(const Handle handle, VideoDataReader& reader)
 8003200:	4604      	mov	r4, r0
 8003202:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 8003204:	4611      	mov	r1, r2
 8003206:	6858      	ldr	r0, [r3, #4]
 8003208:	6803      	ldr	r3, [r0, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4798      	blx	r3
        clearState(handle);
 800320e:	4629      	mov	r1, r5
 8003210:	4620      	mov	r0, r4
 8003212:	f7ff ffd1 	bl	80031b8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003216:	bd38      	pop	{r3, r4, r5, pc}

08003218 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	460d      	mov	r5, r1
 800321c:	4611      	mov	r1, r2
 800321e:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003220:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003224:	6850      	ldr	r0, [r2, #4]
 8003226:	6802      	ldr	r2, [r0, #0]
 8003228:	6896      	ldr	r6, [r2, #8]
 800322a:	461a      	mov	r2, r3
 800322c:	47b0      	blx	r6
        clearState(handle);
 800322e:	4629      	mov	r1, r5
 8003230:	4620      	mov	r0, r4
 8003232:	f7ff ffc1 	bl	80031b8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003236:	bd70      	pop	{r4, r5, r6, pc}

08003238 <_GLOBAL__sub_I_lineBuffer>:
}
 8003238:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 800323a:	4916      	ldr	r1, [pc, #88]	; (8003294 <_GLOBAL__sub_I_lineBuffer+0x5c>)
          semDecode(0), mutexBuffers(0)
 800323c:	2500      	movs	r5, #0
 800323e:	4816      	ldr	r0, [pc, #88]	; (8003298 <_GLOBAL__sub_I_lineBuffer+0x60>)
 8003240:	f7ff f87c 	bl	800233c <_ZN20SoftwareMJPEGDecoderC1EPh>
 8003244:	4c15      	ldr	r4, [pc, #84]	; (800329c <_GLOBAL__sub_I_lineBuffer+0x64>)
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <_GLOBAL__sub_I_lineBuffer+0x68>)
 8003248:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 800324a:	462a      	mov	r2, r5
 800324c:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 800324e:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003250:	f44f 7380 	mov.w	r3, #256	; 0x100
          semDecode(0), mutexBuffers(0)
 8003254:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003256:	87a3      	strh	r3, [r4, #60]	; 0x3c
          semDecode(0), mutexBuffers(0)
 8003258:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 800325c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          semDecode(0), mutexBuffers(0)
 8003260:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 8003264:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 8003268:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800326c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003270:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003274:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8003278:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 800327c:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 8003280:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 8003284:	f003 ff78 	bl	8007178 <osSemaphoreNew>
 8003288:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 800328a:	4628      	mov	r0, r5
 800328c:	f003 fed8 	bl	8007040 <osMutexNew>
 8003290:	6560      	str	r0, [r4, #84]	; 0x54
}
 8003292:	bd38      	pop	{r3, r4, r5, pc}
 8003294:	2000158c 	.word	0x2000158c
 8003298:	20001d0c 	.word	0x20001d0c
 800329c:	20001d54 	.word	0x20001d54
 80032a0:	0802b2f0 	.word	0x0802b2f0

080032a4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80032a4:	4770      	bx	lr

080032a6 <_ZN23ApplicationFontProviderD0Ev>:
 80032a6:	b510      	push	{r4, lr}
 80032a8:	4604      	mov	r4, r0
 80032aa:	2104      	movs	r1, #4
 80032ac:	f025 f8f0 	bl	8028490 <_ZdlPvj>
 80032b0:	4620      	mov	r0, r4
 80032b2:	bd10      	pop	{r4, pc}

080032b4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80032b4:	2901      	cmp	r1, #1
{
 80032b6:	b508      	push	{r3, lr}
    switch (typography)
 80032b8:	d006      	beq.n	80032c8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80032ba:	2902      	cmp	r1, #2
 80032bc:	d008      	beq.n	80032d0 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80032be:	b959      	cbnz	r1, 80032d8 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80032c0:	f000 fea0 	bl	8004004 <_ZN17TypedTextDatabase8getFontsEv>
 80032c4:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80032c6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80032c8:	f000 fe9c 	bl	8004004 <_ZN17TypedTextDatabase8getFontsEv>
 80032cc:	6840      	ldr	r0, [r0, #4]
 80032ce:	e7fa      	b.n	80032c6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80032d0:	f000 fe98 	bl	8004004 <_ZN17TypedTextDatabase8getFontsEv>
 80032d4:	6880      	ldr	r0, [r0, #8]
 80032d6:	e7f6      	b.n	80032c6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80032d8:	2000      	movs	r0, #0
 80032da:	e7f4      	b.n	80032c6 <_ZN23ApplicationFontProvider7getFontEt+0x12>

080032dc <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80032dc:	4800      	ldr	r0, [pc, #0]	; (80032e0 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80032de:	4770      	bx	lr
 80032e0:	0802b338 	.word	0x0802b338

080032e4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80032e4:	2004      	movs	r0, #4
 80032e6:	4770      	bx	lr

080032e8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80032e8:	b513      	push	{r0, r1, r4, lr}
 80032ea:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80032ec:	b151      	cbz	r1, 8003304 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80032ee:	6803      	ldr	r3, [r0, #0]
 80032f0:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80032f2:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80032f4:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80032f8:	689c      	ldr	r4, [r3, #8]
 80032fa:	f10d 0303 	add.w	r3, sp, #3
 80032fe:	47a0      	blx	r4
        return glyph;
    }
 8003300:	b002      	add	sp, #8
 8003302:	bd10      	pop	{r4, pc}
            return 0;
 8003304:	4608      	mov	r0, r1
 8003306:	e7fb      	b.n	8003300 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003308 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003308:	8940      	ldrh	r0, [r0, #10]
 800330a:	4770      	bx	lr

0800330c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800330c:	8980      	ldrh	r0, [r0, #12]
 800330e:	4770      	bx	lr

08003310 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8003310:	8880      	ldrh	r0, [r0, #4]
 8003312:	4770      	bx	lr

08003314 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8003314:	7983      	ldrb	r3, [r0, #6]
 8003316:	8880      	ldrh	r0, [r0, #4]
 8003318:	4418      	add	r0, r3
    }
 800331a:	b280      	uxth	r0, r0
 800331c:	4770      	bx	lr

0800331e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800331e:	79c0      	ldrb	r0, [r0, #7]
    }
 8003320:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003324:	4770      	bx	lr

08003326 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003326:	79c0      	ldrb	r0, [r0, #7]
    }
 8003328:	09c0      	lsrs	r0, r0, #7
 800332a:	4770      	bx	lr

0800332c <_ZN8touchgfx9TypedTextD1Ev>:
    }
 800332c:	4770      	bx	lr

0800332e <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800332e:	b510      	push	{r4, lr}
 8003330:	4604      	mov	r4, r0
    }
 8003332:	2108      	movs	r1, #8
 8003334:	f025 f8ac 	bl	8028490 <_ZdlPvj>
 8003338:	4620      	mov	r0, r4
 800333a:	bd10      	pop	{r4, pc}

0800333c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800333c:	4770      	bx	lr

0800333e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 800333e:	4770      	bx	lr

08003340 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003340:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8003344:	6808      	ldr	r0, [r1, #0]
 8003346:	6849      	ldr	r1, [r1, #4]
 8003348:	c303      	stmia	r3!, {r0, r1}
    }
 800334a:	4770      	bx	lr

0800334c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800334c:	4770      	bx	lr

0800334e <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800334e:	4770      	bx	lr

08003350 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003350:	6041      	str	r1, [r0, #4]
    }
 8003352:	4770      	bx	lr

08003354 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003354:	4770      	bx	lr
	...

08003358 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800335a:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 800335e:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8003362:	2300      	movs	r3, #0
 8003364:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003368:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 800336c:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	08003419 	.word	0x08003419

08003378 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003378:	2301      	movs	r3, #1
 800337a:	7203      	strb	r3, [r0, #8]
    }
 800337c:	4770      	bx	lr

0800337e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800337e:	4770      	bx	lr

08003380 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003380:	4770      	bx	lr

08003382 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003382:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003384:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003386:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003388:	68c2      	ldr	r2, [r0, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	1054      	asrs	r4, r2, #1
 800338e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003392:	07d2      	lsls	r2, r2, #31
 8003394:	bf48      	it	mi
 8003396:	590a      	ldrmi	r2, [r1, r4]
    }
 8003398:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800339c:	bf48      	it	mi
 800339e:	58d3      	ldrmi	r3, [r2, r3]
 80033a0:	4718      	bx	r3

080033a2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80033a2:	6843      	ldr	r3, [r0, #4]
 80033a4:	b12b      	cbz	r3, 80033b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80033a6:	6883      	ldr	r3, [r0, #8]
 80033a8:	b92b      	cbnz	r3, 80033b6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80033aa:	68c0      	ldr	r0, [r0, #12]
 80033ac:	f000 0001 	and.w	r0, r0, #1
 80033b0:	4770      	bx	lr
 80033b2:	4618      	mov	r0, r3
 80033b4:	4770      	bx	lr
 80033b6:	2001      	movs	r0, #1
    }
 80033b8:	4770      	bx	lr

080033ba <_ZN8touchgfx12NoTransitionD0Ev>:
 80033ba:	b510      	push	{r4, lr}
 80033bc:	4604      	mov	r4, r0
 80033be:	210c      	movs	r1, #12
 80033c0:	f025 f866 	bl	8028490 <_ZdlPvj>
 80033c4:	4620      	mov	r0, r4
 80033c6:	bd10      	pop	{r4, pc}

080033c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80033c8:	b510      	push	{r4, lr}
 80033ca:	4604      	mov	r4, r0
 80033cc:	2110      	movs	r1, #16
 80033ce:	f025 f85f 	bl	8028490 <_ZdlPvj>
 80033d2:	4620      	mov	r0, r4
 80033d4:	bd10      	pop	{r4, pc}

080033d6 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80033d6:	b510      	push	{r4, lr}
 80033d8:	4604      	mov	r4, r0
 80033da:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80033de:	f025 f857 	bl	8028490 <_ZdlPvj>
 80033e2:	4620      	mov	r0, r4
 80033e4:	bd10      	pop	{r4, pc}

080033e6 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80033e6:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 80033e8:	f016 fde6 	bl	8019fb8 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80033ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 80033f0:	f017 b9c4 	b.w	801a77c <_ZN8touchgfx11Application10invalidateEv>

080033f4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80033f4:	b510      	push	{r4, lr}
 80033f6:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80033f8:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 80033fc:	b158      	cbz	r0, 8003416 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80033fe:	6803      	ldr	r3, [r0, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	4798      	blx	r3
 8003404:	b138      	cbz	r0, 8003416 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003406:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 800340a:	6803      	ldr	r3, [r0, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8003416:	bd10      	pop	{r4, pc}

08003418 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003418:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800341c:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8003420:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003422:	68a8      	ldr	r0, [r5, #8]
 8003424:	6803      	ldr	r3, [r0, #0]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4798      	blx	r3
 800342a:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 800342e:	d205      	bcs.n	800343c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8003430:	4b45      	ldr	r3, [pc, #276]	; (8003548 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003432:	21a3      	movs	r1, #163	; 0xa3
 8003434:	4a45      	ldr	r2, [pc, #276]	; (800354c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003436:	4846      	ldr	r0, [pc, #280]	; (8003550 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003438:	f025 f858 	bl	80284ec <__assert_func>
 800343c:	6868      	ldr	r0, [r5, #4]
 800343e:	6803      	ldr	r3, [r0, #0]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4798      	blx	r3
 8003444:	280f      	cmp	r0, #15
 8003446:	d803      	bhi.n	8003450 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003448:	4b42      	ldr	r3, [pc, #264]	; (8003554 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 800344a:	21a4      	movs	r1, #164	; 0xa4
 800344c:	4a3f      	ldr	r2, [pc, #252]	; (800354c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800344e:	e7f2      	b.n	8003436 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003450:	68e8      	ldr	r0, [r5, #12]
 8003452:	6803      	ldr	r3, [r0, #0]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4798      	blx	r3
 8003458:	280b      	cmp	r0, #11
 800345a:	d803      	bhi.n	8003464 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 800345c:	4b3e      	ldr	r3, [pc, #248]	; (8003558 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 800345e:	21a5      	movs	r1, #165	; 0xa5
 8003460:	4a3a      	ldr	r2, [pc, #232]	; (800354c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003462:	e7e8      	b.n	8003436 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003464:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8003560 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 8003468:	f016 fda6 	bl	8019fb8 <_ZN8touchgfx11Application11getInstanceEv>
 800346c:	f016 fde5 	bl	801a03a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003470:	f8d9 0000 	ldr.w	r0, [r9]
 8003474:	b110      	cbz	r0, 800347c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8003476:	6803      	ldr	r3, [r0, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4798      	blx	r3
    if (*currentTrans)
 800347c:	f8d9 0000 	ldr.w	r0, [r9]
 8003480:	b110      	cbz	r0, 8003488 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003482:	6803      	ldr	r3, [r0, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4798      	blx	r3
    if (*currentScreen)
 8003488:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003564 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
 800348c:	f8d8 0000 	ldr.w	r0, [r8]
 8003490:	b110      	cbz	r0, 8003498 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003492:	6803      	ldr	r3, [r0, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	4798      	blx	r3
    if (*currentPresenter)
 8003498:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800349c:	b110      	cbz	r0, 80034a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 800349e:	6803      	ldr	r3, [r0, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4798      	blx	r3
    if (*currentScreen)
 80034a4:	f8d8 0000 	ldr.w	r0, [r8]
 80034a8:	b110      	cbz	r0, 80034b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 80034aa:	6803      	ldr	r3, [r0, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4798      	blx	r3
    if (*currentPresenter)
 80034b0:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80034b4:	b110      	cbz	r0, 80034bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 80034b6:	6803      	ldr	r3, [r0, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80034bc:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80034be:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80034c0:	f04f 0b00 	mov.w	fp, #0
 80034c4:	6803      	ldr	r3, [r0, #0]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	4798      	blx	r3
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 80034cc:	4604      	mov	r4, r0
 80034ce:	f8c0 b004 	str.w	fp, [r0, #4]
 80034d2:	6003      	str	r3, [r0, #0]
 80034d4:	4659      	mov	r1, fp
 80034d6:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80034da:	68a8      	ldr	r0, [r5, #8]
 80034dc:	6803      	ldr	r3, [r0, #0]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	4798      	blx	r3
 80034e2:	4606      	mov	r6, r0
 80034e4:	f000 fdea 	bl	80040bc <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80034e8:	6868      	ldr	r0, [r5, #4]
 80034ea:	4659      	mov	r1, fp
 80034ec:	6803      	ldr	r3, [r0, #0]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	4798      	blx	r3
 80034f2:	4605      	mov	r5, r0
 80034f4:	4631      	mov	r1, r6
 80034f6:	f000 fdc7 	bl	8004088 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 80034fa:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80034fe:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8003502:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8003506:	b1e5      	cbz	r5, 8003542 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12a>
 8003508:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800350a:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800350e:	4630      	mov	r0, r6
 8003510:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003512:	f8c5 a008 	str.w	sl, [r5, #8]
 8003516:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003518:	63f5      	str	r5, [r6, #60]	; 0x3c
 800351a:	4798      	blx	r3
    newPresenter->activate();
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	4628      	mov	r0, r5
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003524:	4621      	mov	r1, r4
 8003526:	4630      	mov	r0, r6
 8003528:	f018 f968 	bl	801b7fc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	4620      	mov	r0, r4
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	4798      	blx	r3
    newTransition->invalidate();
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	4620      	mov	r0, r4
 8003538:	695b      	ldr	r3, [r3, #20]
}
 800353a:	b001      	add	sp, #4
 800353c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003540:	4718      	bx	r3
    model->bind(newPresenter);
 8003542:	462b      	mov	r3, r5
 8003544:	e7e1      	b.n	800350a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf2>
 8003546:	bf00      	nop
 8003548:	0802b398 	.word	0x0802b398
 800354c:	0802b426 	.word	0x0802b426
 8003550:	0802b52a 	.word	0x0802b52a
 8003554:	0802b571 	.word	0x0802b571
 8003558:	0802b614 	.word	0x0802b614
 800355c:	0802b724 	.word	0x0802b724
 8003560:	20015134 	.word	0x20015134
 8003564:	20015130 	.word	0x20015130

08003568 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	4604      	mov	r4, r0
 800356c:	4617      	mov	r7, r2
 800356e:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003570:	f016 fd80 	bl	801a074 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003574:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8003576:	2500      	movs	r5, #0
        instance = this;
 8003578:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800357a:	4629      	mov	r1, r5
      model(m)
 800357c:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800357e:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 8003582:	4e0f      	ldr	r6, [pc, #60]	; (80035c0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 8003588:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800358a:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 800358e:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003592:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003594:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800359c:	4628      	mov	r0, r5
 800359e:	f000 fce5 	bl	8003f6c <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80035a2:	6833      	ldr	r3, [r6, #0]
 80035a4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80035a8:	b10a      	cbz	r2, 80035ae <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80035aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80035ac:	b900      	cbnz	r0, 80035b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80035ae:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80035b0:	f01e f84b 	bl	802164a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80035b4:	4620      	mov	r0, r4
 80035b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b8:	20015140 	.word	0x20015140
 80035bc:	0802b6d8 	.word	0x0802b6d8
 80035c0:	200150f4 	.word	0x200150f4
 80035c4:	0802b6c0 	.word	0x0802b6c0

080035c8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80035ca:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80035ce:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80035d2:	2300      	movs	r3, #0
 80035d4:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 80035d8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80035dc:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	08003419 	.word	0x08003419

080035e8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80035e8:	6a00      	ldr	r0, [r0, #32]
 80035ea:	4770      	bx	lr

080035ec <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80035ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80035ee:	4770      	bx	lr

080035f0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80035f0:	4770      	bx	lr

080035f2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80035f2:	888b      	ldrh	r3, [r1, #4]
 80035f4:	6980      	ldr	r0, [r0, #24]
 80035f6:	0adb      	lsrs	r3, r3, #11
 80035f8:	680a      	ldr	r2, [r1, #0]
 80035fa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80035fe:	4410      	add	r0, r2
 8003600:	4770      	bx	lr

08003602 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003602:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8003604:	b1c2      	cbz	r2, 8003638 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003606:	7b13      	ldrb	r3, [r2, #12]
 8003608:	b1b3      	cbz	r3, 8003638 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800360a:	7b54      	ldrb	r4, [r2, #13]
 800360c:	7ad2      	ldrb	r2, [r2, #11]
 800360e:	0224      	lsls	r4, r4, #8
 8003610:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003614:	4314      	orrs	r4, r2
 8003616:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003618:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800361a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 800361e:	8813      	ldrh	r3, [r2, #0]
 8003620:	428b      	cmp	r3, r1
 8003622:	d102      	bne.n	800362a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003624:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8003628:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800362a:	d805      	bhi.n	8003638 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800362c:	3801      	subs	r0, #1
 800362e:	3204      	adds	r2, #4
 8003630:	b280      	uxth	r0, r0
 8003632:	2800      	cmp	r0, #0
 8003634:	d1f3      	bne.n	800361e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003636:	e7f7      	b.n	8003628 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003638:	2000      	movs	r0, #0
 800363a:	e7f5      	b.n	8003628 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800363c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800363c:	b510      	push	{r4, lr}
 800363e:	4604      	mov	r4, r0
 8003640:	2128      	movs	r1, #40	; 0x28
 8003642:	f024 ff25 	bl	8028490 <_ZdlPvj>
 8003646:	4620      	mov	r0, r4
 8003648:	bd10      	pop	{r4, pc}
	...

0800364c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800364c:	b530      	push	{r4, r5, lr}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003652:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8003656:	9506      	str	r5, [sp, #24]
 8003658:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800365c:	9505      	str	r5, [sp, #20]
 800365e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003662:	9504      	str	r5, [sp, #16]
 8003664:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003668:	9503      	str	r5, [sp, #12]
 800366a:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 800366e:	9502      	str	r5, [sp, #8]
 8003670:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003674:	9501      	str	r5, [sp, #4]
 8003676:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 800367a:	9500      	str	r5, [sp, #0]
 800367c:	f017 fd1e 	bl	801b0bc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8003682:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003688:	61a3      	str	r3, [r4, #24]
 800368a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800368c:	61e3      	str	r3, [r4, #28]
 800368e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003690:	6223      	str	r3, [r4, #32]
 8003692:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003694:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003696:	b009      	add	sp, #36	; 0x24
 8003698:	bd30      	pop	{r4, r5, pc}
 800369a:	bf00      	nop
 800369c:	0802b748 	.word	0x0802b748

080036a0 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80036a0:	2000      	movs	r0, #0
 80036a2:	4770      	bx	lr

080036a4 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80036a4:	8081      	strh	r1, [r0, #4]
    }
 80036a6:	4770      	bx	lr

080036a8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80036a8:	80c1      	strh	r1, [r0, #6]
    }
 80036aa:	4770      	bx	lr

080036ac <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80036ac:	8101      	strh	r1, [r0, #8]
    }
 80036ae:	4770      	bx	lr

080036b0 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80036b0:	8141      	strh	r1, [r0, #10]
    }
 80036b2:	4770      	bx	lr

080036b4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80036b4:	4770      	bx	lr

080036b6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80036b6:	4770      	bx	lr

080036b8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80036b8:	4770      	bx	lr

080036ba <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80036ba:	4770      	bx	lr

080036bc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80036bc:	4770      	bx	lr

080036be <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80036be:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80036c0:	88c4      	ldrh	r4, [r0, #6]
 80036c2:	6803      	ldr	r3, [r0, #0]
 80036c4:	1b12      	subs	r2, r2, r4
 80036c6:	8884      	ldrh	r4, [r0, #4]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	1b09      	subs	r1, r1, r4
 80036cc:	b212      	sxth	r2, r2
    }
 80036ce:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80036d2:	b209      	sxth	r1, r1
 80036d4:	4718      	bx	r3

080036d6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80036d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036da:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80036dc:	f04f 33ff 	mov.w	r3, #4294967295
 80036e0:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80036e2:	6813      	ldr	r3, [r2, #0]
 80036e4:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80036e6:	6010      	str	r0, [r2, #0]
    }
 80036e8:	4770      	bx	lr

080036ea <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80036ea:	4770      	bx	lr

080036ec <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80036ec:	4770      	bx	lr

080036ee <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80036ee:	4770      	bx	lr

080036f0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80036f0:	4770      	bx	lr

080036f2 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80036f2:	4770      	bx	lr

080036f4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80036f4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80036f8:	b11a      	cbz	r2, 8003702 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80036fa:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80036fe:	b102      	cbz	r2, 8003702 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003700:	6018      	str	r0, [r3, #0]
        }
    }
 8003702:	4770      	bx	lr

08003704 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
    {
        return pressed;
    }
 8003704:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8003708:	4770      	bx	lr

0800370a <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800370a:	4770      	bx	lr

0800370c <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 800370c:	4770      	bx	lr

0800370e <_ZN15Screen1ViewBase32interaction1EndedCallbackHandlerERKN8touchgfx12FadeAnimatorINS0_5ImageEEE>:

void Screen1ViewBase::interaction1EndedCallbackHandler(const touchgfx::FadeAnimator<touchgfx::Image>& comp)
{

}
 800370e:	4770      	bx	lr

08003710 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003710:	4770      	bx	lr

08003712 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 8003712:	4770      	bx	lr

08003714 <_ZN8touchgfx13ClickListenerINS_12FadeAnimatorINS_12ToggleButtonEEEED1Ev>:
 * receives a click event.
 *
 * @tparam T specifies the type to extend with the ClickListener behavior.
 */
template <class T>
class ClickListener : public T
 8003714:	4770      	bx	lr

08003716 <_ZN8touchgfx13ClickListenerINS_12FadeAnimatorINS_5ImageEEEED1Ev>:
 8003716:	4770      	bx	lr

08003718 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7executeES6_>:
    virtual void execute(T1 t1)
 8003718:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800371a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800371c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800371e:	68c2      	ldr	r2, [r0, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	1055      	asrs	r5, r2, #1
 8003724:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003728:	07d2      	lsls	r2, r2, #31
 800372a:	bf48      	it	mi
 800372c:	5962      	ldrmi	r2, [r4, r5]
    }
 800372e:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003730:	bf48      	it	mi
 8003732:	58d3      	ldrmi	r3, [r2, r3]
 8003734:	4718      	bx	r3

08003736 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8003736:	6843      	ldr	r3, [r0, #4]
 8003738:	b12b      	cbz	r3, 8003746 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x10>
 800373a:	6883      	ldr	r3, [r0, #8]
 800373c:	b92b      	cbnz	r3, 800374a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvE7isValidEv+0x14>
 800373e:	68c0      	ldr	r0, [r0, #12]
 8003740:	f000 0001 	and.w	r0, r0, #1
 8003744:	4770      	bx	lr
 8003746:	4618      	mov	r0, r3
 8003748:	4770      	bx	lr
 800374a:	2001      	movs	r0, #1
    }
 800374c:	4770      	bx	lr

0800374e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800374e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003750:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003752:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8003754:	68c2      	ldr	r2, [r0, #12]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	1055      	asrs	r5, r2, #1
 800375a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800375e:	07d2      	lsls	r2, r2, #31
 8003760:	bf48      	it	mi
 8003762:	5962      	ldrmi	r2, [r4, r5]
    }
 8003764:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8003766:	bf48      	it	mi
 8003768:	58d3      	ldrmi	r3, [r2, r3]
 800376a:	4718      	bx	r3

0800376c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 800376c:	6843      	ldr	r3, [r0, #4]
 800376e:	b12b      	cbz	r3, 800377c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003770:	6883      	ldr	r3, [r0, #8]
 8003772:	b92b      	cbnz	r3, 8003780 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003774:	68c0      	ldr	r0, [r0, #12]
 8003776:	f000 0001 	and.w	r0, r0, #1
 800377a:	4770      	bx	lr
 800377c:	4618      	mov	r0, r3
 800377e:	4770      	bx	lr
 8003780:	2001      	movs	r0, #1
    }
 8003782:	4770      	bx	lr

08003784 <_ZN8touchgfx12FadeAnimatorINS_12ToggleButtonEE21setFadeAnimationDelayEt>:
     *
     * @see getFadeAnimationDelay
     */
    virtual void setFadeAnimationDelay(uint16_t delay)
    {
        fadeAnimationDelay = delay;
 8003784:	8741      	strh	r1, [r0, #58]	; 0x3a
    }
 8003786:	4770      	bx	lr

08003788 <_ZNK8touchgfx12FadeAnimatorINS_12ToggleButtonEE21getFadeAnimationDelayEv>:
     * @see setFadeAnimationDelay
     */
    virtual uint16_t getFadeAnimationDelay() const
    {
        return fadeAnimationDelay;
    }
 8003788:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 800378a:	4770      	bx	lr

0800378c <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21setFadeAnimationDelayEt>:
        fadeAnimationDelay = delay;
 800378c:	8581      	strh	r1, [r0, #44]	; 0x2c
    }
 800378e:	4770      	bx	lr

08003790 <_ZNK8touchgfx12FadeAnimatorINS_5ImageEE21getFadeAnimationDelayEv>:
    }
 8003790:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 8003792:	4770      	bx	lr

08003794 <_ZN8touchgfx13ClickListenerINS_12FadeAnimatorINS_5ImageEEEED0Ev>:
 8003794:	b510      	push	{r4, lr}
 8003796:	4604      	mov	r4, r0
 8003798:	2140      	movs	r1, #64	; 0x40
 800379a:	f024 fe79 	bl	8028490 <_ZdlPvj>
 800379e:	4620      	mov	r0, r4
 80037a0:	bd10      	pop	{r4, pc}

080037a2 <_ZN8touchgfx13ClickListenerINS_12FadeAnimatorINS_12ToggleButtonEEEED0Ev>:
 80037a2:	b510      	push	{r4, lr}
 80037a4:	4604      	mov	r4, r0
 80037a6:	2150      	movs	r1, #80	; 0x50
 80037a8:	f024 fe72 	bl	8028490 <_ZdlPvj>
 80037ac:	4620      	mov	r0, r4
 80037ae:	bd10      	pop	{r4, pc}

080037b0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80037b0:	b510      	push	{r4, lr}
 80037b2:	4604      	mov	r4, r0
 80037b4:	2110      	movs	r1, #16
 80037b6:	f024 fe6b 	bl	8028490 <_ZdlPvj>
 80037ba:	4620      	mov	r0, r4
 80037bc:	bd10      	pop	{r4, pc}

080037be <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_12FadeAnimatorINS_5ImageEEEvvED0Ev>:
 80037be:	b510      	push	{r4, lr}
 80037c0:	4604      	mov	r4, r0
 80037c2:	2110      	movs	r1, #16
 80037c4:	f024 fe64 	bl	8028490 <_ZdlPvj>
 80037c8:	4620      	mov	r0, r4
 80037ca:	bd10      	pop	{r4, pc}

080037cc <_ZN15Screen1ViewBaseD0Ev>:
 80037cc:	b510      	push	{r4, lr}
 80037ce:	4604      	mov	r4, r0
 80037d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80037d4:	f024 fe5c 	bl	8028490 <_ZdlPvj>
 80037d8:	4620      	mov	r0, r4
 80037da:	bd10      	pop	{r4, pc}

080037dc <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
    {
        originalPressed = bitmapPressed;
 80037dc:	8813      	ldrh	r3, [r2, #0]
 80037de:	8683      	strh	r3, [r0, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 80037e0:	f014 bdde 	b.w	80183a0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

080037e4 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80037e4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80037e8:	b112      	cbz	r2, 80037f0 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80037ea:	6803      	ldr	r3, [r0, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	4718      	bx	r3
    }
 80037f0:	4770      	bx	lr

080037f2 <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 80037f2:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 80037f4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80037f8:	b10b      	cbz	r3, 80037fe <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 80037fa:	f7ff fff3 	bl	80037e4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 80037fe:	bd08      	pop	{r3, pc}

08003800 <_ZNK8touchgfx6Button17invalidateContentEv>:
    Bitmap getCurrentlyDisplayedBitmap() const
    {
        return (pressed ? down : up);
    }

    virtual void invalidateContent() const
 8003800:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 8003802:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8003806:	b10b      	cbz	r3, 800380c <_ZNK8touchgfx6Button17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 8003808:	f7ff ffec 	bl	80037e4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 800380c:	bd08      	pop	{r3, pc}

0800380e <_ZN8touchgfx14AbstractButton13executeActionEv>:
    virtual void executeAction()
 800380e:	b510      	push	{r4, lr}
 8003810:	4604      	mov	r4, r0
        if (action && action->isValid())
 8003812:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003814:	b150      	cbz	r0, 800382c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8003816:	6803      	ldr	r3, [r0, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	4798      	blx	r3
 800381c:	b130      	cbz	r0, 800382c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
            action->execute(*this);
 800381e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003820:	4621      	mov	r1, r4
 8003822:	6803      	ldr	r3, [r0, #0]
    }
 8003824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	4718      	bx	r3
    }
 800382c:	bd10      	pop	{r4, pc}

0800382e <_ZN8touchgfx13ClickListenerINS_12FadeAnimatorINS_5ImageEEEE16handleClickEventERKNS_10ClickEventE>:
     * Ensures that the clickEvent is propagated to the super class T and to the clickAction
     * listener.
     *
     * @param  event Information about the click.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800382e:	b513      	push	{r0, r1, r4, lr}
 8003830:	4604      	mov	r4, r0
    {
        T::handleClickEvent(event);
        if (clickAction && clickAction->isValid())
 8003832:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    virtual void handleClickEvent(const ClickEvent& event)
 8003834:	9101      	str	r1, [sp, #4]
        if (clickAction && clickAction->isValid())
 8003836:	b160      	cbz	r0, 8003852 <_ZN8touchgfx13ClickListenerINS_12FadeAnimatorINS_5ImageEEEE16handleClickEventERKNS_10ClickEventE+0x24>
 8003838:	6803      	ldr	r3, [r0, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4798      	blx	r3
 800383e:	b140      	cbz	r0, 8003852 <_ZN8touchgfx13ClickListenerINS_12FadeAnimatorINS_5ImageEEEE16handleClickEventERKNS_10ClickEventE+0x24>
        {
            clickAction->execute(*this, event);
 8003840:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003842:	4621      	mov	r1, r4
 8003844:	9a01      	ldr	r2, [sp, #4]
 8003846:	6803      	ldr	r3, [r0, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
        }
    }
 800384a:	b002      	add	sp, #8
 800384c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            clickAction->execute(*this, event);
 8003850:	4718      	bx	r3
    }
 8003852:	b002      	add	sp, #8
 8003854:	bd10      	pop	{r4, pc}

08003856 <_ZN8touchgfx13ClickListenerINS_12FadeAnimatorINS_12ToggleButtonEEEE16handleClickEventERKNS_10ClickEventE>:
    virtual void handleClickEvent(const ClickEvent& event)
 8003856:	b570      	push	{r4, r5, r6, lr}
 8003858:	4604      	mov	r4, r0
 800385a:	460d      	mov	r5, r1
        T::handleClickEvent(event);
 800385c:	f014 f96e 	bl	8017b3c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>
        if (clickAction && clickAction->isValid())
 8003860:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003862:	b158      	cbz	r0, 800387c <_ZN8touchgfx13ClickListenerINS_12FadeAnimatorINS_12ToggleButtonEEEE16handleClickEventERKNS_10ClickEventE+0x26>
 8003864:	6803      	ldr	r3, [r0, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4798      	blx	r3
 800386a:	b138      	cbz	r0, 800387c <_ZN8touchgfx13ClickListenerINS_12FadeAnimatorINS_12ToggleButtonEEEE16handleClickEventERKNS_10ClickEventE+0x26>
            clickAction->execute(*this, event);
 800386c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800386e:	462a      	mov	r2, r5
 8003870:	4621      	mov	r1, r4
 8003872:	6803      	ldr	r3, [r0, #0]
    }
 8003874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            clickAction->execute(*this, event);
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	4718      	bx	r3
    }
 800387c:	bd70      	pop	{r4, r5, r6, pc}

0800387e <_ZN8touchgfx12FadeAnimatorINS_12ToggleButtonEE15handleTickEventEv>:

protected:
    /** Execute next step in fade animation and stop the timer if necessary. */
    void nextFadeAnimationStep()
    {
        if (fadeAnimationRunning)
 800387e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
    virtual void handleTickEvent()
 8003882:	b570      	push	{r4, r5, r6, lr}
 8003884:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 8003886:	2b00      	cmp	r3, #0
 8003888:	d040      	beq.n	800390c <_ZN8touchgfx12FadeAnimatorINS_12ToggleButtonEE15handleTickEventEv+0x8e>
        {
            fadeAnimationCounter++;
 800388a:	8f00      	ldrh	r0, [r0, #56]	; 0x38
            if (fadeAnimationCounter >= fadeAnimationDelay)
 800388c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
            fadeAnimationCounter++;
 800388e:	3001      	adds	r0, #1
 8003890:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8003892:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 8003894:	8720      	strh	r0, [r4, #56]	; 0x38
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8003896:	d339      	bcc.n	800390c <_ZN8touchgfx12FadeAnimatorINS_12ToggleButtonEE15handleTickEventEv+0x8e>
            {
                // Adjust the used animationCounter for the startup delay
                uint32_t actualAnimationCounter = fadeAnimationCounter - fadeAnimationDelay;

                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8003898:	8fe6      	ldrh	r6, [r4, #62]	; 0x3e
 800389a:	1ac0      	subs	r0, r0, r3
 800389c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80038a0:	2100      	movs	r1, #0
 80038a2:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80038a4:	b280      	uxth	r0, r0
 80038a6:	1b92      	subs	r2, r2, r6
 80038a8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80038aa:	b212      	sxth	r2, r2
 80038ac:	47a8      	blx	r5
 80038ae:	4430      	add	r0, r6

                if (T::getAlpha() != newAlpha)
 80038b0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 80038b4:	b205      	sxth	r5, r0
 80038b6:	b283      	uxth	r3, r0
                if (T::getAlpha() != newAlpha)
 80038b8:	42aa      	cmp	r2, r5
 80038ba:	d005      	beq.n	80038c8 <_ZN8touchgfx12FadeAnimatorINS_12ToggleButtonEE15handleTickEventEv+0x4a>
                {
                    if (newAlpha == 0)
 80038bc:	bb05      	cbnz	r5, 8003900 <_ZN8touchgfx12FadeAnimatorINS_12ToggleButtonEE15handleTickEventEv+0x82>
                    {
                        // InvalidateContent before it becomes invisible
                        T::invalidateContent();
 80038be:	4620      	mov	r0, r4
 80038c0:	f7ff ff9e 	bl	8003800 <_ZNK8touchgfx6Button17invalidateContentEv>
        alpha = newAlpha;
 80038c4:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
                        T::setAlpha((uint8_t)newAlpha);
                        T::invalidateContent();
                    }
                }

                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 80038c8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80038ca:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80038cc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80038ce:	440b      	add	r3, r1
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d31b      	bcc.n	800390c <_ZN8touchgfx12FadeAnimatorINS_12ToggleButtonEE15handleTickEventEv+0x8e>
                {
                    // End of animation
                    fadeAnimationRunning = false;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
                    fadeAnimationDuration = 0;
 80038da:	87a3      	strh	r3, [r4, #60]	; 0x3c
                    Application::getInstance()->unregisterTimerWidget(this);
 80038dc:	f016 fb6c 	bl	8019fb8 <_ZN8touchgfx11Application11getInstanceEv>
 80038e0:	4621      	mov	r1, r4
 80038e2:	f016 fb94 	bl	801a00e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>

                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 80038e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80038e8:	b180      	cbz	r0, 800390c <_ZN8touchgfx12FadeAnimatorINS_12ToggleButtonEE15handleTickEventEv+0x8e>
 80038ea:	6803      	ldr	r3, [r0, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	4798      	blx	r3
 80038f0:	b160      	cbz	r0, 800390c <_ZN8touchgfx12FadeAnimatorINS_12ToggleButtonEE15handleTickEventEv+0x8e>
                    {
                        fadeAnimationEndedCallback->execute(*this);
 80038f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80038f4:	4621      	mov	r1, r4
 80038f6:	6803      	ldr	r3, [r0, #0]
    }
 80038f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	4718      	bx	r3
                        T::invalidateContent();
 8003900:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 8003902:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
                        T::invalidateContent();
 8003906:	f7ff ff7b 	bl	8003800 <_ZNK8touchgfx6Button17invalidateContentEv>
 800390a:	e7dd      	b.n	80038c8 <_ZN8touchgfx12FadeAnimatorINS_12ToggleButtonEE15handleTickEventEv+0x4a>
    }
 800390c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003910 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 8003910:	b508      	push	{r3, lr}
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <_ZNK8touchgfx6Bitmap5getIdEv+0x18>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	b92b      	cbnz	r3, 8003924 <_ZNK8touchgfx6Bitmap5getIdEv+0x14>
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>)
 800391a:	2187      	movs	r1, #135	; 0x87
 800391c:	4a04      	ldr	r2, [pc, #16]	; (8003930 <_ZNK8touchgfx6Bitmap5getIdEv+0x20>)
 800391e:	4805      	ldr	r0, [pc, #20]	; (8003934 <_ZNK8touchgfx6Bitmap5getIdEv+0x24>)
 8003920:	f024 fde4 	bl	80284ec <__assert_func>
        return bitmapId;
    }
 8003924:	8800      	ldrh	r0, [r0, #0]
 8003926:	bd08      	pop	{r3, pc}
 8003928:	2001517c 	.word	0x2001517c
 800392c:	0802b798 	.word	0x0802b798
 8003930:	0802b7d4 	.word	0x0802b7d4
 8003934:	0802b807 	.word	0x0802b807

08003938 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003938:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800393a:	b570      	push	{r4, r5, r6, lr}
 800393c:	4604      	mov	r4, r0
        setX(x);
 800393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8003940:	4615      	mov	r5, r2
        setX(x);
 8003942:	4798      	blx	r3
        setY(y);
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	4620      	mov	r0, r4
 8003948:	4629      	mov	r1, r5
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 800394c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003950:	4718      	bx	r3
	...

08003954 <_ZN8touchgfx6WidgetC1Ev>:
 8003954:	2200      	movs	r2, #0
 8003956:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800395a:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 800395e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003962:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003966:	f44f 7280 	mov.w	r2, #256	; 0x100
 800396a:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 800396c:	4a01      	ldr	r2, [pc, #4]	; (8003974 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800396e:	6002      	str	r2, [r0, #0]
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	0802b854 	.word	0x0802b854

08003978 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4604      	mov	r4, r0
 800397c:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 800397e:	2226      	movs	r2, #38	; 0x26
 8003980:	2100      	movs	r1, #0
 8003982:	f024 fe43 	bl	802860c <memset>
 8003986:	4620      	mov	r0, r4
 8003988:	f7ff ffe4 	bl	8003954 <_ZN8touchgfx6WidgetC1Ev>
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
        Image::setBitmap(bmp);
 800398e:	4620      	mov	r0, r4
 8003990:	4629      	mov	r1, r5
        : Widget(), bitmap(bmp), alpha(255)
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	882b      	ldrh	r3, [r5, #0]
 8003996:	84e3      	strh	r3, [r4, #38]	; 0x26
 8003998:	23ff      	movs	r3, #255	; 0xff
 800399a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        Image::setBitmap(bmp);
 800399e:	f014 fdaa 	bl	80184f6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80039a2:	4620      	mov	r0, r4
 80039a4:	bd38      	pop	{r3, r4, r5, pc}
 80039a6:	bf00      	nop
 80039a8:	0802df10 	.word	0x0802df10

080039ac <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 80039ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b0:	4604      	mov	r4, r0
 80039b2:	b08b      	sub	sp, #44	; 0x2c
        : presenter(0)
 80039b4:	2500      	movs	r5, #0
 80039b6:	f017 fd75 	bl	801b4a4 <_ZN8touchgfx6ScreenC1Ev>
    interaction1EndedCallback(this, &Screen1ViewBase::interaction1EndedCallbackHandler)
 80039ba:	4626      	mov	r6, r4
 80039bc:	4b81      	ldr	r3, [pc, #516]	; (8003bc4 <_ZN15Screen1ViewBaseC1Ev+0x218>)
 80039be:	63e5      	str	r5, [r4, #60]	; 0x3c
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80039c0:	4629      	mov	r1, r5
 80039c2:	f846 3b40 	str.w	r3, [r6], #64
 80039c6:	2326      	movs	r3, #38	; 0x26
 80039c8:	4630      	mov	r0, r6
 80039ca:	f104 0b6c 	add.w	fp, r4, #108	; 0x6c
 80039ce:	461a      	mov	r2, r3
        : bitmapId(id)
 80039d0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80039d4:	f024 fe1a 	bl	802860c <memset>
 80039d8:	4630      	mov	r0, r6
 80039da:	f7ff ffbb 	bl	8003954 <_ZN8touchgfx6WidgetC1Ev>
 80039de:	4a7a      	ldr	r2, [pc, #488]	; (8003bc8 <_ZN15Screen1ViewBaseC1Ev+0x21c>)
 80039e0:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 80039e4:	a908      	add	r1, sp, #32
 80039e6:	6422      	str	r2, [r4, #64]	; 0x40
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	4658      	mov	r0, fp
        : color(col)
 80039ec:	66a5      	str	r5, [r4, #104]	; 0x68
 80039ee:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 80039f2:	f104 09d8 	add.w	r9, r4, #216	; 0xd8
 80039f6:	f8ad 7020 	strh.w	r7, [sp, #32]
 80039fa:	f7ff ffbd 	bl	8003978 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
          fadeAnimationEndedCallback(0)
 80039fe:	a908      	add	r1, sp, #32
 8003a00:	4650      	mov	r0, sl
        touchable = touch;
 8003a02:	f04f 0801 	mov.w	r8, #1
 8003a06:	f8ad 7020 	strh.w	r7, [sp, #32]
 8003a0a:	f7ff ffb5 	bl	8003978 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : T(), clickAction(0)
 8003a0e:	4a6f      	ldr	r2, [pc, #444]	; (8003bcc <_ZN15Screen1ViewBaseC1Ev+0x220>)
 8003a10:	4629      	mov	r1, r5
 8003a12:	f884 80bc 	strb.w	r8, [r4, #188]	; 0xbc
 8003a16:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8003a1a:	4648      	mov	r0, r9
 8003a1c:	2236      	movs	r2, #54	; 0x36
 8003a1e:	f884 50c1 	strb.w	r5, [r4, #193]	; 0xc1
 8003a22:	f8a4 50c2 	strh.w	r5, [r4, #194]	; 0xc2
 8003a26:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
 8003a2a:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 8003a2e:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 8003a32:	f024 fdeb 	bl	802860c <memset>
        : Widget(), action(), pressed(false)
 8003a36:	2326      	movs	r3, #38	; 0x26
 8003a38:	4629      	mov	r1, r5
 8003a3a:	4648      	mov	r0, r9
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f024 fde5 	bl	802860c <memset>
 8003a42:	4648      	mov	r0, r9
 8003a44:	f7ff ff86 	bl	8003954 <_ZN8touchgfx6WidgetC1Ev>
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003a48:	2326      	movs	r3, #38	; 0x26
 8003a4a:	f884 80fc 	strb.w	r8, [r4, #252]	; 0xfc
 8003a4e:	f504 7894 	add.w	r8, r4, #296	; 0x128
 8003a52:	4a5f      	ldr	r2, [pc, #380]	; (8003bd0 <_ZN15Screen1ViewBaseC1Ev+0x224>)
 8003a54:	4629      	mov	r1, r5
 8003a56:	f8a4 7106 	strh.w	r7, [r4, #262]	; 0x106
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	f8a4 7108 	strh.w	r7, [r4, #264]	; 0x108
        : AbstractButton(), up(), down(), alpha(255)
 8003a60:	f884 710a 	strb.w	r7, [r4, #266]	; 0x10a
 8003a64:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
 8003a68:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8003a72:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003a76:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
 8003a7a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8003a7e:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 8003a82:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8003a86:	f024 fdc1 	bl	802860c <memset>
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	f7ff ff62 	bl	8003954 <_ZN8touchgfx6WidgetC1Ev>
 8003a90:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8003a94:	4b4f      	ldr	r3, [pc, #316]	; (8003bd4 <_ZN15Screen1ViewBaseC1Ev+0x228>)
        setXY(x, y);
 8003a96:	4629      	mov	r1, r5
 8003a98:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8003aa4:	4630      	mov	r0, r6
        : typedTextId(id)
 8003aa6:	4b4c      	ldr	r3, [pc, #304]	; (8003bd8 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 8003aa8:	f8a4 7154 	strh.w	r7, [r4, #340]	; 0x154
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003aac:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
 8003ab0:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
        : color(col)
 8003ab4:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 8003ab8:	f8a4 5160 	strh.w	r5, [r4, #352]	; 0x160
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003abc:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8003ac0:	e9c4 255a 	strd	r2, r5, [r4, #360]	; 0x168
        : pobject(pObject), pmemfun(pmemfun_1)
 8003ac4:	4a45      	ldr	r2, [pc, #276]	; (8003bdc <_ZN15Screen1ViewBaseC1Ev+0x230>)
 8003ac6:	e9c4 245c 	strd	r2, r4, [r4, #368]	; 0x170
 8003aca:	4a45      	ldr	r2, [pc, #276]	; (8003be0 <_ZN15Screen1ViewBaseC1Ev+0x234>)
 8003acc:	e9c4 255e 	strd	r2, r5, [r4, #376]	; 0x178
 8003ad0:	4a44      	ldr	r2, [pc, #272]	; (8003be4 <_ZN15Screen1ViewBaseC1Ev+0x238>)
 8003ad2:	e9c4 2460 	strd	r2, r4, [r4, #384]	; 0x180
 8003ad6:	4a44      	ldr	r2, [pc, #272]	; (8003be8 <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 8003ad8:	e9c4 2562 	strd	r2, r5, [r4, #392]	; 0x188
 8003adc:	462a      	mov	r2, r5
 8003ade:	f7ff ff2b 	bl	8003938 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003ae2:	4630      	mov	r0, r6
 8003ae4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003ae8:	f7ff fde0 	bl	80036ac <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003aec:	4630      	mov	r0, r6
 8003aee:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003af2:	f7ff fddd 	bl	80036b0 <_ZN8touchgfx8Drawable9setHeightEs>
    image1.setXY(0, 0);
 8003af6:	462a      	mov	r2, r5
 8003af8:	4629      	mov	r1, r5
 8003afa:	4658      	mov	r0, fp
 8003afc:	66a7      	str	r7, [r4, #104]	; 0x68
 8003afe:	f7ff ff1b 	bl	8003938 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_480X272PX_ID));
 8003b02:	a908      	add	r1, sp, #32
 8003b04:	4658      	mov	r0, fp
 8003b06:	f8ad 5020 	strh.w	r5, [sp, #32]
 8003b0a:	f014 fcf4 	bl	80184f6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    image2.setXY(-135, -345);
 8003b0e:	4650      	mov	r0, sl
 8003b10:	f46f 72ac 	mvn.w	r2, #344	; 0x158
 8003b14:	f06f 0186 	mvn.w	r1, #134	; 0x86
 8003b18:	f7ff ff0e 	bl	8003938 <_ZN8touchgfx8Drawable5setXYEss>
 8003b1c:	2203      	movs	r2, #3
    image2.setBitmap(touchgfx::Bitmap(BITMAP_GNOMED_ID));
 8003b1e:	a908      	add	r1, sp, #32
 8003b20:	4650      	mov	r0, sl
 8003b22:	f8ad 2020 	strh.w	r2, [sp, #32]
 8003b26:	f014 fce6 	bl	80184f6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    toggleButton1.setXY(352, 0);
 8003b2a:	462a      	mov	r2, r5
 8003b2c:	4648      	mov	r0, r9
 8003b2e:	f44f 71b0 	mov.w	r1, #352	; 0x160
        alpha = newAlpha;
 8003b32:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
 8003b36:	f7ff feff 	bl	8003938 <_ZN8touchgfx8Drawable5setXYEss>
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f04f 0301 	mov.w	r3, #1
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 8003b40:	a907      	add	r1, sp, #28
 8003b42:	4648      	mov	r0, r9
 8003b44:	f8ad 2020 	strh.w	r2, [sp, #32]
 8003b48:	aa08      	add	r2, sp, #32
 8003b4a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003b4e:	f7ff fe45 	bl	80037dc <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    toggleButton1.setAction(buttonCallback);
 8003b52:	f504 72b8 	add.w	r2, r4, #368	; 0x170
    textArea1.setXY(194, 112);
 8003b56:	4640      	mov	r0, r8
 8003b58:	21c2      	movs	r1, #194	; 0xc2
        action = &callback;
 8003b5a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003b5e:	2270      	movs	r2, #112	; 0x70
 8003b60:	f7ff feea 	bl	8003938 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003b64:	f8c4 7158 	str.w	r7, [r4, #344]	; 0x158
        boundingArea = calculateBoundingArea();
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	4641      	mov	r1, r8
        linespace = space;
 8003b6c:	f8a4 515c 	strh.w	r5, [r4, #348]	; 0x15c
        boundingArea = calculateBoundingArea();
 8003b70:	4638      	mov	r0, r7
 8003b72:	f014 f92b 	bl	8017dcc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003b76:	f504 7cb2 	add.w	ip, r4, #356	; 0x164
 8003b7a:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 8003b7c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003b80:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_98YR));
 8003b84:	a908      	add	r1, sp, #32
 8003b86:	4640      	mov	r0, r8
 8003b88:	9308      	str	r3, [sp, #32]
 8003b8a:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 8003b8e:	f014 fbad 	bl	80182ec <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003b92:	1d20      	adds	r0, r4, #4
 8003b94:	4631      	mov	r1, r6
 8003b96:	9001      	str	r0, [sp, #4]
 8003b98:	f012 fe26 	bl	80167e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b9c:	4659      	mov	r1, fp
 8003b9e:	9801      	ldr	r0, [sp, #4]
 8003ba0:	f012 fe22 	bl	80167e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003ba4:	4651      	mov	r1, sl
 8003ba6:	9801      	ldr	r0, [sp, #4]
 8003ba8:	f012 fe1e 	bl	80167e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bac:	4649      	mov	r1, r9
 8003bae:	9801      	ldr	r0, [sp, #4]
 8003bb0:	f012 fe1a 	bl	80167e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003bb4:	9801      	ldr	r0, [sp, #4]
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	f012 fe16 	bl	80167e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	b00b      	add	sp, #44	; 0x2c
 8003bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc4:	0802b9dc 	.word	0x0802b9dc
 8003bc8:	0802dea8 	.word	0x0802dea8
 8003bcc:	0802b8bc 	.word	0x0802b8bc
 8003bd0:	0802b930 	.word	0x0802b930
 8003bd4:	0802de18 	.word	0x0802de18
 8003bd8:	0802b390 	.word	0x0802b390
 8003bdc:	0802b9ac 	.word	0x0802b9ac
 8003be0:	08003cc1 	.word	0x08003cc1
 8003be4:	0802b9c4 	.word	0x0802b9c4
 8003be8:	0800370f 	.word	0x0800370f

08003bec <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>:
        if (fadeAnimationRunning)
 8003bec:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    void nextFadeAnimationStep()
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	4604      	mov	r4, r0
        if (fadeAnimationRunning)
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d03f      	beq.n	8003c78 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8c>
            fadeAnimationCounter++;
 8003bf8:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8003bfa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
            fadeAnimationCounter++;
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	b280      	uxth	r0, r0
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8003c00:	4298      	cmp	r0, r3
            fadeAnimationCounter++;
 8003c02:	8560      	strh	r0, [r4, #42]	; 0x2a
            if (fadeAnimationCounter >= fadeAnimationDelay)
 8003c04:	d338      	bcc.n	8003c78 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8c>
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8003c06:	8e26      	ldrh	r6, [r4, #48]	; 0x30
 8003c08:	1ac0      	subs	r0, r0, r3
 8003c0a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003c10:	b280      	uxth	r0, r0
 8003c12:	1b92      	subs	r2, r2, r6
 8003c14:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003c16:	b212      	sxth	r2, r2
 8003c18:	47a8      	blx	r5
 8003c1a:	4430      	add	r0, r6
                if (T::getAlpha() != newAlpha)
 8003c1c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
                int16_t newAlpha = fadeAnimationStartAlpha + (int16_t)fadeAnimationAlphaEquation(actualAnimationCounter, 0, fadeAnimationEndAlpha - fadeAnimationStartAlpha, fadeAnimationDuration);
 8003c20:	b205      	sxth	r5, r0
 8003c22:	b283      	uxth	r3, r0
                if (T::getAlpha() != newAlpha)
 8003c24:	42aa      	cmp	r2, r5
 8003c26:	d005      	beq.n	8003c34 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x48>
                    if (newAlpha == 0)
 8003c28:	bb05      	cbnz	r5, 8003c6c <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x80>
                        T::invalidateContent();
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f7ff fde1 	bl	80037f2 <_ZNK8touchgfx5Image17invalidateContentEv>
 8003c30:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
                if (fadeAnimationCounter >= (uint32_t)(fadeAnimationDelay + fadeAnimationDuration))
 8003c34:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8003c36:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003c38:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003c3a:	440b      	add	r3, r1
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d31b      	bcc.n	8003c78 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8c>
                    fadeAnimationRunning = false;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
                    fadeAnimationDuration = 0;
 8003c46:	85e3      	strh	r3, [r4, #46]	; 0x2e
                    Application::getInstance()->unregisterTimerWidget(this);
 8003c48:	f016 f9b6 	bl	8019fb8 <_ZN8touchgfx11Application11getInstanceEv>
 8003c4c:	4621      	mov	r1, r4
 8003c4e:	f016 f9de 	bl	801a00e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
                    if (fadeAnimationEndedCallback && fadeAnimationEndedCallback->isValid())
 8003c52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c54:	b180      	cbz	r0, 8003c78 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8c>
 8003c56:	6803      	ldr	r3, [r0, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4798      	blx	r3
 8003c5c:	b160      	cbz	r0, 8003c78 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x8c>
                        fadeAnimationEndedCallback->execute(*this);
 8003c5e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c60:	4621      	mov	r1, r4
 8003c62:	6803      	ldr	r3, [r0, #0]
                    }
                }
            }
        }
    }
 8003c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                        fadeAnimationEndedCallback->execute(*this);
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	4718      	bx	r3
                        T::invalidateContent();
 8003c6c:	4620      	mov	r0, r4
                        T::setAlpha((uint8_t)newAlpha);
 8003c6e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                        T::invalidateContent();
 8003c72:	f7ff fdbe 	bl	80037f2 <_ZNK8touchgfx5Image17invalidateContentEv>
 8003c76:	e7dd      	b.n	8003c34 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv+0x48>
    }
 8003c78:	bd70      	pop	{r4, r5, r6, pc}

08003c7a <_ZN8touchgfx12FadeAnimatorINS_5ImageEE15handleTickEventEv>:
    virtual void handleTickEvent()
 8003c7a:	b508      	push	{r3, lr}
        nextFadeAnimationStep();
 8003c7c:	f7ff ffb6 	bl	8003bec <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>
    }
 8003c80:	bd08      	pop	{r3, pc}

08003c82 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>:
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 8003c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c84:	461d      	mov	r5, r3
        if (!fadeAnimationRunning)
 8003c86:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    void startFadeAnimation(uint8_t endAlpha, uint16_t duration, EasingEquation alphaProgressionEquation = &EasingEquations::linearEaseNone)
 8003c8a:	4604      	mov	r4, r0
 8003c8c:	460f      	mov	r7, r1
 8003c8e:	4616      	mov	r6, r2
        if (!fadeAnimationRunning)
 8003c90:	b923      	cbnz	r3, 8003c9c <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE+0x1a>
            Application::getInstance()->registerTimerWidget(this);
 8003c92:	f016 f991 	bl	8019fb8 <_ZN8touchgfx11Application11getInstanceEv>
 8003c96:	4621      	mov	r1, r4
 8003c98:	f016 f994 	bl	8019fc4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        fadeAnimationCounter = 0;
 8003c9c:	2300      	movs	r3, #0
        fadeAnimationDuration = duration;
 8003c9e:	85e6      	strh	r6, [r4, #46]	; 0x2e
        fadeAnimationEndAlpha = endAlpha;
 8003ca0:	8667      	strh	r7, [r4, #50]	; 0x32
        fadeAnimationCounter = 0;
 8003ca2:	8563      	strh	r3, [r4, #42]	; 0x2a
        fadeAnimationStartAlpha = T::getAlpha();
 8003ca4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
        fadeAnimationAlphaEquation = alphaProgressionEquation;
 8003ca8:	6365      	str	r5, [r4, #52]	; 0x34
        fadeAnimationStartAlpha = T::getAlpha();
 8003caa:	8623      	strh	r3, [r4, #48]	; 0x30
        fadeAnimationRunning = true;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        if (fadeAnimationDelay == 0 && fadeAnimationDuration == 0)
 8003cb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cb4:	b913      	cbnz	r3, 8003cbc <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE+0x3a>
            nextFadeAnimationStep(); // Set end alpha and shut down
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f7ff ff98 	bl	8003bec <_ZN8touchgfx12FadeAnimatorINS_5ImageEE21nextFadeAnimationStepEv>
    }
 8003cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cc0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	4604      	mov	r4, r0
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
    {
        return up.getId() == originalPressed.getId();
 8003cc4:	f500 7083 	add.w	r0, r0, #262	; 0x106
 8003cc8:	f7ff fe22 	bl	8003910 <_ZNK8touchgfx6Bitmap5getIdEv>
 8003ccc:	4605      	mov	r5, r0
 8003cce:	f504 7086 	add.w	r0, r4, #268	; 0x10c
        //Fade image2 to alpha:255 with LinearIn easing in 2000 ms (120 Ticks)
    if (toggleButton1.getState() == 1)
    {
		image2.clearFadeAnimationEndedAction();
		image2.startFadeAnimation(255, 120, touchgfx::EasingEquations::linearEaseIn);
		image2.setFadeAnimationEndedAction(interaction1EndedCallback);
 8003cd2:	f504 77c0 	add.w	r7, r4, #384	; 0x180
 8003cd6:	f7ff fe1b 	bl	8003910 <_ZNK8touchgfx6Bitmap5getIdEv>
 8003cda:	4603      	mov	r3, r0

			//Interaction2
			//When toggleButton1 clicked hide textArea1
			//Hide textArea1
		textArea1.setVisible(false);
		textArea1.invalidate();
 8003cdc:	f504 7694 	add.w	r6, r4, #296	; 0x128
		image2.startFadeAnimation(255, 120, touchgfx::EasingEquations::linearEaseIn);
 8003ce0:	f104 0098 	add.w	r0, r4, #152	; 0x98
    if (toggleButton1.getState() == 1)
 8003ce4:	429d      	cmp	r5, r3
 8003ce6:	f04f 0500 	mov.w	r5, #0
		image2.startFadeAnimation(255, 120, touchgfx::EasingEquations::linearEaseIn);
 8003cea:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x60>)
        fadeAnimationEndedCallback = 0;
 8003cec:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
    if (toggleButton1.getState() == 1)
 8003cf0:	d10c      	bne.n	8003d0c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4c>
		image2.startFadeAnimation(255, 120, touchgfx::EasingEquations::linearEaseIn);
 8003cf2:	2278      	movs	r2, #120	; 0x78
 8003cf4:	21ff      	movs	r1, #255	; 0xff
 8003cf6:	f7ff ffc4 	bl	8003c82 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
        fadeAnimationEndedCallback = &callback;
 8003cfa:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
        visible = vis;
 8003cfe:	f884 514d 	strb.w	r5, [r4, #333]	; 0x14d
    	image2.startFadeAnimation(0, 0, touchgfx::EasingEquations::linearEaseIn);
    	image2.setFadeAnimationEndedAction(interaction1EndedCallback);


    	textArea1.setVisible(true);
    	textArea1.invalidate();
 8003d02:	4630      	mov	r0, r6
    }

}
 8003d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    	textArea1.invalidate();
 8003d08:	f017 b92a 	b.w	801af60 <_ZNK8touchgfx8Drawable10invalidateEv>
    	image2.startFadeAnimation(0, 0, touchgfx::EasingEquations::linearEaseIn);
 8003d0c:	462a      	mov	r2, r5
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7ff ffb7 	bl	8003c82 <_ZN8touchgfx12FadeAnimatorINS_5ImageEE18startFadeAnimationEhtPFstsstE>
 8003d14:	2301      	movs	r3, #1
 8003d16:	f8c4 70d0 	str.w	r7, [r4, #208]	; 0xd0
 8003d1a:	f884 314d 	strb.w	r3, [r4, #333]	; 0x14d
 8003d1e:	e7f0      	b.n	8003d02 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x42>
 8003d20:	0801b863 	.word	0x0801b863

08003d24 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003d24:	4770      	bx	lr
	...

08003d28 <_Z23getFont_verdana_10_4bppv>:
{
 8003d28:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003d2a:	4d15      	ldr	r5, [pc, #84]	; (8003d80 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8003d2c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003d2e:	782c      	ldrb	r4, [r5, #0]
 8003d30:	f3bf 8f5b 	dmb	ish
 8003d34:	f014 0401 	ands.w	r4, r4, #1
 8003d38:	d11e      	bne.n	8003d78 <_Z23getFont_verdana_10_4bppv+0x50>
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f024 fbaa 	bl	8028494 <__cxa_guard_acquire>
 8003d40:	b1d0      	cbz	r0, 8003d78 <_Z23getFont_verdana_10_4bppv+0x50>
 8003d42:	233f      	movs	r3, #63	; 0x3f
 8003d44:	2201      	movs	r2, #1
 8003d46:	490f      	ldr	r1, [pc, #60]	; (8003d84 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8003d48:	9307      	str	r3, [sp, #28]
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003d4c:	480f      	ldr	r0, [pc, #60]	; (8003d8c <_Z23getFont_verdana_10_4bppv+0x64>)
 8003d4e:	9306      	str	r3, [sp, #24]
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003d52:	9408      	str	r4, [sp, #32]
 8003d54:	9403      	str	r4, [sp, #12]
 8003d56:	9400      	str	r4, [sp, #0]
 8003d58:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003d62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d66:	230a      	movs	r3, #10
 8003d68:	f7ff fc70 	bl	800364c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003d6c:	4809      	ldr	r0, [pc, #36]	; (8003d94 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003d6e:	f024 fbdb 	bl	8028528 <atexit>
 8003d72:	4628      	mov	r0, r5
 8003d74:	f024 fb9a 	bl	80284ac <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003d78:	4804      	ldr	r0, [pc, #16]	; (8003d8c <_Z23getFont_verdana_10_4bppv+0x64>)
 8003d7a:	b00d      	add	sp, #52	; 0x34
 8003d7c:	bd30      	pop	{r4, r5, pc}
 8003d7e:	bf00      	nop
 8003d80:	20001dac 	.word	0x20001dac
 8003d84:	901b7abc 	.word	0x901b7abc
 8003d88:	0802e3e8 	.word	0x0802e3e8
 8003d8c:	20001db0 	.word	0x20001db0
 8003d90:	0802e3f4 	.word	0x0802e3f4
 8003d94:	08003d25 	.word	0x08003d25

08003d98 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003d98:	4770      	bx	lr
	...

08003d9c <_Z23getFont_verdana_20_4bppv>:
{
 8003d9c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003d9e:	4d15      	ldr	r5, [pc, #84]	; (8003df4 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8003da0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003da2:	782c      	ldrb	r4, [r5, #0]
 8003da4:	f3bf 8f5b 	dmb	ish
 8003da8:	f014 0401 	ands.w	r4, r4, #1
 8003dac:	d11f      	bne.n	8003dee <_Z23getFont_verdana_20_4bppv+0x52>
 8003dae:	4628      	mov	r0, r5
 8003db0:	f024 fb70 	bl	8028494 <__cxa_guard_acquire>
 8003db4:	b1d8      	cbz	r0, 8003dee <_Z23getFont_verdana_20_4bppv+0x52>
 8003db6:	233f      	movs	r3, #63	; 0x3f
 8003db8:	2201      	movs	r2, #1
 8003dba:	490f      	ldr	r1, [pc, #60]	; (8003df8 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8003dbc:	9307      	str	r3, [sp, #28]
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <_Z23getFont_verdana_20_4bppv+0x60>)
 8003dc0:	480f      	ldr	r0, [pc, #60]	; (8003e00 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003dc2:	9306      	str	r3, [sp, #24]
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003dc6:	9408      	str	r4, [sp, #32]
 8003dc8:	9403      	str	r4, [sp, #12]
 8003dca:	9400      	str	r4, [sp, #0]
 8003dcc:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003dd6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003dda:	2314      	movs	r3, #20
 8003ddc:	220a      	movs	r2, #10
 8003dde:	f7ff fc35 	bl	800364c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003de2:	4809      	ldr	r0, [pc, #36]	; (8003e08 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003de4:	f024 fba0 	bl	8028528 <atexit>
 8003de8:	4628      	mov	r0, r5
 8003dea:	f024 fb5f 	bl	80284ac <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003dee:	4804      	ldr	r0, [pc, #16]	; (8003e00 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003df0:	b00d      	add	sp, #52	; 0x34
 8003df2:	bd30      	pop	{r4, r5, pc}
 8003df4:	20001dd8 	.word	0x20001dd8
 8003df8:	901b7acc 	.word	0x901b7acc
 8003dfc:	0802e3ec 	.word	0x0802e3ec
 8003e00:	20001ddc 	.word	0x20001ddc
 8003e04:	0802e3f8 	.word	0x0802e3f8
 8003e08:	08003d99 	.word	0x08003d99

08003e0c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003e0c:	4770      	bx	lr
	...

08003e10 <_Z23getFont_verdana_40_4bppv>:
{
 8003e10:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003e12:	4d15      	ldr	r5, [pc, #84]	; (8003e68 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8003e14:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003e16:	782c      	ldrb	r4, [r5, #0]
 8003e18:	f3bf 8f5b 	dmb	ish
 8003e1c:	f014 0401 	ands.w	r4, r4, #1
 8003e20:	d11e      	bne.n	8003e60 <_Z23getFont_verdana_40_4bppv+0x50>
 8003e22:	4628      	mov	r0, r5
 8003e24:	f024 fb36 	bl	8028494 <__cxa_guard_acquire>
 8003e28:	b1d0      	cbz	r0, 8003e60 <_Z23getFont_verdana_40_4bppv+0x50>
 8003e2a:	233f      	movs	r3, #63	; 0x3f
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	490f      	ldr	r1, [pc, #60]	; (8003e6c <_Z23getFont_verdana_40_4bppv+0x5c>)
 8003e30:	9307      	str	r3, [sp, #28]
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003e34:	480f      	ldr	r0, [pc, #60]	; (8003e74 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003e36:	9306      	str	r3, [sp, #24]
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003e3a:	9408      	str	r4, [sp, #32]
 8003e3c:	9403      	str	r4, [sp, #12]
 8003e3e:	9400      	str	r4, [sp, #0]
 8003e40:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003e44:	2304      	movs	r3, #4
 8003e46:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003e4a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003e4e:	2328      	movs	r3, #40	; 0x28
 8003e50:	f7ff fbfc 	bl	800364c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003e54:	4809      	ldr	r0, [pc, #36]	; (8003e7c <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003e56:	f024 fb67 	bl	8028528 <atexit>
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	f024 fb26 	bl	80284ac <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003e60:	4804      	ldr	r0, [pc, #16]	; (8003e74 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003e62:	b00d      	add	sp, #52	; 0x34
 8003e64:	bd30      	pop	{r4, r5, pc}
 8003e66:	bf00      	nop
 8003e68:	20001e04 	.word	0x20001e04
 8003e6c:	901b7b58 	.word	0x901b7b58
 8003e70:	0802e3f0 	.word	0x0802e3f0
 8003e74:	20001e08 	.word	0x20001e08
 8003e78:	0802e3fc 	.word	0x0802e3fc
 8003e7c:	08003e0d 	.word	0x08003e0d

08003e80 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003e80:	2000      	movs	r0, #0
 8003e82:	4770      	bx	lr

08003e84 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003e84:	2000      	movs	r0, #0
 8003e86:	4770      	bx	lr

08003e88 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003e88:	b40e      	push	{r1, r2, r3}
 8003e8a:	b503      	push	{r0, r1, lr}
 8003e8c:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003e8e:	2100      	movs	r1, #0
{
 8003e90:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003e94:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003e96:	f016 ff41 	bl	801ad1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003e9a:	b002      	add	sp, #8
 8003e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ea0:	b003      	add	sp, #12
 8003ea2:	4770      	bx	lr

08003ea4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003ea4:	b40c      	push	{r2, r3}
 8003ea6:	b507      	push	{r0, r1, r2, lr}
 8003ea8:	ab04      	add	r3, sp, #16
 8003eaa:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003eae:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003eb0:	f016 ff34 	bl	801ad1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003eb4:	b003      	add	sp, #12
 8003eb6:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eba:	b002      	add	sp, #8
 8003ebc:	4770      	bx	lr
	...

08003ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003ec0:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003ec2:	b510      	push	{r4, lr}
 8003ec4:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003ec6:	b373      	cbz	r3, 8003f26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003ec8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003eca:	b92b      	cbnz	r3, 8003ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003ece:	21c0      	movs	r1, #192	; 0xc0
 8003ed0:	4a18      	ldr	r2, [pc, #96]	; (8003f34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003ed2:	4819      	ldr	r0, [pc, #100]	; (8003f38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003ed4:	f024 fb0a 	bl	80284ec <__assert_func>
            return buffer[pos];
 8003ed8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003eda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003ede:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003ee0:	b30b      	cbz	r3, 8003f26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003ee2:	f018 f9eb 	bl	801c2bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003ee6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d803      	bhi.n	8003ef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003eec:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003eee:	21c5      	movs	r1, #197	; 0xc5
 8003ef0:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003ef2:	e7ee      	b.n	8003ed2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003ef4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003ef6:	f640 103f 	movw	r0, #2367	; 0x93f
 8003efa:	1c53      	adds	r3, r2, #1
 8003efc:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003efe:	2b09      	cmp	r3, #9
 8003f00:	4619      	mov	r1, r3
 8003f02:	bf88      	it	hi
 8003f04:	f1a3 010a 	subhi.w	r1, r3, #10
 8003f08:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003f0c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003f0e:	4281      	cmp	r1, r0
 8003f10:	d109      	bne.n	8003f26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003f12:	2b0a      	cmp	r3, #10
 8003f14:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003f18:	bf28      	it	cs
 8003f1a:	2300      	movcs	r3, #0
            return buffer[pos];
 8003f1c:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003f1e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003f22:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003f24:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003f26:	4620      	mov	r0, r4
}
 8003f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003f2c:	f018 b8c8 	b.w	801c0c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003f30:	0802ba08 	.word	0x0802ba08
 8003f34:	0802ba11 	.word	0x0802ba11
 8003f38:	0802babc 	.word	0x0802babc
 8003f3c:	0802bb06 	.word	0x0802bb06
 8003f40:	0802bb14 	.word	0x0802bb14

08003f44 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003f44:	f018 b885 	b.w	801c052 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003f48 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	ac02      	add	r4, sp, #8
 8003f4e:	e884 0006 	stmia.w	r4, {r1, r2}
 8003f52:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003f54:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003f56:	4621      	mov	r1, r4
    va_start(pArg, format);
 8003f58:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	9b08      	ldr	r3, [sp, #32]
 8003f62:	f015 fb5f 	bl	8019624 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003f66:	b006      	add	sp, #24
 8003f68:	bd10      	pop	{r4, pc}
	...

08003f6c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003f6c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003f6e:	bb18      	cbnz	r0, 8003fb8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003f72:	4813      	ldr	r0, [pc, #76]	; (8003fc0 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4913      	ldr	r1, [pc, #76]	; (8003fc4 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003f78:	b1b3      	cbz	r3, 8003fa8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003f7a:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003f7c:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003f7e:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003f80:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003f82:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	441a      	add	r2, r3
 8003f88:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003f90:	f000 f838 	bl	8004004 <_ZN17TypedTextDatabase8getFontsEv>
 8003f94:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003f96:	f000 f833 	bl	8004000 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003f9c:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003fa0:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003fa4:	8018      	strh	r0, [r3, #0]
    }
}
 8003fa6:	e007      	b.n	8003fb8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003faa:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003fae:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003fb2:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003fb4:	2c00      	cmp	r4, #0
 8003fb6:	d1e8      	bne.n	8003f8a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
 8003fba:	bf00      	nop
 8003fbc:	20001e30 	.word	0x20001e30
 8003fc0:	20001e34 	.word	0x20001e34
 8003fc4:	20001e38 	.word	0x20001e38
 8003fc8:	20001e3c 	.word	0x20001e3c
 8003fcc:	20015144 	.word	0x20015144
 8003fd0:	2001514c 	.word	0x2001514c
 8003fd4:	20015148 	.word	0x20015148
 8003fd8:	901b7b6c 	.word	0x901b7b6c
 8003fdc:	901b7b68 	.word	0x901b7b68
 8003fe0:	901b7b8c 	.word	0x901b7b8c

08003fe4 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003fec:	4b03      	ldr	r3, [pc, #12]	; (8003ffc <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20001e38 	.word	0x20001e38
 8003ffc:	20001e34 	.word	0x20001e34

08004000 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004000:	2001      	movs	r0, #1
 8004002:	4770      	bx	lr

08004004 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004004:	4800      	ldr	r0, [pc, #0]	; (8004008 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8004006:	4770      	bx	lr
 8004008:	20001e40 	.word	0x20001e40

0800400c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800400c:	b510      	push	{r4, lr}
};
 800400e:	4c05      	ldr	r4, [pc, #20]	; (8004024 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8004010:	f7ff fec4 	bl	8003d9c <_Z23getFont_verdana_20_4bppv>
};
 8004014:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004016:	f7ff fefb 	bl	8003e10 <_Z23getFont_verdana_40_4bppv>
};
 800401a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 800401c:	f7ff fe84 	bl	8003d28 <_Z23getFont_verdana_10_4bppv>
};
 8004020:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8004022:	bd10      	pop	{r4, pc}
 8004024:	20001e40 	.word	0x20001e40

08004028 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004028:	4770      	bx	lr

0800402a <_ZN19FrontendApplicationD0Ev>:
 800402a:	b510      	push	{r4, lr}
 800402c:	4604      	mov	r4, r0
 800402e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004032:	f024 fa2d 	bl	8028490 <_ZdlPvj>
 8004036:	4620      	mov	r0, r4
 8004038:	bd10      	pop	{r4, pc}

0800403a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800403a:	b510      	push	{r4, lr}
 800403c:	4604      	mov	r4, r0
    {
        model.tick();
 800403e:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8004042:	f000 f812 	bl	800406a <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004046:	4620      	mov	r0, r4
    }
 8004048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800404c:	f015 be62 	b.w	8019d14 <_ZN8touchgfx11Application15handleTickEventEv>

08004050 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004050:	b510      	push	{r4, lr}
 8004052:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004054:	f7ff fa88 	bl	8003568 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004058:	4b01      	ldr	r3, [pc, #4]	; (8004060 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800405a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 800405c:	6023      	str	r3, [r4, #0]
}
 800405e:	bd10      	pop	{r4, pc}
 8004060:	0802bbf0 	.word	0x0802bbf0

08004064 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8004064:	2200      	movs	r2, #0
 8004066:	6002      	str	r2, [r0, #0]
{

}
 8004068:	4770      	bx	lr

0800406a <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800406a:	4770      	bx	lr

0800406c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800406c:	4770      	bx	lr

0800406e <_ZThn4_N16Screen1PresenterD1Ev>:
 800406e:	3804      	subs	r0, #4
 8004070:	4770      	bx	lr

08004072 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004072:	4770      	bx	lr

08004074 <_ZN16Screen1PresenterD0Ev>:
 8004074:	b510      	push	{r4, lr}
 8004076:	4604      	mov	r4, r0
 8004078:	2110      	movs	r1, #16
 800407a:	f024 fa09 	bl	8028490 <_ZdlPvj>
 800407e:	4620      	mov	r0, r4
 8004080:	bd10      	pop	{r4, pc}

08004082 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004082:	f1a0 0004 	sub.w	r0, r0, #4
 8004086:	e7f5      	b.n	8004074 <_ZN16Screen1PresenterD0Ev>

08004088 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004088:	2200      	movs	r2, #0
    : view(v)
 800408a:	60c1      	str	r1, [r0, #12]
 800408c:	6082      	str	r2, [r0, #8]
 800408e:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8004090:	b510      	push	{r4, lr}
    : view(v)
 8004092:	f102 0408 	add.w	r4, r2, #8
 8004096:	3220      	adds	r2, #32
 8004098:	6004      	str	r4, [r0, #0]
 800409a:	6042      	str	r2, [r0, #4]
}
 800409c:	bd10      	pop	{r4, pc}
 800409e:	bf00      	nop
 80040a0:	0802bc34 	.word	0x0802bc34

080040a4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80040a4:	4770      	bx	lr

080040a6 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80040a6:	4770      	bx	lr

080040a8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80040a8:	f7ff bb30 	b.w	800370c <_ZN15Screen1ViewBase11setupScreenEv>

080040ac <_ZN11Screen1ViewD0Ev>:
 80040ac:	b510      	push	{r4, lr}
 80040ae:	4604      	mov	r4, r0
 80040b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80040b4:	f024 f9ec 	bl	8028490 <_ZdlPvj>
 80040b8:	4620      	mov	r0, r4
 80040ba:	bd10      	pop	{r4, pc}

080040bc <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80040bc:	b510      	push	{r4, lr}
 80040be:	4604      	mov	r4, r0
 80040c0:	f7ff fc74 	bl	80039ac <_ZN15Screen1ViewBaseC1Ev>
 80040c4:	4b01      	ldr	r3, [pc, #4]	; (80040cc <_ZN11Screen1ViewC1Ev+0x10>)
}
 80040c6:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80040c8:	6023      	str	r3, [r4, #0]
}
 80040ca:	bd10      	pop	{r4, pc}
 80040cc:	0802bc64 	.word	0x0802bc64

080040d0 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80040d0:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80040d2:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80040d6:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80040d8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 80040dc:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80040de:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80040e0:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80040e2:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 80040e4:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 80040e6:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80040e8:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 80040ea:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 80040ec:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80040ee:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80040f0:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80040f2:	480b      	ldr	r0, [pc, #44]	; (8004120 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 80040f4:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80040f8:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80040fc:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8004100:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004102:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8004104:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004106:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800410a:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800410c:	466a      	mov	r2, sp
 800410e:	f001 fda9 	bl	8005c64 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8004112:	3800      	subs	r0, #0
 8004114:	bf18      	it	ne
 8004116:	2001      	movne	r0, #1
 8004118:	b015      	add	sp, #84	; 0x54
 800411a:	f85d fb04 	ldr.w	pc, [sp], #4
 800411e:	bf00      	nop
 8004120:	20001e4c 	.word	0x20001e4c

08004124 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8004124:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004126:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800412a:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800412c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004130:	4817      	ldr	r0, [pc, #92]	; (8004190 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004132:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004134:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004136:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004138:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800413a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800413c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004140:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8004142:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004144:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004146:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800414a:	f001 fd48 	bl	8005bde <HAL_QSPI_Command>
 800414e:	b9e0      	cbnz	r0, 800418a <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8004150:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8004152:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004154:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004158:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800415a:	480d      	ldr	r0, [pc, #52]	; (8004190 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 800415c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004160:	2310      	movs	r3, #16
 8004162:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004166:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004168:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 800416a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 800416e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004172:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004174:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004176:	f241 3388 	movw	r3, #5000	; 0x1388
 800417a:	f001 fd73 	bl	8005c64 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 800417e:	3800      	subs	r0, #0
 8004180:	bf18      	it	ne
 8004182:	2001      	movne	r0, #1
}
 8004184:	b015      	add	sp, #84	; 0x54
 8004186:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 800418a:	2001      	movs	r0, #1
 800418c:	e7fa      	b.n	8004184 <QSPI_WriteEnable.constprop.0+0x60>
 800418e:	bf00      	nop
 8004190:	20001e4c 	.word	0x20001e4c

08004194 <BSP_QSPI_EnableMemoryMappedMode>:
{
 8004194:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004196:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800419a:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800419c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80041a0:	480e      	ldr	r0, [pc, #56]	; (80041dc <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80041a2:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80041a4:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80041a6:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80041a8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80041aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80041ae:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80041b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041b4:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80041bc:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80041be:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80041c0:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80041c2:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80041c4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80041c8:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80041cc:	f001 fd9a 	bl	8005d04 <HAL_QSPI_MemoryMapped>
}
 80041d0:	3800      	subs	r0, #0
 80041d2:	bf18      	it	ne
 80041d4:	2001      	movne	r0, #1
 80041d6:	b011      	add	sp, #68	; 0x44
 80041d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80041dc:	20001e4c 	.word	0x20001e4c

080041e0 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 80041e0:	4b45      	ldr	r3, [pc, #276]	; (80042f8 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80041e2:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80041e4:	4845      	ldr	r0, [pc, #276]	; (80042fc <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 80041e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e8:	f042 0202 	orr.w	r2, r2, #2
{
 80041ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 80041ee:	639a      	str	r2, [r3, #56]	; 0x38
{
 80041f0:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 80041f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80041f4:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80041f6:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80041f8:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 80041fa:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80041fe:	4d40      	ldr	r5, [pc, #256]	; (8004300 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 8004200:	9200      	str	r2, [sp, #0]
 8004202:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	f042 0202 	orr.w	r2, r2, #2
 800420a:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	f022 0202 	bic.w	r2, r2, #2
 8004212:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8004214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004216:	f042 0202 	orr.w	r2, r2, #2
 800421a:	631a      	str	r2, [r3, #48]	; 0x30
 800421c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421e:	f002 0202 	and.w	r2, r2, #2
 8004222:	9201      	str	r2, [sp, #4]
 8004224:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8004226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004228:	f042 0202 	orr.w	r2, r2, #2
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
 800422e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004230:	f002 0202 	and.w	r2, r2, #2
 8004234:	9202      	str	r2, [sp, #8]
 8004236:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8004238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423a:	f042 0208 	orr.w	r2, r2, #8
 800423e:	631a      	str	r2, [r3, #48]	; 0x30
 8004240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004242:	f002 0208 	and.w	r2, r2, #8
 8004246:	9203      	str	r2, [sp, #12]
 8004248:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 800424a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800424c:	f042 0208 	orr.w	r2, r2, #8
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
 8004252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004254:	f002 0208 	and.w	r2, r2, #8
 8004258:	9204      	str	r2, [sp, #16]
 800425a:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 800425c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800425e:	f042 0210 	orr.w	r2, r2, #16
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
 8004264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004266:	f002 0210 	and.w	r2, r2, #16
 800426a:	9205      	str	r2, [sp, #20]
 800426c:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 800426e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004270:	f042 0208 	orr.w	r2, r2, #8
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004276:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	9306      	str	r3, [sp, #24]
 8004280:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004282:	2302      	movs	r3, #2
 8004284:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004288:	2303      	movs	r3, #3
 800428a:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800428e:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004290:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8004292:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004294:	f000 fc42 	bl	8004b1c <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8004298:	a907      	add	r1, sp, #28
 800429a:	4818      	ldr	r0, [pc, #96]	; (80042fc <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800429c:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800429e:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80042a0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80042a2:	f000 fc3b 	bl	8004b1c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80042a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80042aa:	a907      	add	r1, sp, #28
 80042ac:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80042ae:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80042b0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80042b2:	f000 fc33 	bl	8004b1c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80042b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80042ba:	a907      	add	r1, sp, #28
 80042bc:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80042be:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80042c0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80042c2:	f000 fc2b 	bl	8004b1c <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80042c6:	a907      	add	r1, sp, #28
 80042c8:	480e      	ldr	r0, [pc, #56]	; (8004304 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 80042ca:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80042cc:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 80042ce:	f000 fc25 	bl	8004b1c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80042d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80042d6:	a907      	add	r1, sp, #28
 80042d8:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80042da:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 80042dc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 80042de:	f000 fc1d 	bl	8004b1c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80042e2:	4632      	mov	r2, r6
 80042e4:	210f      	movs	r1, #15
 80042e6:	205c      	movs	r0, #92	; 0x5c
 80042e8:	f000 f9d8 	bl	800469c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80042ec:	205c      	movs	r0, #92	; 0x5c
 80042ee:	f000 fa07 	bl	8004700 <HAL_NVIC_EnableIRQ>
}
 80042f2:	b00d      	add	sp, #52	; 0x34
 80042f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40020400 	.word	0x40020400
 8004300:	40020c00 	.word	0x40020c00
 8004304:	40021000 	.word	0x40021000

08004308 <BSP_QSPI_Init>:
{ 
 8004308:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 800430a:	4c49      	ldr	r4, [pc, #292]	; (8004430 <BSP_QSPI_Init+0x128>)
{ 
 800430c:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 800430e:	4b49      	ldr	r3, [pc, #292]	; (8004434 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8004310:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8004312:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8004314:	f001 fc50 	bl	8005bb8 <HAL_QSPI_DeInit>
 8004318:	4605      	mov	r5, r0
 800431a:	b110      	cbz	r0, 8004322 <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 800431c:	2001      	movs	r0, #1
}
 800431e:	b011      	add	sp, #68	; 0x44
 8004320:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8004322:	4601      	mov	r1, r0
 8004324:	4620      	mov	r0, r4
 8004326:	f7ff ff5b 	bl	80041e0 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 800432a:	2601      	movs	r6, #1
 800432c:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8004332:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8004336:	2310      	movs	r3, #16
 8004338:	60e3      	str	r3, [r4, #12]
 800433a:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800433e:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004342:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8004344:	3b01      	subs	r3, #1
 8004346:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8004348:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 800434c:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8004350:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004354:	f001 fbdc 	bl	8005b10 <HAL_QSPI_Init>
 8004358:	2800      	cmp	r0, #0
 800435a:	d1df      	bne.n	800431c <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800435c:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004360:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8004362:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8004368:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800436a:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800436c:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800436e:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004370:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004372:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004376:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800437a:	4620      	mov	r0, r4
 800437c:	f001 fc2f 	bl	8005bde <HAL_QSPI_Command>
 8004380:	b108      	cbz	r0, 8004386 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8004382:	2004      	movs	r0, #4
 8004384:	e7cb      	b.n	800431e <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8004386:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	a902      	add	r1, sp, #8
 800438e:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8004390:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004392:	f001 fc24 	bl	8005bde <HAL_QSPI_Command>
 8004396:	2800      	cmp	r0, #0
 8004398:	d1f3      	bne.n	8004382 <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800439a:	f241 3088 	movw	r0, #5000	; 0x1388
 800439e:	f7ff fe97 	bl	80040d0 <QSPI_AutoPollingMemReady.constprop.0>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	d1ed      	bne.n	8004382 <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80043a6:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 80043a8:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80043b0:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80043b2:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80043b4:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80043b6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80043ba:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80043be:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043c2:	4620      	mov	r0, r4
 80043c4:	f001 fc0b 	bl	8005bde <HAL_QSPI_Command>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d1da      	bne.n	8004382 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	f10d 0107 	add.w	r1, sp, #7
 80043d4:	4620      	mov	r0, r4
 80043d6:	f001 fd75 	bl	8005ec4 <HAL_QSPI_Receive>
 80043da:	2800      	cmp	r0, #0
 80043dc:	d1d1      	bne.n	8004382 <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 80043de:	f7ff fea1 	bl	8004124 <QSPI_WriteEnable.constprop.0>
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d1cd      	bne.n	8004382 <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 80043e6:	2381      	movs	r3, #129	; 0x81
 80043e8:	22f0      	movs	r2, #240	; 0xf0
 80043ea:	9302      	str	r3, [sp, #8]
 80043ec:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80043f0:	210a      	movs	r1, #10
 80043f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80043f6:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80043fa:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004404:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004406:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004408:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800440c:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004410:	f001 fbe5 	bl	8005bde <HAL_QSPI_Command>
 8004414:	2800      	cmp	r0, #0
 8004416:	d1b4      	bne.n	8004382 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	f10d 0107 	add.w	r1, sp, #7
 8004420:	4620      	mov	r0, r4
 8004422:	f001 fcf3 	bl	8005e0c <HAL_QSPI_Transmit>
 8004426:	2800      	cmp	r0, #0
 8004428:	f43f af79 	beq.w	800431e <BSP_QSPI_Init+0x16>
 800442c:	e7a9      	b.n	8004382 <BSP_QSPI_Init+0x7a>
 800442e:	bf00      	nop
 8004430:	20001e4c 	.word	0x20001e4c
 8004434:	a0001000 	.word	0xa0001000

08004438 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004438:	490f      	ldr	r1, [pc, #60]	; (8004478 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800443a:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800443c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <SystemInit+0x44>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	f042 0201 	orr.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004452:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800445a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800445e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004460:	4a07      	ldr	r2, [pc, #28]	; (8004480 <SystemInit+0x48>)
 8004462:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800446a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800446c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800446e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004472:	608b      	str	r3, [r1, #8]
#endif
}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	e000ed00 	.word	0xe000ed00
 800447c:	40023800 	.word	0x40023800
 8004480:	24003010 	.word	0x24003010

08004484 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8004484:	4770      	bx	lr

08004486 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8004486:	2000      	movs	r0, #0
 8004488:	4770      	bx	lr
	...

0800448c <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 800448c:	2300      	movs	r3, #0
{
 800448e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8004490:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8004494:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	b90a      	cbnz	r2, 800449e <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]
{
 800449e:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80044a0:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80044a2:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80044a4:	21a8      	movs	r1, #168	; 0xa8
 80044a6:	4628      	mov	r0, r5
 80044a8:	f7fd fb22 	bl	8001af0 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80044ac:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80044b0:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80044b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80044b8:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80044ba:	d103      	bne.n	80044c4 <ft5336_ReadID+0x38>
  return (ucReadId);
 80044bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80044c0:	b003      	add	sp, #12
 80044c2:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80044c4:	2b51      	cmp	r3, #81	; 0x51
 80044c6:	d1ec      	bne.n	80044a2 <ft5336_ReadID+0x16>
 80044c8:	e7f8      	b.n	80044bc <ft5336_ReadID+0x30>
 80044ca:	bf00      	nop
 80044cc:	20001e9a 	.word	0x20001e9a

080044d0 <ft5336_TS_DetectTouch>:
{
 80044d0:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80044d2:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80044d4:	2102      	movs	r1, #2
 80044d6:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80044d8:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80044dc:	f7fd fb08 	bl	8001af0 <TS_IO_Read>
 80044e0:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80044e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80044f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80044f4:	2b05      	cmp	r3, #5
 80044f6:	d901      	bls.n	80044fc <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80044f8:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80044fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8004502:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004506:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8004508:	2200      	movs	r2, #0
 800450a:	709a      	strb	r2, [r3, #2]
}
 800450c:	b002      	add	sp, #8
 800450e:	bd10      	pop	{r4, pc}
 8004510:	20001e9a 	.word	0x20001e9a

08004514 <ft5336_TS_GetXY>:
{
 8004514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004518:	4d2f      	ldr	r5, [pc, #188]	; (80045d8 <ft5336_TS_GetXY+0xc4>)
{
 800451a:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 800451c:	2300      	movs	r3, #0
{
 800451e:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004520:	78ac      	ldrb	r4, [r5, #2]
 8004522:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8004524:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004528:	42a2      	cmp	r2, r4
 800452a:	d94d      	bls.n	80045c8 <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 800452c:	2c09      	cmp	r4, #9
 800452e:	d84e      	bhi.n	80045ce <ft5336_TS_GetXY+0xba>
 8004530:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	1d19      	adds	r1, r3, #4
 800453a:	f103 0b03 	add.w	fp, r3, #3
 800453e:	f103 0a06 	add.w	sl, r3, #6
 8004542:	3305      	adds	r3, #5
 8004544:	b2c9      	uxtb	r1, r1
 8004546:	fa5f fb8b 	uxtb.w	fp, fp
 800454a:	fa5f fa8a 	uxtb.w	sl, sl
 800454e:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004552:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004554:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80045dc <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004558:	4620      	mov	r0, r4
 800455a:	f7fd fac9 	bl	8001af0 <TS_IO_Read>
 800455e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004562:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004566:	4659      	mov	r1, fp
 8004568:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800456a:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800456e:	f7fd fabf 	bl	8001af0 <TS_IO_Read>
 8004572:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004576:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8004578:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800457c:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800457e:	f8b9 2000 	ldrh.w	r2, [r9]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004588:	4313      	orrs	r3, r2
    *X = coord;
 800458a:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800458c:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004590:	f7fd faae 	bl	8001af0 <TS_IO_Read>
 8004594:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8004598:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800459a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800459e:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80045a0:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80045a4:	f7fd faa4 	bl	8001af0 <TS_IO_Read>
 80045a8:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80045ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045b0:	f8b9 2000 	ldrh.w	r2, [r9]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 80045c0:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80045c2:	78ab      	ldrb	r3, [r5, #2]
 80045c4:	3301      	adds	r3, #1
 80045c6:	70ab      	strb	r3, [r5, #2]
}
 80045c8:	b003      	add	sp, #12
 80045ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80045ce:	4698      	mov	r8, r3
 80045d0:	469a      	mov	sl, r3
 80045d2:	469b      	mov	fp, r3
 80045d4:	4619      	mov	r1, r3
 80045d6:	e7bc      	b.n	8004552 <ft5336_TS_GetXY+0x3e>
 80045d8:	20001e9a 	.word	0x20001e9a
 80045dc:	20001e98 	.word	0x20001e98

080045e0 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80045e0:	2201      	movs	r2, #1
 80045e2:	21a4      	movs	r1, #164	; 0xa4
 80045e4:	b2c0      	uxtb	r0, r0
 80045e6:	f7fd ba69 	b.w	8001abc <TS_IO_Write>

080045ea <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80045ea:	2200      	movs	r2, #0
 80045ec:	21a4      	movs	r1, #164	; 0xa4
 80045ee:	b2c0      	uxtb	r0, r0
 80045f0:	f7fd ba64 	b.w	8001abc <TS_IO_Write>

080045f4 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 80045f4:	f7ff bff9 	b.w	80045ea <ft5336_TS_DisableIT>

080045f8 <ft5336_TS_ClearIT>:
 80045f8:	4770      	bx	lr
	...

080045fc <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 80045fc:	4b02      	ldr	r3, [pc, #8]	; (8004608 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	b90a      	cbnz	r2, 8004606 <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
}
 8004606:	4770      	bx	lr
 8004608:	20001e9a 	.word	0x20001e9a

0800460c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800460c:	4a07      	ldr	r2, [pc, #28]	; (800462c <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800460e:	2003      	movs	r0, #3
{
 8004610:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004618:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800461a:	f000 f82d 	bl	8004678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800461e:	2000      	movs	r0, #0
 8004620:	f7fd f906 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004624:	f7fc fea8 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004628:	2000      	movs	r0, #0
 800462a:	bd08      	pop	{r3, pc}
 800462c:	40023c00 	.word	0x40023c00

08004630 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004630:	4a03      	ldr	r2, [pc, #12]	; (8004640 <HAL_IncTick+0x10>)
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <HAL_IncTick+0x14>)
 8004634:	6811      	ldr	r1, [r2, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	440b      	add	r3, r1
 800463a:	6013      	str	r3, [r2, #0]
}
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20001ea0 	.word	0x20001ea0
 8004644:	20000038 	.word	0x20000038

08004648 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004648:	4b01      	ldr	r3, [pc, #4]	; (8004650 <HAL_GetTick+0x8>)
 800464a:	6818      	ldr	r0, [r3, #0]
}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20001ea0 	.word	0x20001ea0

08004654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004658:	f7ff fff6 	bl	8004648 <HAL_GetTick>
 800465c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800465e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004660:	bf1e      	ittt	ne
 8004662:	4b04      	ldrne	r3, [pc, #16]	; (8004674 <HAL_Delay+0x20>)
 8004664:	781b      	ldrbne	r3, [r3, #0]
 8004666:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004668:	f7ff ffee 	bl	8004648 <HAL_GetTick>
 800466c:	1b43      	subs	r3, r0, r5
 800466e:	42a3      	cmp	r3, r4
 8004670:	d3fa      	bcc.n	8004668 <HAL_Delay+0x14>
  {
  }
}
 8004672:	bd38      	pop	{r3, r4, r5, pc}
 8004674:	20000038 	.word	0x20000038

08004678 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004678:	4907      	ldr	r1, [pc, #28]	; (8004698 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800467a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800467c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800467e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004686:	0412      	lsls	r2, r2, #16
 8004688:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800468a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800468c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004694:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004696:	4770      	bx	lr
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800469c:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800469e:	b530      	push	{r4, r5, lr}
 80046a0:	68dc      	ldr	r4, [r3, #12]
 80046a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046aa:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046ac:	2d04      	cmp	r5, #4
 80046ae:	bf28      	it	cs
 80046b0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046b2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046b8:	bf8c      	ite	hi
 80046ba:	3c03      	subhi	r4, #3
 80046bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046be:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80046c2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046c4:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c8:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046cc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d0:	fa01 f104 	lsl.w	r1, r1, r4
 80046d4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80046dc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80046de:	db06      	blt.n	80046ee <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80046e4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80046e8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80046ec:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ee:	f000 000f 	and.w	r0, r0, #15
 80046f2:	4a02      	ldr	r2, [pc, #8]	; (80046fc <HAL_NVIC_SetPriority+0x60>)
 80046f4:	5413      	strb	r3, [r2, r0]
 80046f6:	e7f9      	b.n	80046ec <HAL_NVIC_SetPriority+0x50>
 80046f8:	e000ed00 	.word	0xe000ed00
 80046fc:	e000ed14 	.word	0xe000ed14

08004700 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004700:	2800      	cmp	r0, #0
 8004702:	db08      	blt.n	8004716 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004704:	0942      	lsrs	r2, r0, #5
 8004706:	2301      	movs	r3, #1
 8004708:	f000 001f 	and.w	r0, r0, #31
 800470c:	fa03 f000 	lsl.w	r0, r3, r0
 8004710:	4b01      	ldr	r3, [pc, #4]	; (8004718 <HAL_NVIC_EnableIRQ+0x18>)
 8004712:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004716:	4770      	bx	lr
 8004718:	e000e100 	.word	0xe000e100

0800471c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800471c:	2800      	cmp	r0, #0
 800471e:	db0d      	blt.n	800473c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004720:	0943      	lsrs	r3, r0, #5
 8004722:	2201      	movs	r2, #1
 8004724:	f000 001f 	and.w	r0, r0, #31
 8004728:	3320      	adds	r3, #32
 800472a:	fa02 f000 	lsl.w	r0, r2, r0
 800472e:	4a04      	ldr	r2, [pc, #16]	; (8004740 <HAL_NVIC_DisableIRQ+0x24>)
 8004730:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004734:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004738:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	e000e100 	.word	0xe000e100

08004744 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004744:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <HAL_MPU_Disable+0x18>)
 800474a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800474c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004750:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004752:	2200      	movs	r2, #0
 8004754:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <HAL_MPU_Enable+0x1c>)
 8004762:	f040 0001 	orr.w	r0, r0, #1
 8004766:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800476a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800476c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004770:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004772:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004776:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800477a:	4770      	bx	lr
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004780:	7843      	ldrb	r3, [r0, #1]
 8004782:	4a14      	ldr	r2, [pc, #80]	; (80047d4 <HAL_MPU_ConfigRegion+0x54>)
{
 8004784:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8004786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 800478a:	7801      	ldrb	r1, [r0, #0]
 800478c:	b1e9      	cbz	r1, 80047ca <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800478e:	6843      	ldr	r3, [r0, #4]
 8004790:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004794:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004796:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004798:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800479a:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800479e:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80047a0:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80047a2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80047a6:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80047a8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80047ac:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80047ae:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80047b2:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80047b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80047b8:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80047ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047be:	7a01      	ldrb	r1, [r0, #8]
 80047c0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80047c4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80047c8:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80047ca:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80047ce:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 80047d2:	e7f9      	b.n	80047c8 <HAL_MPU_ConfigRegion+0x48>
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80047d8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047da:	4604      	mov	r4, r0
 80047dc:	b908      	cbnz	r0, 80047e2 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80047de:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80047e0:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047e2:	7f43      	ldrb	r3, [r0, #29]
 80047e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80047e8:	b913      	cbnz	r3, 80047f0 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80047ea:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80047ec:	f7fc fde2 	bl	80013b4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80047f0:	2302      	movs	r3, #2
 80047f2:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80047f4:	7923      	ldrb	r3, [r4, #4]
 80047f6:	b9e3      	cbnz	r3, 8004832 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	4a13      	ldr	r2, [pc, #76]	; (8004848 <HAL_CRC_Init+0x70>)
 80047fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	f022 0218 	bic.w	r2, r2, #24
 8004804:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004806:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004808:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800480a:	b9d2      	cbnz	r2, 8004842 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004810:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004812:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	6961      	ldr	r1, [r4, #20]
 8004818:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800481c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800481e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004820:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800482c:	2301      	movs	r3, #1
 800482e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004830:	e7d6      	b.n	80047e0 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004832:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f808 	bl	800484c <HAL_CRCEx_Polynomial_Set>
 800483c:	2800      	cmp	r0, #0
 800483e:	d0e2      	beq.n	8004806 <HAL_CRC_Init+0x2e>
 8004840:	e7cd      	b.n	80047de <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004842:	6922      	ldr	r2, [r4, #16]
 8004844:	e7e4      	b.n	8004810 <HAL_CRC_Init+0x38>
 8004846:	bf00      	nop
 8004848:	04c11db7 	.word	0x04c11db7

0800484c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800484c:	231f      	movs	r3, #31
{
 800484e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004850:	3b01      	subs	r3, #1
 8004852:	d31c      	bcc.n	800488e <HAL_CRCEx_Polynomial_Set+0x42>
 8004854:	fa21 f403 	lsr.w	r4, r1, r3
 8004858:	07e4      	lsls	r4, r4, #31
 800485a:	d5f9      	bpl.n	8004850 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800485c:	2a10      	cmp	r2, #16
 800485e:	d012      	beq.n	8004886 <HAL_CRCEx_Polynomial_Set+0x3a>
 8004860:	d804      	bhi.n	800486c <HAL_CRCEx_Polynomial_Set+0x20>
 8004862:	b13a      	cbz	r2, 8004874 <HAL_CRCEx_Polynomial_Set+0x28>
 8004864:	2a08      	cmp	r2, #8
 8004866:	d010      	beq.n	800488a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8004868:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800486a:	e00b      	b.n	8004884 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 800486c:	2a18      	cmp	r2, #24
 800486e:	d1fb      	bne.n	8004868 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004870:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004872:	d8f9      	bhi.n	8004868 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004874:	6800      	ldr	r0, [r0, #0]
 8004876:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004878:	6883      	ldr	r3, [r0, #8]
 800487a:	f023 0318 	bic.w	r3, r3, #24
 800487e:	431a      	orrs	r2, r3
 8004880:	6082      	str	r2, [r0, #8]
 8004882:	2000      	movs	r0, #0
}
 8004884:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004886:	2b07      	cmp	r3, #7
 8004888:	e7f3      	b.n	8004872 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800488a:	2b0f      	cmp	r3, #15
 800488c:	e7f1      	b.n	8004872 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800488e:	2a00      	cmp	r2, #0
 8004890:	d1ea      	bne.n	8004868 <HAL_CRCEx_Polynomial_Set+0x1c>
 8004892:	e7ef      	b.n	8004874 <HAL_CRCEx_Polynomial_Set+0x28>

08004894 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004898:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 800489a:	f7ff fed5 	bl	8004648 <HAL_GetTick>
 800489e:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048a0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d006      	beq.n	80048b6 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048a8:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 80048aa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ac:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80048ae:	2300      	movs	r3, #0
 80048b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	f022 0216 	bic.w	r2, r2, #22
 80048be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048c6:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048ca:	b90a      	cbnz	r2, 80048d0 <HAL_DMA_Abort+0x3c>
 80048cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80048ce:	b11a      	cbz	r2, 80048d8 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	f022 0208 	bic.w	r2, r2, #8
 80048d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f013 0301 	ands.w	r3, r3, #1
 80048e8:	d10a      	bne.n	8004900 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80048ec:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 80048ee:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048f0:	408a      	lsls	r2, r1
 80048f2:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80048f4:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 80048f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80048fa:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 80048fe:	e7d9      	b.n	80048b4 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004900:	f7ff fea2 	bl	8004648 <HAL_GetTick>
 8004904:	1b40      	subs	r0, r0, r5
 8004906:	2805      	cmp	r0, #5
 8004908:	d9ea      	bls.n	80048e0 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800490a:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800490c:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800490e:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004910:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004912:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004916:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800491a:	e7cb      	b.n	80048b4 <HAL_DMA_Abort+0x20>

0800491c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800491c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800491e:	4604      	mov	r4, r0
 8004920:	b330      	cbz	r0, 8004970 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004922:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004926:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800492a:	b91b      	cbnz	r3, 8004934 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800492c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004930:	f7fc fd56 	bl	80013e0 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004934:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004936:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004938:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800493a:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800493c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004940:	6813      	ldr	r3, [r2, #0]
 8004942:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004946:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004948:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800494a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800494c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800494e:	f023 0307 	bic.w	r3, r3, #7
 8004952:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004954:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004956:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004958:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800495a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800495e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004962:	430b      	orrs	r3, r1
 8004964:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004966:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004968:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800496a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 800496e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004970:	2001      	movs	r0, #1
 8004972:	e7fc      	b.n	800496e <HAL_DMA2D_Init+0x52>

08004974 <HAL_DMA2D_LineEventCallback>:
 8004974:	4770      	bx	lr

08004976 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004976:	4770      	bx	lr

08004978 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004978:	6803      	ldr	r3, [r0, #0]
{
 800497a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800497c:	685e      	ldr	r6, [r3, #4]
{
 800497e:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004980:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004982:	07f2      	lsls	r2, r6, #31
 8004984:	d514      	bpl.n	80049b0 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004986:	05e9      	lsls	r1, r5, #23
 8004988:	d512      	bpl.n	80049b0 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004990:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004992:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800499a:	2201      	movs	r2, #1
 800499c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800499e:	2304      	movs	r3, #4
 80049a0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049a4:	2300      	movs	r3, #0
 80049a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80049aa:	6943      	ldr	r3, [r0, #20]
 80049ac:	b103      	cbz	r3, 80049b0 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80049ae:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049b0:	06b2      	lsls	r2, r6, #26
 80049b2:	d516      	bpl.n	80049e2 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80049b4:	04ab      	lsls	r3, r5, #18
 80049b6:	d514      	bpl.n	80049e2 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80049c2:	2220      	movs	r2, #32
 80049c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80049c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049c8:	f043 0302 	orr.w	r3, r3, #2
 80049cc:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049ce:	2304      	movs	r3, #4
 80049d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049d4:	2300      	movs	r3, #0
 80049d6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80049da:	6963      	ldr	r3, [r4, #20]
 80049dc:	b10b      	cbz	r3, 80049e2 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80049de:	4620      	mov	r0, r4
 80049e0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80049e2:	0730      	lsls	r0, r6, #28
 80049e4:	d516      	bpl.n	8004a14 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80049e6:	0529      	lsls	r1, r5, #20
 80049e8:	d514      	bpl.n	8004a14 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80049f4:	2208      	movs	r2, #8
 80049f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80049f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049fa:	f043 0304 	orr.w	r3, r3, #4
 80049fe:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a00:	2304      	movs	r3, #4
 8004a02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a06:	2300      	movs	r3, #0
 8004a08:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004a0c:	6963      	ldr	r3, [r4, #20]
 8004a0e:	b10b      	cbz	r3, 8004a14 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a10:	4620      	mov	r0, r4
 8004a12:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004a14:	0772      	lsls	r2, r6, #29
 8004a16:	d50b      	bpl.n	8004a30 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004a18:	056b      	lsls	r3, r5, #21
 8004a1a:	d509      	bpl.n	8004a30 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004a1c:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004a1e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a26:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004a28:	2204      	movs	r2, #4
 8004a2a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004a2c:	f7ff ffa2 	bl	8004974 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004a30:	07b0      	lsls	r0, r6, #30
 8004a32:	d514      	bpl.n	8004a5e <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004a34:	05a9      	lsls	r1, r5, #22
 8004a36:	d512      	bpl.n	8004a5e <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a40:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004a42:	2202      	movs	r2, #2
 8004a44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004a46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a48:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a50:	2300      	movs	r3, #0
 8004a52:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004a56:	6923      	ldr	r3, [r4, #16]
 8004a58:	b10b      	cbz	r3, 8004a5e <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004a5e:	06f2      	lsls	r2, r6, #27
 8004a60:	d513      	bpl.n	8004a8a <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004a62:	04eb      	lsls	r3, r5, #19
 8004a64:	d511      	bpl.n	8004a8a <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004a66:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004a68:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a70:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004a72:	2210      	movs	r2, #16
 8004a74:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004a76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a78:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004a80:	2300      	movs	r3, #0
 8004a82:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004a86:	f7ff ff76 	bl	8004976 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}

08004a8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004a8e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	f04f 0302 	mov.w	r3, #2
 8004a98:	d02b      	beq.n	8004af2 <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a9a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004a9e:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004aa0:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8004aa4:	4f1c      	ldr	r7, [pc, #112]	; (8004b18 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8004aa6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004aaa:	010e      	lsls	r6, r1, #4
 8004aac:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004aae:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8004ab2:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ab6:	3c09      	subs	r4, #9
 8004ab8:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004aba:	bf96      	itet	ls
 8004abc:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004ac0:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004ac4:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004ac6:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004ac8:	b9a9      	cbnz	r1, 8004af6 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004aca:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004acc:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004ace:	ea01 0107 	and.w	r1, r1, r7
 8004ad2:	ea42 0201 	orr.w	r2, r2, r1
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004ad8:	6982      	ldr	r2, [r0, #24]
 8004ada:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004adc:	d803      	bhi.n	8004ae6 <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004ade:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004ae0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004ae4:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004aec:	2300      	movs	r3, #0
 8004aee:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8004af2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004af6:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004af8:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004afa:	ea01 0107 	and.w	r1, r1, r7
 8004afe:	ea42 0201 	orr.w	r2, r2, r1
 8004b02:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004b04:	eb00 0206 	add.w	r2, r0, r6
 8004b08:	6992      	ldr	r2, [r2, #24]
 8004b0a:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004b0c:	d8eb      	bhi.n	8004ae6 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004b0e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004b12:	621d      	str	r5, [r3, #32]
 8004b14:	e7e7      	b.n	8004ae6 <HAL_DMA2D_ConfigLayer+0x5a>
 8004b16:	bf00      	nop
 8004b18:	00fcfff0 	.word	0x00fcfff0

08004b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b20:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b22:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8004ce0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b26:	4a6c      	ldr	r2, [pc, #432]	; (8004cd8 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8004b28:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b2a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8004b2c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b2e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004b32:	43ac      	bics	r4, r5
 8004b34:	f040 80b6 	bne.w	8004ca4 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b38:	684d      	ldr	r5, [r1, #4]
 8004b3a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b3e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b40:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b44:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b48:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b4a:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b4c:	2f01      	cmp	r7, #1
 8004b4e:	d834      	bhi.n	8004bba <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8004b50:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b52:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8004b56:	68cf      	ldr	r7, [r1, #12]
 8004b58:	fa07 f708 	lsl.w	r7, r7, r8
 8004b5c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004b60:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004b62:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b64:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b68:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004b6c:	409f      	lsls	r7, r3
 8004b6e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004b72:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004b74:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b76:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b78:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b7c:	688f      	ldr	r7, [r1, #8]
 8004b7e:	fa07 f708 	lsl.w	r7, r7, r8
 8004b82:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004b86:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b88:	d119      	bne.n	8004bbe <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8004b8a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b8e:	f003 0b07 	and.w	fp, r3, #7
 8004b92:	f04f 0e0f 	mov.w	lr, #15
 8004b96:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004b9a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004b9e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ba2:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004ba6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004baa:	690f      	ldr	r7, [r1, #16]
 8004bac:	fa07 f70b 	lsl.w	r7, r7, fp
 8004bb0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8004bb4:	f8ca 7020 	str.w	r7, [sl, #32]
 8004bb8:	e001      	b.n	8004bbe <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bba:	2c03      	cmp	r4, #3
 8004bbc:	d1da      	bne.n	8004b74 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8004bbe:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bc0:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bc4:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004bc8:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bcc:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8004bd0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bd2:	d067      	beq.n	8004ca4 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bd4:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004bd8:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004bdc:	f003 0703 	and.w	r7, r3, #3
 8004be0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004be8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004bec:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bee:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8004bf2:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8004bf6:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004bfa:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8004bfe:	9401      	str	r4, [sp, #4]
 8004c00:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c02:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8004c06:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c0a:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c0e:	4c33      	ldr	r4, [pc, #204]	; (8004cdc <HAL_GPIO_Init+0x1c0>)
 8004c10:	42a0      	cmp	r0, r4
 8004c12:	d04e      	beq.n	8004cb2 <HAL_GPIO_Init+0x196>
 8004c14:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c18:	42a0      	cmp	r0, r4
 8004c1a:	d04c      	beq.n	8004cb6 <HAL_GPIO_Init+0x19a>
 8004c1c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c20:	42a0      	cmp	r0, r4
 8004c22:	d04a      	beq.n	8004cba <HAL_GPIO_Init+0x19e>
 8004c24:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c28:	42a0      	cmp	r0, r4
 8004c2a:	d048      	beq.n	8004cbe <HAL_GPIO_Init+0x1a2>
 8004c2c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c30:	42a0      	cmp	r0, r4
 8004c32:	d046      	beq.n	8004cc2 <HAL_GPIO_Init+0x1a6>
 8004c34:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c38:	42a0      	cmp	r0, r4
 8004c3a:	d044      	beq.n	8004cc6 <HAL_GPIO_Init+0x1aa>
 8004c3c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c40:	42a0      	cmp	r0, r4
 8004c42:	d042      	beq.n	8004cca <HAL_GPIO_Init+0x1ae>
 8004c44:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c48:	42a0      	cmp	r0, r4
 8004c4a:	d040      	beq.n	8004cce <HAL_GPIO_Init+0x1b2>
 8004c4c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c50:	42a0      	cmp	r0, r4
 8004c52:	d03e      	beq.n	8004cd2 <HAL_GPIO_Init+0x1b6>
 8004c54:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004c58:	42a0      	cmp	r0, r4
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2409      	moveq	r4, #9
 8004c5e:	240a      	movne	r4, #10
 8004c60:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c62:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c64:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c68:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004c6a:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8004c6e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004c70:	bf54      	ite	pl
 8004c72:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004c74:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c78:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8004c7a:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8004c7c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004c7e:	bf54      	ite	pl
 8004c80:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004c82:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c86:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8004c88:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8004c8a:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004c8c:	bf54      	ite	pl
 8004c8e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004c90:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c94:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8004c96:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8004c98:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004c9a:	bf54      	ite	pl
 8004c9c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004c9e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8004ca2:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	f47f af3e 	bne.w	8004b28 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004cac:	b003      	add	sp, #12
 8004cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004cb2:	2400      	movs	r4, #0
 8004cb4:	e7d4      	b.n	8004c60 <HAL_GPIO_Init+0x144>
 8004cb6:	2401      	movs	r4, #1
 8004cb8:	e7d2      	b.n	8004c60 <HAL_GPIO_Init+0x144>
 8004cba:	2402      	movs	r4, #2
 8004cbc:	e7d0      	b.n	8004c60 <HAL_GPIO_Init+0x144>
 8004cbe:	2403      	movs	r4, #3
 8004cc0:	e7ce      	b.n	8004c60 <HAL_GPIO_Init+0x144>
 8004cc2:	2404      	movs	r4, #4
 8004cc4:	e7cc      	b.n	8004c60 <HAL_GPIO_Init+0x144>
 8004cc6:	2405      	movs	r4, #5
 8004cc8:	e7ca      	b.n	8004c60 <HAL_GPIO_Init+0x144>
 8004cca:	2406      	movs	r4, #6
 8004ccc:	e7c8      	b.n	8004c60 <HAL_GPIO_Init+0x144>
 8004cce:	2407      	movs	r4, #7
 8004cd0:	e7c6      	b.n	8004c60 <HAL_GPIO_Init+0x144>
 8004cd2:	2408      	movs	r4, #8
 8004cd4:	e7c4      	b.n	8004c60 <HAL_GPIO_Init+0x144>
 8004cd6:	bf00      	nop
 8004cd8:	40013c00 	.word	0x40013c00
 8004cdc:	40020000 	.word	0x40020000
 8004ce0:	40023800 	.word	0x40023800

08004ce4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ce8:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004cea:	4c4a      	ldr	r4, [pc, #296]	; (8004e14 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004cec:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8004e1c <HAL_GPIO_DeInit+0x138>
 8004cf0:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8004e20 <HAL_GPIO_DeInit+0x13c>
 8004cf4:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8004e24 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8004cfe:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8004d02:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8004d06:	d16e      	bne.n	8004de6 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8004d08:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d0c:	f002 0c03 	and.w	ip, r2, #3
 8004d10:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004d12:	4b41      	ldr	r3, [pc, #260]	; (8004e18 <HAL_GPIO_DeInit+0x134>)
 8004d14:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d18:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004d1c:	4298      	cmp	r0, r3
 8004d1e:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d22:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8004d26:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d2a:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004d2e:	d05f      	beq.n	8004df0 <HAL_GPIO_DeInit+0x10c>
 8004d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d34:	4298      	cmp	r0, r3
 8004d36:	d05d      	beq.n	8004df4 <HAL_GPIO_DeInit+0x110>
 8004d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d3c:	4298      	cmp	r0, r3
 8004d3e:	d05b      	beq.n	8004df8 <HAL_GPIO_DeInit+0x114>
 8004d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d44:	4298      	cmp	r0, r3
 8004d46:	d059      	beq.n	8004dfc <HAL_GPIO_DeInit+0x118>
 8004d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d4c:	4298      	cmp	r0, r3
 8004d4e:	d057      	beq.n	8004e00 <HAL_GPIO_DeInit+0x11c>
 8004d50:	4548      	cmp	r0, r9
 8004d52:	d057      	beq.n	8004e04 <HAL_GPIO_DeInit+0x120>
 8004d54:	4550      	cmp	r0, sl
 8004d56:	d057      	beq.n	8004e08 <HAL_GPIO_DeInit+0x124>
 8004d58:	4558      	cmp	r0, fp
 8004d5a:	d057      	beq.n	8004e0c <HAL_GPIO_DeInit+0x128>
 8004d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d60:	4298      	cmp	r0, r3
 8004d62:	d055      	beq.n	8004e10 <HAL_GPIO_DeInit+0x12c>
 8004d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d68:	4298      	cmp	r0, r3
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2309      	moveq	r3, #9
 8004d6e:	230a      	movne	r3, #10
 8004d70:	fa03 f30c 	lsl.w	r3, r3, ip
 8004d74:	4543      	cmp	r3, r8
 8004d76:	d113      	bne.n	8004da0 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	ea23 0307 	bic.w	r3, r3, r7
 8004d7e:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004d80:	6863      	ldr	r3, [r4, #4]
 8004d82:	ea23 0307 	bic.w	r3, r3, r7
 8004d86:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004d88:	68e3      	ldr	r3, [r4, #12]
 8004d8a:	ea23 0307 	bic.w	r3, r3, r7
 8004d8e:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004d90:	68a3      	ldr	r3, [r4, #8]
 8004d92:	ea23 0307 	bic.w	r3, r3, r7
 8004d96:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004d98:	68ab      	ldr	r3, [r5, #8]
 8004d9a:	ea23 0306 	bic.w	r3, r3, r6
 8004d9e:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004da0:	2603      	movs	r6, #3
 8004da2:	0053      	lsls	r3, r2, #1
 8004da4:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004da6:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004daa:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dae:	270f      	movs	r7, #15
 8004db0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004db4:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004db8:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004dbc:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dbe:	fa22 f506 	lsr.w	r5, r2, r6
 8004dc2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004dc6:	6a2e      	ldr	r6, [r5, #32]
 8004dc8:	ea26 0707 	bic.w	r7, r6, r7
 8004dcc:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004dce:	68c5      	ldr	r5, [r0, #12]
 8004dd0:	ea25 0503 	bic.w	r5, r5, r3
 8004dd4:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dd6:	6845      	ldr	r5, [r0, #4]
 8004dd8:	ea25 050e 	bic.w	r5, r5, lr
 8004ddc:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004dde:	6885      	ldr	r5, [r0, #8]
 8004de0:	ea25 0303 	bic.w	r3, r5, r3
 8004de4:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004de6:	3201      	adds	r2, #1
 8004de8:	2a10      	cmp	r2, #16
 8004dea:	d185      	bne.n	8004cf8 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8004dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004df0:	2300      	movs	r3, #0
 8004df2:	e7bd      	b.n	8004d70 <HAL_GPIO_DeInit+0x8c>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e7bb      	b.n	8004d70 <HAL_GPIO_DeInit+0x8c>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e7b9      	b.n	8004d70 <HAL_GPIO_DeInit+0x8c>
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e7b7      	b.n	8004d70 <HAL_GPIO_DeInit+0x8c>
 8004e00:	2304      	movs	r3, #4
 8004e02:	e7b5      	b.n	8004d70 <HAL_GPIO_DeInit+0x8c>
 8004e04:	2305      	movs	r3, #5
 8004e06:	e7b3      	b.n	8004d70 <HAL_GPIO_DeInit+0x8c>
 8004e08:	2306      	movs	r3, #6
 8004e0a:	e7b1      	b.n	8004d70 <HAL_GPIO_DeInit+0x8c>
 8004e0c:	2307      	movs	r3, #7
 8004e0e:	e7af      	b.n	8004d70 <HAL_GPIO_DeInit+0x8c>
 8004e10:	2308      	movs	r3, #8
 8004e12:	e7ad      	b.n	8004d70 <HAL_GPIO_DeInit+0x8c>
 8004e14:	40013c00 	.word	0x40013c00
 8004e18:	40020000 	.word	0x40020000
 8004e1c:	40021400 	.word	0x40021400
 8004e20:	40021800 	.word	0x40021800
 8004e24:	40021c00 	.word	0x40021c00

08004e28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e28:	b10a      	cbz	r2, 8004e2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e2a:	6181      	str	r1, [r0, #24]
  }
}
 8004e2c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004e2e:	0409      	lsls	r1, r1, #16
 8004e30:	e7fb      	b.n	8004e2a <HAL_GPIO_WritePin+0x2>

08004e32 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e32:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e34:	ea01 0203 	and.w	r2, r1, r3
 8004e38:	ea21 0103 	bic.w	r1, r1, r3
 8004e3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004e40:	6181      	str	r1, [r0, #24]
}
 8004e42:	4770      	bx	lr

08004e44 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e44:	6803      	ldr	r3, [r0, #0]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	0791      	lsls	r1, r2, #30
 8004e4a:	d501      	bpl.n	8004e50 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	07d2      	lsls	r2, r2, #31
 8004e54:	d403      	bmi.n	8004e5e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	619a      	str	r2, [r3, #24]
  }
}
 8004e5e:	4770      	bx	lr

08004e60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e60:	b530      	push	{r4, r5, lr}
 8004e62:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e64:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e68:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e6a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e6c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e72:	4a05      	ldr	r2, [pc, #20]	; (8004e88 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e74:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e76:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e7e:	ea20 0002 	bic.w	r0, r0, r2
 8004e82:	4303      	orrs	r3, r0
 8004e84:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e86:	bd30      	pop	{r4, r5, pc}
 8004e88:	03ff63ff 	.word	0x03ff63ff

08004e8c <I2C_IsErrorOccurred>:
{
 8004e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e90:	6803      	ldr	r3, [r0, #0]
{
 8004e92:	4605      	mov	r5, r0
 8004e94:	4688      	mov	r8, r1
 8004e96:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e98:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e9a:	f014 0410 	ands.w	r4, r4, #16
 8004e9e:	d079      	beq.n	8004f94 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea0:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8004ea2:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea8:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004eaa:	682b      	ldr	r3, [r5, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	0694      	lsls	r4, r2, #26
 8004eb0:	d436      	bmi.n	8004f20 <I2C_IsErrorOccurred+0x94>
 8004eb2:	b10e      	cbz	r6, 8004eb8 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8004eb4:	2404      	movs	r4, #4
 8004eb6:	e039      	b.n	8004f2c <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8004eb8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004ebc:	d0f6      	beq.n	8004eac <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ebe:	f7ff fbc3 	bl	8004648 <HAL_GetTick>
 8004ec2:	1bc0      	subs	r0, r0, r7
 8004ec4:	4540      	cmp	r0, r8
 8004ec6:	d802      	bhi.n	8004ece <I2C_IsErrorOccurred+0x42>
 8004ec8:	f1b8 0f00 	cmp.w	r8, #0
 8004ecc:	d1ed      	bne.n	8004eaa <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8004ed2:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ed6:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8004ed8:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004eda:	0400      	lsls	r0, r0, #16
 8004edc:	d50a      	bpl.n	8004ef4 <I2C_IsErrorOccurred+0x68>
 8004ede:	0449      	lsls	r1, r1, #17
 8004ee0:	d408      	bmi.n	8004ef4 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8004ee2:	2a20      	cmp	r2, #32
 8004ee4:	d006      	beq.n	8004ef4 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eec:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004eee:	f7ff fbab 	bl	8004648 <HAL_GetTick>
 8004ef2:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	699c      	ldr	r4, [r3, #24]
 8004ef8:	f014 0420 	ands.w	r4, r4, #32
 8004efc:	d1d5      	bne.n	8004eaa <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004efe:	f7ff fba3 	bl	8004648 <HAL_GetTick>
 8004f02:	1bc0      	subs	r0, r0, r7
 8004f04:	2819      	cmp	r0, #25
 8004f06:	d9f5      	bls.n	8004ef4 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f08:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8004f0a:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8004f0c:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f10:	f043 0320 	orr.w	r3, r3, #32
 8004f14:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004f16:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1a:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8004f1e:	e7e9      	b.n	8004ef4 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8004f20:	2e00      	cmp	r6, #0
 8004f22:	d1c7      	bne.n	8004eb4 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f24:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8004f26:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8004f28:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f2a:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f30:	05d0      	lsls	r0, r2, #23
 8004f32:	d505      	bpl.n	8004f40 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f34:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8004f38:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8004f3c:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f3e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f40:	0551      	lsls	r1, r2, #21
 8004f42:	d505      	bpl.n	8004f50 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8004f48:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8004f4c:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f4e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f50:	0592      	lsls	r2, r2, #22
 8004f52:	d521      	bpl.n	8004f98 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f54:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f58:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f5c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8004f5e:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 8004f60:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8004f62:	f7ff ff6f 	bl	8004e44 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004f66:	682a      	ldr	r2, [r5, #0]
 8004f68:	6853      	ldr	r3, [r2, #4]
 8004f6a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004f6e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004f72:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8004f7c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004f7e:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8004f80:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8004f82:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004f8e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8004f92:	e003      	b.n	8004f9c <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8004f94:	4626      	mov	r6, r4
 8004f96:	e7c9      	b.n	8004f2c <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8004f98:	2e00      	cmp	r6, #0
 8004f9a:	d1e0      	bne.n	8004f5e <I2C_IsErrorOccurred+0xd2>
}
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004fa2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004fa2:	b570      	push	{r4, r5, r6, lr}
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	460d      	mov	r5, r1
 8004fa8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	079b      	lsls	r3, r3, #30
 8004fb0:	d501      	bpl.n	8004fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8004fb2:	2000      	movs	r0, #0
}
 8004fb4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f7ff ff66 	bl	8004e8c <I2C_IsErrorOccurred>
 8004fc0:	b9a0      	cbnz	r0, 8004fec <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8004fc2:	1c6a      	adds	r2, r5, #1
 8004fc4:	d0f1      	beq.n	8004faa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc6:	f7ff fb3f 	bl	8004648 <HAL_GetTick>
 8004fca:	1b80      	subs	r0, r0, r6
 8004fcc:	42a8      	cmp	r0, r5
 8004fce:	d801      	bhi.n	8004fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004fd0:	2d00      	cmp	r5, #0
 8004fd2:	d1ea      	bne.n	8004faa <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004fd6:	f043 0320 	orr.w	r3, r3, #32
 8004fda:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	2320      	movs	r3, #32
 8004fde:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004fe8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004fec:	2001      	movs	r0, #1
 8004fee:	e7e1      	b.n	8004fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08004ff0 <I2C_WaitOnFlagUntilTimeout>:
{
 8004ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff4:	9f06      	ldr	r7, [sp, #24]
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	4688      	mov	r8, r1
 8004ffa:	4616      	mov	r6, r2
 8004ffc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ffe:	6822      	ldr	r2, [r4, #0]
 8005000:	6993      	ldr	r3, [r2, #24]
 8005002:	ea38 0303 	bics.w	r3, r8, r3
 8005006:	bf0c      	ite	eq
 8005008:	2301      	moveq	r3, #1
 800500a:	2300      	movne	r3, #0
 800500c:	42b3      	cmp	r3, r6
 800500e:	d001      	beq.n	8005014 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8005010:	2000      	movs	r0, #0
 8005012:	e015      	b.n	8005040 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005014:	1c6b      	adds	r3, r5, #1
 8005016:	d0f3      	beq.n	8005000 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005018:	f7ff fb16 	bl	8004648 <HAL_GetTick>
 800501c:	1bc0      	subs	r0, r0, r7
 800501e:	42a8      	cmp	r0, r5
 8005020:	d801      	bhi.n	8005026 <I2C_WaitOnFlagUntilTimeout+0x36>
 8005022:	2d00      	cmp	r5, #0
 8005024:	d1eb      	bne.n	8004ffe <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005026:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005028:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800502a:	f043 0320 	orr.w	r3, r3, #32
 800502e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005030:	2320      	movs	r3, #32
 8005032:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005036:	2300      	movs	r3, #0
 8005038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800503c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005044 <I2C_RequestMemoryWrite>:
{
 8005044:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005048:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800504a:	4b18      	ldr	r3, [pc, #96]	; (80050ac <I2C_RequestMemoryWrite+0x68>)
{
 800504c:	4605      	mov	r5, r0
 800504e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	b2f2      	uxtb	r2, r6
 8005054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8005058:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800505c:	f7ff ff00 	bl	8004e60 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005060:	4628      	mov	r0, r5
 8005062:	4642      	mov	r2, r8
 8005064:	4639      	mov	r1, r7
 8005066:	f7ff ff9c 	bl	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 800506a:	b118      	cbz	r0, 8005074 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 800506c:	2001      	movs	r0, #1
}
 800506e:	b002      	add	sp, #8
 8005070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005074:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005076:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005078:	d10d      	bne.n	8005096 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800507a:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800507c:	2200      	movs	r2, #0
 800507e:	2180      	movs	r1, #128	; 0x80
 8005080:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005082:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005084:	463b      	mov	r3, r7
 8005086:	f8cd 8000 	str.w	r8, [sp]
 800508a:	f7ff ffb1 	bl	8004ff0 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800508e:	3800      	subs	r0, #0
 8005090:	bf18      	it	ne
 8005092:	2001      	movne	r0, #1
 8005094:	e7eb      	b.n	800506e <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005096:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005098:	4639      	mov	r1, r7
 800509a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800509c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800509e:	4642      	mov	r2, r8
 80050a0:	f7ff ff7f 	bl	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d1e1      	bne.n	800506c <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	e7e6      	b.n	800507a <I2C_RequestMemoryWrite+0x36>
 80050ac:	80002000 	.word	0x80002000

080050b0 <I2C_RequestMemoryRead>:
{
 80050b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80050b4:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050b6:	4b18      	ldr	r3, [pc, #96]	; (8005118 <I2C_RequestMemoryRead+0x68>)
{
 80050b8:	4605      	mov	r5, r0
 80050ba:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	b2f2      	uxtb	r2, r6
 80050c0:	2300      	movs	r3, #0
{
 80050c2:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80050c6:	f7ff fecb 	bl	8004e60 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ca:	4628      	mov	r0, r5
 80050cc:	4642      	mov	r2, r8
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7ff ff67 	bl	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 80050d4:	b118      	cbz	r0, 80050de <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 80050d6:	2001      	movs	r0, #1
}
 80050d8:	b002      	add	sp, #8
 80050da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050de:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050e0:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050e2:	d10d      	bne.n	8005100 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050e4:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050e6:	2200      	movs	r2, #0
 80050e8:	2140      	movs	r1, #64	; 0x40
 80050ea:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050ec:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050ee:	463b      	mov	r3, r7
 80050f0:	f8cd 8000 	str.w	r8, [sp]
 80050f4:	f7ff ff7c 	bl	8004ff0 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80050f8:	3800      	subs	r0, #0
 80050fa:	bf18      	it	ne
 80050fc:	2001      	movne	r0, #1
 80050fe:	e7eb      	b.n	80050d8 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005100:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005102:	4639      	mov	r1, r7
 8005104:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005106:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005108:	4642      	mov	r2, r8
 800510a:	f7ff ff4a 	bl	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 800510e:	2800      	cmp	r0, #0
 8005110:	d1e1      	bne.n	80050d6 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005112:	682b      	ldr	r3, [r5, #0]
 8005114:	e7e6      	b.n	80050e4 <I2C_RequestMemoryRead+0x34>
 8005116:	bf00      	nop
 8005118:	80002000 	.word	0x80002000

0800511c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	4604      	mov	r4, r0
 8005120:	460d      	mov	r5, r1
 8005122:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	069b      	lsls	r3, r3, #26
 800512a:	d501      	bpl.n	8005130 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800512c:	2000      	movs	r0, #0
}
 800512e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005130:	4632      	mov	r2, r6
 8005132:	4629      	mov	r1, r5
 8005134:	4620      	mov	r0, r4
 8005136:	f7ff fea9 	bl	8004e8c <I2C_IsErrorOccurred>
 800513a:	b990      	cbnz	r0, 8005162 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513c:	f7ff fa84 	bl	8004648 <HAL_GetTick>
 8005140:	1b80      	subs	r0, r0, r6
 8005142:	42a8      	cmp	r0, r5
 8005144:	d801      	bhi.n	800514a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8005146:	2d00      	cmp	r5, #0
 8005148:	d1ec      	bne.n	8005124 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800514a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800514c:	f043 0320 	orr.w	r3, r3, #32
 8005150:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005152:	2320      	movs	r3, #32
 8005154:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005158:	2300      	movs	r3, #0
 800515a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800515e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005162:	2001      	movs	r0, #1
 8005164:	e7e3      	b.n	800512e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08005166 <HAL_I2C_Init>:
{
 8005166:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005168:	4604      	mov	r4, r0
 800516a:	2800      	cmp	r0, #0
 800516c:	d04a      	beq.n	8005204 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800516e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005172:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005176:	b91b      	cbnz	r3, 8005180 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8005178:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800517c:	f7fc f950 	bl	8001420 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005180:	2324      	movs	r3, #36	; 0x24
 8005182:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005190:	6862      	ldr	r2, [r4, #4]
 8005192:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005196:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800519e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051a4:	2901      	cmp	r1, #1
 80051a6:	d124      	bne.n	80051f2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ac:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051ae:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b0:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051b2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80051b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ba:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051c2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051c4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80051c8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80051ca:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80051d0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051d2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051e4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051ea:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ec:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80051f0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051f6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051f8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051fa:	d1d8      	bne.n	80051ae <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	e7d4      	b.n	80051ae <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8005204:	2001      	movs	r0, #1
 8005206:	e7f3      	b.n	80051f0 <HAL_I2C_Init+0x8a>

08005208 <HAL_I2C_DeInit>:
{
 8005208:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800520a:	4604      	mov	r4, r0
 800520c:	b198      	cbz	r0, 8005236 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800520e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005210:	2324      	movs	r3, #36	; 0x24
 8005212:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005216:	6813      	ldr	r3, [r2, #0]
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800521e:	f7fc f943 	bl	80014a8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005222:	2000      	movs	r0, #0
 8005224:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8005226:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800522a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800522e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005230:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005234:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005236:	2001      	movs	r0, #1
 8005238:	e7fc      	b.n	8005234 <HAL_I2C_DeInit+0x2c>

0800523a <HAL_I2C_Mem_Write>:
{
 800523a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523e:	b085      	sub	sp, #20
 8005240:	469b      	mov	fp, r3
 8005242:	4604      	mov	r4, r0
 8005244:	460f      	mov	r7, r1
 8005246:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800524a:	4692      	mov	sl, r2
 800524c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005250:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005252:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005256:	2b20      	cmp	r3, #32
 8005258:	f040 80a3 	bne.w	80053a2 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800525c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800525e:	b10b      	cbz	r3, 8005264 <HAL_I2C_Mem_Write+0x2a>
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	b933      	cbnz	r3, 8005272 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005268:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800526a:	2001      	movs	r0, #1
}
 800526c:	b005      	add	sp, #20
 800526e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005272:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005276:	2b01      	cmp	r3, #1
 8005278:	f000 8093 	beq.w	80053a2 <HAL_I2C_Mem_Write+0x168>
 800527c:	2501      	movs	r5, #1
 800527e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005282:	f7ff f9e1 	bl	8004648 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005286:	2319      	movs	r3, #25
 8005288:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800528a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800528c:	462a      	mov	r2, r5
 800528e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005292:	4620      	mov	r0, r4
 8005294:	f7ff feac 	bl	8004ff0 <I2C_WaitOnFlagUntilTimeout>
 8005298:	4680      	mov	r8, r0
 800529a:	2800      	cmp	r0, #0
 800529c:	d1e5      	bne.n	800526a <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800529e:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 80052a0:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052a2:	4652      	mov	r2, sl
 80052a4:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80052b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b2:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052b4:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80052b6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80052b8:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052ba:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80052be:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052c0:	465b      	mov	r3, fp
 80052c2:	f7ff febf 	bl	8005044 <I2C_RequestMemoryWrite>
 80052c6:	b110      	cbz	r0, 80052ce <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 80052c8:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80052cc:	e7cd      	b.n	800526a <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2bff      	cmp	r3, #255	; 0xff
 80052d4:	d955      	bls.n	8005382 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052d6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052dc:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052e0:	4639      	mov	r1, r7
 80052e2:	4620      	mov	r0, r4
 80052e4:	f7ff fdbc 	bl	8004e60 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052e8:	4632      	mov	r2, r6
 80052ea:	4649      	mov	r1, r9
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7ff fe58 	bl	8004fa2 <I2C_WaitOnTXISFlagUntilTimeout>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d1b9      	bne.n	800526a <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052f8:	6822      	ldr	r2, [r4, #0]
 80052fa:	f813 1b01 	ldrb.w	r1, [r3], #1
 80052fe:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005300:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005302:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005304:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005306:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005308:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800530a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800530c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800530e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005310:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005312:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005314:	b29b      	uxth	r3, r3
 8005316:	b1ab      	cbz	r3, 8005344 <HAL_I2C_Mem_Write+0x10a>
 8005318:	b9a2      	cbnz	r2, 8005344 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800531a:	464b      	mov	r3, r9
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	4620      	mov	r0, r4
 8005320:	9600      	str	r6, [sp, #0]
 8005322:	f7ff fe65 	bl	8004ff0 <I2C_WaitOnFlagUntilTimeout>
 8005326:	2800      	cmp	r0, #0
 8005328:	d19f      	bne.n	800526a <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800532a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2bff      	cmp	r3, #255	; 0xff
 8005330:	d92f      	bls.n	8005392 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005332:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005338:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800533a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800533c:	4639      	mov	r1, r7
 800533e:	4620      	mov	r0, r4
 8005340:	f7ff fd8e 	bl	8004e60 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005344:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1cd      	bne.n	80052e8 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800534c:	4632      	mov	r2, r6
 800534e:	4649      	mov	r1, r9
 8005350:	4620      	mov	r0, r4
 8005352:	f7ff fee3 	bl	800511c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005356:	2800      	cmp	r0, #0
 8005358:	d187      	bne.n	800526a <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	2120      	movs	r1, #32
 800535e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005366:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800536a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005374:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005378:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800537c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005380:	e774      	b.n	800526c <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005382:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005384:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005388:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800538a:	b292      	uxth	r2, r2
 800538c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	e7a6      	b.n	80052e0 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8005392:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005398:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800539a:	b292      	uxth	r2, r2
 800539c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	e7cc      	b.n	800533c <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 80053a2:	2002      	movs	r0, #2
 80053a4:	e762      	b.n	800526c <HAL_I2C_Mem_Write+0x32>
	...

080053a8 <HAL_I2C_Mem_Read>:
{
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	b085      	sub	sp, #20
 80053ae:	469b      	mov	fp, r3
 80053b0:	4604      	mov	r4, r0
 80053b2:	460f      	mov	r7, r1
 80053b4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80053b8:	4692      	mov	sl, r2
 80053ba:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80053be:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	f040 80a7 	bne.w	8005518 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 80053ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053cc:	b10b      	cbz	r3, 80053d2 <HAL_I2C_Mem_Read+0x2a>
 80053ce:	9b03      	ldr	r3, [sp, #12]
 80053d0:	b933      	cbnz	r3, 80053e0 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80053d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053d6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80053d8:	2001      	movs	r0, #1
}
 80053da:	b005      	add	sp, #20
 80053dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80053e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	f000 8097 	beq.w	8005518 <HAL_I2C_Mem_Read+0x170>
 80053ea:	2501      	movs	r5, #1
 80053ec:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80053f0:	f7ff f92a 	bl	8004648 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053f4:	2319      	movs	r3, #25
 80053f6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80053f8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053fa:	462a      	mov	r2, r5
 80053fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005400:	4620      	mov	r0, r4
 8005402:	f7ff fdf5 	bl	8004ff0 <I2C_WaitOnFlagUntilTimeout>
 8005406:	4680      	mov	r8, r0
 8005408:	2800      	cmp	r0, #0
 800540a:	d1e5      	bne.n	80053d8 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800540c:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 800540e:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005410:	4652      	mov	r2, sl
 8005412:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005414:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005418:	2340      	movs	r3, #64	; 0x40
 800541a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800541e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005420:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005422:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005424:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005426:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005428:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 800542c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800542e:	465b      	mov	r3, fp
 8005430:	f7ff fe3e 	bl	80050b0 <I2C_RequestMemoryRead>
 8005434:	b110      	cbz	r0, 800543c <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8005436:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800543a:	e7cd      	b.n	80053d8 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800543c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800543e:	b29b      	uxth	r3, r3
 8005440:	2bff      	cmp	r3, #255	; 0xff
 8005442:	4b36      	ldr	r3, [pc, #216]	; (800551c <HAL_I2C_Mem_Read+0x174>)
 8005444:	d958      	bls.n	80054f8 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005446:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800544e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005450:	4639      	mov	r1, r7
 8005452:	4620      	mov	r0, r4
 8005454:	f7ff fd04 	bl	8004e60 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005458:	464b      	mov	r3, r9
 800545a:	2200      	movs	r2, #0
 800545c:	2104      	movs	r1, #4
 800545e:	4620      	mov	r0, r4
 8005460:	9600      	str	r6, [sp, #0]
 8005462:	f7ff fdc5 	bl	8004ff0 <I2C_WaitOnFlagUntilTimeout>
 8005466:	2800      	cmp	r0, #0
 8005468:	d1b6      	bne.n	80053d8 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005470:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005472:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005474:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005476:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005478:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800547a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800547c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800547e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005480:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005482:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005484:	b29b      	uxth	r3, r3
 8005486:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005488:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	b1ab      	cbz	r3, 80054ba <HAL_I2C_Mem_Read+0x112>
 800548e:	b9a2      	cbnz	r2, 80054ba <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005490:	464b      	mov	r3, r9
 8005492:	2180      	movs	r1, #128	; 0x80
 8005494:	4620      	mov	r0, r4
 8005496:	9600      	str	r6, [sp, #0]
 8005498:	f7ff fdaa 	bl	8004ff0 <I2C_WaitOnFlagUntilTimeout>
 800549c:	2800      	cmp	r0, #0
 800549e:	d19b      	bne.n	80053d8 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2bff      	cmp	r3, #255	; 0xff
 80054a6:	d92f      	bls.n	8005508 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054a8:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80054aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054ae:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054b0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054b2:	4639      	mov	r1, r7
 80054b4:	4620      	mov	r0, r4
 80054b6:	f7ff fcd3 	bl	8004e60 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80054ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1ca      	bne.n	8005458 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054c2:	4632      	mov	r2, r6
 80054c4:	4649      	mov	r1, r9
 80054c6:	4620      	mov	r0, r4
 80054c8:	f7ff fe28 	bl	800511c <I2C_WaitOnSTOPFlagUntilTimeout>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d183      	bne.n	80053d8 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	2120      	movs	r1, #32
 80054d4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80054dc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80054e0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80054e4:	f022 0201 	bic.w	r2, r2, #1
 80054e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80054ee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80054f6:	e770      	b.n	80053da <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80054f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005500:	b292      	uxth	r2, r2
 8005502:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	e7a3      	b.n	8005450 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8005508:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800550a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800550e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005510:	b292      	uxth	r2, r2
 8005512:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	e7cc      	b.n	80054b2 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8005518:	2002      	movs	r0, #2
 800551a:	e75e      	b.n	80053da <HAL_I2C_Mem_Read+0x32>
 800551c:	80002400 	.word	0x80002400

08005520 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005520:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005522:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005526:	2b20      	cmp	r3, #32
 8005528:	b2dc      	uxtb	r4, r3
 800552a:	d11d      	bne.n	8005568 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800552c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005530:	2b01      	cmp	r3, #1
 8005532:	d019      	beq.n	8005568 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005534:	2324      	movs	r3, #36	; 0x24
 8005536:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800553a:	6803      	ldr	r3, [r0, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800554a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4311      	orrs	r1, r2
 8005550:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800555a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800555c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005560:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005564:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005566:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005568:	2002      	movs	r0, #2
 800556a:	e7fc      	b.n	8005566 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800556c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800556c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800556e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005572:	2b20      	cmp	r3, #32
 8005574:	b2dc      	uxtb	r4, r3
 8005576:	d11c      	bne.n	80055b2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005578:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800557c:	2b01      	cmp	r3, #1
 800557e:	d018      	beq.n	80055b2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005580:	2324      	movs	r3, #36	; 0x24
 8005582:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005586:	6803      	ldr	r3, [r0, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005590:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005592:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005596:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800559a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055a4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80055a6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80055aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80055ae:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80055b0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80055b2:	2002      	movs	r0, #2
 80055b4:	e7fc      	b.n	80055b0 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080055b6 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055b6:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80055b8:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055ba:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055be:	3284      	adds	r2, #132	; 0x84
 80055c0:	1883      	adds	r3, r0, r2
{
 80055c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80055c6:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055c8:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055cc:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80055ce:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80055d2:	684c      	ldr	r4, [r1, #4]
 80055d4:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055d8:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80055dc:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80055e0:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80055e2:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055e4:	68c5      	ldr	r5, [r0, #12]
 80055e6:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80055ea:	443d      	add	r5, r7
 80055ec:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80055f0:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055f2:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80055f4:	68c5      	ldr	r5, [r0, #12]
 80055f6:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80055fa:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80055fc:	689d      	ldr	r5, [r3, #8]
 80055fe:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8005602:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005604:	688d      	ldr	r5, [r1, #8]
 8005606:	68c7      	ldr	r7, [r0, #12]
 8005608:	3501      	adds	r5, #1
 800560a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800560e:	443d      	add	r5, r7
 8005610:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005614:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005616:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005618:	691d      	ldr	r5, [r3, #16]
 800561a:	f025 0507 	bic.w	r5, r5, #7
 800561e:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005620:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005622:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005624:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005628:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800562c:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005630:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005634:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005638:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800563c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8005640:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005642:	695d      	ldr	r5, [r3, #20]
 8005644:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005648:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800564a:	694d      	ldr	r5, [r1, #20]
 800564c:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800564e:	69dd      	ldr	r5, [r3, #28]
 8005650:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8005654:	f025 0507 	bic.w	r5, r5, #7
 8005658:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800565a:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800565e:	433d      	orrs	r5, r7
 8005660:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005662:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005664:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005666:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800566a:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800566c:	b31e      	cbz	r6, 80056b6 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800566e:	2e01      	cmp	r6, #1
 8005670:	d023      	beq.n	80056ba <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005672:	1eb5      	subs	r5, r6, #2
 8005674:	2d02      	cmp	r5, #2
 8005676:	d922      	bls.n	80056be <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005678:	2e07      	cmp	r6, #7
 800567a:	bf0c      	ite	eq
 800567c:	2502      	moveq	r5, #2
 800567e:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005680:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005682:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005686:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800568a:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800568c:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800568e:	3403      	adds	r4, #3
 8005690:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005692:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005694:	436e      	muls	r6, r5
 8005696:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800569a:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800569c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800569e:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 80056a2:	f024 0407 	bic.w	r4, r4, #7
 80056a6:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80056a8:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80056aa:	5883      	ldr	r3, [r0, r2]
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	5083      	str	r3, [r0, r2]
}
 80056b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80056b6:	2504      	movs	r5, #4
 80056b8:	e7e2      	b.n	8005680 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80056ba:	2503      	movs	r5, #3
 80056bc:	e7e0      	b.n	8005680 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80056be:	2502      	movs	r5, #2
 80056c0:	e7de      	b.n	8005680 <LTDC_SetConfig+0xca>
	...

080056c4 <HAL_LTDC_Init>:
{
 80056c4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80056c6:	4604      	mov	r4, r0
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d063      	beq.n	8005794 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80056cc:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80056d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056d4:	b91b      	cbnz	r3, 80056de <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80056d6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80056da:	f7fb ff01 	bl	80014e0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056de:	2302      	movs	r3, #2
 80056e0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80056ec:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056ee:	6999      	ldr	r1, [r3, #24]
 80056f0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80056f4:	4302      	orrs	r2, r0
 80056f6:	68e0      	ldr	r0, [r4, #12]
 80056f8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056fa:	6920      	ldr	r0, [r4, #16]
 80056fc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80056fe:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005700:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005702:	4925      	ldr	r1, [pc, #148]	; (8005798 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005704:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	400a      	ands	r2, r1
 800570a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005712:	69a0      	ldr	r0, [r4, #24]
 8005714:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005716:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005718:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	400a      	ands	r2, r1
 800571e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005726:	6a20      	ldr	r0, [r4, #32]
 8005728:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800572a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800572c:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	400a      	ands	r2, r1
 8005732:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800573a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800573c:	4302      	orrs	r2, r0
 800573e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	4011      	ands	r1, r2
 8005744:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005746:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005748:	695a      	ldr	r2, [r3, #20]
 800574a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800574e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005750:	430a      	orrs	r2, r1
 8005752:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005756:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800575a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800575e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005762:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005766:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800576a:	430a      	orrs	r2, r1
 800576c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005770:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005774:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005776:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800577a:	f042 0206 	orr.w	r2, r2, #6
 800577e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005788:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800578a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800578e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005792:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005794:	2001      	movs	r0, #1
 8005796:	e7fc      	b.n	8005792 <HAL_LTDC_Init+0xce>
 8005798:	f000f800 	.word	0xf000f800

0800579c <HAL_LTDC_ErrorCallback>:
 800579c:	4770      	bx	lr

0800579e <HAL_LTDC_ReloadEventCallback>:
 800579e:	4770      	bx	lr

080057a0 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80057a0:	6803      	ldr	r3, [r0, #0]
{
 80057a2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80057a4:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 80057a6:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80057a8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80057aa:	0772      	lsls	r2, r6, #29
 80057ac:	d514      	bpl.n	80057d8 <HAL_LTDC_IRQHandler+0x38>
 80057ae:	0769      	lsls	r1, r5, #29
 80057b0:	d512      	bpl.n	80057d8 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80057b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b4:	f022 0204 	bic.w	r2, r2, #4
 80057b8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80057ba:	2204      	movs	r2, #4
 80057bc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80057be:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80057c2:	f043 0301 	orr.w	r3, r3, #1
 80057c6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80057ca:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80057cc:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80057d0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80057d4:	f7ff ffe2 	bl	800579c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80057d8:	07b2      	lsls	r2, r6, #30
 80057da:	d516      	bpl.n	800580a <HAL_LTDC_IRQHandler+0x6a>
 80057dc:	07ab      	lsls	r3, r5, #30
 80057de:	d514      	bpl.n	800580a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80057e0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80057e2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80057e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e6:	f022 0202 	bic.w	r2, r2, #2
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80057ec:	2202      	movs	r2, #2
 80057ee:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80057f0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80057fa:	2304      	movs	r3, #4
 80057fc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005800:	2300      	movs	r3, #0
 8005802:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005806:	f7ff ffc9 	bl	800579c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800580a:	07f0      	lsls	r0, r6, #31
 800580c:	d510      	bpl.n	8005830 <HAL_LTDC_IRQHandler+0x90>
 800580e:	07e9      	lsls	r1, r5, #31
 8005810:	d50e      	bpl.n	8005830 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005812:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8005814:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005818:	f022 0201 	bic.w	r2, r2, #1
 800581c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800581e:	2201      	movs	r2, #1
 8005820:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8005822:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005824:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005828:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800582c:	f7fd fc28 	bl	8003080 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005830:	0732      	lsls	r2, r6, #28
 8005832:	d511      	bpl.n	8005858 <HAL_LTDC_IRQHandler+0xb8>
 8005834:	072b      	lsls	r3, r5, #28
 8005836:	d50f      	bpl.n	8005858 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005838:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800583a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800583c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583e:	f022 0208 	bic.w	r2, r2, #8
 8005842:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005844:	2208      	movs	r2, #8
 8005846:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005848:	2301      	movs	r3, #1
 800584a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800584e:	2300      	movs	r3, #0
 8005850:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005854:	f7ff ffa3 	bl	800579e <HAL_LTDC_ReloadEventCallback>
}
 8005858:	bd70      	pop	{r4, r5, r6, pc}

0800585a <HAL_LTDC_ConfigLayer>:
{
 800585a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800585e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005862:	4606      	mov	r6, r0
 8005864:	460f      	mov	r7, r1
 8005866:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005868:	2b01      	cmp	r3, #1
 800586a:	f04f 0002 	mov.w	r0, #2
 800586e:	d01f      	beq.n	80058b0 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005870:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8005872:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005876:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005878:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800587c:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005880:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005884:	3438      	adds	r4, #56	; 0x38
 8005886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800588a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800588c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800588e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005892:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005894:	4630      	mov	r0, r6
 8005896:	4662      	mov	r2, ip
 8005898:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800589a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800589c:	f7ff fe8b 	bl	80055b6 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80058a0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80058a2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80058a4:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80058a8:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80058ac:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80058b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058b4 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80058b4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	f04f 0302 	mov.w	r3, #2
 80058be:	d012      	beq.n	80058e6 <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058c0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80058c4:	6803      	ldr	r3, [r0, #0]
 80058c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80058ce:	4a07      	ldr	r2, [pc, #28]	; (80058ec <HAL_LTDC_ProgramLineEvent+0x38>)
 80058d0:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80058d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058d4:	f042 0201 	orr.w	r2, r2, #1
 80058d8:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 80058da:	2301      	movs	r3, #1
 80058dc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80058e0:	2300      	movs	r3, #0
 80058e2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80058e6:	4618      	mov	r0, r3
}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40016800 	.word	0x40016800

080058f0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80058f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80058f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80058f6:	4c19      	ldr	r4, [pc, #100]	; (800595c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80058f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800590e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005910:	f7fe fe9a 	bl	8004648 <HAL_GetTick>
 8005914:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	03da      	lsls	r2, r3, #15
 800591a:	d50c      	bpl.n	8005936 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800591c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800591e:	4d0f      	ldr	r5, [pc, #60]	; (800595c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005924:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005926:	f7fe fe8f 	bl	8004648 <HAL_GetTick>
 800592a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800592c:	686b      	ldr	r3, [r5, #4]
 800592e:	039b      	lsls	r3, r3, #14
 8005930:	d50a      	bpl.n	8005948 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005932:	2000      	movs	r0, #0
 8005934:	e006      	b.n	8005944 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005936:	f7fe fe87 	bl	8004648 <HAL_GetTick>
 800593a:	1b40      	subs	r0, r0, r5
 800593c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005940:	d9e9      	bls.n	8005916 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005942:	2003      	movs	r0, #3
}
 8005944:	b003      	add	sp, #12
 8005946:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005948:	f7fe fe7e 	bl	8004648 <HAL_GetTick>
 800594c:	1b00      	subs	r0, r0, r4
 800594e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005952:	d9eb      	bls.n	800592c <HAL_PWREx_EnableOverDrive+0x3c>
 8005954:	e7f5      	b.n	8005942 <HAL_PWREx_EnableOverDrive+0x52>
 8005956:	bf00      	nop
 8005958:	40023800 	.word	0x40023800
 800595c:	40007000 	.word	0x40007000

08005960 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005964:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005966:	b136      	cbz	r6, 8005976 <QSPI_Config+0x16>
 8005968:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800596c:	d003      	beq.n	8005976 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800596e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005970:	6804      	ldr	r4, [r0, #0]
 8005972:	3b01      	subs	r3, #1
 8005974:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005976:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800597a:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800597e:	f1b9 0f00 	cmp.w	r9, #0
 8005982:	d04f      	beq.n	8005a24 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005984:	694b      	ldr	r3, [r1, #20]
 8005986:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800598a:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800598c:	f8d1 a000 	ldr.w	sl, [r1]
 8005990:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8005994:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8005998:	ea49 0902 	orr.w	r9, r9, r2
 800599c:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80059a0:	b335      	cbz	r5, 80059f0 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80059a2:	688b      	ldr	r3, [r1, #8]
 80059a4:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80059a8:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80059aa:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80059ac:	b19f      	cbz	r7, 80059d6 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80059ae:	ea4a 0307 	orr.w	r3, sl, r7
 80059b2:	4323      	orrs	r3, r4
 80059b4:	68cc      	ldr	r4, [r1, #12]
 80059b6:	ea43 0308 	orr.w	r3, r3, r8
 80059ba:	ea43 030e 	orr.w	r3, r3, lr
 80059be:	4333      	orrs	r3, r6
 80059c0:	4323      	orrs	r3, r4
 80059c2:	ea43 030c 	orr.w	r3, r3, ip
 80059c6:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80059c8:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80059cc:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80059ce:	d00d      	beq.n	80059ec <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80059d0:	684b      	ldr	r3, [r1, #4]
 80059d2:	6183      	str	r3, [r0, #24]
 80059d4:	e00a      	b.n	80059ec <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80059d6:	ea4a 0304 	orr.w	r3, sl, r4
 80059da:	ea43 0308 	orr.w	r3, r3, r8
 80059de:	ea43 030e 	orr.w	r3, r3, lr
 80059e2:	4333      	orrs	r3, r6
 80059e4:	ea43 030c 	orr.w	r3, r3, ip
 80059e8:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80059ea:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80059ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80059f0:	b16f      	cbz	r7, 8005a0e <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80059f2:	ea4a 0307 	orr.w	r3, sl, r7
 80059f6:	4323      	orrs	r3, r4
 80059f8:	68cc      	ldr	r4, [r1, #12]
 80059fa:	ea43 0308 	orr.w	r3, r3, r8
 80059fe:	ea43 030e 	orr.w	r3, r3, lr
 8005a02:	4323      	orrs	r3, r4
 8005a04:	ea43 030c 	orr.w	r3, r3, ip
 8005a08:	ea43 0309 	orr.w	r3, r3, r9
 8005a0c:	e7dc      	b.n	80059c8 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a0e:	ea4a 0304 	orr.w	r3, sl, r4
 8005a12:	ea43 0308 	orr.w	r3, r3, r8
 8005a16:	ea43 030e 	orr.w	r3, r3, lr
 8005a1a:	ea43 030c 	orr.w	r3, r3, ip
 8005a1e:	ea43 0309 	orr.w	r3, r3, r9
 8005a22:	e7e2      	b.n	80059ea <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005a24:	b365      	cbz	r5, 8005a80 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005a26:	6804      	ldr	r4, [r0, #0]
 8005a28:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a2a:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005a2c:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005a2e:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a32:	694e      	ldr	r6, [r1, #20]
 8005a34:	ea43 0502 	orr.w	r5, r3, r2
 8005a38:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005a3c:	04b6      	lsls	r6, r6, #18
 8005a3e:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005a42:	b1a7      	cbz	r7, 8005a6e <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a44:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005a46:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a4a:	ea40 0008 	orr.w	r0, r0, r8
 8005a4e:	ea43 0300 	orr.w	r3, r3, r0
 8005a52:	68c8      	ldr	r0, [r1, #12]
 8005a54:	ea43 030c 	orr.w	r3, r3, ip
 8005a58:	ea43 0300 	orr.w	r3, r3, r0
 8005a5c:	ea43 0306 	orr.w	r3, r3, r6
 8005a60:	ea43 0305 	orr.w	r3, r3, r5
 8005a64:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005a66:	d0c1      	beq.n	80059ec <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005a68:	684b      	ldr	r3, [r1, #4]
 8005a6a:	61a3      	str	r3, [r4, #24]
 8005a6c:	e7be      	b.n	80059ec <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a6e:	ea40 0008 	orr.w	r0, r0, r8
 8005a72:	4303      	orrs	r3, r0
 8005a74:	ea43 030c 	orr.w	r3, r3, ip
 8005a78:	4333      	orrs	r3, r6
 8005a7a:	432b      	orrs	r3, r5
 8005a7c:	6163      	str	r3, [r4, #20]
 8005a7e:	e7b5      	b.n	80059ec <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005a80:	b17f      	cbz	r7, 8005aa2 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a82:	ea46 0307 	orr.w	r3, r6, r7
 8005a86:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005a88:	6800      	ldr	r0, [r0, #0]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	4323      	orrs	r3, r4
 8005a8e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8005a90:	4323      	orrs	r3, r4
 8005a92:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005a94:	4323      	orrs	r3, r4
 8005a96:	68cc      	ldr	r4, [r1, #12]
 8005a98:	4323      	orrs	r3, r4
 8005a9a:	694c      	ldr	r4, [r1, #20]
 8005a9c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005aa0:	e792      	b.n	80059c8 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005aa2:	2e00      	cmp	r6, #0
 8005aa4:	d0a2      	beq.n	80059ec <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005aa6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	4333      	orrs	r3, r6
 8005aac:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	694b      	ldr	r3, [r1, #20]
 8005ab2:	4332      	orrs	r2, r6
 8005ab4:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8005ab6:	4332      	orrs	r2, r6
 8005ab8:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8005abc:	6142      	str	r2, [r0, #20]
}
 8005abe:	e795      	b.n	80059ec <QSPI_Config+0x8c>

08005ac0 <QSPI_WaitFlagStateUntilTimeout>:
{
 8005ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005ac8:	4604      	mov	r4, r0
 8005aca:	460e      	mov	r6, r1
 8005acc:	4615      	mov	r5, r2
 8005ace:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ad0:	6822      	ldr	r2, [r4, #0]
 8005ad2:	6893      	ldr	r3, [r2, #8]
 8005ad4:	4233      	tst	r3, r6
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	42ab      	cmp	r3, r5
 8005ade:	d101      	bne.n	8005ae4 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e012      	b.n	8005b0a <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005ae4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005ae8:	d0f3      	beq.n	8005ad2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aea:	f7fe fdad 	bl	8004648 <HAL_GetTick>
 8005aee:	1bc0      	subs	r0, r0, r7
 8005af0:	4540      	cmp	r0, r8
 8005af2:	d802      	bhi.n	8005afa <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8005af4:	f1b8 0f00 	cmp.w	r8, #0
 8005af8:	d1ea      	bne.n	8005ad0 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005afa:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005afc:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005afe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005b02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005b10 <HAL_QSPI_Init>:
{
 8005b10:	b530      	push	{r4, r5, lr}
 8005b12:	4604      	mov	r4, r0
 8005b14:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005b16:	f7fe fd97 	bl	8004648 <HAL_GetTick>
 8005b1a:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8005b1c:	2c00      	cmp	r4, #0
 8005b1e:	d047      	beq.n	8005bb0 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005b20:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005b24:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005b28:	b94a      	cbnz	r2, 8005b3e <HAL_QSPI_Init+0x2e>
 8005b2a:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8005b2c:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8005b2e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8005b32:	f7fb fd83 	bl	800163c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8005b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3a:	9b03      	ldr	r3, [sp, #12]
 8005b3c:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005b3e:	6820      	ldr	r0, [r4, #0]
 8005b40:	68a1      	ldr	r1, [r4, #8]
 8005b42:	6802      	ldr	r2, [r0, #0]
 8005b44:	3901      	subs	r1, #1
 8005b46:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005b4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b4e:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005b50:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b52:	4620      	mov	r0, r4
 8005b54:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005b56:	9200      	str	r2, [sp, #0]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f7ff ffb1 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005b5e:	bb10      	cbnz	r0, 8005ba6 <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005b60:	6822      	ldr	r2, [r4, #0]
 8005b62:	69e5      	ldr	r5, [r4, #28]
 8005b64:	68e3      	ldr	r3, [r4, #12]
 8005b66:	6811      	ldr	r1, [r2, #0]
 8005b68:	432b      	orrs	r3, r5
 8005b6a:	6a25      	ldr	r5, [r4, #32]
 8005b6c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005b70:	432b      	orrs	r3, r5
 8005b72:	6865      	ldr	r5, [r4, #4]
 8005b74:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005b78:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005b80:	6855      	ldr	r5, [r2, #4]
 8005b82:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005b86:	430b      	orrs	r3, r1
 8005b88:	6921      	ldr	r1, [r4, #16]
 8005b8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005b8e:	4909      	ldr	r1, [pc, #36]	; (8005bb4 <HAL_QSPI_Init+0xa4>)
 8005b90:	4029      	ands	r1, r5
 8005b92:	430b      	orrs	r3, r1
 8005b94:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005b96:	6813      	ldr	r3, [r2, #0]
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8005b9e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ba0:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8005ba2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005bac:	b005      	add	sp, #20
 8005bae:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	e7fb      	b.n	8005bac <HAL_QSPI_Init+0x9c>
 8005bb4:	ffe0f8fe 	.word	0xffe0f8fe

08005bb8 <HAL_QSPI_DeInit>:
{
 8005bb8:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8005bba:	4604      	mov	r4, r0
 8005bbc:	b168      	cbz	r0, 8005bda <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8005bbe:	6802      	ldr	r2, [r0, #0]
 8005bc0:	6813      	ldr	r3, [r2, #0]
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8005bc8:	f7fb fda6 	bl	8001718 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005bcc:	2000      	movs	r0, #0
 8005bce:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8005bd0:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005bd4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005bd8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005bda:	2001      	movs	r0, #1
 8005bdc:	e7fc      	b.n	8005bd8 <HAL_QSPI_DeInit+0x20>

08005bde <HAL_QSPI_Command>:
{
 8005bde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005be2:	4604      	mov	r4, r0
 8005be4:	b085      	sub	sp, #20
 8005be6:	4617      	mov	r7, r2
 8005be8:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8005bea:	f7fe fd2d 	bl	8004648 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005bee:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005bf2:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005bf4:	2a01      	cmp	r2, #1
 8005bf6:	d033      	beq.n	8005c60 <HAL_QSPI_Command+0x82>
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	2602      	movs	r6, #2
 8005bfc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005c00:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005c04:	2a01      	cmp	r2, #1
 8005c06:	fa5f f882 	uxtb.w	r8, r2
 8005c0a:	d127      	bne.n	8005c5c <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c0c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005c0e:	9003      	str	r0, [sp, #12]
 8005c10:	2120      	movs	r1, #32
 8005c12:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c14:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005c16:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005c18:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005c1c:	f7ff ff50 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005c20:	4605      	mov	r5, r0
 8005c22:	b9a0      	cbnz	r0, 8005c4e <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005c24:	4602      	mov	r2, r0
 8005c26:	4649      	mov	r1, r9
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f7ff fe99 	bl	8005960 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8005c2e:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8005c32:	9b03      	ldr	r3, [sp, #12]
 8005c34:	b94a      	cbnz	r2, 8005c4a <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005c36:	4642      	mov	r2, r8
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	9700      	str	r7, [sp, #0]
 8005c3e:	f7ff ff3f 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005c42:	4605      	mov	r5, r0
 8005c44:	b918      	cbnz	r0, 8005c4e <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005c4a:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005c54:	4628      	mov	r0, r5
 8005c56:	b005      	add	sp, #20
 8005c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8005c5c:	4635      	mov	r5, r6
 8005c5e:	e7f6      	b.n	8005c4e <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8005c60:	2502      	movs	r5, #2
 8005c62:	e7f7      	b.n	8005c54 <HAL_QSPI_Command+0x76>

08005c64 <HAL_QSPI_AutoPolling>:
{
 8005c64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005c68:	4604      	mov	r4, r0
 8005c6a:	4615      	mov	r5, r2
 8005c6c:	461e      	mov	r6, r3
 8005c6e:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8005c70:	f7fe fcea 	bl	8004648 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005c74:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005c78:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005c7a:	2a01      	cmp	r2, #1
 8005c7c:	d040      	beq.n	8005d00 <HAL_QSPI_AutoPolling+0x9c>
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005c84:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005c88:	2a01      	cmp	r2, #1
 8005c8a:	b2d7      	uxtb	r7, r2
 8005c8c:	d136      	bne.n	8005cfc <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005c8e:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c90:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005c92:	9003      	str	r0, [sp, #12]
 8005c94:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c96:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005c98:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005c9a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005c9e:	2120      	movs	r1, #32
 8005ca0:	f7ff ff0e 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005ca4:	bb20      	cbnz	r0, 8005cf0 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005ca6:	6821      	ldr	r1, [r4, #0]
 8005ca8:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005caa:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8005cac:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8005cae:	686a      	ldr	r2, [r5, #4]
 8005cb0:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8005cb2:	68aa      	ldr	r2, [r5, #8]
 8005cb4:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005cb6:	680a      	ldr	r2, [r1, #0]
 8005cb8:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005cbc:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005cbe:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005cc0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005cc4:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005cc6:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8005cc8:	68ea      	ldr	r2, [r5, #12]
 8005cca:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8005cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cd2:	f7ff fe45 	bl	8005960 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005cd6:	9b03      	ldr	r3, [sp, #12]
 8005cd8:	463a      	mov	r2, r7
 8005cda:	2108      	movs	r1, #8
 8005cdc:	4620      	mov	r0, r4
 8005cde:	9600      	str	r6, [sp, #0]
 8005ce0:	f7ff feee 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005ce4:	b920      	cbnz	r0, 8005cf0 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	2208      	movs	r2, #8
 8005cea:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005cec:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005cf6:	b004      	add	sp, #16
 8005cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8005cfc:	2002      	movs	r0, #2
 8005cfe:	e7f7      	b.n	8005cf0 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8005d00:	2002      	movs	r0, #2
 8005d02:	e7f8      	b.n	8005cf6 <HAL_QSPI_AutoPolling+0x92>

08005d04 <HAL_QSPI_MemoryMapped>:
{
 8005d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d06:	4604      	mov	r4, r0
 8005d08:	4616      	mov	r6, r2
 8005d0a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005d0c:	f7fe fc9c 	bl	8004648 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005d10:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005d14:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8005d16:	2a01      	cmp	r2, #1
 8005d18:	d033      	beq.n	8005d82 <HAL_QSPI_MemoryMapped+0x7e>
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005d20:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005d24:	2a01      	cmp	r2, #1
 8005d26:	d12a      	bne.n	8005d7e <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d28:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005d2a:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005d2c:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d2e:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005d30:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005d34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d36:	9100      	str	r1, [sp, #0]
 8005d38:	2120      	movs	r1, #32
 8005d3a:	f7ff fec1 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005d3e:	4605      	mov	r5, r0
 8005d40:	b9b8      	cbnz	r0, 8005d72 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	6872      	ldr	r2, [r6, #4]
 8005d46:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005d48:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005d4a:	f020 0008 	bic.w	r0, r0, #8
 8005d4e:	ea40 0002 	orr.w	r0, r0, r2
 8005d52:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8005d54:	d107      	bne.n	8005d66 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8005d56:	6832      	ldr	r2, [r6, #0]
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005d64:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8005d66:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8005d6a:	4639      	mov	r1, r7
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f7ff fdf7 	bl	8005960 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8005d72:	2300      	movs	r3, #0
 8005d74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005d78:	4628      	mov	r0, r5
 8005d7a:	b003      	add	sp, #12
 8005d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8005d7e:	2502      	movs	r5, #2
 8005d80:	e7f7      	b.n	8005d72 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8005d82:	2502      	movs	r5, #2
 8005d84:	e7f8      	b.n	8005d78 <HAL_QSPI_MemoryMapped+0x74>

08005d86 <HAL_QSPI_Abort>:
{
 8005d86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d88:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005d8a:	f7fe fc5d 	bl	8004648 <HAL_GetTick>
 8005d8e:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8005d90:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005d94:	f012 0002 	ands.w	r0, r2, #2
 8005d98:	d036      	beq.n	8005e08 <HAL_QSPI_Abort+0x82>
    __HAL_UNLOCK(hqspi);
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005da0:	6822      	ldr	r2, [r4, #0]
 8005da2:	6811      	ldr	r1, [r2, #0]
 8005da4:	0749      	lsls	r1, r1, #29
 8005da6:	d50d      	bpl.n	8005dc4 <HAL_QSPI_Abort+0x3e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005da8:	6811      	ldr	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005daa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005dac:	f021 0104 	bic.w	r1, r1, #4
 8005db0:	9303      	str	r3, [sp, #12]
 8005db2:	6011      	str	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005db4:	f7fe fd6e 	bl	8004894 <HAL_DMA_Abort>
      if(status != HAL_OK)
 8005db8:	9b03      	ldr	r3, [sp, #12]
 8005dba:	b118      	cbz	r0, 8005dc4 <HAL_QSPI_Abort+0x3e>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005dbc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005dbe:	f042 0204 	orr.w	r2, r2, #4
 8005dc2:	6462      	str	r2, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005dc4:	6821      	ldr	r1, [r4, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	9303      	str	r3, [sp, #12]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005dca:	680a      	ldr	r2, [r1, #0]
 8005dcc:	f042 0202 	orr.w	r2, r2, #2
 8005dd0:	600a      	str	r2, [r1, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005dd2:	2102      	movs	r1, #2
 8005dd4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005dd6:	9200      	str	r2, [sp, #0]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f7ff fe71 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	b990      	cbnz	r0, 8005e08 <HAL_QSPI_Abort+0x82>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005de2:	6822      	ldr	r2, [r4, #0]
 8005de4:	2102      	movs	r1, #2
 8005de6:	60d1      	str	r1, [r2, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005de8:	2120      	movs	r1, #32
 8005dea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005dec:	9200      	str	r2, [sp, #0]
 8005dee:	4602      	mov	r2, r0
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7ff fe65 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005df6:	b938      	cbnz	r0, 8005e08 <HAL_QSPI_Abort+0x82>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005df8:	6822      	ldr	r2, [r4, #0]
 8005dfa:	6953      	ldr	r3, [r2, #20]
 8005dfc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8005e00:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8005e08:	b004      	add	sp, #16
 8005e0a:	bd10      	pop	{r4, pc}

08005e0c <HAL_QSPI_Transmit>:
{
 8005e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e0e:	4604      	mov	r4, r0
 8005e10:	b085      	sub	sp, #20
 8005e12:	4616      	mov	r6, r2
 8005e14:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005e16:	f7fe fc17 	bl	8004648 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8005e1a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005e1e:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005e20:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8005e22:	2a01      	cmp	r2, #1
 8005e24:	d04c      	beq.n	8005ec0 <HAL_QSPI_Transmit+0xb4>
 8005e26:	2201      	movs	r2, #1
 8005e28:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005e2c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005e30:	2a01      	cmp	r2, #1
 8005e32:	b2d0      	uxtb	r0, r2
 8005e34:	d142      	bne.n	8005ebc <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005e36:	2200      	movs	r2, #0
 8005e38:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005e3a:	2f00      	cmp	r7, #0
 8005e3c:	d039      	beq.n	8005eb2 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005e3e:	2212      	movs	r2, #18
 8005e40:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005e44:	692a      	ldr	r2, [r5, #16]
 8005e46:	3201      	adds	r2, #1
 8005e48:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005e4a:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8005e4c:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005e4e:	3201      	adds	r2, #1
 8005e50:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005e52:	696a      	ldr	r2, [r5, #20]
 8005e54:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005e58:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8005e5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e5c:	b9a2      	cbnz	r2, 8005e88 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005e5e:	2201      	movs	r2, #1
 8005e60:	2102      	movs	r1, #2
 8005e62:	4620      	mov	r0, r4
 8005e64:	9600      	str	r6, [sp, #0]
 8005e66:	f7ff fe2b 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005e6a:	b928      	cbnz	r0, 8005e78 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8005e70:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005e72:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8005e74:	f7ff ff87 	bl	8005d86 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005e84:	b005      	add	sp, #20
 8005e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005e88:	2201      	movs	r2, #1
 8005e8a:	2104      	movs	r1, #4
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	9600      	str	r6, [sp, #0]
 8005e90:	9303      	str	r3, [sp, #12]
 8005e92:	f7ff fe15 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d1ee      	bne.n	8005e78 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005e9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005e9c:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8005ea4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ea6:	3201      	adds	r2, #1
 8005ea8:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8005eaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005eac:	3a01      	subs	r2, #1
 8005eae:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005eb0:	e7d3      	b.n	8005e5a <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005eb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005eb4:	f043 0308 	orr.w	r3, r3, #8
 8005eb8:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8005eba:	e7e0      	b.n	8005e7e <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8005ebc:	2002      	movs	r0, #2
 8005ebe:	e7de      	b.n	8005e7e <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8005ec0:	2002      	movs	r0, #2
 8005ec2:	e7df      	b.n	8005e84 <HAL_QSPI_Transmit+0x78>

08005ec4 <HAL_QSPI_Receive>:
{
 8005ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	b085      	sub	sp, #20
 8005eca:	4616      	mov	r6, r2
 8005ecc:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8005ece:	f7fe fbbb 	bl	8004648 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005ed2:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005ed4:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005ed6:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8005eda:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005ede:	2a01      	cmp	r2, #1
 8005ee0:	d050      	beq.n	8005f84 <HAL_QSPI_Receive+0xc0>
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005ee8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005eec:	2a01      	cmp	r2, #1
 8005eee:	b2d0      	uxtb	r0, r2
 8005ef0:	d146      	bne.n	8005f80 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8005ef6:	2f00      	cmp	r7, #0
 8005ef8:	d03d      	beq.n	8005f76 <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005efa:	2222      	movs	r2, #34	; 0x22
 8005efc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005f00:	692a      	ldr	r2, [r5, #16]
 8005f02:	3201      	adds	r2, #1
 8005f04:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005f06:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8005f08:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005f0a:	3201      	adds	r2, #1
 8005f0c:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005f0e:	6969      	ldr	r1, [r5, #20]
 8005f10:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8005f14:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005f18:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005f1a:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8005f1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f20:	b9a2      	cbnz	r2, 8005f4c <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005f22:	2201      	movs	r2, #1
 8005f24:	2102      	movs	r1, #2
 8005f26:	4620      	mov	r0, r4
 8005f28:	9600      	str	r6, [sp, #0]
 8005f2a:	f7ff fdc9 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8005f2e:	b928      	cbnz	r0, 8005f3c <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8005f34:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005f36:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8005f38:	f7ff ff25 	bl	8005d86 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005f42:	2300      	movs	r3, #0
 8005f44:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005f48:	b005      	add	sp, #20
 8005f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	2106      	movs	r1, #6
 8005f50:	4620      	mov	r0, r4
 8005f52:	9600      	str	r6, [sp, #0]
 8005f54:	9303      	str	r3, [sp, #12]
 8005f56:	f7ff fdb3 	bl	8005ac0 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d1ee      	bne.n	8005f3c <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005f5e:	f895 1020 	ldrb.w	r1, [r5, #32]
 8005f62:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8005f64:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005f66:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8005f68:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005f6a:	3201      	adds	r2, #1
 8005f6c:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8005f6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f70:	3a01      	subs	r2, #1
 8005f72:	63a2      	str	r2, [r4, #56]	; 0x38
 8005f74:	e7d3      	b.n	8005f1e <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005f76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f78:	f043 0308 	orr.w	r3, r3, #8
 8005f7c:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8005f7e:	e7e0      	b.n	8005f42 <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 8005f80:	2002      	movs	r0, #2
 8005f82:	e7de      	b.n	8005f42 <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8005f84:	2002      	movs	r0, #2
 8005f86:	e7df      	b.n	8005f48 <HAL_QSPI_Receive+0x84>

08005f88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	b340      	cbz	r0, 8005fe2 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f90:	6803      	ldr	r3, [r0, #0]
 8005f92:	07db      	lsls	r3, r3, #31
 8005f94:	d410      	bmi.n	8005fb8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	079f      	lsls	r7, r3, #30
 8005f9a:	d464      	bmi.n	8006066 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	0719      	lsls	r1, r3, #28
 8005fa0:	f100 80aa 	bmi.w	80060f8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	075a      	lsls	r2, r3, #29
 8005fa8:	f100 80cb 	bmi.w	8006142 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fac:	69a2      	ldr	r2, [r4, #24]
 8005fae:	2a00      	cmp	r2, #0
 8005fb0:	f040 8134 	bne.w	800621c <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	e02b      	b.n	8006010 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fb8:	4b96      	ldr	r3, [pc, #600]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	f002 020c 	and.w	r2, r2, #12
 8005fc0:	2a04      	cmp	r2, #4
 8005fc2:	d007      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	f002 020c 	and.w	r2, r2, #12
 8005fca:	2a08      	cmp	r2, #8
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x5e>
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	0256      	lsls	r6, r2, #9
 8005fd2:	d508      	bpl.n	8005fe6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd4:	4b8f      	ldr	r3, [pc, #572]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	039d      	lsls	r5, r3, #14
 8005fda:	d5dc      	bpl.n	8005f96 <HAL_RCC_OscConfig+0xe>
 8005fdc:	6863      	ldr	r3, [r4, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1d9      	bne.n	8005f96 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	e014      	b.n	8006010 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fe6:	6862      	ldr	r2, [r4, #4]
 8005fe8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005fec:	d113      	bne.n	8006016 <HAL_RCC_OscConfig+0x8e>
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ff4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005ff6:	f7fe fb27 	bl	8004648 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffa:	4e86      	ldr	r6, [pc, #536]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8005ffc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffe:	6833      	ldr	r3, [r6, #0]
 8006000:	0398      	lsls	r0, r3, #14
 8006002:	d4c8      	bmi.n	8005f96 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006004:	f7fe fb20 	bl	8004648 <HAL_GetTick>
 8006008:	1b40      	subs	r0, r0, r5
 800600a:	2864      	cmp	r0, #100	; 0x64
 800600c:	d9f7      	bls.n	8005ffe <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800600e:	2003      	movs	r0, #3
}
 8006010:	b002      	add	sp, #8
 8006012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006016:	4d7f      	ldr	r5, [pc, #508]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b992      	cbnz	r2, 8006042 <HAL_RCC_OscConfig+0xba>
 800601c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006028:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800602a:	f7fe fb0d 	bl	8004648 <HAL_GetTick>
 800602e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006030:	682b      	ldr	r3, [r5, #0]
 8006032:	0399      	lsls	r1, r3, #14
 8006034:	d5af      	bpl.n	8005f96 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006036:	f7fe fb07 	bl	8004648 <HAL_GetTick>
 800603a:	1b80      	subs	r0, r0, r6
 800603c:	2864      	cmp	r0, #100	; 0x64
 800603e:	d9f7      	bls.n	8006030 <HAL_RCC_OscConfig+0xa8>
 8006040:	e7e5      	b.n	800600e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006042:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8006046:	d107      	bne.n	8006058 <HAL_RCC_OscConfig+0xd0>
 8006048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800604c:	602b      	str	r3, [r5, #0]
 800604e:	682b      	ldr	r3, [r5, #0]
 8006050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006054:	602b      	str	r3, [r5, #0]
 8006056:	e7ce      	b.n	8005ff6 <HAL_RCC_OscConfig+0x6e>
 8006058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605c:	602b      	str	r3, [r5, #0]
 800605e:	682b      	ldr	r3, [r5, #0]
 8006060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006064:	e7f6      	b.n	8006054 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006066:	4b6b      	ldr	r3, [pc, #428]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	f012 0f0c 	tst.w	r2, #12
 800606e:	d007      	beq.n	8006080 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	f002 020c 	and.w	r2, r2, #12
 8006076:	2a08      	cmp	r2, #8
 8006078:	d111      	bne.n	800609e <HAL_RCC_OscConfig+0x116>
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	0252      	lsls	r2, r2, #9
 800607e:	d40e      	bmi.n	800609e <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006080:	4a64      	ldr	r2, [pc, #400]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	079b      	lsls	r3, r3, #30
 8006086:	d502      	bpl.n	800608e <HAL_RCC_OscConfig+0x106>
 8006088:	68e3      	ldr	r3, [r4, #12]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d1a9      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608e:	6813      	ldr	r3, [r2, #0]
 8006090:	6921      	ldr	r1, [r4, #16]
 8006092:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006096:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800609a:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800609c:	e77e      	b.n	8005f9c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800609e:	68e2      	ldr	r2, [r4, #12]
 80060a0:	b1c2      	cbz	r2, 80060d4 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 80060a2:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060a4:	4d5b      	ldr	r5, [pc, #364]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80060ac:	f7fe facc 	bl	8004648 <HAL_GetTick>
 80060b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	079f      	lsls	r7, r3, #30
 80060b6:	d507      	bpl.n	80060c8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b8:	682b      	ldr	r3, [r5, #0]
 80060ba:	6922      	ldr	r2, [r4, #16]
 80060bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80060c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	e769      	b.n	8005f9c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c8:	f7fe fabe 	bl	8004648 <HAL_GetTick>
 80060cc:	1b80      	subs	r0, r0, r6
 80060ce:	2802      	cmp	r0, #2
 80060d0:	d9ef      	bls.n	80060b2 <HAL_RCC_OscConfig+0x12a>
 80060d2:	e79c      	b.n	800600e <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80060d4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d6:	4e4f      	ldr	r6, [pc, #316]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 80060d8:	f022 0201 	bic.w	r2, r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80060de:	f7fe fab3 	bl	8004648 <HAL_GetTick>
 80060e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	0798      	lsls	r0, r3, #30
 80060e8:	f57f af58 	bpl.w	8005f9c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060ec:	f7fe faac 	bl	8004648 <HAL_GetTick>
 80060f0:	1b40      	subs	r0, r0, r5
 80060f2:	2802      	cmp	r0, #2
 80060f4:	d9f6      	bls.n	80060e4 <HAL_RCC_OscConfig+0x15c>
 80060f6:	e78a      	b.n	800600e <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060f8:	6963      	ldr	r3, [r4, #20]
 80060fa:	4d46      	ldr	r5, [pc, #280]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
 80060fc:	b183      	cbz	r3, 8006120 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80060fe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006106:	f7fe fa9f 	bl	8004648 <HAL_GetTick>
 800610a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800610c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800610e:	079b      	lsls	r3, r3, #30
 8006110:	f53f af48 	bmi.w	8005fa4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006114:	f7fe fa98 	bl	8004648 <HAL_GetTick>
 8006118:	1b80      	subs	r0, r0, r6
 800611a:	2802      	cmp	r0, #2
 800611c:	d9f6      	bls.n	800610c <HAL_RCC_OscConfig+0x184>
 800611e:	e776      	b.n	800600e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8006120:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006128:	f7fe fa8e 	bl	8004648 <HAL_GetTick>
 800612c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800612e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006130:	079f      	lsls	r7, r3, #30
 8006132:	f57f af37 	bpl.w	8005fa4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006136:	f7fe fa87 	bl	8004648 <HAL_GetTick>
 800613a:	1b80      	subs	r0, r0, r6
 800613c:	2802      	cmp	r0, #2
 800613e:	d9f6      	bls.n	800612e <HAL_RCC_OscConfig+0x1a6>
 8006140:	e765      	b.n	800600e <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006142:	4b34      	ldr	r3, [pc, #208]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
 8006144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006146:	00d0      	lsls	r0, r2, #3
 8006148:	d427      	bmi.n	800619a <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800614a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800614c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800614e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006152:	641a      	str	r2, [r3, #64]	; 0x40
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800615e:	4d2e      	ldr	r5, [pc, #184]	; (8006218 <HAL_RCC_OscConfig+0x290>)
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	05d9      	lsls	r1, r3, #23
 8006164:	d51b      	bpl.n	800619e <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	4d2a      	ldr	r5, [pc, #168]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
 800616a:	2b01      	cmp	r3, #1
 800616c:	d127      	bne.n	80061be <HAL_RCC_OscConfig+0x236>
 800616e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006170:	f043 0301 	orr.w	r3, r3, #1
 8006174:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006176:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800617a:	f7fe fa65 	bl	8004648 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617e:	4e25      	ldr	r6, [pc, #148]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8006180:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006182:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006184:	079b      	lsls	r3, r3, #30
 8006186:	d53f      	bpl.n	8006208 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8006188:	2f00      	cmp	r7, #0
 800618a:	f43f af0f 	beq.w	8005fac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800618e:	4a21      	ldr	r2, [pc, #132]	; (8006214 <HAL_RCC_OscConfig+0x28c>)
 8006190:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006196:	6413      	str	r3, [r2, #64]	; 0x40
 8006198:	e708      	b.n	8005fac <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800619a:	2700      	movs	r7, #0
 800619c:	e7df      	b.n	800615e <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800619e:	682b      	ldr	r3, [r5, #0]
 80061a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80061a6:	f7fe fa4f 	bl	8004648 <HAL_GetTick>
 80061aa:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	05da      	lsls	r2, r3, #23
 80061b0:	d4d9      	bmi.n	8006166 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b2:	f7fe fa49 	bl	8004648 <HAL_GetTick>
 80061b6:	1b80      	subs	r0, r0, r6
 80061b8:	2864      	cmp	r0, #100	; 0x64
 80061ba:	d9f7      	bls.n	80061ac <HAL_RCC_OscConfig+0x224>
 80061bc:	e727      	b.n	800600e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061be:	b9ab      	cbnz	r3, 80061ec <HAL_RCC_OscConfig+0x264>
 80061c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c6:	f023 0301 	bic.w	r3, r3, #1
 80061ca:	672b      	str	r3, [r5, #112]	; 0x70
 80061cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80061ce:	f023 0304 	bic.w	r3, r3, #4
 80061d2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80061d4:	f7fe fa38 	bl	8004648 <HAL_GetTick>
 80061d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80061dc:	0798      	lsls	r0, r3, #30
 80061de:	d5d3      	bpl.n	8006188 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e0:	f7fe fa32 	bl	8004648 <HAL_GetTick>
 80061e4:	1b80      	subs	r0, r0, r6
 80061e6:	4540      	cmp	r0, r8
 80061e8:	d9f7      	bls.n	80061da <HAL_RCC_OscConfig+0x252>
 80061ea:	e710      	b.n	800600e <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ec:	2b05      	cmp	r3, #5
 80061ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80061f0:	d103      	bne.n	80061fa <HAL_RCC_OscConfig+0x272>
 80061f2:	f043 0304 	orr.w	r3, r3, #4
 80061f6:	672b      	str	r3, [r5, #112]	; 0x70
 80061f8:	e7b9      	b.n	800616e <HAL_RCC_OscConfig+0x1e6>
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	672b      	str	r3, [r5, #112]	; 0x70
 8006200:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006202:	f023 0304 	bic.w	r3, r3, #4
 8006206:	e7b5      	b.n	8006174 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006208:	f7fe fa1e 	bl	8004648 <HAL_GetTick>
 800620c:	1b40      	subs	r0, r0, r5
 800620e:	4540      	cmp	r0, r8
 8006210:	d9b7      	bls.n	8006182 <HAL_RCC_OscConfig+0x1fa>
 8006212:	e6fc      	b.n	800600e <HAL_RCC_OscConfig+0x86>
 8006214:	40023800 	.word	0x40023800
 8006218:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800621c:	4d38      	ldr	r5, [pc, #224]	; (8006300 <HAL_RCC_OscConfig+0x378>)
 800621e:	68ab      	ldr	r3, [r5, #8]
 8006220:	f003 030c 	and.w	r3, r3, #12
 8006224:	2b08      	cmp	r3, #8
 8006226:	d041      	beq.n	80062ac <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8006228:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800622a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800622c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006230:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006232:	d12e      	bne.n	8006292 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8006234:	f7fe fa08 	bl	8004648 <HAL_GetTick>
 8006238:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800623a:	682b      	ldr	r3, [r5, #0]
 800623c:	0199      	lsls	r1, r3, #6
 800623e:	d422      	bmi.n	8006286 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006240:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006242:	085b      	lsrs	r3, r3, #1
 8006244:	1e5a      	subs	r2, r3, #1
 8006246:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800624a:	430b      	orrs	r3, r1
 800624c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006250:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006252:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006256:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006258:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800625c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006260:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006262:	682b      	ldr	r3, [r5, #0]
 8006264:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006268:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800626a:	f7fe f9ed 	bl	8004648 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626e:	4d24      	ldr	r5, [pc, #144]	; (8006300 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8006270:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006272:	682b      	ldr	r3, [r5, #0]
 8006274:	019a      	lsls	r2, r3, #6
 8006276:	f53f ae9d 	bmi.w	8005fb4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800627a:	f7fe f9e5 	bl	8004648 <HAL_GetTick>
 800627e:	1b00      	subs	r0, r0, r4
 8006280:	2802      	cmp	r0, #2
 8006282:	d9f6      	bls.n	8006272 <HAL_RCC_OscConfig+0x2ea>
 8006284:	e6c3      	b.n	800600e <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006286:	f7fe f9df 	bl	8004648 <HAL_GetTick>
 800628a:	1b80      	subs	r0, r0, r6
 800628c:	2802      	cmp	r0, #2
 800628e:	d9d4      	bls.n	800623a <HAL_RCC_OscConfig+0x2b2>
 8006290:	e6bd      	b.n	800600e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8006292:	f7fe f9d9 	bl	8004648 <HAL_GetTick>
 8006296:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	019b      	lsls	r3, r3, #6
 800629c:	f57f ae8a 	bpl.w	8005fb4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a0:	f7fe f9d2 	bl	8004648 <HAL_GetTick>
 80062a4:	1b00      	subs	r0, r0, r4
 80062a6:	2802      	cmp	r0, #2
 80062a8:	d9f6      	bls.n	8006298 <HAL_RCC_OscConfig+0x310>
 80062aa:	e6b0      	b.n	800600e <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ac:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80062ae:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b0:	f43f ae97 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b8:	69e1      	ldr	r1, [r4, #28]
 80062ba:	428a      	cmp	r2, r1
 80062bc:	f47f ae91 	bne.w	8005fe2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c4:	6a21      	ldr	r1, [r4, #32]
 80062c6:	428a      	cmp	r2, r1
 80062c8:	f47f ae8b 	bne.w	8005fe2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062cc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062d2:	401a      	ands	r2, r3
 80062d4:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80062d8:	f47f ae83 	bne.w	8005fe2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80062dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80062de:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80062e2:	0852      	lsrs	r2, r2, #1
 80062e4:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062e6:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80062ea:	f47f ae7a 	bne.w	8005fe2 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062ee:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80062f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80062f4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80062f8:	f43f ae5c 	beq.w	8005fb4 <HAL_RCC_OscConfig+0x2c>
 80062fc:	e671      	b.n	8005fe2 <HAL_RCC_OscConfig+0x5a>
 80062fe:	bf00      	nop
 8006300:	40023800 	.word	0x40023800

08006304 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006304:	4913      	ldr	r1, [pc, #76]	; (8006354 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8006306:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006308:	688b      	ldr	r3, [r1, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
 800630e:	2b04      	cmp	r3, #4
 8006310:	d01b      	beq.n	800634a <HAL_RCC_GetSysClockFreq+0x46>
 8006312:	2b08      	cmp	r3, #8
 8006314:	d11b      	bne.n	800634e <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006316:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006318:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800631c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006320:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006324:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006328:	bf1a      	itte	ne
 800632a:	480b      	ldrne	r0, [pc, #44]	; (8006358 <HAL_RCC_GetSysClockFreq+0x54>)
 800632c:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800632e:	480b      	ldreq	r0, [pc, #44]	; (800635c <HAL_RCC_GetSysClockFreq+0x58>)
 8006330:	fba1 0100 	umull	r0, r1, r1, r0
 8006334:	f7fa fbda 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006338:	4b06      	ldr	r3, [pc, #24]	; (8006354 <HAL_RCC_GetSysClockFreq+0x50>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006340:	3301      	adds	r3, #1
 8006342:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8006344:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006348:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800634a:	4803      	ldr	r0, [pc, #12]	; (8006358 <HAL_RCC_GetSysClockFreq+0x54>)
 800634c:	e7fc      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800634e:	4803      	ldr	r0, [pc, #12]	; (800635c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8006350:	e7fa      	b.n	8006348 <HAL_RCC_GetSysClockFreq+0x44>
 8006352:	bf00      	nop
 8006354:	40023800 	.word	0x40023800
 8006358:	017d7840 	.word	0x017d7840
 800635c:	00f42400 	.word	0x00f42400

08006360 <HAL_RCC_ClockConfig>:
{
 8006360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006364:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006366:	4604      	mov	r4, r0
 8006368:	b910      	cbnz	r0, 8006370 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800636a:	2001      	movs	r0, #1
}
 800636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006370:	4a46      	ldr	r2, [pc, #280]	; (800648c <HAL_RCC_ClockConfig+0x12c>)
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	428b      	cmp	r3, r1
 800637a:	d328      	bcc.n	80063ce <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800637c:	6822      	ldr	r2, [r4, #0]
 800637e:	0797      	lsls	r7, r2, #30
 8006380:	d430      	bmi.n	80063e4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006382:	07d0      	lsls	r0, r2, #31
 8006384:	d444      	bmi.n	8006410 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006386:	4a41      	ldr	r2, [pc, #260]	; (800648c <HAL_RCC_ClockConfig+0x12c>)
 8006388:	6813      	ldr	r3, [r2, #0]
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	42ab      	cmp	r3, r5
 8006390:	d867      	bhi.n	8006462 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006392:	6822      	ldr	r2, [r4, #0]
 8006394:	0751      	lsls	r1, r2, #29
 8006396:	d470      	bmi.n	800647a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006398:	0713      	lsls	r3, r2, #28
 800639a:	d507      	bpl.n	80063ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800639c:	4a3c      	ldr	r2, [pc, #240]	; (8006490 <HAL_RCC_ClockConfig+0x130>)
 800639e:	6921      	ldr	r1, [r4, #16]
 80063a0:	6893      	ldr	r3, [r2, #8]
 80063a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80063a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80063aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063ac:	f7ff ffaa 	bl	8006304 <HAL_RCC_GetSysClockFreq>
 80063b0:	4b37      	ldr	r3, [pc, #220]	; (8006490 <HAL_RCC_ClockConfig+0x130>)
 80063b2:	4a38      	ldr	r2, [pc, #224]	; (8006494 <HAL_RCC_ClockConfig+0x134>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80063ba:	5cd3      	ldrb	r3, [r2, r3]
 80063bc:	40d8      	lsrs	r0, r3
 80063be:	4b36      	ldr	r3, [pc, #216]	; (8006498 <HAL_RCC_ClockConfig+0x138>)
 80063c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80063c2:	4b36      	ldr	r3, [pc, #216]	; (800649c <HAL_RCC_ClockConfig+0x13c>)
 80063c4:	6818      	ldr	r0, [r3, #0]
 80063c6:	f7fb fa33 	bl	8001830 <HAL_InitTick>
  return HAL_OK;
 80063ca:	2000      	movs	r0, #0
 80063cc:	e7ce      	b.n	800636c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ce:	6813      	ldr	r3, [r2, #0]
 80063d0:	f023 030f 	bic.w	r3, r3, #15
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063d8:	6813      	ldr	r3, [r2, #0]
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	428b      	cmp	r3, r1
 80063e0:	d1c3      	bne.n	800636a <HAL_RCC_ClockConfig+0xa>
 80063e2:	e7cb      	b.n	800637c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e4:	f012 0f04 	tst.w	r2, #4
 80063e8:	4b29      	ldr	r3, [pc, #164]	; (8006490 <HAL_RCC_ClockConfig+0x130>)
 80063ea:	d003      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063ec:	6899      	ldr	r1, [r3, #8]
 80063ee:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 80063f2:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f4:	0716      	lsls	r6, r2, #28
 80063f6:	d503      	bpl.n	8006400 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063f8:	6899      	ldr	r1, [r3, #8]
 80063fa:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80063fe:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006400:	4923      	ldr	r1, [pc, #140]	; (8006490 <HAL_RCC_ClockConfig+0x130>)
 8006402:	68a0      	ldr	r0, [r4, #8]
 8006404:	688b      	ldr	r3, [r1, #8]
 8006406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800640a:	4303      	orrs	r3, r0
 800640c:	608b      	str	r3, [r1, #8]
 800640e:	e7b8      	b.n	8006382 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006410:	6861      	ldr	r1, [r4, #4]
 8006412:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <HAL_RCC_ClockConfig+0x130>)
 8006414:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006416:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006418:	d11b      	bne.n	8006452 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800641e:	d0a4      	beq.n	800636a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006420:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006422:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006426:	4f1a      	ldr	r7, [pc, #104]	; (8006490 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006428:	f022 0203 	bic.w	r2, r2, #3
 800642c:	430a      	orrs	r2, r1
 800642e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006430:	f7fe f90a 	bl	8004648 <HAL_GetTick>
 8006434:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6862      	ldr	r2, [r4, #4]
 800643a:	f003 030c 	and.w	r3, r3, #12
 800643e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006442:	d0a0      	beq.n	8006386 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006444:	f7fe f900 	bl	8004648 <HAL_GetTick>
 8006448:	1b80      	subs	r0, r0, r6
 800644a:	4540      	cmp	r0, r8
 800644c:	d9f3      	bls.n	8006436 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800644e:	2003      	movs	r0, #3
 8006450:	e78c      	b.n	800636c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006452:	2902      	cmp	r1, #2
 8006454:	d102      	bne.n	800645c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006456:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800645a:	e7e0      	b.n	800641e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645c:	f012 0f02 	tst.w	r2, #2
 8006460:	e7dd      	b.n	800641e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006462:	6813      	ldr	r3, [r2, #0]
 8006464:	f023 030f 	bic.w	r3, r3, #15
 8006468:	432b      	orrs	r3, r5
 800646a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800646c:	6813      	ldr	r3, [r2, #0]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	42ab      	cmp	r3, r5
 8006474:	f47f af79 	bne.w	800636a <HAL_RCC_ClockConfig+0xa>
 8006478:	e78b      	b.n	8006392 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800647a:	4905      	ldr	r1, [pc, #20]	; (8006490 <HAL_RCC_ClockConfig+0x130>)
 800647c:	68e0      	ldr	r0, [r4, #12]
 800647e:	688b      	ldr	r3, [r1, #8]
 8006480:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006484:	4303      	orrs	r3, r0
 8006486:	608b      	str	r3, [r1, #8]
 8006488:	e786      	b.n	8006398 <HAL_RCC_ClockConfig+0x38>
 800648a:	bf00      	nop
 800648c:	40023c00 	.word	0x40023c00
 8006490:	40023800 	.word	0x40023800
 8006494:	0802bc90 	.word	0x0802bc90
 8006498:	2000000c 	.word	0x2000000c
 800649c:	2000003c 	.word	0x2000003c

080064a0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064a0:	4b04      	ldr	r3, [pc, #16]	; (80064b4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80064a2:	4a05      	ldr	r2, [pc, #20]	; (80064b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80064aa:	5cd3      	ldrb	r3, [r2, r3]
 80064ac:	4a03      	ldr	r2, [pc, #12]	; (80064bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80064ae:	6810      	ldr	r0, [r2, #0]
}
 80064b0:	40d8      	lsrs	r0, r3
 80064b2:	4770      	bx	lr
 80064b4:	40023800 	.word	0x40023800
 80064b8:	0802bca0 	.word	0x0802bca0
 80064bc:	2000000c 	.word	0x2000000c

080064c0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064c0:	230f      	movs	r3, #15
 80064c2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <HAL_RCC_GetClockConfig+0x34>)
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	f002 0203 	and.w	r2, r2, #3
 80064cc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80064d4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80064dc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	08db      	lsrs	r3, r3, #3
 80064e2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80064e6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064e8:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <HAL_RCC_GetClockConfig+0x38>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	600b      	str	r3, [r1, #0]
}
 80064f2:	4770      	bx	lr
 80064f4:	40023800 	.word	0x40023800
 80064f8:	40023c00 	.word	0x40023c00

080064fc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064fc:	6803      	ldr	r3, [r0, #0]
{
 80064fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006502:	f013 0601 	ands.w	r6, r3, #1
{
 8006506:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006508:	d00b      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800650a:	4aaa      	ldr	r2, [pc, #680]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800650c:	6891      	ldr	r1, [r2, #8]
 800650e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8006512:	6091      	str	r1, [r2, #8]
 8006514:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8006516:	6891      	ldr	r1, [r2, #8]
 8006518:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800651a:	fab6 f686 	clz	r6, r6
 800651e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006520:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006522:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8006526:	d012      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006528:	49a2      	ldr	r1, [pc, #648]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800652a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800652c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006530:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006534:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8006538:	bf08      	it	eq
 800653a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800653c:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006540:	bf16      	itet	ne
 8006542:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8006546:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006548:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800654a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800654e:	02d8      	lsls	r0, r3, #11
 8006550:	d510      	bpl.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006552:	4898      	ldr	r0, [pc, #608]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006554:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006556:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800655a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800655e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006562:	ea42 0201 	orr.w	r2, r2, r1
 8006566:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800656a:	f000 8184 	beq.w	8006876 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800656e:	2900      	cmp	r1, #0
 8006570:	bf08      	it	eq
 8006572:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8006574:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006578:	bf18      	it	ne
 800657a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800657c:	0699      	lsls	r1, r3, #26
 800657e:	d531      	bpl.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006580:	4b8c      	ldr	r3, [pc, #560]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006582:	4f8d      	ldr	r7, [pc, #564]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8006584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006586:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800658a:	641a      	str	r2, [r3, #64]	; 0x40
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659e:	f7fe f853 	bl	8004648 <HAL_GetTick>
 80065a2:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	05da      	lsls	r2, r3, #23
 80065a8:	f140 8167 	bpl.w	800687a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065ac:	4f81      	ldr	r7, [pc, #516]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80065ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80065b4:	f040 816c 	bne.w	8006890 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065ba:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80065be:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80065c2:	4a7c      	ldr	r2, [pc, #496]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80065c4:	f040 818a 	bne.w	80068dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80065c8:	6891      	ldr	r1, [r2, #8]
 80065ca:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80065ce:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80065d2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80065d6:	4301      	orrs	r1, r0
 80065d8:	6091      	str	r1, [r2, #8]
 80065da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065de:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80065e0:	430b      	orrs	r3, r1
 80065e2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	06d9      	lsls	r1, r3, #27
 80065e8:	d50c      	bpl.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065ea:	4a72      	ldr	r2, [pc, #456]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80065ec:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80065f0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80065f4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80065f8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80065fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80065fe:	4301      	orrs	r1, r0
 8006600:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006604:	045a      	lsls	r2, r3, #17
 8006606:	d508      	bpl.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006608:	496a      	ldr	r1, [pc, #424]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800660a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800660c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006610:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006614:	4302      	orrs	r2, r0
 8006616:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800661a:	041f      	lsls	r7, r3, #16
 800661c:	d508      	bpl.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800661e:	4965      	ldr	r1, [pc, #404]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006620:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006622:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006626:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800662a:	4302      	orrs	r2, r0
 800662c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006630:	03d8      	lsls	r0, r3, #15
 8006632:	d508      	bpl.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006634:	495f      	ldr	r1, [pc, #380]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006636:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006638:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800663c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006640:	4302      	orrs	r2, r0
 8006642:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006646:	0399      	lsls	r1, r3, #14
 8006648:	d508      	bpl.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800664a:	495a      	ldr	r1, [pc, #360]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800664c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800664e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006652:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006656:	4302      	orrs	r2, r0
 8006658:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800665c:	065a      	lsls	r2, r3, #25
 800665e:	d508      	bpl.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006660:	4954      	ldr	r1, [pc, #336]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006662:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006664:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006668:	f022 0203 	bic.w	r2, r2, #3
 800666c:	4302      	orrs	r2, r0
 800666e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006672:	061f      	lsls	r7, r3, #24
 8006674:	d508      	bpl.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006676:	494f      	ldr	r1, [pc, #316]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006678:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800667a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800667e:	f022 020c 	bic.w	r2, r2, #12
 8006682:	4302      	orrs	r2, r0
 8006684:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006688:	05d8      	lsls	r0, r3, #23
 800668a:	d508      	bpl.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800668c:	4949      	ldr	r1, [pc, #292]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800668e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006690:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006694:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006698:	4302      	orrs	r2, r0
 800669a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800669e:	0599      	lsls	r1, r3, #22
 80066a0:	d508      	bpl.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066a2:	4944      	ldr	r1, [pc, #272]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80066a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80066a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80066aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80066ae:	4302      	orrs	r2, r0
 80066b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066b4:	055a      	lsls	r2, r3, #21
 80066b6:	d508      	bpl.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066b8:	493e      	ldr	r1, [pc, #248]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80066ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80066c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80066c4:	4302      	orrs	r2, r0
 80066c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80066ca:	051f      	lsls	r7, r3, #20
 80066cc:	d508      	bpl.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80066ce:	4939      	ldr	r1, [pc, #228]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80066d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80066d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066da:	4302      	orrs	r2, r0
 80066dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80066e0:	04d8      	lsls	r0, r3, #19
 80066e2:	d508      	bpl.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80066e4:	4933      	ldr	r1, [pc, #204]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80066e6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80066e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80066ec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80066f0:	4302      	orrs	r2, r0
 80066f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80066f6:	0499      	lsls	r1, r3, #18
 80066f8:	d508      	bpl.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80066fa:	492e      	ldr	r1, [pc, #184]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80066fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80066fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006702:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006706:	4302      	orrs	r2, r0
 8006708:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800670c:	025a      	lsls	r2, r3, #9
 800670e:	d508      	bpl.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006710:	4928      	ldr	r1, [pc, #160]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006712:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006714:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006718:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800671c:	4302      	orrs	r2, r0
 800671e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006722:	029f      	lsls	r7, r3, #10
 8006724:	d50c      	bpl.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006726:	4823      	ldr	r0, [pc, #140]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006728:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800672a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800672e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006732:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8006736:	bf08      	it	eq
 8006738:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800673a:	430a      	orrs	r2, r1
 800673c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8006740:	f013 0f08 	tst.w	r3, #8
 8006744:	bf18      	it	ne
 8006746:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006748:	0358      	lsls	r0, r3, #13
 800674a:	d508      	bpl.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800674c:	4919      	ldr	r1, [pc, #100]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800674e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006750:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006754:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006758:	4302      	orrs	r2, r0
 800675a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800675e:	0219      	lsls	r1, r3, #8
 8006760:	d509      	bpl.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006762:	4914      	ldr	r1, [pc, #80]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006764:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006768:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800676c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006770:	4302      	orrs	r2, r0
 8006772:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006776:	2e01      	cmp	r6, #1
 8006778:	f000 80b4 	beq.w	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800677c:	019a      	lsls	r2, r3, #6
 800677e:	f100 80b1 	bmi.w	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006782:	2d01      	cmp	r5, #1
 8006784:	d175      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006786:	4d0b      	ldr	r5, [pc, #44]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800678e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006790:	f7fd ff5a 	bl	8004648 <HAL_GetTick>
 8006794:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006796:	682b      	ldr	r3, [r5, #0]
 8006798:	009f      	lsls	r7, r3, #2
 800679a:	f100 8127 	bmi.w	80069ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	0316      	lsls	r6, r2, #12
 80067a2:	d501      	bpl.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80067a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067a6:	b14b      	cbz	r3, 80067bc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80067a8:	02d0      	lsls	r0, r2, #11
 80067aa:	d522      	bpl.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80067ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067ae:	bb03      	cbnz	r3, 80067f2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80067b0:	e004      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80067b2:	bf00      	nop
 80067b4:	40023800 	.word	0x40023800
 80067b8:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067bc:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067c0:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067c8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80067cc:	430b      	orrs	r3, r1
 80067ce:	6961      	ldr	r1, [r4, #20]
 80067d0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80067d4:	69a1      	ldr	r1, [r4, #24]
 80067d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80067da:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067de:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80067e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80067e4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80067e8:	3901      	subs	r1, #1
 80067ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80067ee:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80067f2:	0291      	lsls	r1, r2, #10
 80067f4:	d515      	bpl.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80067f6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80067f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067fc:	d111      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067fe:	4982      	ldr	r1, [pc, #520]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006800:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006804:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006808:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800680c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006810:	4303      	orrs	r3, r0
 8006812:	6960      	ldr	r0, [r4, #20]
 8006814:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006818:	6a20      	ldr	r0, [r4, #32]
 800681a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800681e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006822:	0712      	lsls	r2, r2, #28
 8006824:	d519      	bpl.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006826:	4a78      	ldr	r2, [pc, #480]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006828:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800682c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006830:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006838:	430b      	orrs	r3, r1
 800683a:	6961      	ldr	r1, [r4, #20]
 800683c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006840:	69e1      	ldr	r1, [r4, #28]
 8006842:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006846:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800684a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800684e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006850:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006854:	430b      	orrs	r3, r1
 8006856:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800685a:	4c6b      	ldr	r4, [pc, #428]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006862:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006864:	f7fd fef0 	bl	8004648 <HAL_GetTick>
 8006868:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	f140 80c4 	bpl.w	80069fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006872:	2000      	movs	r0, #0
 8006874:	e009      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8006876:	2601      	movs	r6, #1
 8006878:	e67c      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800687a:	f7fd fee5 	bl	8004648 <HAL_GetTick>
 800687e:	eba0 0008 	sub.w	r0, r0, r8
 8006882:	2864      	cmp	r0, #100	; 0x64
 8006884:	f67f ae8e 	bls.w	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8006888:	2003      	movs	r0, #3
}
 800688a:	b003      	add	sp, #12
 800688c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006890:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006892:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006896:	4293      	cmp	r3, r2
 8006898:	f43f ae8e 	beq.w	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800689c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800689e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80068a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80068a8:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80068ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068b0:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80068b2:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068b6:	07db      	lsls	r3, r3, #31
 80068b8:	f57f ae7e 	bpl.w	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80068bc:	f7fd fec4 	bl	8004648 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068c0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80068c4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068c8:	0798      	lsls	r0, r3, #30
 80068ca:	f53f ae75 	bmi.w	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ce:	f7fd febb 	bl	8004648 <HAL_GetTick>
 80068d2:	eba0 0008 	sub.w	r0, r0, r8
 80068d6:	4548      	cmp	r0, r9
 80068d8:	d9f5      	bls.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80068da:	e7d5      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068dc:	6891      	ldr	r1, [r2, #8]
 80068de:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80068e2:	e679      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 80068e4:	4e48      	ldr	r6, [pc, #288]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80068e6:	6833      	ldr	r3, [r6, #0]
 80068e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068ec:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80068ee:	f7fd feab 	bl	8004648 <HAL_GetTick>
 80068f2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068f4:	6833      	ldr	r3, [r6, #0]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	d472      	bmi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80068fa:	6822      	ldr	r2, [r4, #0]
 80068fc:	07d7      	lsls	r7, r2, #31
 80068fe:	d512      	bpl.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006900:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006902:	b983      	cbnz	r3, 8006926 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006904:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006908:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800690c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006910:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006914:	430b      	orrs	r3, r1
 8006916:	6861      	ldr	r1, [r4, #4]
 8006918:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800691c:	68a1      	ldr	r1, [r4, #8]
 800691e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006922:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006926:	0316      	lsls	r6, r2, #12
 8006928:	d503      	bpl.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800692a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800692c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006930:	d005      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006932:	02d0      	lsls	r0, r2, #11
 8006934:	d51e      	bpl.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800693c:	d11a      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800693e:	4932      	ldr	r1, [pc, #200]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006940:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006944:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800694c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006950:	4303      	orrs	r3, r0
 8006952:	6860      	ldr	r0, [r4, #4]
 8006954:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006958:	68e0      	ldr	r0, [r4, #12]
 800695a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800695e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006962:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006968:	f020 001f 	bic.w	r0, r0, #31
 800696c:	3b01      	subs	r3, #1
 800696e:	4303      	orrs	r3, r0
 8006970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006974:	01d1      	lsls	r1, r2, #7
 8006976:	d511      	bpl.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006978:	4923      	ldr	r1, [pc, #140]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800697a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800697e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006982:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006986:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800698a:	4303      	orrs	r3, r0
 800698c:	6860      	ldr	r0, [r4, #4]
 800698e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006992:	6920      	ldr	r0, [r4, #16]
 8006994:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006998:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800699c:	0192      	lsls	r2, r2, #6
 800699e:	d50d      	bpl.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069a0:	6923      	ldr	r3, [r4, #16]
 80069a2:	6862      	ldr	r2, [r4, #4]
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80069aa:	68e2      	ldr	r2, [r4, #12]
 80069ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80069b0:	68a2      	ldr	r2, [r4, #8]
 80069b2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80069b6:	4a14      	ldr	r2, [pc, #80]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80069b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80069bc:	4e12      	ldr	r6, [pc, #72]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80069be:	6833      	ldr	r3, [r6, #0]
 80069c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069c4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80069c6:	f7fd fe3f 	bl	8004648 <HAL_GetTick>
 80069ca:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069cc:	6833      	ldr	r3, [r6, #0]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	f53f aed7 	bmi.w	8006782 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069d4:	f7fd fe38 	bl	8004648 <HAL_GetTick>
 80069d8:	1bc0      	subs	r0, r0, r7
 80069da:	2864      	cmp	r0, #100	; 0x64
 80069dc:	d9f6      	bls.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80069de:	e753      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069e0:	f7fd fe32 	bl	8004648 <HAL_GetTick>
 80069e4:	1bc0      	subs	r0, r0, r7
 80069e6:	2864      	cmp	r0, #100	; 0x64
 80069e8:	d984      	bls.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80069ea:	e74d      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069ec:	f7fd fe2c 	bl	8004648 <HAL_GetTick>
 80069f0:	1b80      	subs	r0, r0, r6
 80069f2:	2864      	cmp	r0, #100	; 0x64
 80069f4:	f67f aecf 	bls.w	8006796 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80069f8:	e746      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80069fa:	f7fd fe25 	bl	8004648 <HAL_GetTick>
 80069fe:	1b40      	subs	r0, r0, r5
 8006a00:	2864      	cmp	r0, #100	; 0x64
 8006a02:	f67f af32 	bls.w	800686a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006a06:	e73f      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8006a08:	40023800 	.word	0x40023800

08006a0c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006a10:	4604      	mov	r4, r0
 8006a12:	b1c8      	cbz	r0, 8006a48 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006a14:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006a18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006a1c:	b91b      	cbnz	r3, 8006a26 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006a1e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006a22:	f7fa fe9d 	bl	8001760 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a26:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006a28:	1d21      	adds	r1, r4, #4
 8006a2a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a2c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006a30:	f000 f9cf 	bl	8006dd2 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006a34:	6862      	ldr	r2, [r4, #4]
 8006a36:	4629      	mov	r1, r5
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	f000 fa05 	bl	8006e48 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006a3e:	2301      	movs	r3, #1

  return HAL_OK;
 8006a40:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006a42:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006a48:	2001      	movs	r0, #1
 8006a4a:	e7fc      	b.n	8006a46 <HAL_SDRAM_Init+0x3a>

08006a4c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006a4c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006a4e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006a52:	4605      	mov	r5, r0
 8006a54:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006a56:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006a58:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8006a5a:	d010      	beq.n	8006a7e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006a5c:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8006a60:	2c01      	cmp	r4, #1
 8006a62:	d110      	bne.n	8006a86 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a64:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006a66:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a68:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006a6c:	f000 fa22 	bl	8006eb4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006a70:	6833      	ldr	r3, [r6, #0]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d104      	bne.n	8006a80 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006a76:	2305      	movs	r3, #5
 8006a78:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006a7c:	2000      	movs	r0, #0
}
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006a80:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8006a84:	e7fa      	b.n	8006a7c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8006a86:	2001      	movs	r0, #1
 8006a88:	e7f9      	b.n	8006a7e <HAL_SDRAM_SendCommand+0x32>

08006a8a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006a8a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006a8c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006a90:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	b2d8      	uxtb	r0, r3
 8006a96:	d00d      	beq.n	8006ab4 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006a98:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	b2dd      	uxtb	r5, r3
 8006aa0:	d109      	bne.n	8006ab6 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006aa2:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006aa4:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006aa6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006aaa:	f000 fa15 	bl	8006ed8 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006aae:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006ab0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8006ab4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006ab6:	2001      	movs	r0, #1
 8006ab8:	e7fc      	b.n	8006ab4 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08006aba <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006aba:	4770      	bx	lr

08006abc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006abc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d133      	bne.n	8006b2c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aca:	6803      	ldr	r3, [r0, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	f042 0201 	orr.w	r2, r2, #1
 8006ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ad4:	4a16      	ldr	r2, [pc, #88]	; (8006b30 <HAL_TIM_Base_Start_IT+0x74>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d01a      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x54>
 8006ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ade:	d017      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x54>
 8006ae0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d013      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x54>
 8006ae8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00f      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x54>
 8006af0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00b      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x54>
 8006af8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d007      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x54>
 8006b00:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <HAL_TIM_Base_Start_IT+0x54>
 8006b08:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d107      	bne.n	8006b20 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b10:	6899      	ldr	r1, [r3, #8]
 8006b12:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <HAL_TIM_Base_Start_IT+0x78>)
 8006b14:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b16:	2a06      	cmp	r2, #6
 8006b18:	d006      	beq.n	8006b28 <HAL_TIM_Base_Start_IT+0x6c>
 8006b1a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006b1e:	d003      	beq.n	8006b28 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b28:	2000      	movs	r0, #0
}
 8006b2a:	4770      	bx	lr
    return HAL_ERROR;
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	4770      	bx	lr
 8006b30:	40010000 	.word	0x40010000
 8006b34:	00010007 	.word	0x00010007

08006b38 <HAL_TIM_OC_DelayElapsedCallback>:
 8006b38:	4770      	bx	lr

08006b3a <HAL_TIM_IC_CaptureCallback>:
 8006b3a:	4770      	bx	lr

08006b3c <HAL_TIM_PWM_PulseFinishedCallback>:
 8006b3c:	4770      	bx	lr

08006b3e <HAL_TIM_TriggerCallback>:
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b40:	6803      	ldr	r3, [r0, #0]
 8006b42:	691a      	ldr	r2, [r3, #16]
 8006b44:	0791      	lsls	r1, r2, #30
{
 8006b46:	b510      	push	{r4, lr}
 8006b48:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b4a:	d50f      	bpl.n	8006b6c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	0792      	lsls	r2, r2, #30
 8006b50:	d50c      	bpl.n	8006b6c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b52:	f06f 0202 	mvn.w	r2, #2
 8006b56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b58:	2201      	movs	r2, #1
 8006b5a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	0799      	lsls	r1, r3, #30
 8006b60:	f000 8085 	beq.w	8006c6e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b64:	f7ff ffe9 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	0752      	lsls	r2, r2, #29
 8006b72:	d510      	bpl.n	8006b96 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	0750      	lsls	r0, r2, #29
 8006b78:	d50d      	bpl.n	8006b96 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b7a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b82:	2202      	movs	r2, #2
 8006b84:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006b8c:	d075      	beq.n	8006c7a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8e:	f7ff ffd4 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	2300      	movs	r3, #0
 8006b94:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	0711      	lsls	r1, r2, #28
 8006b9c:	d50f      	bpl.n	8006bbe <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	0712      	lsls	r2, r2, #28
 8006ba2:	d50c      	bpl.n	8006bbe <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ba4:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ba8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bac:	2204      	movs	r2, #4
 8006bae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	079b      	lsls	r3, r3, #30
 8006bb4:	d067      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006bb6:	f7ff ffc0 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	06d0      	lsls	r0, r2, #27
 8006bc4:	d510      	bpl.n	8006be8 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	06d1      	lsls	r1, r2, #27
 8006bca:	d50d      	bpl.n	8006be8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bcc:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006bde:	d058      	beq.n	8006c92 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8006be0:	f7ff ffab 	bl	8006b3a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be4:	2300      	movs	r3, #0
 8006be6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	07d2      	lsls	r2, r2, #31
 8006bee:	d508      	bpl.n	8006c02 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	07d0      	lsls	r0, r2, #31
 8006bf4:	d505      	bpl.n	8006c02 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bf6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bfa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bfc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bfe:	f7fa fbaf 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	0611      	lsls	r1, r2, #24
 8006c08:	d508      	bpl.n	8006c1c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	0612      	lsls	r2, r2, #24
 8006c0e:	d505      	bpl.n	8006c1c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c14:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006c18:	f000 f8d9 	bl	8006dce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	05d0      	lsls	r0, r2, #23
 8006c22:	d508      	bpl.n	8006c36 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	0611      	lsls	r1, r2, #24
 8006c28:	d505      	bpl.n	8006c36 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006c32:	f000 f8cd 	bl	8006dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	0652      	lsls	r2, r2, #25
 8006c3c:	d508      	bpl.n	8006c50 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	0650      	lsls	r0, r2, #25
 8006c42:	d505      	bpl.n	8006c50 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c48:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c4a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006c4c:	f7ff ff77 	bl	8006b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	0691      	lsls	r1, r2, #26
 8006c56:	d522      	bpl.n	8006c9e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	0692      	lsls	r2, r2, #26
 8006c5c:	d51f      	bpl.n	8006c9e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c5e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c64:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006c6a:	f000 b8af 	b.w	8006dcc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6e:	f7ff ff63 	bl	8006b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff ff62 	bl	8006b3c <HAL_TIM_PWM_PulseFinishedCallback>
 8006c78:	e776      	b.n	8006b68 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c7a:	f7ff ff5d 	bl	8006b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f7ff ff5c 	bl	8006b3c <HAL_TIM_PWM_PulseFinishedCallback>
 8006c84:	e785      	b.n	8006b92 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	f7ff ff57 	bl	8006b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f7ff ff56 	bl	8006b3c <HAL_TIM_PWM_PulseFinishedCallback>
 8006c90:	e793      	b.n	8006bba <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c92:	f7ff ff51 	bl	8006b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c96:	4620      	mov	r0, r4
 8006c98:	f7ff ff50 	bl	8006b3c <HAL_TIM_PWM_PulseFinishedCallback>
 8006c9c:	e7a2      	b.n	8006be4 <HAL_TIM_IRQHandler+0xa4>
}
 8006c9e:	bd10      	pop	{r4, pc}

08006ca0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca0:	4a30      	ldr	r2, [pc, #192]	; (8006d64 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8006ca2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca4:	4290      	cmp	r0, r2
 8006ca6:	d012      	beq.n	8006cce <TIM_Base_SetConfig+0x2e>
 8006ca8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006cac:	d00f      	beq.n	8006cce <TIM_Base_SetConfig+0x2e>
 8006cae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006cb2:	4290      	cmp	r0, r2
 8006cb4:	d00b      	beq.n	8006cce <TIM_Base_SetConfig+0x2e>
 8006cb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cba:	4290      	cmp	r0, r2
 8006cbc:	d007      	beq.n	8006cce <TIM_Base_SetConfig+0x2e>
 8006cbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cc2:	4290      	cmp	r0, r2
 8006cc4:	d003      	beq.n	8006cce <TIM_Base_SetConfig+0x2e>
 8006cc6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006cca:	4290      	cmp	r0, r2
 8006ccc:	d119      	bne.n	8006d02 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006cce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006cd4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cd6:	4a23      	ldr	r2, [pc, #140]	; (8006d64 <TIM_Base_SetConfig+0xc4>)
 8006cd8:	4290      	cmp	r0, r2
 8006cda:	d029      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006cdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006ce0:	d026      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006ce2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006ce6:	4290      	cmp	r0, r2
 8006ce8:	d022      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cee:	4290      	cmp	r0, r2
 8006cf0:	d01e      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cf6:	4290      	cmp	r0, r2
 8006cf8:	d01a      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006cfa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006cfe:	4290      	cmp	r0, r2
 8006d00:	d016      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006d02:	4a19      	ldr	r2, [pc, #100]	; (8006d68 <TIM_Base_SetConfig+0xc8>)
 8006d04:	4290      	cmp	r0, r2
 8006d06:	d013      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006d08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d0c:	4290      	cmp	r0, r2
 8006d0e:	d00f      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d14:	4290      	cmp	r0, r2
 8006d16:	d00b      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006d18:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006d1c:	4290      	cmp	r0, r2
 8006d1e:	d007      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006d20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d24:	4290      	cmp	r0, r2
 8006d26:	d003      	beq.n	8006d30 <TIM_Base_SetConfig+0x90>
 8006d28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d2c:	4290      	cmp	r0, r2
 8006d2e:	d103      	bne.n	8006d38 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d34:	68ca      	ldr	r2, [r1, #12]
 8006d36:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d38:	694a      	ldr	r2, [r1, #20]
 8006d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d3e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006d40:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d42:	688b      	ldr	r3, [r1, #8]
 8006d44:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d46:	680b      	ldr	r3, [r1, #0]
 8006d48:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d4a:	4b06      	ldr	r3, [pc, #24]	; (8006d64 <TIM_Base_SetConfig+0xc4>)
 8006d4c:	4298      	cmp	r0, r3
 8006d4e:	d003      	beq.n	8006d58 <TIM_Base_SetConfig+0xb8>
 8006d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d54:	4298      	cmp	r0, r3
 8006d56:	d101      	bne.n	8006d5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d58:	690b      	ldr	r3, [r1, #16]
 8006d5a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	6143      	str	r3, [r0, #20]
}
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40014000 	.word	0x40014000

08006d6c <HAL_TIM_Base_Init>:
{
 8006d6c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006d6e:	4604      	mov	r4, r0
 8006d70:	b350      	cbz	r0, 8006dc8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d7a:	b91b      	cbnz	r3, 8006d84 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006d7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006d80:	f7ff fe9b 	bl	8006aba <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d86:	6820      	ldr	r0, [r4, #0]
 8006d88:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d8e:	f7ff ff87 	bl	8006ca0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d92:	2301      	movs	r3, #1
  return HAL_OK;
 8006d94:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d96:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006d9e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006da2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006da6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006daa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006dbe:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006dc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006dc6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006dc8:	2001      	movs	r0, #1
 8006dca:	e7fc      	b.n	8006dc6 <HAL_TIM_Base_Init+0x5a>

08006dcc <HAL_TIMEx_CommutCallback>:
 8006dcc:	4770      	bx	lr

08006dce <HAL_TIMEx_BreakCallback>:
 8006dce:	4770      	bx	lr

08006dd0 <HAL_TIMEx_Break2Callback>:
 8006dd0:	4770      	bx	lr

08006dd2 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006dd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006dd6:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006dd8:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8006ddc:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8006de0:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8006de4:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8006de8:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8006dec:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006dee:	b9a2      	cbnz	r2, 8006e1a <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006df0:	ea43 0209 	orr.w	r2, r3, r9
 8006df4:	6801      	ldr	r1, [r0, #0]
 8006df6:	432a      	orrs	r2, r5
 8006df8:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8006dfc:	ea42 0308 	orr.w	r3, r2, r8
 8006e00:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8006e04:	ea43 030e 	orr.w	r3, r3, lr
 8006e08:	ea43 030c 	orr.w	r3, r3, ip
 8006e0c:	433b      	orrs	r3, r7
 8006e0e:	4333      	orrs	r3, r6
 8006e10:	430b      	orrs	r3, r1
 8006e12:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006e14:	2000      	movs	r0, #0
 8006e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e1a:	6802      	ldr	r2, [r0, #0]
 8006e1c:	ea43 0309 	orr.w	r3, r3, r9
 8006e20:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006e24:	4313      	orrs	r3, r2
 8006e26:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e28:	ea45 0308 	orr.w	r3, r5, r8
 8006e2c:	6842      	ldr	r2, [r0, #4]
 8006e2e:	ea43 030e 	orr.w	r3, r3, lr
 8006e32:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8006e36:	ea43 030c 	orr.w	r3, r3, ip
 8006e3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8006e3e:	433b      	orrs	r3, r7
 8006e40:	4333      	orrs	r3, r6
 8006e42:	4313      	orrs	r3, r2
 8006e44:	6043      	str	r3, [r0, #4]
 8006e46:	e7e5      	b.n	8006e14 <FMC_SDRAM_Init+0x42>

08006e48 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e48:	68cb      	ldr	r3, [r1, #12]
 8006e4a:	f103 3cff 	add.w	ip, r3, #4294967295
 8006e4e:	694b      	ldr	r3, [r1, #20]
{
 8006e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e52:	3b01      	subs	r3, #1
 8006e54:	680f      	ldr	r7, [r1, #0]
 8006e56:	684c      	ldr	r4, [r1, #4]
 8006e58:	688e      	ldr	r6, [r1, #8]
 8006e5a:	051b      	lsls	r3, r3, #20
 8006e5c:	690d      	ldr	r5, [r1, #16]
 8006e5e:	3c01      	subs	r4, #1
 8006e60:	6989      	ldr	r1, [r1, #24]
 8006e62:	3e01      	subs	r6, #1
 8006e64:	3d01      	subs	r5, #1
 8006e66:	3f01      	subs	r7, #1
 8006e68:	3901      	subs	r1, #1
 8006e6a:	0124      	lsls	r4, r4, #4
 8006e6c:	0236      	lsls	r6, r6, #8
 8006e6e:	042d      	lsls	r5, r5, #16
 8006e70:	0609      	lsls	r1, r1, #24
 8006e72:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006e76:	b95a      	cbnz	r2, 8006e90 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e78:	433b      	orrs	r3, r7
 8006e7a:	6882      	ldr	r2, [r0, #8]
 8006e7c:	4323      	orrs	r3, r4
 8006e7e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006e82:	4333      	orrs	r3, r6
 8006e84:	432b      	orrs	r3, r5
 8006e86:	430b      	orrs	r3, r1
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e90:	6882      	ldr	r2, [r0, #8]
 8006e92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006e96:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8006e9a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006e9c:	ea44 0306 	orr.w	r3, r4, r6
 8006ea0:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ea2:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006ea4:	68c2      	ldr	r2, [r0, #12]
 8006ea6:	432b      	orrs	r3, r5
 8006ea8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8006eac:	430b      	orrs	r3, r1
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60c3      	str	r3, [r0, #12]
 8006eb2:	e7eb      	b.n	8006e8c <FMC_SDRAM_Timing_Init+0x44>

08006eb4 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006eb4:	6902      	ldr	r2, [r0, #16]
{
 8006eb6:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006eb8:	e9d1 3400 	ldrd	r3, r4, [r1]
 8006ebc:	0d92      	lsrs	r2, r2, #22
 8006ebe:	4323      	orrs	r3, r4
 8006ec0:	68cc      	ldr	r4, [r1, #12]
 8006ec2:	0592      	lsls	r2, r2, #22
 8006ec4:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	688a      	ldr	r2, [r1, #8]
 8006ecc:	3a01      	subs	r2, #1
 8006ece:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8006ed2:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	bd10      	pop	{r4, pc}

08006ed8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006ed8:	6943      	ldr	r3, [r0, #20]
 8006eda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006ede:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006ee2:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006ee6:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8006ee8:	2000      	movs	r0, #0
 8006eea:	4770      	bx	lr

08006eec <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eec:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ef0:	b113      	cbz	r3, 8006ef8 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8006ef2:	f06f 0005 	mvn.w	r0, #5
 8006ef6:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef8:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8006efc:	4b07      	ldr	r3, [pc, #28]	; (8006f1c <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8006efe:	b912      	cbnz	r2, 8006f06 <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f00:	f3ef 8211 	mrs	r2, BASEPRI
 8006f04:	b112      	cbz	r2, 8006f0c <osKernelInitialize+0x20>
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	2a02      	cmp	r2, #2
 8006f0a:	d0f2      	beq.n	8006ef2 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f0c:	6818      	ldr	r0, [r3, #0]
 8006f0e:	b910      	cbnz	r0, 8006f16 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f10:	2201      	movs	r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f14:	4770      	bx	lr
    } else {
      stat = osError;
 8006f16:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006f1a:	4770      	bx	lr
 8006f1c:	20002104 	.word	0x20002104

08006f20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f20:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f22:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f26:	b113      	cbz	r3, 8006f2e <osKernelStart+0xe>
    stat = osErrorISR;
 8006f28:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8006f2c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f2e:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8006f32:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8006f34:	b912      	cbnz	r2, 8006f3c <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f36:	f3ef 8211 	mrs	r2, BASEPRI
 8006f3a:	b112      	cbz	r2, 8006f42 <osKernelStart+0x22>
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	2a02      	cmp	r2, #2
 8006f40:	d0f2      	beq.n	8006f28 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	2a01      	cmp	r2, #1
 8006f46:	d105      	bne.n	8006f54 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 8006f48:	2202      	movs	r2, #2
 8006f4a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006f4c:	f001 fe78 	bl	8008c40 <vTaskStartScheduler>
      stat = osOK;
 8006f50:	2000      	movs	r0, #0
 8006f52:	e7eb      	b.n	8006f2c <osKernelStart+0xc>
      stat = osError;
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006f58:	e7e8      	b.n	8006f2c <osKernelStart+0xc>
 8006f5a:	bf00      	nop
 8006f5c:	20002104 	.word	0x20002104

08006f60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f62:	4614      	mov	r4, r2
 8006f64:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f66:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f68:	460b      	mov	r3, r1
  hTask = NULL;
 8006f6a:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f6c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006f70:	bb22      	cbnz	r2, 8006fbc <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f72:	f3ef 8210 	mrs	r2, PRIMASK
 8006f76:	b912      	cbnz	r2, 8006f7e <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006f78:	f3ef 8211 	mrs	r2, BASEPRI
 8006f7c:	b11a      	cbz	r2, 8006f86 <osThreadNew+0x26>
 8006f7e:	4a22      	ldr	r2, [pc, #136]	; (8007008 <osThreadNew+0xa8>)
 8006f80:	6812      	ldr	r2, [r2, #0]
 8006f82:	2a02      	cmp	r2, #2
 8006f84:	d01a      	beq.n	8006fbc <osThreadNew+0x5c>
 8006f86:	b1c8      	cbz	r0, 8006fbc <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006f88:	2c00      	cmp	r4, #0
 8006f8a:	d02f      	beq.n	8006fec <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006f8c:	69a5      	ldr	r5, [r4, #24]
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	bf08      	it	eq
 8006f92:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006f94:	1e6a      	subs	r2, r5, #1
 8006f96:	46ac      	mov	ip, r5
 8006f98:	2a37      	cmp	r2, #55	; 0x37
 8006f9a:	d82b      	bhi.n	8006ff4 <osThreadNew+0x94>
 8006f9c:	6862      	ldr	r2, [r4, #4]
 8006f9e:	07d2      	lsls	r2, r2, #31
 8006fa0:	d428      	bmi.n	8006ff4 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006fa2:	6966      	ldr	r6, [r4, #20]
 8006fa4:	b16e      	cbz	r6, 8006fc2 <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006fa6:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8006fa8:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006faa:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8006fae:	b157      	cbz	r7, 8006fc6 <osThreadNew+0x66>
 8006fb0:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8006fb4:	d902      	bls.n	8006fbc <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fb6:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fb8:	b104      	cbz	r4, 8006fbc <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006fba:	b9ee      	cbnz	r6, 8006ff8 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006fbc:	9805      	ldr	r0, [sp, #20]
}
 8006fbe:	b007      	add	sp, #28
 8006fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006fc2:	2280      	movs	r2, #128	; 0x80
 8006fc4:	e7f0      	b.n	8006fa8 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006fc6:	f1be 0f00 	cmp.w	lr, #0
 8006fca:	d1f7      	bne.n	8006fbc <osThreadNew+0x5c>
      if (mem == 0) {
 8006fcc:	6924      	ldr	r4, [r4, #16]
 8006fce:	2c00      	cmp	r4, #0
 8006fd0:	d1f4      	bne.n	8006fbc <osThreadNew+0x5c>
 8006fd2:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006fd4:	a905      	add	r1, sp, #20
 8006fd6:	b292      	uxth	r2, r2
 8006fd8:	e9cd c100 	strd	ip, r1, [sp]
 8006fdc:	4621      	mov	r1, r4
 8006fde:	f001 fca4 	bl	800892a <xTaskCreate>
 8006fe2:	2801      	cmp	r0, #1
          hTask = NULL;
 8006fe4:	bf1c      	itt	ne
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	9305      	strne	r3, [sp, #20]
 8006fea:	e7e7      	b.n	8006fbc <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 8006fec:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8006ff0:	2280      	movs	r2, #128	; 0x80
 8006ff2:	e7ef      	b.n	8006fd4 <osThreadNew+0x74>
        return (NULL);
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	e7e2      	b.n	8006fbe <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ff8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006ffc:	9500      	str	r5, [sp, #0]
 8006ffe:	f001 fc56 	bl	80088ae <xTaskCreateStatic>
 8007002:	9005      	str	r0, [sp, #20]
 8007004:	e7da      	b.n	8006fbc <osThreadNew+0x5c>
 8007006:	bf00      	nop
 8007008:	20002104 	.word	0x20002104

0800700c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800700c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800700e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007012:	b113      	cbz	r3, 800701a <osDelay+0xe>
    stat = osErrorISR;
 8007014:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8007018:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800701a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800701e:	b913      	cbnz	r3, 8007026 <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007020:	f3ef 8311 	mrs	r3, BASEPRI
 8007024:	b11b      	cbz	r3, 800702e <osDelay+0x22>
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <osDelay+0x30>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d0f2      	beq.n	8007014 <osDelay+0x8>
    if (ticks != 0U) {
 800702e:	2800      	cmp	r0, #0
 8007030:	d0f2      	beq.n	8007018 <osDelay+0xc>
      vTaskDelay(ticks);
 8007032:	f001 fdc3 	bl	8008bbc <vTaskDelay>
    stat = osOK;
 8007036:	2000      	movs	r0, #0
 8007038:	e7ee      	b.n	8007018 <osDelay+0xc>
 800703a:	bf00      	nop
 800703c:	20002104 	.word	0x20002104

08007040 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007044:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8007048:	b116      	cbz	r6, 8007050 <osMutexNew+0x10>
  hMutex = NULL;
 800704a:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800704c:	4620      	mov	r0, r4
 800704e:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007050:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8007054:	b912      	cbnz	r2, 800705c <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007056:	f3ef 8211 	mrs	r2, BASEPRI
 800705a:	b11a      	cbz	r2, 8007064 <osMutexNew+0x24>
 800705c:	4a18      	ldr	r2, [pc, #96]	; (80070c0 <osMutexNew+0x80>)
 800705e:	6812      	ldr	r2, [r2, #0]
 8007060:	2a02      	cmp	r2, #2
 8007062:	d0f2      	beq.n	800704a <osMutexNew+0xa>
    if (attr != NULL) {
 8007064:	b115      	cbz	r5, 800706c <osMutexNew+0x2c>
      type = attr->attr_bits;
 8007066:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8007068:	0733      	lsls	r3, r6, #28
 800706a:	d4ee      	bmi.n	800704a <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800706c:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 8007070:	b17d      	cbz	r5, 8007092 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007072:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8007076:	b151      	cbz	r1, 800708e <osMutexNew+0x4e>
 8007078:	2b4f      	cmp	r3, #79	; 0x4f
 800707a:	d9e6      	bls.n	800704a <osMutexNew+0xa>
        if (rmtx != 0U) {
 800707c:	b1de      	cbz	r6, 80070b6 <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800707e:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007080:	f000 ff4c 	bl	8007f1c <xQueueCreateMutexStatic>
 8007084:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8007086:	2800      	cmp	r0, #0
 8007088:	d0df      	beq.n	800704a <osMutexNew+0xa>
          name = attr->name;
 800708a:	682d      	ldr	r5, [r5, #0]
 800708c:	e00a      	b.n	80070a4 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1db      	bne.n	800704a <osMutexNew+0xa>
          if (rmtx != 0U) {
 8007092:	b196      	cbz	r6, 80070ba <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007094:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8007096:	f000 ff76 	bl	8007f86 <xQueueCreateMutex>
 800709a:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800709c:	2800      	cmp	r0, #0
 800709e:	d0d4      	beq.n	800704a <osMutexNew+0xa>
        if (attr != NULL) {
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	d1f2      	bne.n	800708a <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 80070a4:	4629      	mov	r1, r5
 80070a6:	4620      	mov	r0, r4
 80070a8:	f001 fa38 	bl	800851c <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80070ac:	2e00      	cmp	r6, #0
 80070ae:	d0cd      	beq.n	800704c <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80070b0:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 80070b4:	e7ca      	b.n	800704c <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80070b6:	2001      	movs	r0, #1
 80070b8:	e7e2      	b.n	8007080 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 80070ba:	2001      	movs	r0, #1
 80070bc:	e7eb      	b.n	8007096 <osMutexNew+0x56>
 80070be:	bf00      	nop
 80070c0:	20002104 	.word	0x20002104

080070c4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80070c4:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80070c6:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80070ca:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 80070cc:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80070d0:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070d2:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80070d6:	b112      	cbz	r2, 80070de <osMutexAcquire+0x1a>
    stat = osErrorISR;
 80070d8:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80070dc:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070de:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80070e2:	b912      	cbnz	r2, 80070ea <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070e4:	f3ef 8211 	mrs	r2, BASEPRI
 80070e8:	b11a      	cbz	r2, 80070f2 <osMutexAcquire+0x2e>
 80070ea:	4a0d      	ldr	r2, [pc, #52]	; (8007120 <osMutexAcquire+0x5c>)
 80070ec:	6812      	ldr	r2, [r2, #0]
 80070ee:	2a02      	cmp	r2, #2
 80070f0:	d0f2      	beq.n	80070d8 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 80070f2:	b188      	cbz	r0, 8007118 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80070f4:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 80070f6:	b163      	cbz	r3, 8007112 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80070f8:	f001 f997 	bl	800842a <xQueueTakeMutexRecursive>
 80070fc:	2801      	cmp	r0, #1
 80070fe:	d101      	bne.n	8007104 <osMutexAcquire+0x40>
  stat = osOK;
 8007100:	2000      	movs	r0, #0
 8007102:	e7eb      	b.n	80070dc <osMutexAcquire+0x18>
          stat = osErrorResource;
 8007104:	2c00      	cmp	r4, #0
 8007106:	bf14      	ite	ne
 8007108:	f06f 0001 	mvnne.w	r0, #1
 800710c:	f06f 0002 	mvneq.w	r0, #2
 8007110:	e7e4      	b.n	80070dc <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007112:	f001 f8bf 	bl	8008294 <xQueueSemaphoreTake>
 8007116:	e7f1      	b.n	80070fc <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8007118:	f06f 0003 	mvn.w	r0, #3
 800711c:	e7de      	b.n	80070dc <osMutexAcquire+0x18>
 800711e:	bf00      	nop
 8007120:	20002104 	.word	0x20002104

08007124 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007124:	b508      	push	{r3, lr}
 8007126:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007128:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800712c:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007130:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8007134:	b112      	cbz	r2, 800713c <osMutexRelease+0x18>
    stat = osErrorISR;
 8007136:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800713a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800713c:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8007140:	b912      	cbnz	r2, 8007148 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007142:	f3ef 8211 	mrs	r2, BASEPRI
 8007146:	b11a      	cbz	r2, 8007150 <osMutexRelease+0x2c>
 8007148:	4a0a      	ldr	r2, [pc, #40]	; (8007174 <osMutexRelease+0x50>)
 800714a:	6812      	ldr	r2, [r2, #0]
 800714c:	2a02      	cmp	r2, #2
 800714e:	d0f2      	beq.n	8007136 <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8007150:	b168      	cbz	r0, 800716e <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8007152:	b13b      	cbz	r3, 8007164 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007154:	f000 fef7 	bl	8007f46 <xQueueGiveMutexRecursive>
 8007158:	2801      	cmp	r0, #1
  stat = osOK;
 800715a:	bf0c      	ite	eq
 800715c:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800715e:	f06f 0002 	mvnne.w	r0, #2
 8007162:	e7ea      	b.n	800713a <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007164:	461a      	mov	r2, r3
 8007166:	4619      	mov	r1, r3
 8007168:	f000 fe1d 	bl	8007da6 <xQueueGenericSend>
 800716c:	e7f4      	b.n	8007158 <osMutexRelease+0x34>
    stat = osErrorParameter;
 800716e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007172:	e7e2      	b.n	800713a <osMutexRelease+0x16>
 8007174:	20002104 	.word	0x20002104

08007178 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007178:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800717a:	460e      	mov	r6, r1
 800717c:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800717e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007182:	b11b      	cbz	r3, 800718c <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8007184:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8007186:	4620      	mov	r0, r4
 8007188:	b002      	add	sp, #8
 800718a:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800718c:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007190:	b913      	cbnz	r3, 8007198 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007192:	f3ef 8311 	mrs	r3, BASEPRI
 8007196:	b11b      	cbz	r3, 80071a0 <osSemaphoreNew+0x28>
 8007198:	4b21      	ldr	r3, [pc, #132]	; (8007220 <osSemaphoreNew+0xa8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d0f1      	beq.n	8007184 <osSemaphoreNew+0xc>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d0ef      	beq.n	8007184 <osSemaphoreNew+0xc>
 80071a4:	42b0      	cmp	r0, r6
 80071a6:	d3ed      	bcc.n	8007184 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 80071a8:	b1ed      	cbz	r5, 80071e6 <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80071aa:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80071ae:	b1c3      	cbz	r3, 80071e2 <osSemaphoreNew+0x6a>
 80071b0:	2a4f      	cmp	r2, #79	; 0x4f
 80071b2:	d9e7      	bls.n	8007184 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 80071b4:	2801      	cmp	r0, #1
 80071b6:	d129      	bne.n	800720c <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80071b8:	2203      	movs	r2, #3
 80071ba:	9200      	str	r2, [sp, #0]
 80071bc:	2200      	movs	r2, #0
 80071be:	4611      	mov	r1, r2
 80071c0:	f000 fd6c 	bl	8007c9c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 80071c4:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d0dc      	beq.n	8007184 <osSemaphoreNew+0xc>
 80071ca:	b1ce      	cbz	r6, 8007200 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80071cc:	2300      	movs	r3, #0
 80071ce:	461a      	mov	r2, r3
 80071d0:	4619      	mov	r1, r3
 80071d2:	f000 fde8 	bl	8007da6 <xQueueGenericSend>
 80071d6:	2801      	cmp	r0, #1
 80071d8:	d012      	beq.n	8007200 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 80071da:	4620      	mov	r0, r4
 80071dc:	f001 f9c4 	bl	8008568 <vQueueDelete>
 80071e0:	e7d0      	b.n	8007184 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	d1ce      	bne.n	8007184 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 80071e6:	2801      	cmp	r0, #1
 80071e8:	d104      	bne.n	80071f4 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 80071ea:	2203      	movs	r2, #3
 80071ec:	2100      	movs	r1, #0
 80071ee:	f000 fd69 	bl	8007cc4 <xQueueGenericCreate>
 80071f2:	e7e7      	b.n	80071c4 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80071f4:	4631      	mov	r1, r6
 80071f6:	f000 fdb4 	bl	8007d62 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80071fa:	4604      	mov	r4, r0
 80071fc:	2800      	cmp	r0, #0
 80071fe:	d0c1      	beq.n	8007184 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8007200:	b95d      	cbnz	r5, 800721a <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 8007202:	4629      	mov	r1, r5
 8007204:	4620      	mov	r0, r4
 8007206:	f001 f989 	bl	800851c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800720a:	e7bc      	b.n	8007186 <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800720c:	461a      	mov	r2, r3
 800720e:	4631      	mov	r1, r6
 8007210:	f000 fd81 	bl	8007d16 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8007214:	4604      	mov	r4, r0
 8007216:	2800      	cmp	r0, #0
 8007218:	d0b4      	beq.n	8007184 <osSemaphoreNew+0xc>
          name = attr->name;
 800721a:	682d      	ldr	r5, [r5, #0]
 800721c:	e7f1      	b.n	8007202 <osSemaphoreNew+0x8a>
 800721e:	bf00      	nop
 8007220:	20002104 	.word	0x20002104

08007224 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007224:	b513      	push	{r0, r1, r4, lr}
 8007226:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007228:	b918      	cbnz	r0, 8007232 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800722a:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 800722e:	b002      	add	sp, #8
 8007230:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007232:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 8007236:	b163      	cbz	r3, 8007252 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 8007238:	2c00      	cmp	r4, #0
 800723a:	d1f6      	bne.n	800722a <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800723c:	aa01      	add	r2, sp, #4
 800723e:	4621      	mov	r1, r4
      yield = pdFALSE;
 8007240:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007242:	f001 f916 	bl	8008472 <xQueueReceiveFromISR>
 8007246:	2801      	cmp	r0, #1
 8007248:	d113      	bne.n	8007272 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800724a:	9b01      	ldr	r3, [sp, #4]
 800724c:	b9a3      	cbnz	r3, 8007278 <osSemaphoreAcquire+0x54>
  stat = osOK;
 800724e:	2000      	movs	r0, #0
 8007250:	e7ed      	b.n	800722e <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007252:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8007256:	b913      	cbnz	r3, 800725e <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007258:	f3ef 8311 	mrs	r3, BASEPRI
 800725c:	b11b      	cbz	r3, 8007266 <osSemaphoreAcquire+0x42>
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <osSemaphoreAcquire+0x70>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d0e8      	beq.n	8007238 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007266:	4621      	mov	r1, r4
 8007268:	f001 f814 	bl	8008294 <xQueueSemaphoreTake>
 800726c:	2801      	cmp	r0, #1
 800726e:	d0ee      	beq.n	800724e <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8007270:	b96c      	cbnz	r4, 800728e <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 8007272:	f06f 0002 	mvn.w	r0, #2
 8007276:	e7da      	b.n	800722e <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8007278:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800727c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007280:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	e7df      	b.n	800724e <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 800728e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007292:	e7cc      	b.n	800722e <osSemaphoreAcquire+0xa>
 8007294:	20002104 	.word	0x20002104

08007298 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007298:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800729a:	b370      	cbz	r0, 80072fa <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800729c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80072a0:	b14b      	cbz	r3, 80072b6 <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 80072a2:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80072a4:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80072a6:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80072a8:	f000 fef3 	bl	8008092 <xQueueGiveFromISR>
 80072ac:	2801      	cmp	r0, #1
 80072ae:	d014      	beq.n	80072da <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 80072b0:	f06f 0002 	mvn.w	r0, #2
 80072b4:	e014      	b.n	80072e0 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b6:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80072ba:	b913      	cbnz	r3, 80072c2 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072bc:	f3ef 8311 	mrs	r3, BASEPRI
 80072c0:	b11b      	cbz	r3, 80072ca <osSemaphoreRelease+0x32>
 80072c2:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <osSemaphoreRelease+0x68>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d0eb      	beq.n	80072a2 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80072ca:	2300      	movs	r3, #0
 80072cc:	461a      	mov	r2, r3
 80072ce:	4619      	mov	r1, r3
 80072d0:	f000 fd69 	bl	8007da6 <xQueueGenericSend>
 80072d4:	2801      	cmp	r0, #1
 80072d6:	d002      	beq.n	80072de <osSemaphoreRelease+0x46>
 80072d8:	e7ea      	b.n	80072b0 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	b913      	cbnz	r3, 80072e4 <osSemaphoreRelease+0x4c>
  stat = osOK;
 80072de:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80072e0:	b002      	add	sp, #8
 80072e2:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 80072e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80072e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	e7f1      	b.n	80072de <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80072fa:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80072fe:	e7ef      	b.n	80072e0 <osSemaphoreRelease+0x48>
 8007300:	20002104 	.word	0x20002104

08007304 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007304:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007306:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007308:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800730c:	b11b      	cbz	r3, 8007316 <osMessageQueueNew+0x12>
  hQueue = NULL;
 800730e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007310:	4628      	mov	r0, r5
 8007312:	b002      	add	sp, #8
 8007314:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007316:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800731a:	b913      	cbnz	r3, 8007322 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800731c:	f3ef 8311 	mrs	r3, BASEPRI
 8007320:	b11b      	cbz	r3, 800732a <osMessageQueueNew+0x26>
 8007322:	4b1a      	ldr	r3, [pc, #104]	; (800738c <osMessageQueueNew+0x88>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d0f1      	beq.n	800730e <osMessageQueueNew+0xa>
 800732a:	2800      	cmp	r0, #0
 800732c:	d0ef      	beq.n	800730e <osMessageQueueNew+0xa>
 800732e:	2900      	cmp	r1, #0
 8007330:	d0ed      	beq.n	800730e <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8007332:	b1ec      	cbz	r4, 8007370 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007334:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8007338:	b193      	cbz	r3, 8007360 <osMessageQueueNew+0x5c>
 800733a:	2a4f      	cmp	r2, #79	; 0x4f
 800733c:	d9e7      	bls.n	800730e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800733e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007340:	2a00      	cmp	r2, #0
 8007342:	d0e4      	beq.n	800730e <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007344:	fb01 f500 	mul.w	r5, r1, r0
 8007348:	6966      	ldr	r6, [r4, #20]
 800734a:	42ae      	cmp	r6, r5
 800734c:	d3df      	bcc.n	800730e <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800734e:	2500      	movs	r5, #0
 8007350:	9500      	str	r5, [sp, #0]
 8007352:	f000 fca3 	bl	8007c9c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8007356:	4605      	mov	r5, r0
 8007358:	2800      	cmp	r0, #0
 800735a:	d0d8      	beq.n	800730e <osMessageQueueNew+0xa>
        name = attr->name;
 800735c:	6824      	ldr	r4, [r4, #0]
 800735e:	e00f      	b.n	8007380 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007360:	2a00      	cmp	r2, #0
 8007362:	d1d4      	bne.n	800730e <osMessageQueueNew+0xa>
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1d1      	bne.n	800730e <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800736a:	6963      	ldr	r3, [r4, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1ce      	bne.n	800730e <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007370:	2200      	movs	r2, #0
 8007372:	f000 fca7 	bl	8007cc4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8007376:	4605      	mov	r5, r0
 8007378:	2800      	cmp	r0, #0
 800737a:	d0c8      	beq.n	800730e <osMessageQueueNew+0xa>
      if (attr != NULL) {
 800737c:	2c00      	cmp	r4, #0
 800737e:	d1ed      	bne.n	800735c <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8007380:	4621      	mov	r1, r4
 8007382:	4628      	mov	r0, r5
 8007384:	f001 f8ca 	bl	800851c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8007388:	e7c2      	b.n	8007310 <osMessageQueueNew+0xc>
 800738a:	bf00      	nop
 800738c:	20002104 	.word	0x20002104

08007390 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007390:	b513      	push	{r0, r1, r4, lr}
 8007392:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007394:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007398:	b123      	cbz	r3, 80073a4 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800739a:	b9d8      	cbnz	r0, 80073d4 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 800739c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80073a0:	b002      	add	sp, #8
 80073a2:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a4:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80073a8:	b913      	cbnz	r3, 80073b0 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073aa:	f3ef 8311 	mrs	r3, BASEPRI
 80073ae:	b11b      	cbz	r3, 80073b8 <osMessageQueuePut+0x28>
 80073b0:	4b17      	ldr	r3, [pc, #92]	; (8007410 <osMessageQueuePut+0x80>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d0f0      	beq.n	800739a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d0ef      	beq.n	800739c <osMessageQueuePut+0xc>
 80073bc:	2900      	cmp	r1, #0
 80073be:	d0ed      	beq.n	800739c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80073c0:	2300      	movs	r3, #0
 80073c2:	4622      	mov	r2, r4
 80073c4:	f000 fcef 	bl	8007da6 <xQueueGenericSend>
 80073c8:	2801      	cmp	r0, #1
 80073ca:	d010      	beq.n	80073ee <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 80073cc:	b9e4      	cbnz	r4, 8007408 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 80073ce:	f06f 0002 	mvn.w	r0, #2
 80073d2:	e7e5      	b.n	80073a0 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073d4:	2900      	cmp	r1, #0
 80073d6:	d0e1      	beq.n	800739c <osMessageQueuePut+0xc>
 80073d8:	2c00      	cmp	r4, #0
 80073da:	d1df      	bne.n	800739c <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80073dc:	4623      	mov	r3, r4
 80073de:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80073e0:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80073e2:	f000 fded 	bl	8007fc0 <xQueueGenericSendFromISR>
 80073e6:	2801      	cmp	r0, #1
 80073e8:	d1f1      	bne.n	80073ce <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 80073ea:	9b01      	ldr	r3, [sp, #4]
 80073ec:	b90b      	cbnz	r3, 80073f2 <osMessageQueuePut+0x62>
  stat = osOK;
 80073ee:	2000      	movs	r0, #0
 80073f0:	e7d6      	b.n	80073a0 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80073f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80073f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	e7f2      	b.n	80073ee <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8007408:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800740c:	e7c8      	b.n	80073a0 <osMessageQueuePut+0x10>
 800740e:	bf00      	nop
 8007410:	20002104 	.word	0x20002104

08007414 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007414:	b513      	push	{r0, r1, r4, lr}
 8007416:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007418:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800741c:	b123      	cbz	r3, 8007428 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800741e:	b9d0      	cbnz	r0, 8007456 <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8007420:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007424:	b002      	add	sp, #8
 8007426:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007428:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800742c:	b913      	cbnz	r3, 8007434 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800742e:	f3ef 8311 	mrs	r3, BASEPRI
 8007432:	b11b      	cbz	r3, 800743c <osMessageQueueGet+0x28>
 8007434:	4b16      	ldr	r3, [pc, #88]	; (8007490 <osMessageQueueGet+0x7c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d0f0      	beq.n	800741e <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800743c:	2800      	cmp	r0, #0
 800743e:	d0ef      	beq.n	8007420 <osMessageQueueGet+0xc>
 8007440:	2900      	cmp	r1, #0
 8007442:	d0ed      	beq.n	8007420 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007444:	4622      	mov	r2, r4
 8007446:	f000 fe80 	bl	800814a <xQueueReceive>
 800744a:	2801      	cmp	r0, #1
 800744c:	d00f      	beq.n	800746e <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 800744e:	b9dc      	cbnz	r4, 8007488 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 8007450:	f06f 0002 	mvn.w	r0, #2
 8007454:	e7e6      	b.n	8007424 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007456:	2900      	cmp	r1, #0
 8007458:	d0e2      	beq.n	8007420 <osMessageQueueGet+0xc>
 800745a:	2c00      	cmp	r4, #0
 800745c:	d1e0      	bne.n	8007420 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800745e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007460:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007462:	f001 f806 	bl	8008472 <xQueueReceiveFromISR>
 8007466:	2801      	cmp	r0, #1
 8007468:	d1f2      	bne.n	8007450 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 800746a:	9b01      	ldr	r3, [sp, #4]
 800746c:	b90b      	cbnz	r3, 8007472 <osMessageQueueGet+0x5e>
  stat = osOK;
 800746e:	2000      	movs	r0, #0
 8007470:	e7d8      	b.n	8007424 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8007472:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	e7f2      	b.n	800746e <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8007488:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800748c:	e7ca      	b.n	8007424 <osMessageQueueGet+0x10>
 800748e:	bf00      	nop
 8007490:	20002104 	.word	0x20002104

08007494 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007494:	4b03      	ldr	r3, [pc, #12]	; (80074a4 <vApplicationGetIdleTaskMemory+0x10>)
 8007496:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007498:	4b03      	ldr	r3, [pc, #12]	; (80074a8 <vApplicationGetIdleTaskMemory+0x14>)
 800749a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800749c:	2380      	movs	r3, #128	; 0x80
 800749e:	6013      	str	r3, [r2, #0]
}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	200020a4 	.word	0x200020a4
 80074a8:	20001ea4 	.word	0x20001ea4

080074ac <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80074ac:	4b03      	ldr	r3, [pc, #12]	; (80074bc <vApplicationGetTimerTaskMemory+0x10>)
 80074ae:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80074b0:	4b03      	ldr	r3, [pc, #12]	; (80074c0 <vApplicationGetTimerTaskMemory+0x14>)
 80074b2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80074b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074b8:	6013      	str	r3, [r2, #0]
}
 80074ba:	4770      	bx	lr
 80074bc:	20002508 	.word	0x20002508
 80074c0:	20002108 	.word	0x20002108

080074c4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074c4:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <prvInsertBlockIntoFreeList+0x40>)
{
 80074c6:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074c8:	461a      	mov	r2, r3
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4283      	cmp	r3, r0
 80074ce:	d3fb      	bcc.n	80074c8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074d0:	6854      	ldr	r4, [r2, #4]
 80074d2:	1911      	adds	r1, r2, r4
 80074d4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074d6:	bf01      	itttt	eq
 80074d8:	6841      	ldreq	r1, [r0, #4]
 80074da:	4610      	moveq	r0, r2
 80074dc:	1909      	addeq	r1, r1, r4
 80074de:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074e0:	6844      	ldr	r4, [r0, #4]
 80074e2:	1901      	adds	r1, r0, r4
 80074e4:	428b      	cmp	r3, r1
 80074e6:	d107      	bne.n	80074f8 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074e8:	4907      	ldr	r1, [pc, #28]	; (8007508 <prvInsertBlockIntoFreeList+0x44>)
 80074ea:	6809      	ldr	r1, [r1, #0]
 80074ec:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074ee:	bf1f      	itttt	ne
 80074f0:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074f2:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074f4:	1909      	addne	r1, r1, r4
 80074f6:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074f8:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074fa:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074fc:	bf18      	it	ne
 80074fe:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007500:	bd10      	pop	{r4, pc}
 8007502:	bf00      	nop
 8007504:	20014a70 	.word	0x20014a70
 8007508:	20002568 	.word	0x20002568

0800750c <pvPortMalloc>:
{
 800750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8007510:	4f41      	ldr	r7, [pc, #260]	; (8007618 <pvPortMalloc+0x10c>)
{
 8007512:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007514:	f001 fa36 	bl	8008984 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007518:	4840      	ldr	r0, [pc, #256]	; (800761c <pvPortMalloc+0x110>)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	b9f3      	cbnz	r3, 800755c <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800751e:	4940      	ldr	r1, [pc, #256]	; (8007620 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8007520:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007522:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007524:	4d3f      	ldr	r5, [pc, #252]	; (8007624 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007526:	bf1b      	ittet	ne
 8007528:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800752a:	4a3f      	ldrne	r2, [pc, #252]	; (8007628 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800752c:	4a3f      	ldreq	r2, [pc, #252]	; (800762c <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800752e:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007532:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007534:	bf18      	it	ne
 8007536:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007538:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800753a:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 800753c:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800753e:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007542:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007546:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8007548:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800754a:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800754e:	4a38      	ldr	r2, [pc, #224]	; (8007630 <pvPortMalloc+0x124>)
 8007550:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007552:	4a38      	ldr	r2, [pc, #224]	; (8007634 <pvPortMalloc+0x128>)
 8007554:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007556:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800755a:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800755c:	f8d0 8000 	ldr.w	r8, [r0]
 8007560:	ea18 0f04 	tst.w	r8, r4
 8007564:	d152      	bne.n	800760c <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8007566:	2c00      	cmp	r4, #0
 8007568:	d041      	beq.n	80075ee <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 800756a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800756e:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007570:	bf1c      	itt	ne
 8007572:	f023 0307 	bicne.w	r3, r3, #7
 8007576:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007578:	2b00      	cmp	r3, #0
 800757a:	d047      	beq.n	800760c <pvPortMalloc+0x100>
 800757c:	4c2d      	ldr	r4, [pc, #180]	; (8007634 <pvPortMalloc+0x128>)
 800757e:	6826      	ldr	r6, [r4, #0]
 8007580:	429e      	cmp	r6, r3
 8007582:	d343      	bcc.n	800760c <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8007584:	4a27      	ldr	r2, [pc, #156]	; (8007624 <pvPortMalloc+0x118>)
 8007586:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007588:	6869      	ldr	r1, [r5, #4]
 800758a:	4299      	cmp	r1, r3
 800758c:	d201      	bcs.n	8007592 <pvPortMalloc+0x86>
 800758e:	6828      	ldr	r0, [r5, #0]
 8007590:	b9b0      	cbnz	r0, 80075c0 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 8007592:	6838      	ldr	r0, [r7, #0]
 8007594:	42a8      	cmp	r0, r5
 8007596:	d039      	beq.n	800760c <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007598:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800759a:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800759c:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800759e:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075a0:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075a2:	d914      	bls.n	80075ce <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075a4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a6:	0742      	lsls	r2, r0, #29
 80075a8:	d00d      	beq.n	80075c6 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ae:	b672      	cpsid	i
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	b662      	cpsie	i
 80075be:	e7fe      	b.n	80075be <pvPortMalloc+0xb2>
 80075c0:	462a      	mov	r2, r5
 80075c2:	4605      	mov	r5, r0
 80075c4:	e7e0      	b.n	8007588 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075c6:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075c8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075ca:	f7ff ff7b 	bl	80074c4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075ce:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075d0:	4917      	ldr	r1, [pc, #92]	; (8007630 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075d2:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075d4:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075d8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075da:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075dc:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075e0:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075e2:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075e4:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075e8:	bf38      	it	cc
 80075ea:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80075ec:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80075ee:	f001 fa6f 	bl	8008ad0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f2:	0763      	lsls	r3, r4, #29
 80075f4:	d00c      	beq.n	8007610 <pvPortMalloc+0x104>
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	b672      	cpsid	i
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	b662      	cpsie	i
 800760a:	e7fe      	b.n	800760a <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800760c:	2400      	movs	r4, #0
 800760e:	e7ee      	b.n	80075ee <pvPortMalloc+0xe2>
}
 8007610:	4620      	mov	r0, r4
 8007612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007616:	bf00      	nop
 8007618:	20002568 	.word	0x20002568
 800761c:	20014a64 	.word	0x20014a64
 8007620:	2000256c 	.word	0x2000256c
 8007624:	20014a70 	.word	0x20014a70
 8007628:	20014a64 	.word	0x20014a64
 800762c:	000124f8 	.word	0x000124f8
 8007630:	20014a6c 	.word	0x20014a6c
 8007634:	20014a68 	.word	0x20014a68

08007638 <vPortFree>:
{
 8007638:	b510      	push	{r4, lr}
	if( pv != NULL )
 800763a:	4604      	mov	r4, r0
 800763c:	2800      	cmp	r0, #0
 800763e:	d032      	beq.n	80076a6 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007640:	4a19      	ldr	r2, [pc, #100]	; (80076a8 <vPortFree+0x70>)
 8007642:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007646:	6812      	ldr	r2, [r2, #0]
 8007648:	4213      	tst	r3, r2
 800764a:	d10a      	bne.n	8007662 <vPortFree+0x2a>
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	b672      	cpsid	i
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	b662      	cpsie	i
 8007660:	e7fe      	b.n	8007660 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007662:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007666:	b151      	cbz	r1, 800767e <vPortFree+0x46>
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	b672      	cpsid	i
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	b662      	cpsie	i
 800767c:	e7fe      	b.n	800767c <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800767e:	ea23 0302 	bic.w	r3, r3, r2
 8007682:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007686:	f001 f97d 	bl	8008984 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800768a:	4a08      	ldr	r2, [pc, #32]	; (80076ac <vPortFree+0x74>)
 800768c:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007690:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007694:	6811      	ldr	r1, [r2, #0]
 8007696:	440b      	add	r3, r1
 8007698:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800769a:	f7ff ff13 	bl	80074c4 <prvInsertBlockIntoFreeList>
}
 800769e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80076a2:	f001 ba15 	b.w	8008ad0 <xTaskResumeAll>
}
 80076a6:	bd10      	pop	{r4, pc}
 80076a8:	20014a64 	.word	0x20014a64
 80076ac:	20014a68 	.word	0x20014a68

080076b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076b8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076ba:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076bc:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076c4:	4770      	bx	lr

080076c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076ca:	4770      	bx	lr

080076cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80076cc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076ce:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80076d0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076d8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80076da:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80076dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80076de:	3301      	adds	r3, #1
 80076e0:	6003      	str	r3, [r0, #0]
}
 80076e2:	4770      	bx	lr

080076e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076e4:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076e6:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076e8:	1c63      	adds	r3, r4, #1
 80076ea:	d10a      	bne.n	8007702 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076ec:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076f2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076f4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80076f6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80076f8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80076fa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80076fc:	3301      	adds	r3, #1
 80076fe:	6003      	str	r3, [r0, #0]
}
 8007700:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007702:	f100 0208 	add.w	r2, r0, #8
 8007706:	4613      	mov	r3, r2
 8007708:	6852      	ldr	r2, [r2, #4]
 800770a:	6815      	ldr	r5, [r2, #0]
 800770c:	42a5      	cmp	r5, r4
 800770e:	d9fa      	bls.n	8007706 <vListInsert+0x22>
 8007710:	e7ed      	b.n	80076ee <vListInsert+0xa>

08007712 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007712:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007714:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007718:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800771a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800771c:	6859      	ldr	r1, [r3, #4]
 800771e:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007720:	bf08      	it	eq
 8007722:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007724:	2200      	movs	r2, #0
 8007726:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	3a01      	subs	r2, #1
 800772c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800772e:	6818      	ldr	r0, [r3, #0]
}
 8007730:	4770      	bx	lr
	...

08007734 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007734:	4808      	ldr	r0, [pc, #32]	; (8007758 <prvPortStartFirstTask+0x24>)
 8007736:	6800      	ldr	r0, [r0, #0]
 8007738:	6800      	ldr	r0, [r0, #0]
 800773a:	f380 8808 	msr	MSP, r0
 800773e:	f04f 0000 	mov.w	r0, #0
 8007742:	f380 8814 	msr	CONTROL, r0
 8007746:	b662      	cpsie	i
 8007748:	b661      	cpsie	f
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	df00      	svc	0
 8007754:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007756:	0000      	.short	0x0000
 8007758:	e000ed08 	.word	0xe000ed08

0800775c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800775c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800776c <vPortEnableVFP+0x10>
 8007760:	6801      	ldr	r1, [r0, #0]
 8007762:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007766:	6001      	str	r1, [r0, #0]
 8007768:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800776a:	0000      	.short	0x0000
 800776c:	e000ed88 	.word	0xe000ed88

08007770 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8007770:	2300      	movs	r3, #0
{
 8007772:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007774:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007776:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <prvTaskExitError+0x44>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3301      	adds	r3, #1
 800777c:	d00a      	beq.n	8007794 <prvTaskExitError+0x24>
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	b672      	cpsid	i
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	b662      	cpsie	i
 8007792:	e7fe      	b.n	8007792 <prvTaskExitError+0x22>
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	b672      	cpsid	i
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	b662      	cpsie	i
	while( ulDummy == 0 )
 80077a8:	9b01      	ldr	r3, [sp, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0fc      	beq.n	80077a8 <prvTaskExitError+0x38>
}
 80077ae:	b002      	add	sp, #8
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	20000040 	.word	0x20000040

080077b8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077bc:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077c0:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80077c4:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077c6:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077c8:	4b03      	ldr	r3, [pc, #12]	; (80077d8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077ca:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077cc:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077ce:	f06f 0302 	mvn.w	r3, #2
 80077d2:	6203      	str	r3, [r0, #32]
}
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	08007771 	.word	0x08007771
 80077dc:	00000000 	.word	0x00000000

080077e0 <SVC_Handler>:
	__asm volatile (
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <pxCurrentTCBConst2>)
 80077e2:	6819      	ldr	r1, [r3, #0]
 80077e4:	6808      	ldr	r0, [r1, #0]
 80077e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ea:	f380 8809 	msr	PSP, r0
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f04f 0000 	mov.w	r0, #0
 80077f6:	f380 8811 	msr	BASEPRI, r0
 80077fa:	4770      	bx	lr
 80077fc:	f3af 8000 	nop.w

08007800 <pxCurrentTCBConst2>:
 8007800:	20014ac0 	.word	0x20014ac0

08007804 <vPortEnterCritical>:
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	b672      	cpsid	i
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	b662      	cpsie	i
	uxCriticalNesting++;
 8007818:	4a0b      	ldr	r2, [pc, #44]	; (8007848 <vPortEnterCritical+0x44>)
 800781a:	6813      	ldr	r3, [r2, #0]
 800781c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800781e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007822:	d110      	bne.n	8007846 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007824:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007828:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800782c:	b2db      	uxtb	r3, r3
 800782e:	b153      	cbz	r3, 8007846 <vPortEnterCritical+0x42>
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	b672      	cpsid	i
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	b662      	cpsie	i
 8007844:	e7fe      	b.n	8007844 <vPortEnterCritical+0x40>
}
 8007846:	4770      	bx	lr
 8007848:	20000040 	.word	0x20000040

0800784c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800784c:	4a09      	ldr	r2, [pc, #36]	; (8007874 <vPortExitCritical+0x28>)
 800784e:	6813      	ldr	r3, [r2, #0]
 8007850:	b953      	cbnz	r3, 8007868 <vPortExitCritical+0x1c>
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	b672      	cpsid	i
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	b662      	cpsie	i
 8007866:	e7fe      	b.n	8007866 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8007868:	3b01      	subs	r3, #1
 800786a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800786c:	b90b      	cbnz	r3, 8007872 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800786e:	f383 8811 	msr	BASEPRI, r3
}
 8007872:	4770      	bx	lr
 8007874:	20000040 	.word	0x20000040
	...

08007880 <PendSV_Handler>:
	__asm volatile
 8007880:	f3ef 8009 	mrs	r0, PSP
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <pxCurrentTCBConst>)
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	f01e 0f10 	tst.w	lr, #16
 8007890:	bf08      	it	eq
 8007892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789a:	6010      	str	r0, [r2, #0]
 800789c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078a4:	b672      	cpsid	i
 80078a6:	f380 8811 	msr	BASEPRI, r0
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	b662      	cpsie	i
 80078b4:	f001 fa16 	bl	8008ce4 <vTaskSwitchContext>
 80078b8:	f04f 0000 	mov.w	r0, #0
 80078bc:	f380 8811 	msr	BASEPRI, r0
 80078c0:	bc09      	pop	{r0, r3}
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	6808      	ldr	r0, [r1, #0]
 80078c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ca:	f01e 0f10 	tst.w	lr, #16
 80078ce:	bf08      	it	eq
 80078d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078d4:	f380 8809 	msr	PSP, r0
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop

080078e0 <pxCurrentTCBConst>:
 80078e0:	20014ac0 	.word	0x20014ac0

080078e4 <SysTick_Handler>:
{
 80078e4:	b508      	push	{r3, lr}
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	b672      	cpsid	i
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80078fa:	f001 f851 	bl	80089a0 <xTaskIncrementTick>
 80078fe:	b128      	cbz	r0, 800790c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007900:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007908:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800790c:	2300      	movs	r3, #0
 800790e:	f383 8811 	msr	BASEPRI, r3
}
 8007912:	bd08      	pop	{r3, pc}

08007914 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007914:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007918:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800791a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800791e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007920:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007922:	4b04      	ldr	r3, [pc, #16]	; (8007934 <vPortSetupTimerInterrupt+0x20>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	fbb3 f3f1 	udiv	r3, r3, r1
 800792a:	3b01      	subs	r3, #1
 800792c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800792e:	2307      	movs	r3, #7
 8007930:	6113      	str	r3, [r2, #16]
}
 8007932:	4770      	bx	lr
 8007934:	2000000c 	.word	0x2000000c

08007938 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007938:	4b2e      	ldr	r3, [pc, #184]	; (80079f4 <xPortStartScheduler+0xbc>)
{
 800793a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800793c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800793e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007944:	22ff      	movs	r2, #255	; 0xff
 8007946:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007948:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800794a:	4a2b      	ldr	r2, [pc, #172]	; (80079f8 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800794c:	b2db      	uxtb	r3, r3
 800794e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007952:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007956:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800795a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800795c:	2307      	movs	r3, #7
 800795e:	4a27      	ldr	r2, [pc, #156]	; (80079fc <xPortStartScheduler+0xc4>)
 8007960:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007962:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007966:	1e5c      	subs	r4, r3, #1
 8007968:	0600      	lsls	r0, r0, #24
 800796a:	d40e      	bmi.n	800798a <xPortStartScheduler+0x52>
 800796c:	b111      	cbz	r1, 8007974 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800796e:	2b03      	cmp	r3, #3
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	d013      	beq.n	800799c <xPortStartScheduler+0x64>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	b672      	cpsid	i
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	b662      	cpsie	i
 8007988:	e7fe      	b.n	8007988 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800798a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800798e:	2101      	movs	r1, #1
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f88d 3003 	strb.w	r3, [sp, #3]
 8007998:	4623      	mov	r3, r4
 800799a:	e7e2      	b.n	8007962 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800799c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079a0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 80079a4:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079a6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079a8:	9b01      	ldr	r3, [sp, #4]
 80079aa:	4a12      	ldr	r2, [pc, #72]	; (80079f4 <xPortStartScheduler+0xbc>)
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079b0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80079b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079b8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079bc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80079c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079c4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80079c8:	f7ff ffa4 	bl	8007914 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80079cc:	4b0c      	ldr	r3, [pc, #48]	; (8007a00 <xPortStartScheduler+0xc8>)
 80079ce:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80079d0:	f7ff fec4 	bl	800775c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079d4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80079d8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079dc:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80079e0:	f7ff fea8 	bl	8007734 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80079e4:	f001 f97e 	bl	8008ce4 <vTaskSwitchContext>
}
 80079e8:	4628      	mov	r0, r5
	prvTaskExitError();
 80079ea:	f7ff fec1 	bl	8007770 <prvTaskExitError>
}
 80079ee:	b003      	add	sp, #12
 80079f0:	bd30      	pop	{r4, r5, pc}
 80079f2:	bf00      	nop
 80079f4:	e000e400 	.word	0xe000e400
 80079f8:	20014a78 	.word	0x20014a78
 80079fc:	20014a7c 	.word	0x20014a7c
 8007a00:	20000040 	.word	0x20000040

08007a04 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a04:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a08:	2b0f      	cmp	r3, #15
 8007a0a:	d910      	bls.n	8007a2e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a0c:	4a13      	ldr	r2, [pc, #76]	; (8007a5c <vPortValidateInterruptPriority+0x58>)
 8007a0e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a10:	4a13      	ldr	r2, [pc, #76]	; (8007a60 <vPortValidateInterruptPriority+0x5c>)
 8007a12:	7812      	ldrb	r2, [r2, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d90a      	bls.n	8007a2e <vPortValidateInterruptPriority+0x2a>
 8007a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1c:	b672      	cpsid	i
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	b662      	cpsie	i
 8007a2c:	e7fe      	b.n	8007a2c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a32:	4a0c      	ldr	r2, [pc, #48]	; (8007a64 <vPortValidateInterruptPriority+0x60>)
 8007a34:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d90a      	bls.n	8007a58 <vPortValidateInterruptPriority+0x54>
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	b672      	cpsid	i
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	b662      	cpsie	i
 8007a56:	e7fe      	b.n	8007a56 <vPortValidateInterruptPriority+0x52>
	}
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	e000e3f0 	.word	0xe000e3f0
 8007a60:	20014a78 	.word	0x20014a78
 8007a64:	20014a7c 	.word	0x20014a7c

08007a68 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a6c:	f7ff feca 	bl	8007804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a70:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007a72:	f7ff feeb 	bl	800784c <vPortExitCritical>

	return xReturn;
}
 8007a76:	fab4 f084 	clz	r0, r4
 8007a7a:	0940      	lsrs	r0, r0, #5
 8007a7c:	bd10      	pop	{r4, pc}

08007a7e <prvCopyDataToQueue>:
{
 8007a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a80:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a82:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007a84:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a86:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a88:	b952      	cbnz	r2, 8007aa0 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a8a:	6807      	ldr	r7, [r0, #0]
 8007a8c:	bb47      	cbnz	r7, 8007ae0 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a8e:	6880      	ldr	r0, [r0, #8]
 8007a90:	f001 fa98 	bl	8008fc4 <xTaskPriorityDisinherit>
 8007a94:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a96:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a98:	3601      	adds	r6, #1
}
 8007a9a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a9c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007aa0:	b965      	cbnz	r5, 8007abc <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007aa2:	6840      	ldr	r0, [r0, #4]
 8007aa4:	f020 fda4 	bl	80285f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007aac:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007aae:	68a2      	ldr	r2, [r4, #8]
 8007ab0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ab2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ab4:	d3f0      	bcc.n	8007a98 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	6063      	str	r3, [r4, #4]
 8007aba:	e7ed      	b.n	8007a98 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007abc:	68c0      	ldr	r0, [r0, #12]
 8007abe:	f020 fd97 	bl	80285f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ac2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ac4:	68e3      	ldr	r3, [r4, #12]
 8007ac6:	4251      	negs	r1, r2
 8007ac8:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007aca:	6822      	ldr	r2, [r4, #0]
 8007acc:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ace:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ad0:	bf3e      	ittt	cc
 8007ad2:	68a3      	ldrcc	r3, [r4, #8]
 8007ad4:	185b      	addcc	r3, r3, r1
 8007ad6:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007ad8:	2d02      	cmp	r5, #2
 8007ada:	d101      	bne.n	8007ae0 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007adc:	b116      	cbz	r6, 8007ae4 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8007ade:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8007ae0:	2500      	movs	r5, #0
 8007ae2:	e7d9      	b.n	8007a98 <prvCopyDataToQueue+0x1a>
 8007ae4:	4635      	mov	r5, r6
 8007ae6:	e7d7      	b.n	8007a98 <prvCopyDataToQueue+0x1a>

08007ae8 <prvCopyDataFromQueue>:
{
 8007ae8:	4603      	mov	r3, r0
 8007aea:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007aee:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007af0:	b162      	cbz	r2, 8007b0c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007af2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007af4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007af6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007af8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007afa:	60dc      	str	r4, [r3, #12]
}
 8007afc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b00:	bf24      	itt	cs
 8007b02:	6819      	ldrcs	r1, [r3, #0]
 8007b04:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b06:	68d9      	ldr	r1, [r3, #12]
 8007b08:	f020 bd72 	b.w	80285f0 <memcpy>
}
 8007b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <prvUnlockQueue>:
{
 8007b12:	b570      	push	{r4, r5, r6, lr}
 8007b14:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007b16:	f7ff fe75 	bl	8007804 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007b1a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b1e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007b22:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b24:	2d00      	cmp	r5, #0
 8007b26:	dc14      	bgt.n	8007b52 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007b28:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b2a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8007b2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007b32:	f7ff fe8b 	bl	800784c <vPortExitCritical>
	taskENTER_CRITICAL();
 8007b36:	f7ff fe65 	bl	8007804 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007b3a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007b3e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	dc12      	bgt.n	8007b6a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007b44:	23ff      	movs	r3, #255	; 0xff
 8007b46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007b4e:	f7ff be7d 	b.w	800784c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0e7      	beq.n	8007b28 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f001 f945 	bl	8008de8 <xTaskRemoveFromEventList>
 8007b5e:	b108      	cbz	r0, 8007b64 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007b60:	f001 f9d4 	bl	8008f0c <vTaskMissedYield>
			--cTxLock;
 8007b64:	3d01      	subs	r5, #1
 8007b66:	b26d      	sxtb	r5, r5
 8007b68:	e7dc      	b.n	8007b24 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0e9      	beq.n	8007b44 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b70:	4630      	mov	r0, r6
 8007b72:	f001 f939 	bl	8008de8 <xTaskRemoveFromEventList>
 8007b76:	b108      	cbz	r0, 8007b7c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007b78:	f001 f9c8 	bl	8008f0c <vTaskMissedYield>
				--cRxLock;
 8007b7c:	3d01      	subs	r5, #1
 8007b7e:	b26d      	sxtb	r5, r5
 8007b80:	e7de      	b.n	8007b40 <prvUnlockQueue+0x2e>

08007b82 <xQueueGenericReset>:
{
 8007b82:	b538      	push	{r3, r4, r5, lr}
 8007b84:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007b86:	4604      	mov	r4, r0
 8007b88:	b950      	cbnz	r0, 8007ba0 <xQueueGenericReset+0x1e>
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	b672      	cpsid	i
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	b662      	cpsie	i
 8007b9e:	e7fe      	b.n	8007b9e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8007ba0:	f7ff fe30 	bl	8007804 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ba4:	6822      	ldr	r2, [r4, #0]
 8007ba6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007baa:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bac:	434b      	muls	r3, r1
 8007bae:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bb0:	1a5b      	subs	r3, r3, r1
 8007bb2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bb4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bb6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bb8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bba:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bbc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8007bbe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007bc6:	b9a5      	cbnz	r5, 8007bf2 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	b173      	cbz	r3, 8007bea <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bcc:	f104 0010 	add.w	r0, r4, #16
 8007bd0:	f001 f90a 	bl	8008de8 <xTaskRemoveFromEventList>
 8007bd4:	b148      	cbz	r0, 8007bea <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8007bd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bde:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007bea:	f7ff fe2f 	bl	800784c <vPortExitCritical>
}
 8007bee:	2001      	movs	r0, #1
 8007bf0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bf2:	f104 0010 	add.w	r0, r4, #16
 8007bf6:	f7ff fd5b 	bl	80076b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007bfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007bfe:	f7ff fd57 	bl	80076b0 <vListInitialise>
 8007c02:	e7f2      	b.n	8007bea <xQueueGenericReset+0x68>

08007c04 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8007c04:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8007c06:	461c      	mov	r4, r3
 8007c08:	b953      	cbnz	r3, 8007c20 <xQueueGenericCreateStatic.part.0+0x1c>
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	b672      	cpsid	i
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	b662      	cpsie	i
 8007c1e:	e7fe      	b.n	8007c1e <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c20:	b15a      	cbz	r2, 8007c3a <xQueueGenericCreateStatic.part.0+0x36>
 8007c22:	b9b1      	cbnz	r1, 8007c52 <xQueueGenericCreateStatic.part.0+0x4e>
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	b672      	cpsid	i
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	b662      	cpsie	i
 8007c38:	e7fe      	b.n	8007c38 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c3a:	b151      	cbz	r1, 8007c52 <xQueueGenericCreateStatic.part.0+0x4e>
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	b672      	cpsid	i
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	b662      	cpsie	i
 8007c50:	e7fe      	b.n	8007c50 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007c52:	2350      	movs	r3, #80	; 0x50
 8007c54:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007c56:	9b01      	ldr	r3, [sp, #4]
 8007c58:	2b50      	cmp	r3, #80	; 0x50
 8007c5a:	d00a      	beq.n	8007c72 <xQueueGenericCreateStatic.part.0+0x6e>
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	b672      	cpsid	i
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	b662      	cpsie	i
 8007c70:	e7fe      	b.n	8007c70 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c72:	2900      	cmp	r1, #0
 8007c74:	bf08      	it	eq
 8007c76:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c78:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	6022      	str	r2, [r4, #0]
 8007c7e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8007c82:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c86:	4619      	mov	r1, r3
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f7ff ff7a 	bl	8007b82 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007c8e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8007c92:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007c94:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8007c98:	b002      	add	sp, #8
 8007c9a:	bd10      	pop	{r4, pc}

08007c9c <xQueueGenericCreateStatic>:
	{
 8007c9c:	b410      	push	{r4}
 8007c9e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ca2:	b950      	cbnz	r0, 8007cba <xQueueGenericCreateStatic+0x1e>
 8007ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca8:	b672      	cpsid	i
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	b662      	cpsie	i
 8007cb8:	e7fe      	b.n	8007cb8 <xQueueGenericCreateStatic+0x1c>
 8007cba:	9401      	str	r4, [sp, #4]
	}
 8007cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc0:	f7ff bfa0 	b.w	8007c04 <xQueueGenericCreateStatic.part.0>

08007cc4 <xQueueGenericCreate>:
	{
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	460d      	mov	r5, r1
 8007cc8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cca:	4606      	mov	r6, r0
 8007ccc:	b950      	cbnz	r0, 8007ce4 <xQueueGenericCreate+0x20>
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	b672      	cpsid	i
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	b662      	cpsie	i
 8007ce2:	e7fe      	b.n	8007ce2 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce4:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ce6:	3050      	adds	r0, #80	; 0x50
 8007ce8:	f7ff fc10 	bl	800750c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007cec:	4604      	mov	r4, r0
 8007cee:	b170      	cbz	r0, 8007d0e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cf6:	b165      	cbz	r5, 8007d12 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cf8:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	4620      	mov	r0, r4
 8007d00:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8007d02:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d06:	f7ff ff3c 	bl	8007b82 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007d0a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8007d0e:	4620      	mov	r0, r4
 8007d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d12:	4603      	mov	r3, r0
 8007d14:	e7f2      	b.n	8007cfc <xQueueGenericCreate+0x38>

08007d16 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007d16:	b513      	push	{r0, r1, r4, lr}
 8007d18:	4613      	mov	r3, r2
 8007d1a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007d1c:	b950      	cbnz	r0, 8007d34 <xQueueCreateCountingSemaphoreStatic+0x1e>
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	b672      	cpsid	i
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	b662      	cpsie	i
 8007d32:	e7fe      	b.n	8007d32 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d34:	4288      	cmp	r0, r1
 8007d36:	d20a      	bcs.n	8007d4e <xQueueCreateCountingSemaphoreStatic+0x38>
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	b672      	cpsid	i
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	b662      	cpsie	i
 8007d4c:	e7fe      	b.n	8007d4c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d4e:	2202      	movs	r2, #2
 8007d50:	9200      	str	r2, [sp, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	4611      	mov	r1, r2
 8007d56:	f7ff ffa1 	bl	8007c9c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007d5a:	b100      	cbz	r0, 8007d5e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d5c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007d5e:	b002      	add	sp, #8
 8007d60:	bd10      	pop	{r4, pc}

08007d62 <xQueueCreateCountingSemaphore>:
	{
 8007d62:	b510      	push	{r4, lr}
 8007d64:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007d66:	b950      	cbnz	r0, 8007d7e <xQueueCreateCountingSemaphore+0x1c>
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	b672      	cpsid	i
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	b662      	cpsie	i
 8007d7c:	e7fe      	b.n	8007d7c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d7e:	4288      	cmp	r0, r1
 8007d80:	d20a      	bcs.n	8007d98 <xQueueCreateCountingSemaphore+0x36>
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	b672      	cpsid	i
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	b662      	cpsie	i
 8007d96:	e7fe      	b.n	8007d96 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d98:	2202      	movs	r2, #2
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	f7ff ff92 	bl	8007cc4 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007da0:	b100      	cbz	r0, 8007da4 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007da2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007da4:	bd10      	pop	{r4, pc}

08007da6 <xQueueGenericSend>:
{
 8007da6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007daa:	b085      	sub	sp, #20
 8007dac:	4688      	mov	r8, r1
 8007dae:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007db0:	4604      	mov	r4, r0
{
 8007db2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007db4:	b950      	cbnz	r0, 8007dcc <xQueueGenericSend+0x26>
 8007db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dba:	b672      	cpsid	i
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	b662      	cpsie	i
 8007dca:	e7fe      	b.n	8007dca <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dcc:	b961      	cbnz	r1, 8007de8 <xQueueGenericSend+0x42>
 8007dce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007dd0:	b153      	cbz	r3, 8007de8 <xQueueGenericSend+0x42>
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	b672      	cpsid	i
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	b662      	cpsie	i
 8007de6:	e7fe      	b.n	8007de6 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007de8:	2f02      	cmp	r7, #2
 8007dea:	d10d      	bne.n	8007e08 <xQueueGenericSend+0x62>
 8007dec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d00a      	beq.n	8007e08 <xQueueGenericSend+0x62>
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	b672      	cpsid	i
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	b662      	cpsie	i
 8007e06:	e7fe      	b.n	8007e06 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e08:	f001 f88c 	bl	8008f24 <xTaskGetSchedulerState>
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	b960      	cbnz	r0, 8007e2a <xQueueGenericSend+0x84>
 8007e10:	9b01      	ldr	r3, [sp, #4]
 8007e12:	b15b      	cbz	r3, 8007e2c <xQueueGenericSend+0x86>
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	b672      	cpsid	i
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	b662      	cpsie	i
 8007e28:	e7fe      	b.n	8007e28 <xQueueGenericSend+0x82>
 8007e2a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007e2c:	f04f 0900 	mov.w	r9, #0
 8007e30:	e037      	b.n	8007ea2 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e32:	9d01      	ldr	r5, [sp, #4]
 8007e34:	b91d      	cbnz	r5, 8007e3e <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8007e36:	f7ff fd09 	bl	800784c <vPortExitCritical>
			return errQUEUE_FULL;
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e052      	b.n	8007ee4 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8007e3e:	b916      	cbnz	r6, 8007e46 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e40:	a802      	add	r0, sp, #8
 8007e42:	f001 f817 	bl	8008e74 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007e46:	f7ff fd01 	bl	800784c <vPortExitCritical>
		vTaskSuspendAll();
 8007e4a:	f000 fd9b 	bl	8008984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e4e:	f7ff fcd9 	bl	8007804 <vPortEnterCritical>
 8007e52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007e56:	2bff      	cmp	r3, #255	; 0xff
 8007e58:	d101      	bne.n	8007e5e <xQueueGenericSend+0xb8>
 8007e5a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8007e5e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007e62:	2bff      	cmp	r3, #255	; 0xff
 8007e64:	d101      	bne.n	8007e6a <xQueueGenericSend+0xc4>
 8007e66:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8007e6a:	f7ff fcef 	bl	800784c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e6e:	a901      	add	r1, sp, #4
 8007e70:	a802      	add	r0, sp, #8
 8007e72:	f001 f80b 	bl	8008e8c <xTaskCheckForTimeOut>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d14a      	bne.n	8007f10 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e7a:	f7ff fcc3 	bl	8007804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007e80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d131      	bne.n	8007eea <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007e86:	f7ff fce1 	bl	800784c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e8a:	9901      	ldr	r1, [sp, #4]
 8007e8c:	f104 0010 	add.w	r0, r4, #16
 8007e90:	f000 ff6e 	bl	8008d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e94:	4620      	mov	r0, r4
 8007e96:	f7ff fe3c 	bl	8007b12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e9a:	f000 fe19 	bl	8008ad0 <xTaskResumeAll>
 8007e9e:	b360      	cbz	r0, 8007efa <xQueueGenericSend+0x154>
 8007ea0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007ea2:	f7ff fcaf 	bl	8007804 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ea6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007ea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d301      	bcc.n	8007eb2 <xQueueGenericSend+0x10c>
 8007eae:	2f02      	cmp	r7, #2
 8007eb0:	d1bf      	bne.n	8007e32 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007eb2:	463a      	mov	r2, r7
 8007eb4:	4641      	mov	r1, r8
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f7ff fde1 	bl	8007a7e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ebe:	b11b      	cbz	r3, 8007ec8 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ec0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007ec4:	f000 ff90 	bl	8008de8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007ec8:	b148      	cbz	r0, 8007ede <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8007eca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ed2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007ede:	f7ff fcb5 	bl	800784c <vPortExitCritical>
				return pdPASS;
 8007ee2:	2001      	movs	r0, #1
}
 8007ee4:	b005      	add	sp, #20
 8007ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8007eea:	f7ff fcaf 	bl	800784c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f7ff fe0f 	bl	8007b12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ef4:	f000 fdec 	bl	8008ad0 <xTaskResumeAll>
 8007ef8:	e7d2      	b.n	8007ea0 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8007efa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	e7c7      	b.n	8007ea0 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8007f10:	4620      	mov	r0, r4
 8007f12:	f7ff fdfe 	bl	8007b12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f16:	f000 fddb 	bl	8008ad0 <xTaskResumeAll>
 8007f1a:	e78e      	b.n	8007e3a <xQueueGenericSend+0x94>

08007f1c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007f1c:	2200      	movs	r2, #0
	{
 8007f1e:	460b      	mov	r3, r1
 8007f20:	b513      	push	{r0, r1, r4, lr}
 8007f22:	4611      	mov	r1, r2
 8007f24:	9000      	str	r0, [sp, #0]
 8007f26:	2001      	movs	r0, #1
 8007f28:	f7ff fe6c 	bl	8007c04 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	b138      	cbz	r0, 8007f40 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f30:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f32:	461a      	mov	r2, r3
 8007f34:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f36:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f38:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007f3a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f3c:	f7ff ff33 	bl	8007da6 <xQueueGenericSend>
	}
 8007f40:	4620      	mov	r0, r4
 8007f42:	b002      	add	sp, #8
 8007f44:	bd10      	pop	{r4, pc}

08007f46 <xQueueGiveMutexRecursive>:
	{
 8007f46:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8007f48:	4604      	mov	r4, r0
 8007f4a:	b950      	cbnz	r0, 8007f62 <xQueueGiveMutexRecursive+0x1c>
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	b672      	cpsid	i
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	b662      	cpsie	i
 8007f60:	e7fe      	b.n	8007f60 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007f62:	6885      	ldr	r5, [r0, #8]
 8007f64:	f000 ffd8 	bl	8008f18 <xTaskGetCurrentTaskHandle>
 8007f68:	4285      	cmp	r5, r0
 8007f6a:	d10a      	bne.n	8007f82 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007f6c:	68e3      	ldr	r3, [r4, #12]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007f72:	b923      	cbnz	r3, 8007f7e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007f74:	461a      	mov	r2, r3
 8007f76:	4619      	mov	r1, r3
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f7ff ff14 	bl	8007da6 <xQueueGenericSend>
			xReturn = pdPASS;
 8007f7e:	2001      	movs	r0, #1
		return xReturn;
 8007f80:	e000      	b.n	8007f84 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8007f82:	2000      	movs	r0, #0
	}
 8007f84:	bd38      	pop	{r3, r4, r5, pc}

08007f86 <xQueueCreateMutex>:
	{
 8007f86:	b570      	push	{r4, r5, r6, lr}
 8007f88:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f8a:	2050      	movs	r0, #80	; 0x50
 8007f8c:	f7ff fabe 	bl	800750c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007f90:	4604      	mov	r4, r0
 8007f92:	b198      	cbz	r0, 8007fbc <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f94:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8007f96:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f98:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f9a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8007f9e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fa2:	f7ff fdee 	bl	8007b82 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007fa6:	462b      	mov	r3, r5
 8007fa8:	462a      	mov	r2, r5
 8007faa:	4629      	mov	r1, r5
 8007fac:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8007fae:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fb2:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007fb4:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007fb6:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007fb8:	f7ff fef5 	bl	8007da6 <xQueueGenericSend>
	}
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}

08007fc0 <xQueueGenericSendFromISR>:
{
 8007fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	4689      	mov	r9, r1
 8007fc6:	4690      	mov	r8, r2
 8007fc8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007fca:	4604      	mov	r4, r0
 8007fcc:	b950      	cbnz	r0, 8007fe4 <xQueueGenericSendFromISR+0x24>
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	b672      	cpsid	i
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	b662      	cpsie	i
 8007fe2:	e7fe      	b.n	8007fe2 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fe4:	b961      	cbnz	r1, 8008000 <xQueueGenericSendFromISR+0x40>
 8007fe6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007fe8:	b153      	cbz	r3, 8008000 <xQueueGenericSendFromISR+0x40>
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	b672      	cpsid	i
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	b662      	cpsie	i
 8007ffe:	e7fe      	b.n	8007ffe <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008000:	2f02      	cmp	r7, #2
 8008002:	d10d      	bne.n	8008020 <xQueueGenericSendFromISR+0x60>
 8008004:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008006:	2b01      	cmp	r3, #1
 8008008:	d00a      	beq.n	8008020 <xQueueGenericSendFromISR+0x60>
 800800a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800e:	b672      	cpsid	i
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	b662      	cpsie	i
 800801e:	e7fe      	b.n	800801e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008020:	f7ff fcf0 	bl	8007a04 <vPortValidateInterruptPriority>
	__asm volatile
 8008024:	f3ef 8611 	mrs	r6, BASEPRI
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	b672      	cpsid	i
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800803c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800803e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008040:	429a      	cmp	r2, r3
 8008042:	d301      	bcc.n	8008048 <xQueueGenericSendFromISR+0x88>
 8008044:	2f02      	cmp	r7, #2
 8008046:	d122      	bne.n	800808e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008048:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800804c:	463a      	mov	r2, r7
 800804e:	4649      	mov	r1, r9
 8008050:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8008052:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008054:	f7ff fd13 	bl	8007a7e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008058:	1c6b      	adds	r3, r5, #1
 800805a:	d113      	bne.n	8008084 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800805c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800805e:	b90b      	cbnz	r3, 8008064 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8008060:	2001      	movs	r0, #1
 8008062:	e00b      	b.n	800807c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008064:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008068:	f000 febe 	bl	8008de8 <xTaskRemoveFromEventList>
 800806c:	2800      	cmp	r0, #0
 800806e:	d0f7      	beq.n	8008060 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8008070:	f1b8 0f00 	cmp.w	r8, #0
 8008074:	d0f4      	beq.n	8008060 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008076:	2001      	movs	r0, #1
 8008078:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800807c:	f386 8811 	msr	BASEPRI, r6
}
 8008080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008084:	3501      	adds	r5, #1
 8008086:	b26d      	sxtb	r5, r5
 8008088:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800808c:	e7e8      	b.n	8008060 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800808e:	2000      	movs	r0, #0
 8008090:	e7f4      	b.n	800807c <xQueueGenericSendFromISR+0xbc>

08008092 <xQueueGiveFromISR>:
{
 8008092:	b570      	push	{r4, r5, r6, lr}
 8008094:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008096:	4604      	mov	r4, r0
 8008098:	b950      	cbnz	r0, 80080b0 <xQueueGiveFromISR+0x1e>
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	b672      	cpsid	i
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	b662      	cpsie	i
 80080ae:	e7fe      	b.n	80080ae <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80080b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80080b2:	b153      	cbz	r3, 80080ca <xQueueGiveFromISR+0x38>
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	b672      	cpsid	i
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	b662      	cpsie	i
 80080c8:	e7fe      	b.n	80080c8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80080ca:	6803      	ldr	r3, [r0, #0]
 80080cc:	b963      	cbnz	r3, 80080e8 <xQueueGiveFromISR+0x56>
 80080ce:	6883      	ldr	r3, [r0, #8]
 80080d0:	b153      	cbz	r3, 80080e8 <xQueueGiveFromISR+0x56>
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	b672      	cpsid	i
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	b662      	cpsie	i
 80080e6:	e7fe      	b.n	80080e6 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080e8:	f7ff fc8c 	bl	8007a04 <vPortValidateInterruptPriority>
	__asm volatile
 80080ec:	f3ef 8611 	mrs	r6, BASEPRI
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	b672      	cpsid	i
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008104:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008106:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008108:	4293      	cmp	r3, r2
 800810a:	d91c      	bls.n	8008146 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800810c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008110:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8008112:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8008114:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008116:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008118:	d110      	bne.n	800813c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800811a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800811c:	b90b      	cbnz	r3, 8008122 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800811e:	2001      	movs	r0, #1
 8008120:	e009      	b.n	8008136 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008122:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008126:	f000 fe5f 	bl	8008de8 <xTaskRemoveFromEventList>
 800812a:	2800      	cmp	r0, #0
 800812c:	d0f7      	beq.n	800811e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800812e:	2d00      	cmp	r5, #0
 8008130:	d0f5      	beq.n	800811e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008132:	2001      	movs	r0, #1
 8008134:	6028      	str	r0, [r5, #0]
	__asm volatile
 8008136:	f386 8811 	msr	BASEPRI, r6
}
 800813a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800813c:	3301      	adds	r3, #1
 800813e:	b25b      	sxtb	r3, r3
 8008140:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008144:	e7eb      	b.n	800811e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8008146:	2000      	movs	r0, #0
 8008148:	e7f5      	b.n	8008136 <xQueueGiveFromISR+0xa4>

0800814a <xQueueReceive>:
{
 800814a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800814e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8008150:	4604      	mov	r4, r0
{
 8008152:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008154:	b950      	cbnz	r0, 800816c <xQueueReceive+0x22>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	b672      	cpsid	i
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	b662      	cpsie	i
 800816a:	e7fe      	b.n	800816a <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800816c:	b961      	cbnz	r1, 8008188 <xQueueReceive+0x3e>
 800816e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008170:	b153      	cbz	r3, 8008188 <xQueueReceive+0x3e>
 8008172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008176:	b672      	cpsid	i
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	b662      	cpsie	i
 8008186:	e7fe      	b.n	8008186 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008188:	f000 fecc 	bl	8008f24 <xTaskGetSchedulerState>
 800818c:	4606      	mov	r6, r0
 800818e:	b960      	cbnz	r0, 80081aa <xQueueReceive+0x60>
 8008190:	9b01      	ldr	r3, [sp, #4]
 8008192:	b15b      	cbz	r3, 80081ac <xQueueReceive+0x62>
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	b672      	cpsid	i
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	b662      	cpsie	i
 80081a8:	e7fe      	b.n	80081a8 <xQueueReceive+0x5e>
 80081aa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80081ac:	f04f 0800 	mov.w	r8, #0
 80081b0:	e03d      	b.n	800822e <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 80081b2:	9d01      	ldr	r5, [sp, #4]
 80081b4:	b91d      	cbnz	r5, 80081be <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 80081b6:	f7ff fb49 	bl	800784c <vPortExitCritical>
				return errQUEUE_EMPTY;
 80081ba:	2000      	movs	r0, #0
 80081bc:	e056      	b.n	800826c <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 80081be:	b916      	cbnz	r6, 80081c6 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081c0:	a802      	add	r0, sp, #8
 80081c2:	f000 fe57 	bl	8008e74 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80081c6:	f7ff fb41 	bl	800784c <vPortExitCritical>
		vTaskSuspendAll();
 80081ca:	f000 fbdb 	bl	8008984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081ce:	f7ff fb19 	bl	8007804 <vPortEnterCritical>
 80081d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80081d6:	2bff      	cmp	r3, #255	; 0xff
 80081d8:	d101      	bne.n	80081de <xQueueReceive+0x94>
 80081da:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80081de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80081e2:	2bff      	cmp	r3, #255	; 0xff
 80081e4:	d101      	bne.n	80081ea <xQueueReceive+0xa0>
 80081e6:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80081ea:	f7ff fb2f 	bl	800784c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081ee:	a901      	add	r1, sp, #4
 80081f0:	a802      	add	r0, sp, #8
 80081f2:	f000 fe4b 	bl	8008e8c <xTaskCheckForTimeOut>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d141      	bne.n	800827e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081fa:	4620      	mov	r0, r4
 80081fc:	f7ff fc34 	bl	8007a68 <prvIsQueueEmpty>
 8008200:	b3b8      	cbz	r0, 8008272 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008202:	9901      	ldr	r1, [sp, #4]
 8008204:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008208:	f000 fdb2 	bl	8008d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800820c:	4620      	mov	r0, r4
 800820e:	f7ff fc80 	bl	8007b12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008212:	f000 fc5d 	bl	8008ad0 <xTaskResumeAll>
 8008216:	b948      	cbnz	r0, 800822c <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8008218:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800821c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008220:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800822e:	f7ff fae9 	bl	8007804 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008232:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008234:	2d00      	cmp	r5, #0
 8008236:	d0bc      	beq.n	80081b2 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008238:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800823a:	4639      	mov	r1, r7
 800823c:	4620      	mov	r0, r4
 800823e:	f7ff fc53 	bl	8007ae8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008242:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	b173      	cbz	r3, 8008266 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008248:	f104 0010 	add.w	r0, r4, #16
 800824c:	f000 fdcc 	bl	8008de8 <xTaskRemoveFromEventList>
 8008250:	b148      	cbz	r0, 8008266 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8008252:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008266:	f7ff faf1 	bl	800784c <vPortExitCritical>
				return pdPASS;
 800826a:	2001      	movs	r0, #1
}
 800826c:	b004      	add	sp, #16
 800826e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8008272:	4620      	mov	r0, r4
 8008274:	f7ff fc4d 	bl	8007b12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008278:	f000 fc2a 	bl	8008ad0 <xTaskResumeAll>
 800827c:	e7d6      	b.n	800822c <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 800827e:	4620      	mov	r0, r4
 8008280:	f7ff fc47 	bl	8007b12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008284:	f000 fc24 	bl	8008ad0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008288:	4620      	mov	r0, r4
 800828a:	f7ff fbed 	bl	8007a68 <prvIsQueueEmpty>
 800828e:	2800      	cmp	r0, #0
 8008290:	d0cc      	beq.n	800822c <xQueueReceive+0xe2>
 8008292:	e792      	b.n	80081ba <xQueueReceive+0x70>

08008294 <xQueueSemaphoreTake>:
{
 8008294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008296:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008298:	4604      	mov	r4, r0
{
 800829a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800829c:	b950      	cbnz	r0, 80082b4 <xQueueSemaphoreTake+0x20>
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	b672      	cpsid	i
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	b662      	cpsie	i
 80082b2:	e7fe      	b.n	80082b2 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 80082b4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80082b6:	b155      	cbz	r5, 80082ce <xQueueSemaphoreTake+0x3a>
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	b672      	cpsid	i
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	b662      	cpsie	i
 80082cc:	e7fe      	b.n	80082cc <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082ce:	f000 fe29 	bl	8008f24 <xTaskGetSchedulerState>
 80082d2:	4606      	mov	r6, r0
 80082d4:	b960      	cbnz	r0, 80082f0 <xQueueSemaphoreTake+0x5c>
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	b16b      	cbz	r3, 80082f6 <xQueueSemaphoreTake+0x62>
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	b672      	cpsid	i
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	b662      	cpsie	i
 80082ee:	e7fe      	b.n	80082ee <xQueueSemaphoreTake+0x5a>
 80082f0:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80082f2:	2700      	movs	r7, #0
 80082f4:	e055      	b.n	80083a2 <xQueueSemaphoreTake+0x10e>
 80082f6:	4605      	mov	r5, r0
 80082f8:	e7fb      	b.n	80082f2 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80082fa:	9b01      	ldr	r3, [sp, #4]
 80082fc:	b973      	cbnz	r3, 800831c <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80082fe:	b155      	cbz	r5, 8008316 <xQueueSemaphoreTake+0x82>
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	b672      	cpsid	i
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	b662      	cpsie	i
 8008314:	e7fe      	b.n	8008314 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 8008316:	f7ff fa99 	bl	800784c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800831a:	e062      	b.n	80083e2 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 800831c:	b916      	cbnz	r6, 8008324 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800831e:	a802      	add	r0, sp, #8
 8008320:	f000 fda8 	bl	8008e74 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008324:	f7ff fa92 	bl	800784c <vPortExitCritical>
		vTaskSuspendAll();
 8008328:	f000 fb2c 	bl	8008984 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800832c:	f7ff fa6a 	bl	8007804 <vPortEnterCritical>
 8008330:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008334:	2bff      	cmp	r3, #255	; 0xff
 8008336:	d101      	bne.n	800833c <xQueueSemaphoreTake+0xa8>
 8008338:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800833c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008340:	2bff      	cmp	r3, #255	; 0xff
 8008342:	d101      	bne.n	8008348 <xQueueSemaphoreTake+0xb4>
 8008344:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008348:	f7ff fa80 	bl	800784c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800834c:	a901      	add	r1, sp, #4
 800834e:	a802      	add	r0, sp, #8
 8008350:	f000 fd9c 	bl	8008e8c <xTaskCheckForTimeOut>
 8008354:	2800      	cmp	r0, #0
 8008356:	d14d      	bne.n	80083f4 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008358:	4620      	mov	r0, r4
 800835a:	f7ff fb85 	bl	8007a68 <prvIsQueueEmpty>
 800835e:	2800      	cmp	r0, #0
 8008360:	d042      	beq.n	80083e8 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	b93b      	cbnz	r3, 8008376 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8008366:	f7ff fa4d 	bl	8007804 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800836a:	68a0      	ldr	r0, [r4, #8]
 800836c:	f000 fdea 	bl	8008f44 <xTaskPriorityInherit>
 8008370:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008372:	f7ff fa6b 	bl	800784c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008376:	9901      	ldr	r1, [sp, #4]
 8008378:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800837c:	f000 fcf8 	bl	8008d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008380:	4620      	mov	r0, r4
 8008382:	f7ff fbc6 	bl	8007b12 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008386:	f000 fba3 	bl	8008ad0 <xTaskResumeAll>
 800838a:	b948      	cbnz	r0, 80083a0 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 800838c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008394:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80083a2:	f7ff fa2f 	bl	8007804 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80083a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0a6      	beq.n	80082fa <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80083ac:	3b01      	subs	r3, #1
 80083ae:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	b913      	cbnz	r3, 80083ba <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80083b4:	f000 fea4 	bl	8009100 <pvTaskIncrementMutexHeldCount>
 80083b8:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ba:	6923      	ldr	r3, [r4, #16]
 80083bc:	b173      	cbz	r3, 80083dc <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083be:	f104 0010 	add.w	r0, r4, #16
 80083c2:	f000 fd11 	bl	8008de8 <xTaskRemoveFromEventList>
 80083c6:	b148      	cbz	r0, 80083dc <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 80083c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80083cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	f3bf 8f6f 	isb	sy
				return pdPASS;
 80083dc:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 80083de:	f7ff fa35 	bl	800784c <vPortExitCritical>
}
 80083e2:	4628      	mov	r0, r5
 80083e4:	b005      	add	sp, #20
 80083e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 80083e8:	4620      	mov	r0, r4
 80083ea:	f7ff fb92 	bl	8007b12 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ee:	f000 fb6f 	bl	8008ad0 <xTaskResumeAll>
 80083f2:	e7d5      	b.n	80083a0 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 80083f4:	4620      	mov	r0, r4
 80083f6:	f7ff fb8c 	bl	8007b12 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083fa:	f000 fb69 	bl	8008ad0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083fe:	4620      	mov	r0, r4
 8008400:	f7ff fb32 	bl	8007a68 <prvIsQueueEmpty>
 8008404:	2800      	cmp	r0, #0
 8008406:	d0cb      	beq.n	80083a0 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8008408:	2d00      	cmp	r5, #0
 800840a:	d0ea      	beq.n	80083e2 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 800840c:	f7ff f9fa 	bl	8007804 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008410:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008412:	b119      	cbz	r1, 800841c <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008414:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008416:	6819      	ldr	r1, [r3, #0]
 8008418:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800841c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800841e:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008420:	f000 fe18 	bl	8009054 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008424:	f7ff fa12 	bl	800784c <vPortExitCritical>
 8008428:	e7db      	b.n	80083e2 <xQueueSemaphoreTake+0x14e>

0800842a <xQueueTakeMutexRecursive>:
	{
 800842a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 800842c:	4604      	mov	r4, r0
 800842e:	b950      	cbnz	r0, 8008446 <xQueueTakeMutexRecursive+0x1c>
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	b672      	cpsid	i
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	b662      	cpsie	i
 8008444:	e7fe      	b.n	8008444 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008446:	6885      	ldr	r5, [r0, #8]
 8008448:	9101      	str	r1, [sp, #4]
 800844a:	f000 fd65 	bl	8008f18 <xTaskGetCurrentTaskHandle>
 800844e:	4285      	cmp	r5, r0
 8008450:	9901      	ldr	r1, [sp, #4]
 8008452:	d105      	bne.n	8008460 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008454:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8008456:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008458:	3301      	adds	r3, #1
 800845a:	60e3      	str	r3, [r4, #12]
	}
 800845c:	b003      	add	sp, #12
 800845e:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008460:	4620      	mov	r0, r4
 8008462:	f7ff ff17 	bl	8008294 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8008466:	2800      	cmp	r0, #0
 8008468:	d0f8      	beq.n	800845c <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800846a:	68e3      	ldr	r3, [r4, #12]
 800846c:	3301      	adds	r3, #1
 800846e:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8008470:	e7f4      	b.n	800845c <xQueueTakeMutexRecursive+0x32>

08008472 <xQueueReceiveFromISR>:
{
 8008472:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008476:	4689      	mov	r9, r1
 8008478:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800847a:	4605      	mov	r5, r0
 800847c:	b950      	cbnz	r0, 8008494 <xQueueReceiveFromISR+0x22>
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	b672      	cpsid	i
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	b662      	cpsie	i
 8008492:	e7fe      	b.n	8008492 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008494:	b961      	cbnz	r1, 80084b0 <xQueueReceiveFromISR+0x3e>
 8008496:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008498:	b153      	cbz	r3, 80084b0 <xQueueReceiveFromISR+0x3e>
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	b672      	cpsid	i
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	b662      	cpsie	i
 80084ae:	e7fe      	b.n	80084ae <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084b0:	f7ff faa8 	bl	8007a04 <vPortValidateInterruptPriority>
	__asm volatile
 80084b4:	f3ef 8711 	mrs	r7, BASEPRI
 80084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084bc:	b672      	cpsid	i
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084cc:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084ce:	b31c      	cbz	r4, 8008518 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 80084d0:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084d4:	4649      	mov	r1, r9
 80084d6:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084d8:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 80084da:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084dc:	f7ff fb04 	bl	8007ae8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084e0:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80084e2:	1c73      	adds	r3, r6, #1
 80084e4:	d113      	bne.n	800850e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084e6:	692b      	ldr	r3, [r5, #16]
 80084e8:	b90b      	cbnz	r3, 80084ee <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 80084ea:	2001      	movs	r0, #1
 80084ec:	e00b      	b.n	8008506 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ee:	f105 0010 	add.w	r0, r5, #16
 80084f2:	f000 fc79 	bl	8008de8 <xTaskRemoveFromEventList>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d0f7      	beq.n	80084ea <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 80084fa:	f1b8 0f00 	cmp.w	r8, #0
 80084fe:	d0f4      	beq.n	80084ea <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008500:	2001      	movs	r0, #1
 8008502:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8008506:	f387 8811 	msr	BASEPRI, r7
}
 800850a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800850e:	3601      	adds	r6, #1
 8008510:	b276      	sxtb	r6, r6
 8008512:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008516:	e7e8      	b.n	80084ea <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8008518:	4620      	mov	r0, r4
 800851a:	e7f4      	b.n	8008506 <xQueueReceiveFromISR+0x94>

0800851c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800851c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800851e:	4a07      	ldr	r2, [pc, #28]	; (800853c <vQueueAddToRegistry+0x20>)
	{
 8008520:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008522:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008526:	b92c      	cbnz	r4, 8008534 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008528:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800852c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008530:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008532:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008534:	3301      	adds	r3, #1
 8008536:	2b08      	cmp	r3, #8
 8008538:	d1f3      	bne.n	8008522 <vQueueAddToRegistry+0x6>
 800853a:	e7fa      	b.n	8008532 <vQueueAddToRegistry+0x16>
 800853c:	20014a80 	.word	0x20014a80

08008540 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008540:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008542:	4a08      	ldr	r2, [pc, #32]	; (8008564 <vQueueUnregisterQueue+0x24>)
	{
 8008544:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008546:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800854a:	684c      	ldr	r4, [r1, #4]
 800854c:	4284      	cmp	r4, r0
 800854e:	d104      	bne.n	800855a <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008550:	2000      	movs	r0, #0
 8008552:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008556:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008558:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800855a:	3301      	adds	r3, #1
 800855c:	2b08      	cmp	r3, #8
 800855e:	d1f2      	bne.n	8008546 <vQueueUnregisterQueue+0x6>
 8008560:	e7fa      	b.n	8008558 <vQueueUnregisterQueue+0x18>
 8008562:	bf00      	nop
 8008564:	20014a80 	.word	0x20014a80

08008568 <vQueueDelete>:
{
 8008568:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800856a:	4604      	mov	r4, r0
 800856c:	b950      	cbnz	r0, 8008584 <vQueueDelete+0x1c>
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	b672      	cpsid	i
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	b662      	cpsie	i
 8008582:	e7fe      	b.n	8008582 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8008584:	f7ff ffdc 	bl	8008540 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008588:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800858c:	b923      	cbnz	r3, 8008598 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800858e:	4620      	mov	r0, r4
}
 8008590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8008594:	f7ff b850 	b.w	8007638 <vPortFree>
}
 8008598:	bd10      	pop	{r4, pc}

0800859a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800859a:	b570      	push	{r4, r5, r6, lr}
 800859c:	4604      	mov	r4, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085a2:	f7ff f92f 	bl	8007804 <vPortEnterCritical>
 80085a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80085aa:	2bff      	cmp	r3, #255	; 0xff
 80085ac:	d102      	bne.n	80085b4 <vQueueWaitForMessageRestricted+0x1a>
 80085ae:	2300      	movs	r3, #0
 80085b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80085b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80085b8:	2bff      	cmp	r3, #255	; 0xff
 80085ba:	d102      	bne.n	80085c2 <vQueueWaitForMessageRestricted+0x28>
 80085bc:	2300      	movs	r3, #0
 80085be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085c2:	f7ff f943 	bl	800784c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085c8:	b92b      	cbnz	r3, 80085d6 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085ca:	4632      	mov	r2, r6
 80085cc:	4629      	mov	r1, r5
 80085ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085d2:	f000 fbe9 	bl	8008da8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085d6:	4620      	mov	r0, r4
	}
 80085d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80085dc:	f7ff ba99 	b.w	8007b12 <prvUnlockQueue>

080085e0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085e6:	f7ff f90d 	bl	8007804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085ea:	4b2f      	ldr	r3, [pc, #188]	; (80086a8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80085ec:	4e2f      	ldr	r6, [pc, #188]	; (80086ac <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	4f2f      	ldr	r7, [pc, #188]	; (80086b0 <prvAddNewTaskToReadyList+0xd0>)
 80085f2:	3201      	adds	r2, #1
 80085f4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80085f6:	6835      	ldr	r5, [r6, #0]
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	d14a      	bne.n	8008692 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085fc:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d11f      	bne.n	8008644 <prvAddNewTaskToReadyList+0x64>
 8008604:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008606:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008608:	4640      	mov	r0, r8
 800860a:	f7ff f851 	bl	80076b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800860e:	f108 0814 	add.w	r8, r8, #20
 8008612:	2d38      	cmp	r5, #56	; 0x38
 8008614:	d1f7      	bne.n	8008606 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008616:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80086d8 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800861a:	4d26      	ldr	r5, [pc, #152]	; (80086b4 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800861c:	4640      	mov	r0, r8
 800861e:	f7ff f847 	bl	80076b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008622:	4628      	mov	r0, r5
 8008624:	f7ff f844 	bl	80076b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008628:	4823      	ldr	r0, [pc, #140]	; (80086b8 <prvAddNewTaskToReadyList+0xd8>)
 800862a:	f7ff f841 	bl	80076b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800862e:	4823      	ldr	r0, [pc, #140]	; (80086bc <prvAddNewTaskToReadyList+0xdc>)
 8008630:	f7ff f83e 	bl	80076b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008634:	4822      	ldr	r0, [pc, #136]	; (80086c0 <prvAddNewTaskToReadyList+0xe0>)
 8008636:	f7ff f83b 	bl	80076b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800863a:	4b22      	ldr	r3, [pc, #136]	; (80086c4 <prvAddNewTaskToReadyList+0xe4>)
 800863c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008640:	4b21      	ldr	r3, [pc, #132]	; (80086c8 <prvAddNewTaskToReadyList+0xe8>)
 8008642:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008644:	4a21      	ldr	r2, [pc, #132]	; (80086cc <prvAddNewTaskToReadyList+0xec>)
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	3301      	adds	r3, #1
 800864a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800864c:	4a20      	ldr	r2, [pc, #128]	; (80086d0 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800864e:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008650:	6811      	ldr	r1, [r2, #0]
 8008652:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008654:	428b      	cmp	r3, r1
 8008656:	d900      	bls.n	800865a <prvAddNewTaskToReadyList+0x7a>
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	2014      	movs	r0, #20
 800865c:	1d21      	adds	r1, r4, #4
 800865e:	fb00 7003 	mla	r0, r0, r3, r7
 8008662:	f7ff f833 	bl	80076cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008666:	f7ff f8f1 	bl	800784c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800866a:	4b1a      	ldr	r3, [pc, #104]	; (80086d4 <prvAddNewTaskToReadyList+0xf4>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	b173      	cbz	r3, 800868e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008670:	6833      	ldr	r3, [r6, #0]
 8008672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008674:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008676:	429a      	cmp	r2, r3
 8008678:	d209      	bcs.n	800868e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800867a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800867e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008682:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	f3bf 8f6f 	isb	sy
}
 800868e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008692:	4b10      	ldr	r3, [pc, #64]	; (80086d4 <prvAddNewTaskToReadyList+0xf4>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1d4      	bne.n	8008644 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800869a:	6833      	ldr	r3, [r6, #0]
 800869c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800869e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d8cf      	bhi.n	8008644 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 80086a4:	6034      	str	r4, [r6, #0]
 80086a6:	e7cd      	b.n	8008644 <prvAddNewTaskToReadyList+0x64>
 80086a8:	20014f2c 	.word	0x20014f2c
 80086ac:	20014ac0 	.word	0x20014ac0
 80086b0:	20014acc 	.word	0x20014acc
 80086b4:	20014f58 	.word	0x20014f58
 80086b8:	20014f74 	.word	0x20014f74
 80086bc:	20014fa0 	.word	0x20014fa0
 80086c0:	20014f8c 	.word	0x20014f8c
 80086c4:	20014ac4 	.word	0x20014ac4
 80086c8:	20014ac8 	.word	0x20014ac8
 80086cc:	20014f3c 	.word	0x20014f3c
 80086d0:	20014f40 	.word	0x20014f40
 80086d4:	20014f88 	.word	0x20014f88
 80086d8:	20014f44 	.word	0x20014f44

080086dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086de:	4b15      	ldr	r3, [pc, #84]	; (8008734 <prvAddCurrentTaskToDelayedList+0x58>)
{
 80086e0:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086e2:	4e15      	ldr	r6, [pc, #84]	; (8008738 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80086e4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80086e6:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086e8:	6830      	ldr	r0, [r6, #0]
 80086ea:	3004      	adds	r0, #4
 80086ec:	f7ff f811 	bl	8007712 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086f0:	1c63      	adds	r3, r4, #1
 80086f2:	d107      	bne.n	8008704 <prvAddCurrentTaskToDelayedList+0x28>
 80086f4:	b137      	cbz	r7, 8008704 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086f6:	6831      	ldr	r1, [r6, #0]
 80086f8:	4810      	ldr	r0, [pc, #64]	; (800873c <prvAddCurrentTaskToDelayedList+0x60>)
 80086fa:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008700:	f7fe bfe4 	b.w	80076cc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008704:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008706:	6833      	ldr	r3, [r6, #0]
 8008708:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800870a:	d307      	bcc.n	800871c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800870c:	4b0c      	ldr	r3, [pc, #48]	; (8008740 <prvAddCurrentTaskToDelayedList+0x64>)
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	6831      	ldr	r1, [r6, #0]
}
 8008712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008716:	3104      	adds	r1, #4
 8008718:	f7fe bfe4 	b.w	80076e4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800871c:	4b09      	ldr	r3, [pc, #36]	; (8008744 <prvAddCurrentTaskToDelayedList+0x68>)
 800871e:	6818      	ldr	r0, [r3, #0]
 8008720:	6831      	ldr	r1, [r6, #0]
 8008722:	3104      	adds	r1, #4
 8008724:	f7fe ffde 	bl	80076e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008728:	4b07      	ldr	r3, [pc, #28]	; (8008748 <prvAddCurrentTaskToDelayedList+0x6c>)
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	42a2      	cmp	r2, r4
 800872e:	d900      	bls.n	8008732 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8008730:	601c      	str	r4, [r3, #0]
}
 8008732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008734:	20014fb4 	.word	0x20014fb4
 8008738:	20014ac0 	.word	0x20014ac0
 800873c:	20014f8c 	.word	0x20014f8c
 8008740:	20014ac8 	.word	0x20014ac8
 8008744:	20014ac4 	.word	0x20014ac4
 8008748:	20014f6c 	.word	0x20014f6c

0800874c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800874c:	4a06      	ldr	r2, [pc, #24]	; (8008768 <prvResetNextTaskUnblockTime+0x1c>)
 800874e:	6813      	ldr	r3, [r2, #0]
 8008750:	6819      	ldr	r1, [r3, #0]
 8008752:	4b06      	ldr	r3, [pc, #24]	; (800876c <prvResetNextTaskUnblockTime+0x20>)
 8008754:	b919      	cbnz	r1, 800875e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008756:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800875a:	601a      	str	r2, [r3, #0]
}
 800875c:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875e:	6812      	ldr	r2, [r2, #0]
 8008760:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008762:	68d2      	ldr	r2, [r2, #12]
 8008764:	6852      	ldr	r2, [r2, #4]
 8008766:	e7f8      	b.n	800875a <prvResetNextTaskUnblockTime+0xe>
 8008768:	20014ac4 	.word	0x20014ac4
 800876c:	20014f6c 	.word	0x20014f6c

08008770 <prvDeleteTCB>:
	{
 8008770:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008772:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8008776:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008778:	b93b      	cbnz	r3, 800878a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800877a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800877c:	f7fe ff5c 	bl	8007638 <vPortFree>
				vPortFree( pxTCB );
 8008780:	4620      	mov	r0, r4
	}
 8008782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008786:	f7fe bf57 	b.w	8007638 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800878a:	2b01      	cmp	r3, #1
 800878c:	d0f9      	beq.n	8008782 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800878e:	2b02      	cmp	r3, #2
 8008790:	d00a      	beq.n	80087a8 <prvDeleteTCB+0x38>
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	e7fe      	b.n	80087a6 <prvDeleteTCB+0x36>
	}
 80087a8:	bd10      	pop	{r4, pc}
	...

080087ac <prvIdleTask>:
{
 80087ac:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087ae:	4c14      	ldr	r4, [pc, #80]	; (8008800 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b0:	4f14      	ldr	r7, [pc, #80]	; (8008804 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 80087b2:	4d15      	ldr	r5, [pc, #84]	; (8008808 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	b983      	cbnz	r3, 80087da <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087b8:	4b14      	ldr	r3, [pc, #80]	; (800880c <prvIdleTask+0x60>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d909      	bls.n	80087d4 <prvIdleTask+0x28>
				taskYIELD();
 80087c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80087c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 80087d4:	f7f8 fb0c 	bl	8000df0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80087d8:	e7eb      	b.n	80087b2 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80087da:	f7ff f813 	bl	8007804 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087e2:	1d30      	adds	r0, r6, #4
 80087e4:	f7fe ff95 	bl	8007712 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80087f4:	f7ff f82a 	bl	800784c <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80087f8:	4630      	mov	r0, r6
 80087fa:	f7ff ffb9 	bl	8008770 <prvDeleteTCB>
 80087fe:	e7d9      	b.n	80087b4 <prvIdleTask+0x8>
 8008800:	20014f30 	.word	0x20014f30
 8008804:	20014fa0 	.word	0x20014fa0
 8008808:	20014f2c 	.word	0x20014f2c
 800880c:	20014acc 	.word	0x20014acc

08008810 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008814:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008818:	4606      	mov	r6, r0
 800881a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800881c:	21a5      	movs	r1, #165	; 0xa5
 800881e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008820:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008822:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008826:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800882a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800882c:	f01f feee 	bl	802860c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008830:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008832:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008834:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8008838:	b3b5      	cbz	r5, 80088a8 <prvInitialiseNewTask.constprop.0+0x98>
 800883a:	1e6b      	subs	r3, r5, #1
 800883c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008840:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008842:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008846:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800884a:	b108      	cbz	r0, 8008850 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800884c:	42ab      	cmp	r3, r5
 800884e:	d1f8      	bne.n	8008842 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008850:	2300      	movs	r3, #0
 8008852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008856:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008858:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800885c:	1d20      	adds	r0, r4, #4
 800885e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008860:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8008864:	bf28      	it	cs
 8008866:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008868:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800886a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800886c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008870:	f7fe ff29 	bl	80076c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008874:	f104 0018 	add.w	r0, r4, #24
 8008878:	f7fe ff25 	bl	80076c6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800887c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008880:	463a      	mov	r2, r7
 8008882:	4631      	mov	r1, r6
 8008884:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008886:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008888:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800888a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800888c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008890:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008894:	f7fe ff90 	bl	80077b8 <pxPortInitialiseStack>
 8008898:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800889a:	f1b8 0f00 	cmp.w	r8, #0
 800889e:	d001      	beq.n	80088a4 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088a0:	f8c8 4000 	str.w	r4, [r8]
}
 80088a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088a8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80088ac:	e7d3      	b.n	8008856 <prvInitialiseNewTask.constprop.0+0x46>

080088ae <xTaskCreateStatic>:
	{
 80088ae:	b570      	push	{r4, r5, r6, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80088b6:	b955      	cbnz	r5, 80088ce <xTaskCreateStatic+0x20>
 80088b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088bc:	b672      	cpsid	i
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	b662      	cpsie	i
 80088cc:	e7fe      	b.n	80088cc <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 80088ce:	b954      	cbnz	r4, 80088e6 <xTaskCreateStatic+0x38>
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	b672      	cpsid	i
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	b662      	cpsie	i
 80088e4:	e7fe      	b.n	80088e4 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 80088e6:	2660      	movs	r6, #96	; 0x60
 80088e8:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80088ea:	9e05      	ldr	r6, [sp, #20]
 80088ec:	2e60      	cmp	r6, #96	; 0x60
 80088ee:	d00a      	beq.n	8008906 <xTaskCreateStatic+0x58>
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	b672      	cpsid	i
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	b662      	cpsie	i
 8008904:	e7fe      	b.n	8008904 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008906:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008908:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800890a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800890c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008910:	ad04      	add	r5, sp, #16
 8008912:	9402      	str	r4, [sp, #8]
 8008914:	9501      	str	r5, [sp, #4]
 8008916:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008918:	9500      	str	r5, [sp, #0]
 800891a:	f7ff ff79 	bl	8008810 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800891e:	4620      	mov	r0, r4
 8008920:	f7ff fe5e 	bl	80085e0 <prvAddNewTaskToReadyList>
	}
 8008924:	9804      	ldr	r0, [sp, #16]
 8008926:	b006      	add	sp, #24
 8008928:	bd70      	pop	{r4, r5, r6, pc}

0800892a <xTaskCreate>:
	{
 800892a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800892e:	4607      	mov	r7, r0
 8008930:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008932:	0090      	lsls	r0, r2, #2
	{
 8008934:	4688      	mov	r8, r1
 8008936:	4616      	mov	r6, r2
 8008938:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800893a:	f7fe fde7 	bl	800750c <pvPortMalloc>
			if( pxStack != NULL )
 800893e:	4605      	mov	r5, r0
 8008940:	b1e8      	cbz	r0, 800897e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008942:	2060      	movs	r0, #96	; 0x60
 8008944:	f7fe fde2 	bl	800750c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008948:	4604      	mov	r4, r0
 800894a:	b1a8      	cbz	r0, 8008978 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800894c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800894e:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008950:	4632      	mov	r2, r6
 8008952:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008954:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800895a:	9002      	str	r0, [sp, #8]
 800895c:	4638      	mov	r0, r7
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	464b      	mov	r3, r9
 8008966:	f7ff ff53 	bl	8008810 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800896a:	4620      	mov	r0, r4
 800896c:	f7ff fe38 	bl	80085e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008970:	2001      	movs	r0, #1
	}
 8008972:	b005      	add	sp, #20
 8008974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008978:	4628      	mov	r0, r5
 800897a:	f7fe fe5d 	bl	8007638 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800897e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008982:	e7f6      	b.n	8008972 <xTaskCreate+0x48>

08008984 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008984:	4a02      	ldr	r2, [pc, #8]	; (8008990 <vTaskSuspendAll+0xc>)
 8008986:	6813      	ldr	r3, [r2, #0]
 8008988:	3301      	adds	r3, #1
 800898a:	6013      	str	r3, [r2, #0]
}
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	20014f38 	.word	0x20014f38

08008994 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008994:	4b01      	ldr	r3, [pc, #4]	; (800899c <xTaskGetTickCount+0x8>)
 8008996:	6818      	ldr	r0, [r3, #0]
}
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	20014fb4 	.word	0x20014fb4

080089a0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a0:	4b40      	ldr	r3, [pc, #256]	; (8008aa4 <xTaskIncrementTick+0x104>)
 80089a2:	681b      	ldr	r3, [r3, #0]
{
 80089a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d174      	bne.n	8008a96 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80089ac:	4b3e      	ldr	r3, [pc, #248]	; (8008aa8 <xTaskIncrementTick+0x108>)
 80089ae:	681d      	ldr	r5, [r3, #0]
 80089b0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80089b2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80089b4:	b9cd      	cbnz	r5, 80089ea <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80089b6:	4b3d      	ldr	r3, [pc, #244]	; (8008aac <xTaskIncrementTick+0x10c>)
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	6812      	ldr	r2, [r2, #0]
 80089bc:	b152      	cbz	r2, 80089d4 <xTaskIncrementTick+0x34>
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	b672      	cpsid	i
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	b662      	cpsie	i
 80089d2:	e7fe      	b.n	80089d2 <xTaskIncrementTick+0x32>
 80089d4:	4a36      	ldr	r2, [pc, #216]	; (8008ab0 <xTaskIncrementTick+0x110>)
 80089d6:	6819      	ldr	r1, [r3, #0]
 80089d8:	6810      	ldr	r0, [r2, #0]
 80089da:	6018      	str	r0, [r3, #0]
 80089dc:	6011      	str	r1, [r2, #0]
 80089de:	4a35      	ldr	r2, [pc, #212]	; (8008ab4 <xTaskIncrementTick+0x114>)
 80089e0:	6813      	ldr	r3, [r2, #0]
 80089e2:	3301      	adds	r3, #1
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	f7ff feb1 	bl	800874c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089ea:	4e33      	ldr	r6, [pc, #204]	; (8008ab8 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80089ec:	2400      	movs	r4, #0
 80089ee:	4f33      	ldr	r7, [pc, #204]	; (8008abc <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089f0:	6833      	ldr	r3, [r6, #0]
 80089f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008ac8 <xTaskIncrementTick+0x128>
 80089f6:	42ab      	cmp	r3, r5
 80089f8:	d911      	bls.n	8008a1e <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089fa:	f8d8 3000 	ldr.w	r3, [r8]
 80089fe:	2214      	movs	r2, #20
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	4353      	muls	r3, r2
 8008a04:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	bf28      	it	cs
 8008a0a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008a0c:	4b2c      	ldr	r3, [pc, #176]	; (8008ac0 <xTaskIncrementTick+0x120>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008a10:	2b00      	cmp	r3, #0
}
 8008a12:	bf0c      	ite	eq
 8008a14:	4620      	moveq	r0, r4
 8008a16:	2001      	movne	r0, #1
 8008a18:	b003      	add	sp, #12
 8008a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a1e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008aac <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8008a22:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8008acc <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a26:	f8d9 3000 	ldr.w	r3, [r9]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	b91b      	cbnz	r3, 8008a36 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a32:	6033      	str	r3, [r6, #0]
					break;
 8008a34:	e7e1      	b.n	80089fa <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a36:	f8d9 3000 	ldr.w	r3, [r9]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a40:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008a44:	4295      	cmp	r5, r2
 8008a46:	d201      	bcs.n	8008a4c <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8008a48:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a4a:	e7d6      	b.n	80089fa <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a4c:	f10b 0104 	add.w	r1, fp, #4
 8008a50:	4608      	mov	r0, r1
 8008a52:	9101      	str	r1, [sp, #4]
 8008a54:	f7fe fe5d 	bl	8007712 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a58:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008a5c:	9901      	ldr	r1, [sp, #4]
 8008a5e:	b122      	cbz	r2, 8008a6a <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a60:	f10b 0018 	add.w	r0, fp, #24
 8008a64:	f7fe fe55 	bl	8007712 <uxListRemove>
 8008a68:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8008a6a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008a6e:	f8da 2000 	ldr.w	r2, [sl]
 8008a72:	4290      	cmp	r0, r2
 8008a74:	d901      	bls.n	8008a7a <xTaskIncrementTick+0xda>
 8008a76:	f8ca 0000 	str.w	r0, [sl]
 8008a7a:	2314      	movs	r3, #20
 8008a7c:	fb03 7000 	mla	r0, r3, r0, r7
 8008a80:	f7fe fe24 	bl	80076cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a84:	f8d8 1000 	ldr.w	r1, [r8]
 8008a88:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008a8c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	bf28      	it	cs
 8008a92:	2401      	movcs	r4, #1
 8008a94:	e7c7      	b.n	8008a26 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8008a96:	4a0b      	ldr	r2, [pc, #44]	; (8008ac4 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8008a98:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008a9a:	6813      	ldr	r3, [r2, #0]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	e7b4      	b.n	8008a0c <xTaskIncrementTick+0x6c>
 8008aa2:	bf00      	nop
 8008aa4:	20014f38 	.word	0x20014f38
 8008aa8:	20014fb4 	.word	0x20014fb4
 8008aac:	20014ac4 	.word	0x20014ac4
 8008ab0:	20014ac8 	.word	0x20014ac8
 8008ab4:	20014f70 	.word	0x20014f70
 8008ab8:	20014f6c 	.word	0x20014f6c
 8008abc:	20014acc 	.word	0x20014acc
 8008ac0:	20014fb8 	.word	0x20014fb8
 8008ac4:	20014f34 	.word	0x20014f34
 8008ac8:	20014ac0 	.word	0x20014ac0
 8008acc:	20014f40 	.word	0x20014f40

08008ad0 <xTaskResumeAll>:
{
 8008ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8008ad2:	4c32      	ldr	r4, [pc, #200]	; (8008b9c <xTaskResumeAll+0xcc>)
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	b953      	cbnz	r3, 8008aee <xTaskResumeAll+0x1e>
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	b672      	cpsid	i
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	b662      	cpsie	i
 8008aec:	e7fe      	b.n	8008aec <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8008aee:	f7fe fe89 	bl	8007804 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008af8:	6824      	ldr	r4, [r4, #0]
 8008afa:	b12c      	cbz	r4, 8008b08 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8008afc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008afe:	f7fe fea5 	bl	800784c <vPortExitCritical>
}
 8008b02:	4620      	mov	r0, r4
 8008b04:	b003      	add	sp, #12
 8008b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b08:	4b25      	ldr	r3, [pc, #148]	; (8008ba0 <xTaskResumeAll+0xd0>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0f5      	beq.n	8008afc <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b10:	4d24      	ldr	r5, [pc, #144]	; (8008ba4 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8008b12:	4e25      	ldr	r6, [pc, #148]	; (8008ba8 <xTaskResumeAll+0xd8>)
 8008b14:	4f25      	ldr	r7, [pc, #148]	; (8008bac <xTaskResumeAll+0xdc>)
 8008b16:	e01e      	b.n	8008b56 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b18:	68eb      	ldr	r3, [r5, #12]
 8008b1a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b1c:	f104 0018 	add.w	r0, r4, #24
 8008b20:	f7fe fdf7 	bl	8007712 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b24:	1d21      	adds	r1, r4, #4
 8008b26:	4608      	mov	r0, r1
 8008b28:	9101      	str	r1, [sp, #4]
 8008b2a:	f7fe fdf2 	bl	8007712 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008b30:	6832      	ldr	r2, [r6, #0]
 8008b32:	9901      	ldr	r1, [sp, #4]
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d900      	bls.n	8008b3a <xTaskResumeAll+0x6a>
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	2014      	movs	r0, #20
 8008b3c:	fb00 7003 	mla	r0, r0, r3, r7
 8008b40:	f7fe fdc4 	bl	80076cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b44:	4b1a      	ldr	r3, [pc, #104]	; (8008bb0 <xTaskResumeAll+0xe0>)
 8008b46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d302      	bcc.n	8008b56 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 8008b50:	4b18      	ldr	r3, [pc, #96]	; (8008bb4 <xTaskResumeAll+0xe4>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1dd      	bne.n	8008b18 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008b5c:	b10c      	cbz	r4, 8008b62 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8008b5e:	f7ff fdf5 	bl	800874c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b62:	4d15      	ldr	r5, [pc, #84]	; (8008bb8 <xTaskResumeAll+0xe8>)
 8008b64:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008b66:	b144      	cbz	r4, 8008b7a <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 8008b68:	4e12      	ldr	r6, [pc, #72]	; (8008bb4 <xTaskResumeAll+0xe4>)
 8008b6a:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008b6c:	f7ff ff18 	bl	80089a0 <xTaskIncrementTick>
 8008b70:	b100      	cbz	r0, 8008b74 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8008b72:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008b74:	3c01      	subs	r4, #1
 8008b76:	d1f9      	bne.n	8008b6c <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8008b78:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008b7a:	4b0e      	ldr	r3, [pc, #56]	; (8008bb4 <xTaskResumeAll+0xe4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0bc      	beq.n	8008afc <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 8008b82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008b96:	2401      	movs	r4, #1
 8008b98:	e7b1      	b.n	8008afe <xTaskResumeAll+0x2e>
 8008b9a:	bf00      	nop
 8008b9c:	20014f38 	.word	0x20014f38
 8008ba0:	20014f2c 	.word	0x20014f2c
 8008ba4:	20014f74 	.word	0x20014f74
 8008ba8:	20014f40 	.word	0x20014f40
 8008bac:	20014acc 	.word	0x20014acc
 8008bb0:	20014ac0 	.word	0x20014ac0
 8008bb4:	20014fb8 	.word	0x20014fb8
 8008bb8:	20014f34 	.word	0x20014f34

08008bbc <vTaskDelay>:
	{
 8008bbc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bbe:	b950      	cbnz	r0, 8008bd6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008bc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	f3bf 8f6f 	isb	sy
	}
 8008bd4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008bd6:	4b0b      	ldr	r3, [pc, #44]	; (8008c04 <vTaskDelay+0x48>)
 8008bd8:	6819      	ldr	r1, [r3, #0]
 8008bda:	b151      	cbz	r1, 8008bf2 <vTaskDelay+0x36>
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	b672      	cpsid	i
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	b662      	cpsie	i
 8008bf0:	e7fe      	b.n	8008bf0 <vTaskDelay+0x34>
			vTaskSuspendAll();
 8008bf2:	f7ff fec7 	bl	8008984 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bf6:	f7ff fd71 	bl	80086dc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008bfa:	f7ff ff69 	bl	8008ad0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d0de      	beq.n	8008bc0 <vTaskDelay+0x4>
 8008c02:	e7e7      	b.n	8008bd4 <vTaskDelay+0x18>
 8008c04:	20014f38 	.word	0x20014f38

08008c08 <vTaskSetApplicationTaskTag>:
	{
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	460d      	mov	r5, r1
		if( xTask == NULL )
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	b908      	cbnz	r0, 8008c14 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8008c10:	4b04      	ldr	r3, [pc, #16]	; (8008c24 <vTaskSetApplicationTaskTag+0x1c>)
 8008c12:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8008c14:	f7fe fdf6 	bl	8007804 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8008c18:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8008c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8008c1e:	f7fe be15 	b.w	800784c <vPortExitCritical>
 8008c22:	bf00      	nop
 8008c24:	20014ac0 	.word	0x20014ac0

08008c28 <xTaskCallApplicationTaskHook>:
	{
 8008c28:	4603      	mov	r3, r0
 8008c2a:	4608      	mov	r0, r1
		if( xTask == NULL )
 8008c2c:	b90b      	cbnz	r3, 8008c32 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8008c2e:	4b03      	ldr	r3, [pc, #12]	; (8008c3c <xTaskCallApplicationTaskHook+0x14>)
 8008c30:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8008c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c34:	b103      	cbz	r3, 8008c38 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8008c36:	4718      	bx	r3
	}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	4770      	bx	lr
 8008c3c:	20014ac0 	.word	0x20014ac0

08008c40 <vTaskStartScheduler>:
{
 8008c40:	b510      	push	{r4, lr}
 8008c42:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c44:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c46:	aa07      	add	r2, sp, #28
 8008c48:	a906      	add	r1, sp, #24
 8008c4a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c4c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c50:	f7fe fc20 	bl	8007494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c54:	9b05      	ldr	r3, [sp, #20]
 8008c56:	9a07      	ldr	r2, [sp, #28]
 8008c58:	9302      	str	r3, [sp, #8]
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	491b      	ldr	r1, [pc, #108]	; (8008ccc <vTaskStartScheduler+0x8c>)
 8008c5e:	481c      	ldr	r0, [pc, #112]	; (8008cd0 <vTaskStartScheduler+0x90>)
 8008c60:	e9cd 4300 	strd	r4, r3, [sp]
 8008c64:	4623      	mov	r3, r4
 8008c66:	f7ff fe22 	bl	80088ae <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008c6a:	b360      	cbz	r0, 8008cc6 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 8008c6c:	f000 faa6 	bl	80091bc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008c70:	2801      	cmp	r0, #1
 8008c72:	d11b      	bne.n	8008cac <vTaskStartScheduler+0x6c>
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	b672      	cpsid	i
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c88:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8c:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 8008c8e:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c92:	4b11      	ldr	r3, [pc, #68]	; (8008cd8 <vTaskStartScheduler+0x98>)
 8008c94:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c96:	4b11      	ldr	r3, [pc, #68]	; (8008cdc <vTaskStartScheduler+0x9c>)
 8008c98:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8008c9a:	4b11      	ldr	r3, [pc, #68]	; (8008ce0 <vTaskStartScheduler+0xa0>)
 8008c9c:	6818      	ldr	r0, [r3, #0]
 8008c9e:	f7ff ffc3 	bl	8008c28 <xTaskCallApplicationTaskHook>
}
 8008ca2:	b008      	add	sp, #32
 8008ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008ca8:	f7fe be46 	b.w	8007938 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cac:	3001      	adds	r0, #1
 8008cae:	d10a      	bne.n	8008cc6 <vTaskStartScheduler+0x86>
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	b672      	cpsid	i
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	b662      	cpsie	i
 8008cc4:	e7fe      	b.n	8008cc4 <vTaskStartScheduler+0x84>
}
 8008cc6:	b008      	add	sp, #32
 8008cc8:	bd10      	pop	{r4, pc}
 8008cca:	bf00      	nop
 8008ccc:	0802bca8 	.word	0x0802bca8
 8008cd0:	080087ad 	.word	0x080087ad
 8008cd4:	20014f6c 	.word	0x20014f6c
 8008cd8:	20014f88 	.word	0x20014f88
 8008cdc:	20014fb4 	.word	0x20014fb4
 8008ce0:	20014ac0 	.word	0x20014ac0

08008ce4 <vTaskSwitchContext>:
{
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ce6:	4b1d      	ldr	r3, [pc, #116]	; (8008d5c <vTaskSwitchContext+0x78>)
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	4b1d      	ldr	r3, [pc, #116]	; (8008d60 <vTaskSwitchContext+0x7c>)
 8008cec:	b112      	cbz	r2, 8008cf4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008cee:	2201      	movs	r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]
}
 8008cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8008cf4:	4c1b      	ldr	r4, [pc, #108]	; (8008d64 <vTaskSwitchContext+0x80>)
 8008cf6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf8:	4e1b      	ldr	r6, [pc, #108]	; (8008d68 <vTaskSwitchContext+0x84>)
 8008cfa:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8008cfc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8008cfe:	6820      	ldr	r0, [r4, #0]
 8008d00:	f7ff ff92 	bl	8008c28 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d04:	6832      	ldr	r2, [r6, #0]
 8008d06:	4919      	ldr	r1, [pc, #100]	; (8008d6c <vTaskSwitchContext+0x88>)
 8008d08:	fb07 f302 	mul.w	r3, r7, r2
 8008d0c:	58cd      	ldr	r5, [r1, r3]
 8008d0e:	18c8      	adds	r0, r1, r3
 8008d10:	b1ad      	cbz	r5, 8008d3e <vTaskSwitchContext+0x5a>
 8008d12:	6845      	ldr	r5, [r0, #4]
 8008d14:	3308      	adds	r3, #8
 8008d16:	686d      	ldr	r5, [r5, #4]
 8008d18:	440b      	add	r3, r1
 8008d1a:	429d      	cmp	r5, r3
 8008d1c:	6045      	str	r5, [r0, #4]
 8008d1e:	bf04      	itt	eq
 8008d20:	686b      	ldreq	r3, [r5, #4]
 8008d22:	6043      	streq	r3, [r0, #4]
 8008d24:	2314      	movs	r3, #20
 8008d26:	fb03 1102 	mla	r1, r3, r2, r1
 8008d2a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8008d2c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8008d34:	6820      	ldr	r0, [r4, #0]
}
 8008d36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8008d3a:	f7ff bf75 	b.w	8008c28 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d3e:	b952      	cbnz	r2, 8008d56 <vTaskSwitchContext+0x72>
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	b672      	cpsid	i
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	b662      	cpsie	i
 8008d54:	e7fe      	b.n	8008d54 <vTaskSwitchContext+0x70>
 8008d56:	3a01      	subs	r2, #1
 8008d58:	e7d6      	b.n	8008d08 <vTaskSwitchContext+0x24>
 8008d5a:	bf00      	nop
 8008d5c:	20014f38 	.word	0x20014f38
 8008d60:	20014fb8 	.word	0x20014fb8
 8008d64:	20014ac0 	.word	0x20014ac0
 8008d68:	20014f40 	.word	0x20014f40
 8008d6c:	20014acc 	.word	0x20014acc

08008d70 <vTaskPlaceOnEventList>:
{
 8008d70:	b510      	push	{r4, lr}
 8008d72:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008d74:	b950      	cbnz	r0, 8008d8c <vTaskPlaceOnEventList+0x1c>
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	b672      	cpsid	i
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	b662      	cpsie	i
 8008d8a:	e7fe      	b.n	8008d8a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <vTaskPlaceOnEventList+0x34>)
 8008d8e:	6819      	ldr	r1, [r3, #0]
 8008d90:	3118      	adds	r1, #24
 8008d92:	f7fe fca7 	bl	80076e4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d96:	4620      	mov	r0, r4
 8008d98:	2101      	movs	r1, #1
}
 8008d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d9e:	f7ff bc9d 	b.w	80086dc <prvAddCurrentTaskToDelayedList>
 8008da2:	bf00      	nop
 8008da4:	20014ac0 	.word	0x20014ac0

08008da8 <vTaskPlaceOnEventListRestricted>:
	{
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	460d      	mov	r5, r1
 8008dac:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008dae:	b950      	cbnz	r0, 8008dc6 <vTaskPlaceOnEventListRestricted+0x1e>
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	b672      	cpsid	i
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	b662      	cpsie	i
 8008dc4:	e7fe      	b.n	8008dc4 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dc6:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <vTaskPlaceOnEventListRestricted+0x3c>)
 8008dc8:	6819      	ldr	r1, [r3, #0]
 8008dca:	3118      	adds	r1, #24
 8008dcc:	f7fe fc7e 	bl	80076cc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008dd0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	bf0c      	ite	eq
 8008dd6:	4628      	moveq	r0, r5
 8008dd8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008de0:	f7ff bc7c 	b.w	80086dc <prvAddCurrentTaskToDelayedList>
 8008de4:	20014ac0 	.word	0x20014ac0

08008de8 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de8:	68c3      	ldr	r3, [r0, #12]
{
 8008dea:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008dee:	b954      	cbnz	r4, 8008e06 <xTaskRemoveFromEventList+0x1e>
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	b672      	cpsid	i
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	b662      	cpsie	i
 8008e04:	e7fe      	b.n	8008e04 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e06:	f104 0118 	add.w	r1, r4, #24
 8008e0a:	4608      	mov	r0, r1
 8008e0c:	9101      	str	r1, [sp, #4]
 8008e0e:	f7fe fc80 	bl	8007712 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e12:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <xTaskRemoveFromEventList+0x74>)
 8008e14:	9901      	ldr	r1, [sp, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	b9e3      	cbnz	r3, 8008e54 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e1a:	1d21      	adds	r1, r4, #4
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	9101      	str	r1, [sp, #4]
 8008e20:	f7fe fc77 	bl	8007712 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e24:	4a0e      	ldr	r2, [pc, #56]	; (8008e60 <xTaskRemoveFromEventList+0x78>)
 8008e26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008e28:	6810      	ldr	r0, [r2, #0]
 8008e2a:	9901      	ldr	r1, [sp, #4]
 8008e2c:	4283      	cmp	r3, r0
 8008e2e:	d900      	bls.n	8008e32 <xTaskRemoveFromEventList+0x4a>
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	4a0c      	ldr	r2, [pc, #48]	; (8008e64 <xTaskRemoveFromEventList+0x7c>)
 8008e34:	2014      	movs	r0, #20
 8008e36:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e3a:	f7fe fc47 	bl	80076cc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <xTaskRemoveFromEventList+0x80>)
 8008e40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d906      	bls.n	8008e58 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 8008e4a:	2001      	movs	r0, #1
 8008e4c:	4b07      	ldr	r3, [pc, #28]	; (8008e6c <xTaskRemoveFromEventList+0x84>)
 8008e4e:	6018      	str	r0, [r3, #0]
}
 8008e50:	b002      	add	sp, #8
 8008e52:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e54:	4806      	ldr	r0, [pc, #24]	; (8008e70 <xTaskRemoveFromEventList+0x88>)
 8008e56:	e7f0      	b.n	8008e3a <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 8008e58:	2000      	movs	r0, #0
	return xReturn;
 8008e5a:	e7f9      	b.n	8008e50 <xTaskRemoveFromEventList+0x68>
 8008e5c:	20014f38 	.word	0x20014f38
 8008e60:	20014f40 	.word	0x20014f40
 8008e64:	20014acc 	.word	0x20014acc
 8008e68:	20014ac0 	.word	0x20014ac0
 8008e6c:	20014fb8 	.word	0x20014fb8
 8008e70:	20014f74 	.word	0x20014f74

08008e74 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e74:	4b03      	ldr	r3, [pc, #12]	; (8008e84 <vTaskInternalSetTimeOutState+0x10>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e7a:	4b03      	ldr	r3, [pc, #12]	; (8008e88 <vTaskInternalSetTimeOutState+0x14>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6043      	str	r3, [r0, #4]
}
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	20014f70 	.word	0x20014f70
 8008e88:	20014fb4 	.word	0x20014fb4

08008e8c <xTaskCheckForTimeOut>:
{
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008e90:	4605      	mov	r5, r0
 8008e92:	b950      	cbnz	r0, 8008eaa <xTaskCheckForTimeOut+0x1e>
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	b672      	cpsid	i
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	b662      	cpsie	i
 8008ea8:	e7fe      	b.n	8008ea8 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8008eaa:	b951      	cbnz	r1, 8008ec2 <xTaskCheckForTimeOut+0x36>
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	b672      	cpsid	i
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	b662      	cpsie	i
 8008ec0:	e7fe      	b.n	8008ec0 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8008ec2:	f7fe fc9f 	bl	8007804 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <xTaskCheckForTimeOut+0x78>)
 8008ec8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	d010      	beq.n	8008ef2 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ed0:	480d      	ldr	r0, [pc, #52]	; (8008f08 <xTaskCheckForTimeOut+0x7c>)
 8008ed2:	682e      	ldr	r6, [r5, #0]
 8008ed4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ed6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ed8:	4286      	cmp	r6, r0
 8008eda:	d001      	beq.n	8008ee0 <xTaskCheckForTimeOut+0x54>
 8008edc:	428a      	cmp	r2, r1
 8008ede:	d90f      	bls.n	8008f00 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ee0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ee2:	4283      	cmp	r3, r0
 8008ee4:	d90a      	bls.n	8008efc <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8008ee6:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ee8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8008eea:	4413      	add	r3, r2
 8008eec:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008eee:	f7ff ffc1 	bl	8008e74 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008ef2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008ef4:	f7fe fcaa 	bl	800784c <vPortExitCritical>
}
 8008ef8:	4620      	mov	r0, r4
 8008efa:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008f00:	2401      	movs	r4, #1
 8008f02:	e7f7      	b.n	8008ef4 <xTaskCheckForTimeOut+0x68>
 8008f04:	20014fb4 	.word	0x20014fb4
 8008f08:	20014f70 	.word	0x20014f70

08008f0c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008f0c:	4b01      	ldr	r3, [pc, #4]	; (8008f14 <vTaskMissedYield+0x8>)
 8008f0e:	2201      	movs	r2, #1
 8008f10:	601a      	str	r2, [r3, #0]
}
 8008f12:	4770      	bx	lr
 8008f14:	20014fb8 	.word	0x20014fb8

08008f18 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008f18:	4b01      	ldr	r3, [pc, #4]	; (8008f20 <xTaskGetCurrentTaskHandle+0x8>)
 8008f1a:	6818      	ldr	r0, [r3, #0]
	}
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	20014ac0 	.word	0x20014ac0

08008f24 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <xTaskGetSchedulerState+0x18>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	b133      	cbz	r3, 8008f38 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <xTaskGetSchedulerState+0x1c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	bf0c      	ite	eq
 8008f32:	2002      	moveq	r0, #2
 8008f34:	2000      	movne	r0, #0
 8008f36:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f38:	2001      	movs	r0, #1
	}
 8008f3a:	4770      	bx	lr
 8008f3c:	20014f88 	.word	0x20014f88
 8008f40:	20014f38 	.word	0x20014f38

08008f44 <xTaskPriorityInherit>:
	{
 8008f44:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008f46:	4604      	mov	r4, r0
 8008f48:	b340      	cbz	r0, 8008f9c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f4a:	4d1b      	ldr	r5, [pc, #108]	; (8008fb8 <xTaskPriorityInherit+0x74>)
 8008f4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008f4e:	682a      	ldr	r2, [r5, #0]
 8008f50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d228      	bcs.n	8008fa8 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f56:	6982      	ldr	r2, [r0, #24]
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	db04      	blt.n	8008f66 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f5c:	682a      	ldr	r2, [r5, #0]
 8008f5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008f60:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008f64:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f66:	2214      	movs	r2, #20
 8008f68:	4e14      	ldr	r6, [pc, #80]	; (8008fbc <xTaskPriorityInherit+0x78>)
 8008f6a:	fb02 6303 	mla	r3, r2, r3, r6
 8008f6e:	6962      	ldr	r2, [r4, #20]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d115      	bne.n	8008fa0 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f74:	1d21      	adds	r1, r4, #4
 8008f76:	4608      	mov	r0, r1
 8008f78:	9101      	str	r1, [sp, #4]
 8008f7a:	f7fe fbca 	bl	8007712 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f7e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f80:	4a0f      	ldr	r2, [pc, #60]	; (8008fc0 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f84:	6810      	ldr	r0, [r2, #0]
 8008f86:	9901      	ldr	r1, [sp, #4]
 8008f88:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f8a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f8c:	d900      	bls.n	8008f90 <xTaskPriorityInherit+0x4c>
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	2014      	movs	r0, #20
 8008f92:	fb00 6003 	mla	r0, r0, r3, r6
 8008f96:	f7fe fb99 	bl	80076cc <vListInsertEnd>
				xReturn = pdTRUE;
 8008f9a:	2001      	movs	r0, #1
	}
 8008f9c:	b002      	add	sp, #8
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fa6:	e7f8      	b.n	8008f9a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008fac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008fae:	42a0      	cmp	r0, r4
 8008fb0:	bf2c      	ite	cs
 8008fb2:	2000      	movcs	r0, #0
 8008fb4:	2001      	movcc	r0, #1
 8008fb6:	e7f1      	b.n	8008f9c <xTaskPriorityInherit+0x58>
 8008fb8:	20014ac0 	.word	0x20014ac0
 8008fbc:	20014acc 	.word	0x20014acc
 8008fc0:	20014f40 	.word	0x20014f40

08008fc4 <xTaskPriorityDisinherit>:
	{
 8008fc4:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8008fc6:	b910      	cbnz	r0, 8008fce <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8008fc8:	2000      	movs	r0, #0
	}
 8008fca:	b002      	add	sp, #8
 8008fcc:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008fce:	4b1e      	ldr	r3, [pc, #120]	; (8009048 <xTaskPriorityDisinherit+0x84>)
 8008fd0:	681c      	ldr	r4, [r3, #0]
 8008fd2:	4284      	cmp	r4, r0
 8008fd4:	d00a      	beq.n	8008fec <xTaskPriorityDisinherit+0x28>
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	b672      	cpsid	i
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	b662      	cpsie	i
 8008fea:	e7fe      	b.n	8008fea <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8008fec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008fee:	b953      	cbnz	r3, 8009006 <xTaskPriorityDisinherit+0x42>
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	b672      	cpsid	i
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	b662      	cpsie	i
 8009004:	e7fe      	b.n	8009004 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009006:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8009008:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800900a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800900c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800900e:	4291      	cmp	r1, r2
 8009010:	d0da      	beq.n	8008fc8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1d8      	bne.n	8008fc8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009016:	1d21      	adds	r1, r4, #4
 8009018:	4608      	mov	r0, r1
 800901a:	9101      	str	r1, [sp, #4]
 800901c:	f7fe fb79 	bl	8007712 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009020:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8009022:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009024:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009028:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800902a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800902c:	4a07      	ldr	r2, [pc, #28]	; (800904c <xTaskPriorityDisinherit+0x88>)
 800902e:	6810      	ldr	r0, [r2, #0]
 8009030:	4283      	cmp	r3, r0
 8009032:	d900      	bls.n	8009036 <xTaskPriorityDisinherit+0x72>
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	4a06      	ldr	r2, [pc, #24]	; (8009050 <xTaskPriorityDisinherit+0x8c>)
 8009038:	2014      	movs	r0, #20
 800903a:	fb00 2003 	mla	r0, r0, r3, r2
 800903e:	f7fe fb45 	bl	80076cc <vListInsertEnd>
					xReturn = pdTRUE;
 8009042:	2001      	movs	r0, #1
		return xReturn;
 8009044:	e7c1      	b.n	8008fca <xTaskPriorityDisinherit+0x6>
 8009046:	bf00      	nop
 8009048:	20014ac0 	.word	0x20014ac0
 800904c:	20014f40 	.word	0x20014f40
 8009050:	20014acc 	.word	0x20014acc

08009054 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8009054:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8009056:	4604      	mov	r4, r0
 8009058:	2800      	cmp	r0, #0
 800905a:	d048      	beq.n	80090ee <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 800905c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800905e:	b952      	cbnz	r2, 8009076 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	b672      	cpsid	i
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	b662      	cpsie	i
 8009074:	e7fe      	b.n	8009074 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009076:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009078:	4299      	cmp	r1, r3
 800907a:	bf38      	it	cc
 800907c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800907e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009080:	428b      	cmp	r3, r1
 8009082:	d034      	beq.n	80090ee <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009084:	2a01      	cmp	r2, #1
 8009086:	d132      	bne.n	80090ee <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 8009088:	4a1a      	ldr	r2, [pc, #104]	; (80090f4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800908a:	6812      	ldr	r2, [r2, #0]
 800908c:	4282      	cmp	r2, r0
 800908e:	d10a      	bne.n	80090a6 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	b672      	cpsid	i
 8009096:	f383 8811 	msr	BASEPRI, r3
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	f3bf 8f4f 	dsb	sy
 80090a2:	b662      	cpsie	i
 80090a4:	e7fe      	b.n	80090a4 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090a6:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090a8:	4d13      	ldr	r5, [pc, #76]	; (80090f8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090aa:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090ac:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 80090b0:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090b2:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b6:	bfa8      	it	ge
 80090b8:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090bc:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090be:	bfa8      	it	ge
 80090c0:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d113      	bne.n	80090ee <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090c6:	1d01      	adds	r1, r0, #4
 80090c8:	4608      	mov	r0, r1
 80090ca:	9101      	str	r1, [sp, #4]
 80090cc:	f7fe fb21 	bl	8007712 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80090d0:	4a0a      	ldr	r2, [pc, #40]	; (80090fc <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 80090d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090d4:	6810      	ldr	r0, [r2, #0]
 80090d6:	9901      	ldr	r1, [sp, #4]
 80090d8:	4283      	cmp	r3, r0
 80090da:	d900      	bls.n	80090de <vTaskPriorityDisinheritAfterTimeout+0x8a>
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	2014      	movs	r0, #20
 80090e0:	fb00 5003 	mla	r0, r0, r3, r5
	}
 80090e4:	b003      	add	sp, #12
 80090e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80090ea:	f7fe baef 	b.w	80076cc <vListInsertEnd>
	}
 80090ee:	b003      	add	sp, #12
 80090f0:	bd30      	pop	{r4, r5, pc}
 80090f2:	bf00      	nop
 80090f4:	20014ac0 	.word	0x20014ac0
 80090f8:	20014acc 	.word	0x20014acc
 80090fc:	20014f40 	.word	0x20014f40

08009100 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009100:	4b04      	ldr	r3, [pc, #16]	; (8009114 <pvTaskIncrementMutexHeldCount+0x14>)
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	b11a      	cbz	r2, 800910e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009106:	6819      	ldr	r1, [r3, #0]
 8009108:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800910a:	3201      	adds	r2, #1
 800910c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800910e:	6818      	ldr	r0, [r3, #0]
	}
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	20014ac0 	.word	0x20014ac0

08009118 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800911a:	4c11      	ldr	r4, [pc, #68]	; (8009160 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800911c:	f7fe fb72 	bl	8007804 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009120:	6825      	ldr	r5, [r4, #0]
 8009122:	b9bd      	cbnz	r5, 8009154 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009124:	4f0f      	ldr	r7, [pc, #60]	; (8009164 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009126:	4e10      	ldr	r6, [pc, #64]	; (8009168 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009128:	4638      	mov	r0, r7
 800912a:	f7fe fac1 	bl	80076b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800912e:	4630      	mov	r0, r6
 8009130:	f7fe fabe 	bl	80076b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009134:	4b0d      	ldr	r3, [pc, #52]	; (800916c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009136:	4a0e      	ldr	r2, [pc, #56]	; (8009170 <prvCheckForValidListAndQueue+0x58>)
 8009138:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800913a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800913c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800913e:	4b0d      	ldr	r3, [pc, #52]	; (8009174 <prvCheckForValidListAndQueue+0x5c>)
 8009140:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009142:	4b0d      	ldr	r3, [pc, #52]	; (8009178 <prvCheckForValidListAndQueue+0x60>)
 8009144:	9500      	str	r5, [sp, #0]
 8009146:	f7fe fda9 	bl	8007c9c <xQueueGenericCreateStatic>
 800914a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800914c:	b110      	cbz	r0, 8009154 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800914e:	490b      	ldr	r1, [pc, #44]	; (800917c <prvCheckForValidListAndQueue+0x64>)
 8009150:	f7ff f9e4 	bl	800851c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009154:	b003      	add	sp, #12
 8009156:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800915a:	f7fe bb77 	b.w	800784c <vPortExitCritical>
 800915e:	bf00      	nop
 8009160:	200150e0 	.word	0x200150e0
 8009164:	20015064 	.word	0x20015064
 8009168:	20015078 	.word	0x20015078
 800916c:	20014fbc 	.word	0x20014fbc
 8009170:	20014fc4 	.word	0x20014fc4
 8009174:	20014fc0 	.word	0x20014fc0
 8009178:	20015090 	.word	0x20015090
 800917c:	0802bcad 	.word	0x0802bcad

08009180 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8009180:	4291      	cmp	r1, r2
{
 8009182:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009184:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009186:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009188:	d80a      	bhi.n	80091a0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800918a:	1ad2      	subs	r2, r2, r3
 800918c:	6983      	ldr	r3, [r0, #24]
 800918e:	429a      	cmp	r2, r3
 8009190:	d20d      	bcs.n	80091ae <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009192:	1d01      	adds	r1, r0, #4
 8009194:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	f7fe faa4 	bl	80076e4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800919c:	2000      	movs	r0, #0
}
 800919e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d201      	bcs.n	80091a8 <prvInsertTimerInActiveList+0x28>
 80091a4:	4299      	cmp	r1, r3
 80091a6:	d202      	bcs.n	80091ae <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091a8:	1d01      	adds	r1, r0, #4
 80091aa:	4b03      	ldr	r3, [pc, #12]	; (80091b8 <prvInsertTimerInActiveList+0x38>)
 80091ac:	e7f3      	b.n	8009196 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80091ae:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80091b0:	e7f5      	b.n	800919e <prvInsertTimerInActiveList+0x1e>
 80091b2:	bf00      	nop
 80091b4:	20014fc0 	.word	0x20014fc0
 80091b8:	20014fbc 	.word	0x20014fbc

080091bc <xTimerCreateTimerTask>:
{
 80091bc:	b510      	push	{r4, lr}
 80091be:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80091c0:	f7ff ffaa 	bl	8009118 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80091c4:	4b13      	ldr	r3, [pc, #76]	; (8009214 <xTimerCreateTimerTask+0x58>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	b1b3      	cbz	r3, 80091f8 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091ca:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091cc:	aa07      	add	r2, sp, #28
 80091ce:	a906      	add	r1, sp, #24
 80091d0:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091d2:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091d6:	f7fe f969 	bl	80074ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091da:	9b05      	ldr	r3, [sp, #20]
 80091dc:	9a07      	ldr	r2, [sp, #28]
 80091de:	9302      	str	r3, [sp, #8]
 80091e0:	9b06      	ldr	r3, [sp, #24]
 80091e2:	490d      	ldr	r1, [pc, #52]	; (8009218 <xTimerCreateTimerTask+0x5c>)
 80091e4:	9301      	str	r3, [sp, #4]
 80091e6:	2302      	movs	r3, #2
 80091e8:	480c      	ldr	r0, [pc, #48]	; (800921c <xTimerCreateTimerTask+0x60>)
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	4623      	mov	r3, r4
 80091ee:	f7ff fb5e 	bl	80088ae <xTaskCreateStatic>
 80091f2:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <xTimerCreateTimerTask+0x64>)
 80091f4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80091f6:	b950      	cbnz	r0, 800920e <xTimerCreateTimerTask+0x52>
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	b672      	cpsid	i
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	b662      	cpsie	i
	configASSERT( xReturn );
 800920c:	e7fe      	b.n	800920c <xTimerCreateTimerTask+0x50>
}
 800920e:	2001      	movs	r0, #1
 8009210:	b008      	add	sp, #32
 8009212:	bd10      	pop	{r4, pc}
 8009214:	200150e0 	.word	0x200150e0
 8009218:	0802bcb2 	.word	0x0802bcb2
 800921c:	0800932d 	.word	0x0800932d
 8009220:	200150e4 	.word	0x200150e4

08009224 <xTimerGenericCommand>:
{
 8009224:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009226:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009228:	4604      	mov	r4, r0
{
 800922a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800922c:	b950      	cbnz	r0, 8009244 <xTimerGenericCommand+0x20>
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	b672      	cpsid	i
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	b662      	cpsie	i
 8009242:	e7fe      	b.n	8009242 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 8009244:	4d0c      	ldr	r5, [pc, #48]	; (8009278 <xTimerGenericCommand+0x54>)
 8009246:	6828      	ldr	r0, [r5, #0]
 8009248:	b178      	cbz	r0, 800926a <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800924a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800924c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800924e:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009252:	dc0c      	bgt.n	800926e <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009254:	f7ff fe66 	bl	8008f24 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009258:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800925a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800925c:	4669      	mov	r1, sp
 800925e:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009260:	bf0c      	ite	eq
 8009262:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009264:	461a      	movne	r2, r3
 8009266:	f7fe fd9e 	bl	8007da6 <xQueueGenericSend>
}
 800926a:	b004      	add	sp, #16
 800926c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800926e:	2300      	movs	r3, #0
 8009270:	4669      	mov	r1, sp
 8009272:	f7fe fea5 	bl	8007fc0 <xQueueGenericSendFromISR>
 8009276:	e7f8      	b.n	800926a <xTimerGenericCommand+0x46>
 8009278:	200150e0 	.word	0x200150e0

0800927c <prvSampleTimeNow>:
{
 800927c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009280:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8009328 <prvSampleTimeNow+0xac>
{
 8009284:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009286:	f7ff fb85 	bl	8008994 <xTaskGetTickCount>
 800928a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800928c:	f8d8 3000 	ldr.w	r3, [r8]
 8009290:	4283      	cmp	r3, r0
 8009292:	d942      	bls.n	800931a <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009294:	4f22      	ldr	r7, [pc, #136]	; (8009320 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009296:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	b95a      	cbnz	r2, 80092b8 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80092a0:	4a20      	ldr	r2, [pc, #128]	; (8009324 <prvSampleTimeNow+0xa8>)
 80092a2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80092a4:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80092a6:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 80092a8:	6039      	str	r1, [r7, #0]
}
 80092aa:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 80092ac:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80092ae:	f8c8 5000 	str.w	r5, [r8]
}
 80092b2:	b004      	add	sp, #16
 80092b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092b8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ba:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092bc:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092c0:	1d21      	adds	r1, r4, #4
 80092c2:	4608      	mov	r0, r1
 80092c4:	9103      	str	r1, [sp, #12]
 80092c6:	f7fe fa24 	bl	8007712 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ca:	6a23      	ldr	r3, [r4, #32]
 80092cc:	4620      	mov	r0, r4
 80092ce:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80092d4:	9903      	ldr	r1, [sp, #12]
 80092d6:	f013 0f04 	tst.w	r3, #4
 80092da:	d0de      	beq.n	800929a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092dc:	69a3      	ldr	r3, [r4, #24]
 80092de:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80092e0:	459a      	cmp	sl, r3
 80092e2:	d205      	bcs.n	80092f0 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092e4:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092e6:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092e8:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092ea:	f7fe f9fb 	bl	80076e4 <vListInsert>
 80092ee:	e7d4      	b.n	800929a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092f0:	2300      	movs	r3, #0
 80092f2:	4652      	mov	r2, sl
 80092f4:	4620      	mov	r0, r4
 80092f6:	f8cd 9000 	str.w	r9, [sp]
 80092fa:	4619      	mov	r1, r3
 80092fc:	f7ff ff92 	bl	8009224 <xTimerGenericCommand>
				configASSERT( xResult );
 8009300:	2800      	cmp	r0, #0
 8009302:	d1ca      	bne.n	800929a <prvSampleTimeNow+0x1e>
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	b672      	cpsid	i
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	b662      	cpsie	i
 8009318:	e7fe      	b.n	8009318 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 800931a:	2300      	movs	r3, #0
 800931c:	e7c5      	b.n	80092aa <prvSampleTimeNow+0x2e>
 800931e:	bf00      	nop
 8009320:	20014fbc 	.word	0x20014fbc
 8009324:	20014fc0 	.word	0x20014fc0
 8009328:	2001508c 	.word	0x2001508c

0800932c <prvTimerTask>:
{
 800932c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009330:	4d71      	ldr	r5, [pc, #452]	; (80094f8 <prvTimerTask+0x1cc>)
{
 8009332:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009334:	4e71      	ldr	r6, [pc, #452]	; (80094fc <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009336:	682b      	ldr	r3, [r5, #0]
 8009338:	f8d3 8000 	ldr.w	r8, [r3]
 800933c:	f1b8 0f00 	cmp.w	r8, #0
 8009340:	d037      	beq.n	80093b2 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009342:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009344:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009346:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800934a:	f7ff fb1b 	bl	8008984 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800934e:	a804      	add	r0, sp, #16
 8009350:	f7ff ff94 	bl	800927c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009354:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009356:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009358:	2b00      	cmp	r3, #0
 800935a:	d16b      	bne.n	8009434 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800935c:	2c00      	cmp	r4, #0
 800935e:	d14e      	bne.n	80093fe <prvTimerTask+0xd2>
 8009360:	4540      	cmp	r0, r8
 8009362:	d352      	bcc.n	800940a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8009364:	f7ff fbb4 	bl	8008ad0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800936e:	1d38      	adds	r0, r7, #4
 8009370:	f7fe f9cf 	bl	8007712 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009374:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009378:	0758      	lsls	r0, r3, #29
 800937a:	d51c      	bpl.n	80093b6 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800937c:	69b9      	ldr	r1, [r7, #24]
 800937e:	4643      	mov	r3, r8
 8009380:	464a      	mov	r2, r9
 8009382:	4638      	mov	r0, r7
 8009384:	4441      	add	r1, r8
 8009386:	f7ff fefb 	bl	8009180 <prvInsertTimerInActiveList>
 800938a:	b1c0      	cbz	r0, 80093be <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800938c:	4623      	mov	r3, r4
 800938e:	4642      	mov	r2, r8
 8009390:	4621      	mov	r1, r4
 8009392:	4638      	mov	r0, r7
 8009394:	9400      	str	r4, [sp, #0]
 8009396:	f7ff ff45 	bl	8009224 <xTimerGenericCommand>
			configASSERT( xResult );
 800939a:	b980      	cbnz	r0, 80093be <prvTimerTask+0x92>
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	b672      	cpsid	i
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	b662      	cpsie	i
 80093b0:	e7fe      	b.n	80093b0 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093b2:	2401      	movs	r4, #1
 80093b4:	e7c9      	b.n	800934a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093b6:	f023 0301 	bic.w	r3, r3, #1
 80093ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	4638      	mov	r0, r7
 80093c2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093c4:	2200      	movs	r2, #0
 80093c6:	a904      	add	r1, sp, #16
 80093c8:	6830      	ldr	r0, [r6, #0]
 80093ca:	f7fe febe 	bl	800814a <xQueueReceive>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d0b1      	beq.n	8009336 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093d2:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093d4:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	db2f      	blt.n	800943a <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80093da:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80093dc:	6963      	ldr	r3, [r4, #20]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d132      	bne.n	8009448 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093e2:	a803      	add	r0, sp, #12
 80093e4:	f7ff ff4a 	bl	800927c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80093e8:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093ea:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80093ec:	2b09      	cmp	r3, #9
 80093ee:	d8e9      	bhi.n	80093c4 <prvTimerTask+0x98>
 80093f0:	e8df f003 	tbb	[pc, r3]
 80093f4:	592e2e2e 	.word	0x592e2e2e
 80093f8:	2e2e7a60 	.word	0x2e2e7a60
 80093fc:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093fe:	4b40      	ldr	r3, [pc, #256]	; (8009500 <prvTimerTask+0x1d4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681c      	ldr	r4, [r3, #0]
 8009404:	fab4 f484 	clz	r4, r4
 8009408:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800940a:	4622      	mov	r2, r4
 800940c:	eba8 0109 	sub.w	r1, r8, r9
 8009410:	6830      	ldr	r0, [r6, #0]
 8009412:	f7ff f8c2 	bl	800859a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009416:	f7ff fb5b 	bl	8008ad0 <xTaskResumeAll>
 800941a:	2800      	cmp	r0, #0
 800941c:	d1d2      	bne.n	80093c4 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 800941e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009426:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	e7c7      	b.n	80093c4 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 8009434:	f7ff fb4c 	bl	8008ad0 <xTaskResumeAll>
}
 8009438:	e7c4      	b.n	80093c4 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800943a:	9b05      	ldr	r3, [sp, #20]
 800943c:	9907      	ldr	r1, [sp, #28]
 800943e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009440:	9b04      	ldr	r3, [sp, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	dbbe      	blt.n	80093c4 <prvTimerTask+0x98>
 8009446:	e7c8      	b.n	80093da <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009448:	1d20      	adds	r0, r4, #4
 800944a:	f7fe f962 	bl	8007712 <uxListRemove>
 800944e:	e7c8      	b.n	80093e2 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009450:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009454:	4620      	mov	r0, r4
 8009456:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009458:	f043 0301 	orr.w	r3, r3, #1
 800945c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009460:	9b05      	ldr	r3, [sp, #20]
 8009462:	4419      	add	r1, r3
 8009464:	f7ff fe8c 	bl	8009180 <prvInsertTimerInActiveList>
 8009468:	2800      	cmp	r0, #0
 800946a:	d0ab      	beq.n	80093c4 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800946c:	6a23      	ldr	r3, [r4, #32]
 800946e:	4620      	mov	r0, r4
 8009470:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009472:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009476:	0759      	lsls	r1, r3, #29
 8009478:	d5a4      	bpl.n	80093c4 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800947a:	69a2      	ldr	r2, [r4, #24]
 800947c:	2300      	movs	r3, #0
 800947e:	9905      	ldr	r1, [sp, #20]
 8009480:	4620      	mov	r0, r4
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	440a      	add	r2, r1
 8009486:	4619      	mov	r1, r3
 8009488:	f7ff fecc 	bl	8009224 <xTimerGenericCommand>
							configASSERT( xResult );
 800948c:	2800      	cmp	r0, #0
 800948e:	d199      	bne.n	80093c4 <prvTimerTask+0x98>
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	b672      	cpsid	i
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	b662      	cpsie	i
 80094a4:	e7fe      	b.n	80094a4 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094aa:	f023 0301 	bic.w	r3, r3, #1
 80094ae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80094b2:	e787      	b.n	80093c4 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094c0:	9905      	ldr	r1, [sp, #20]
 80094c2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094c4:	b951      	cbnz	r1, 80094dc <prvTimerTask+0x1b0>
 80094c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ca:	b672      	cpsid	i
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	b662      	cpsie	i
 80094da:	e7fe      	b.n	80094da <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094dc:	4603      	mov	r3, r0
 80094de:	4401      	add	r1, r0
 80094e0:	4620      	mov	r0, r4
 80094e2:	f7ff fe4d 	bl	8009180 <prvInsertTimerInActiveList>
					break;
 80094e6:	e76d      	b.n	80093c4 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80094e8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80094ec:	079a      	lsls	r2, r3, #30
 80094ee:	d4dc      	bmi.n	80094aa <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 80094f0:	4620      	mov	r0, r4
 80094f2:	f7fe f8a1 	bl	8007638 <vPortFree>
 80094f6:	e765      	b.n	80093c4 <prvTimerTask+0x98>
 80094f8:	20014fbc 	.word	0x20014fbc
 80094fc:	200150e0 	.word	0x200150e0
 8009500:	20014fc0 	.word	0x20014fc0

08009504 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8009504:	6843      	ldr	r3, [r0, #4]
{
 8009506:	b510      	push	{r4, lr}
 8009508:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 800950a:	b14b      	cbz	r3, 8009520 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	2101      	movs	r1, #1
 8009510:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	b12b      	cbz	r3, 8009522 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 8009516:	23c8      	movs	r3, #200	; 0xc8
 8009518:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 800951a:	2300      	movs	r3, #0
 800951c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 8009520:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 8009522:	2364      	movs	r3, #100	; 0x64
 8009524:	6163      	str	r3, [r4, #20]
 8009526:	e7fb      	b.n	8009520 <jpeg_abort+0x1c>

08009528 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8009528:	6843      	ldr	r3, [r0, #4]
{
 800952a:	b510      	push	{r4, lr}
 800952c:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 800952e:	b10b      	cbz	r3, 8009534 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 8009534:	2300      	movs	r3, #0
 8009536:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 8009538:	6163      	str	r3, [r4, #20]
}
 800953a:	bd10      	pop	{r4, pc}

0800953c <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 800953c:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 800953e:	6843      	ldr	r3, [r0, #4]
 8009540:	2284      	movs	r2, #132	; 0x84
 8009542:	2100      	movs	r1, #0
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009548:	2200      	movs	r2, #0
 800954a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 800954e:	bd08      	pop	{r3, pc}

08009550 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8009550:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8009552:	6843      	ldr	r3, [r0, #4]
 8009554:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009558:	2100      	movs	r1, #0
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800955e:	2200      	movs	r2, #0
 8009560:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 8009564:	bd08      	pop	{r3, pc}

08009566 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009566:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 8009568:	2950      	cmp	r1, #80	; 0x50
{
 800956a:	b570      	push	{r4, r5, r6, lr}
 800956c:	4604      	mov	r4, r0
 800956e:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009570:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 8009572:	d007      	beq.n	8009584 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8009574:	6803      	ldr	r3, [r0, #0]
 8009576:	260d      	movs	r6, #13
 8009578:	2250      	movs	r2, #80	; 0x50
 800957a:	61d9      	str	r1, [r3, #28]
 800957c:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8009584:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 8009588:	d009      	beq.n	800959e <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	2116      	movs	r1, #22
 800958e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009592:	4620      	mov	r0, r4
 8009594:	61dd      	str	r5, [r3, #28]
 8009596:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800959e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80095a2:	2100      	movs	r1, #0
 80095a4:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 80095a6:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 80095a8:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 80095aa:	f01f f82f 	bl	802860c <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 80095ae:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 80095b0:	4620      	mov	r0, r4
    cinfo->err = err;
 80095b2:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 80095b4:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 80095b6:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 80095b8:	f00b feac 	bl	8015314 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 80095bc:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 80095be:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 80095c0:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 80095c2:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 80095c4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 80095c8:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 80095cc:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 80095d0:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 80095d4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 80095d8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 80095dc:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 80095e0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 80095e4:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 80095e8:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 80095ec:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 80095f0:	f005 f8ba 	bl	800e768 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 80095f4:	4620      	mov	r0, r4
 80095f6:	f003 fdbd 	bl	800d174 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 80095fa:	23c8      	movs	r3, #200	; 0xc8
 80095fc:	6163      	str	r3, [r4, #20]
}
 80095fe:	bd70      	pop	{r4, r5, r6, pc}

08009600 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8009600:	f7ff bf92 	b.w	8009528 <jpeg_destroy>

08009604 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8009604:	6942      	ldr	r2, [r0, #20]
 8009606:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 800960a:	b570      	push	{r4, r5, r6, lr}
 800960c:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 800960e:	2b0a      	cmp	r3, #10
 8009610:	f200 80a5 	bhi.w	800975e <jpeg_consume_input+0x15a>
 8009614:	e8df f003 	tbb	[pc, r3]
 8009618:	9dab1006 	.word	0x9dab1006
 800961c:	9d9d9d9d 	.word	0x9d9d9d9d
 8009620:	a39d      	.short	0xa39d
 8009622:	9d          	.byte	0x9d
 8009623:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8009624:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 800962c:	69a3      	ldr	r3, [r4, #24]
 800962e:	4620      	mov	r0, r4
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 8009634:	23c9      	movs	r3, #201	; 0xc9
 8009636:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009638:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800963c:	4620      	mov	r0, r4
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8009642:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009644:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8009646:	d146      	bne.n	80096d6 <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 8009648:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800964a:	2d03      	cmp	r5, #3
 800964c:	d007      	beq.n	800965e <jpeg_consume_input+0x5a>
 800964e:	2d04      	cmp	r5, #4
 8009650:	d064      	beq.n	800971c <jpeg_consume_input+0x118>
 8009652:	2d01      	cmp	r5, #1
 8009654:	d17b      	bne.n	800974e <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8009656:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 800965a:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 800965c:	e01c      	b.n	8009698 <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 800965e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8009662:	b10b      	cbz	r3, 8009668 <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009664:	2303      	movs	r3, #3
 8009666:	e056      	b.n	8009716 <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 8009668:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800966c:	2b00      	cmp	r3, #0
 800966e:	d034      	beq.n	80096da <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 8009670:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009674:	2a00      	cmp	r2, #0
 8009676:	d04d      	beq.n	8009714 <jpeg_consume_input+0x110>
 8009678:	2a01      	cmp	r2, #1
 800967a:	d008      	beq.n	800968e <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	2174      	movs	r1, #116	; 0x74
 8009680:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009682:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f04f 31ff 	mov.w	r1, #4294967295
 800968c:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800968e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 8009692:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 8009694:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8009698:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 800969c:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 800969e:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 80096a0:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 80096a4:	4b33      	ldr	r3, [pc, #204]	; (8009774 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 80096a6:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 80096aa:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 80096ae:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 80096b0:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 80096b2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 80096b6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 80096ba:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 80096bc:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 80096be:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 80096c2:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 80096c4:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 80096c8:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 80096cc:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 80096d0:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 80096d2:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 80096d4:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 80096d6:	4630      	mov	r0, r6
 80096d8:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 80096da:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80096de:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 80096e0:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 80096e2:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 80096e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 80096e8:	d10e      	bne.n	8009708 <jpeg_consume_input+0x104>
 80096ea:	2902      	cmp	r1, #2
 80096ec:	d101      	bne.n	80096f2 <jpeg_consume_input+0xee>
 80096ee:	2a03      	cmp	r2, #3
 80096f0:	d0b8      	beq.n	8009664 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	621a      	str	r2, [r3, #32]
 80096f6:	2271      	movs	r2, #113	; 0x71
 80096f8:	e9c3 0106 	strd	r0, r1, [r3, #24]
 80096fc:	615a      	str	r2, [r3, #20]
 80096fe:	2101      	movs	r1, #1
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	4620      	mov	r0, r4
 8009704:	4798      	blx	r3
 8009706:	e7ad      	b.n	8009664 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 8009708:	2852      	cmp	r0, #82	; 0x52
 800970a:	d1f2      	bne.n	80096f2 <jpeg_consume_input+0xee>
 800970c:	2947      	cmp	r1, #71	; 0x47
 800970e:	d1f0      	bne.n	80096f2 <jpeg_consume_input+0xee>
 8009710:	2a42      	cmp	r2, #66	; 0x42
 8009712:	d1ee      	bne.n	80096f2 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 8009714:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009716:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800971a:	e7ba      	b.n	8009692 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 800971c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009720:	b193      	cbz	r3, 8009748 <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 8009722:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009726:	b17a      	cbz	r2, 8009748 <jpeg_consume_input+0x144>
 8009728:	2a02      	cmp	r2, #2
 800972a:	d008      	beq.n	800973e <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	2174      	movs	r1, #116	; 0x74
 8009730:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009732:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f04f 31ff 	mov.w	r1, #4294967295
 800973c:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 800973e:	2305      	movs	r3, #5
 8009740:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 8009744:	2304      	movs	r3, #4
 8009746:	e7a5      	b.n	8009694 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 8009748:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800974c:	e7fa      	b.n	8009744 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 800974e:	2300      	movs	r3, #0
 8009750:	e783      	b.n	800965a <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009752:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 8009756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800975e:	6803      	ldr	r3, [r0, #0]
 8009760:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 8009762:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009764:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4798      	blx	r3
 800976c:	e7b3      	b.n	80096d6 <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 800976e:	2601      	movs	r6, #1
  return retcode;
 8009770:	e7b1      	b.n	80096d6 <jpeg_consume_input+0xd2>
 8009772:	bf00      	nop
 8009774:	3ff00000 	.word	0x3ff00000

08009778 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 8009778:	6942      	ldr	r2, [r0, #20]
 800977a:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 800977e:	2b01      	cmp	r3, #1
{
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	4604      	mov	r4, r0
 8009784:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 8009786:	d905      	bls.n	8009794 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009788:	6803      	ldr	r3, [r0, #0]
 800978a:	2115      	movs	r1, #21
 800978c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 8009794:	4620      	mov	r0, r4
 8009796:	f7ff ff35 	bl	8009604 <jpeg_consume_input>
  switch (retcode) {
 800979a:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 800979c:	4605      	mov	r5, r0
  switch (retcode) {
 800979e:	d00b      	beq.n	80097b8 <jpeg_read_header+0x40>
 80097a0:	2802      	cmp	r0, #2
 80097a2:	d109      	bne.n	80097b8 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 80097a4:	b12e      	cbz	r6, 80097b2 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	2235      	movs	r2, #53	; 0x35
 80097aa:	4620      	mov	r0, r4
 80097ac:	615a      	str	r2, [r3, #20]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 80097b2:	4620      	mov	r0, r4
 80097b4:	f7ff fea6 	bl	8009504 <jpeg_abort>
}
 80097b8:	4628      	mov	r0, r5
 80097ba:	bd70      	pop	{r4, r5, r6, pc}

080097bc <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 80097bc:	6943      	ldr	r3, [r0, #20]
 80097be:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 80097c2:	2a01      	cmp	r2, #1
{
 80097c4:	b510      	push	{r4, lr}
 80097c6:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 80097c8:	d81f      	bhi.n	800980a <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 80097ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80097cc:	bb0a      	cbnz	r2, 8009812 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 80097ce:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80097d2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d204      	bcs.n	80097e2 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 80097d8:	6803      	ldr	r3, [r0, #0]
 80097da:	2245      	movs	r2, #69	; 0x45
 80097dc:	615a      	str	r2, [r3, #20]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 80097e2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 80097e6:	4620      	mov	r0, r4
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 80097ec:	23d2      	movs	r3, #210	; 0xd2
 80097ee:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 80097f0:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80097f4:	695a      	ldr	r2, [r3, #20]
 80097f6:	b1a2      	cbz	r2, 8009822 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 80097f8:	69a3      	ldr	r3, [r4, #24]
 80097fa:	4620      	mov	r0, r4
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8009800:	4620      	mov	r0, r4
 8009802:	f7ff fe7f 	bl	8009504 <jpeg_abort>
  return TRUE;
 8009806:	2001      	movs	r0, #1
 8009808:	e010      	b.n	800982c <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 800980a:	2bcf      	cmp	r3, #207	; 0xcf
 800980c:	d0ee      	beq.n	80097ec <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 800980e:	2bd2      	cmp	r3, #210	; 0xd2
 8009810:	d0ee      	beq.n	80097f0 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009812:	6822      	ldr	r2, [r4, #0]
 8009814:	2115      	movs	r1, #21
 8009816:	4620      	mov	r0, r4
 8009818:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800981c:	6813      	ldr	r3, [r2, #0]
 800981e:	4798      	blx	r3
 8009820:	e7e6      	b.n	80097f0 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4620      	mov	r0, r4
 8009826:	4798      	blx	r3
 8009828:	2800      	cmp	r0, #0
 800982a:	d1e1      	bne.n	80097f0 <jpeg_finish_decompress+0x34>
}
 800982c:	bd10      	pop	{r4, pc}

0800982e <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800982e:	6943      	ldr	r3, [r0, #20]
 8009830:	2bcc      	cmp	r3, #204	; 0xcc
{
 8009832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009836:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8009838:	d008      	beq.n	800984c <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800983a:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009842:	2300      	movs	r3, #0
 8009844:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 8009848:	23cc      	movs	r3, #204	; 0xcc
 800984a:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800984c:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8009850:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 8009852:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	b9f3      	cbnz	r3, 8009898 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800985a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 800985c:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800985e:	2b00      	cmp	r3, #0
 8009860:	bf14      	ite	ne
 8009862:	23ce      	movne	r3, #206	; 0xce
 8009864:	23cd      	moveq	r3, #205	; 0xcd
 8009866:	6163      	str	r3, [r4, #20]
}
 8009868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 800986c:	68a3      	ldr	r3, [r4, #8]
 800986e:	b123      	cbz	r3, 800987a <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009870:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009872:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800987a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800987e:	462a      	mov	r2, r5
 8009880:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 8009882:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009886:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800988a:	2300      	movs	r3, #0
 800988c:	4619      	mov	r1, r3
 800988e:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 8009890:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009894:	42bb      	cmp	r3, r7
 8009896:	d011      	beq.n	80098bc <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 8009898:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800989c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800989e:	4291      	cmp	r1, r2
 80098a0:	d3e4      	bcc.n	800986c <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 80098a2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 80098a6:	4620      	mov	r0, r4
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 80098ac:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 80098b0:	4620      	mov	r0, r4
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4798      	blx	r3
    cinfo->output_scanline = 0;
 80098b6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 80098ba:	e7ca      	b.n	8009852 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 80098bc:	2000      	movs	r0, #0
 80098be:	e7d3      	b.n	8009868 <output_pass_setup+0x3a>

080098c0 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 80098c0:	6943      	ldr	r3, [r0, #20]
 80098c2:	2bca      	cmp	r3, #202	; 0xca
{
 80098c4:	b510      	push	{r4, lr}
 80098c6:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 80098c8:	d109      	bne.n	80098de <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 80098ca:	f005 f8f7 	bl	800eabc <jinit_master_decompress>
    if (cinfo->buffered_image) {
 80098ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098d0:	b11b      	cbz	r3, 80098da <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 80098d2:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 80098d4:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 80098d6:	6163      	str	r3, [r4, #20]
}
 80098d8:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 80098da:	23cb      	movs	r3, #203	; 0xcb
 80098dc:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 80098de:	6962      	ldr	r2, [r4, #20]
 80098e0:	2acb      	cmp	r2, #203	; 0xcb
 80098e2:	d12c      	bne.n	800993e <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 80098e4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	b1fb      	cbz	r3, 800992c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 80098ec:	68a3      	ldr	r3, [r4, #8]
 80098ee:	b113      	cbz	r3, 80098f6 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4620      	mov	r0, r4
 80098f4:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 80098f6:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 80098fa:	4620      	mov	r0, r4
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 8009900:	2800      	cmp	r0, #0
 8009902:	d0e9      	beq.n	80098d8 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 8009904:	2802      	cmp	r0, #2
 8009906:	d011      	beq.n	800992c <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 8009908:	68a3      	ldr	r3, [r4, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0ee      	beq.n	80098ec <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 800990e:	f020 0002 	bic.w	r0, r0, #2
 8009912:	2801      	cmp	r0, #1
 8009914:	d1ea      	bne.n	80098ec <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	6899      	ldr	r1, [r3, #8]
 800991a:	3201      	adds	r2, #1
 800991c:	428a      	cmp	r2, r1
 800991e:	605a      	str	r2, [r3, #4]
 8009920:	dbe4      	blt.n	80098ec <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8009922:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009926:	440a      	add	r2, r1
 8009928:	609a      	str	r2, [r3, #8]
 800992a:	e7df      	b.n	80098ec <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 800992c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009930:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 8009934:	4620      	mov	r0, r4
}
 8009936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 800993a:	f7ff bf78 	b.w	800982e <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 800993e:	2acc      	cmp	r2, #204	; 0xcc
 8009940:	d0f8      	beq.n	8009934 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	2115      	movs	r1, #21
 8009946:	4620      	mov	r0, r4
 8009948:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4798      	blx	r3
 8009950:	e7f0      	b.n	8009934 <jpeg_start_decompress+0x74>

08009952 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8009952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009954:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 8009956:	6942      	ldr	r2, [r0, #20]
{
 8009958:	4604      	mov	r4, r0
 800995a:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 800995c:	2acd      	cmp	r2, #205	; 0xcd
 800995e:	d005      	beq.n	800996c <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009960:	6803      	ldr	r3, [r0, #0]
 8009962:	2115      	movs	r1, #21
 8009964:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 800996c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009970:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009972:	429a      	cmp	r2, r3
 8009974:	d30a      	bcc.n	800998c <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	227e      	movs	r2, #126	; 0x7e
 800997a:	4620      	mov	r0, r4
 800997c:	f04f 31ff 	mov.w	r1, #4294967295
 8009980:	615a      	str	r2, [r3, #20]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	4798      	blx	r3
    return 0;
 8009986:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 8009988:	b003      	add	sp, #12
 800998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 800998c:	68a0      	ldr	r0, [r4, #8]
 800998e:	b120      	cbz	r0, 800999a <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009990:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009994:	6803      	ldr	r3, [r0, #0]
 8009996:	4620      	mov	r0, r4
 8009998:	4798      	blx	r3
  row_ctr = 0;
 800999a:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800999c:	4620      	mov	r0, r4
 800999e:	aa01      	add	r2, sp, #4
 80099a0:	4629      	mov	r1, r5
  row_ctr = 0;
 80099a2:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 80099a4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 80099a8:	685f      	ldr	r7, [r3, #4]
 80099aa:	4633      	mov	r3, r6
 80099ac:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 80099ae:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80099b2:	9801      	ldr	r0, [sp, #4]
 80099b4:	4403      	add	r3, r0
 80099b6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 80099ba:	e7e5      	b.n	8009988 <jpeg_read_scanlines+0x36>

080099bc <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 80099bc:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 80099be:	6984      	ldr	r4, [r0, #24]
{
 80099c0:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 80099c2:	6863      	ldr	r3, [r4, #4]
 80099c4:	b943      	cbnz	r3, 80099d8 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 80099c6:	68e3      	ldr	r3, [r4, #12]
 80099c8:	4798      	blx	r3
 80099ca:	b928      	cbnz	r0, 80099d8 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	2219      	movs	r2, #25
 80099d0:	4628      	mov	r0, r5
 80099d2:	615a      	str	r2, [r3, #20]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4798      	blx	r3
  src->bytes_in_buffer--;
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	3b01      	subs	r3, #1
 80099dc:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	6022      	str	r2, [r4, #0]
}
 80099e4:	7818      	ldrb	r0, [r3, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}

080099e8 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 80099e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ec:	4680      	mov	r8, r0
 80099ee:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 80099f0:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 80099f4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 80099f8:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
  while (e->a < 0x8000L) {
 80099fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009a00:	db20      	blt.n	8009a44 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8009a02:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8009a04:	4b2e      	ldr	r3, [pc, #184]	; (8009ac0 <arith_decode+0xd8>)
 8009a06:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8009a0a:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 8009a0e:	68a5      	ldr	r5, [r4, #8]
  temp = e->a - qe;
 8009a10:	eba2 4227 	sub.w	r2, r2, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8009a14:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 8009a18:	fa02 f101 	lsl.w	r1, r2, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8009a1c:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 8009a20:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 8009a22:	428d      	cmp	r5, r1
 8009a24:	db3c      	blt.n	8009aa0 <arith_decode+0xb8>
    e->c -= temp;
 8009a26:	1a69      	subs	r1, r5, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8009a28:	4594      	cmp	ip, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009a2a:	f020 057f 	bic.w	r5, r0, #127	; 0x7f
      e->a = qe;
 8009a2e:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 8009a32:	60a1      	str	r1, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009a34:	b26d      	sxtb	r5, r5
    if (e->a < qe) {
 8009a36:	dd2e      	ble.n	8009a96 <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009a38:	ea85 050e 	eor.w	r5, r5, lr
 8009a3c:	7035      	strb	r5, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 8009a3e:	09c0      	lsrs	r0, r0, #7
 8009a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 8009a44:	3901      	subs	r1, #1
 8009a46:	2900      	cmp	r1, #0
 8009a48:	6121      	str	r1, [r4, #16]
 8009a4a:	da1a      	bge.n	8009a82 <arith_decode+0x9a>
      if (cinfo->unread_marker)
 8009a4c:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 8009a50:	b96b      	cbnz	r3, 8009a6e <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 8009a52:	4640      	mov	r0, r8
 8009a54:	f7ff ffb2 	bl	80099bc <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009a58:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 8009a5a:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009a5c:	d108      	bne.n	8009a70 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 8009a5e:	4640      	mov	r0, r8
 8009a60:	f7ff ffac 	bl	80099bc <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 8009a64:	28ff      	cmp	r0, #255	; 0xff
 8009a66:	d0fa      	beq.n	8009a5e <arith_decode+0x76>
	  if (data == 0)
 8009a68:	b110      	cbz	r0, 8009a70 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 8009a6a:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 8009a6e:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009a70:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009a72:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009a74:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009a78:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009a7c:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009a7e:	d404      	bmi.n	8009a8a <arith_decode+0xa2>
 8009a80:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 8009a82:	68e3      	ldr	r3, [r4, #12]
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	60e3      	str	r3, [r4, #12]
 8009a88:	e7b6      	b.n	80099f8 <arith_decode+0x10>
	if (++e->ct == 0)
 8009a8a:	3309      	adds	r3, #9
 8009a8c:	6123      	str	r3, [r4, #16]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1f7      	bne.n	8009a82 <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009a92:	60e7      	str	r7, [r4, #12]
 8009a94:	e7f5      	b.n	8009a82 <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009a96:	407d      	eors	r5, r7
 8009a98:	7035      	strb	r5, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8009a9a:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 8009a9e:	e7ce      	b.n	8009a3e <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 8009aa0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009aa4:	dacb      	bge.n	8009a3e <arith_decode+0x56>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009aa6:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 8009aaa:	4594      	cmp	ip, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009aac:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 8009aae:	dd02      	ble.n	8009ab6 <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009ab0:	407b      	eors	r3, r7
 8009ab2:	7033      	strb	r3, [r6, #0]
 8009ab4:	e7f1      	b.n	8009a9a <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009ab6:	ea83 030e 	eor.w	r3, r3, lr
 8009aba:	7033      	strb	r3, [r6, #0]
 8009abc:	e7bf      	b.n	8009a3e <arith_decode+0x56>
 8009abe:	bf00      	nop
 8009ac0:	0802bcbc 	.word	0x0802bcbc

08009ac4 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8009ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8009ac8:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8009acc:	f500 71aa 	add.w	r1, r0, #340	; 0x154
{
 8009ad0:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009ad2:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8009ad6:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 8009ada:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 808a 	beq.w	8009bf6 <start_pass+0x132>
    if (cinfo->Ss == 0) {
 8009ae2:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 8009ae6:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 8009aea:	b95a      	cbnz	r2, 8009b04 <start_pass+0x40>
      if (cinfo->Se != 0)
 8009aec:	b1a1      	cbz	r1, 8009b18 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 8009aee:	6823      	ldr	r3, [r4, #0]
 8009af0:	2611      	movs	r6, #17
 8009af2:	e9c3 1707 	strd	r1, r7, [r3, #28]
 8009af6:	e9c3 6205 	strd	r6, r2, [r3, #20]
 8009afa:	6258      	str	r0, [r3, #36]	; 0x24
 8009afc:	4620      	mov	r0, r4
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4798      	blx	r3
 8009b02:	e00f      	b.n	8009b24 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8009b04:	428a      	cmp	r2, r1
 8009b06:	dcf2      	bgt.n	8009aee <start_pass+0x2a>
 8009b08:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009b0c:	428b      	cmp	r3, r1
 8009b0e:	dbee      	blt.n	8009aee <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 8009b10:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d1ea      	bne.n	8009aee <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 8009b18:	b117      	cbz	r7, 8009b20 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 8009b1a:	1e7b      	subs	r3, r7, #1
 8009b1c:	4283      	cmp	r3, r0
 8009b1e:	d1e6      	bne.n	8009aee <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 8009b20:	280d      	cmp	r0, #13
 8009b22:	dce4      	bgt.n	8009aee <start_pass+0x2a>
 8009b24:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 8009b28:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8009b2c:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009b30:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8009b34:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009b38:	454b      	cmp	r3, r9
 8009b3a:	dc1d      	bgt.n	8009b78 <start_pass+0xb4>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 8009b3c:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d153      	bne.n	8009bec <start_pass+0x128>
      if (cinfo->Ss == 0)
 8009b44:	2a00      	cmp	r2, #0
 8009b46:	d14f      	bne.n	8009be8 <start_pass+0x124>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 8009b48:	4b63      	ldr	r3, [pc, #396]	; (8009cd8 <start_pass+0x214>)
{
 8009b4a:	f04f 0800 	mov.w	r8, #0
 8009b4e:	f105 0914 	add.w	r9, r5, #20
 8009b52:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8009b54:	46c2      	mov	sl, r8
    entropy->pub.decode_mcu = decode_mcu;
 8009b56:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009b58:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009b5c:	4543      	cmp	r3, r8
 8009b5e:	dc63      	bgt.n	8009c28 <start_pass+0x164>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 8009b60:	2300      	movs	r3, #0
  entropy->a = 0;
 8009b62:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8009b66:	f06f 030f 	mvn.w	r3, #15
 8009b6a:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8009b6c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8009b70:	636b      	str	r3, [r5, #52]	; 0x34
}
 8009b72:	b003      	add	sp, #12
 8009b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8009b78:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8009b7c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8009b80:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8009b82:	0230      	lsls	r0, r6, #8
 8009b84:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8009b88:	b162      	cbz	r2, 8009ba4 <start_pass+0xe0>
 8009b8a:	580a      	ldr	r2, [r1, r0]
 8009b8c:	2a00      	cmp	r2, #0
 8009b8e:	da09      	bge.n	8009ba4 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8009b90:	6822      	ldr	r2, [r4, #0]
 8009b92:	2300      	movs	r3, #0
 8009b94:	f04f 31ff 	mov.w	r1, #4294967295
 8009b98:	4620      	mov	r0, r4
 8009b9a:	61d3      	str	r3, [r2, #28]
 8009b9c:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8009ba0:	6852      	ldr	r2, [r2, #4]
 8009ba2:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009ba4:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 8009ba8:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8009bac:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8009bb0:	42ba      	cmp	r2, r7
 8009bb2:	da02      	bge.n	8009bba <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009bb4:	f109 0901 	add.w	r9, r9, #1
 8009bb8:	e7ba      	b.n	8009b30 <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009bba:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 8009bbe:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009bc2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 8009bc6:	4291      	cmp	r1, r2
 8009bc8:	d008      	beq.n	8009bdc <start_pass+0x118>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 8009bca:	6822      	ldr	r2, [r4, #0]
 8009bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	61d7      	str	r7, [r2, #28]
 8009bd4:	e9c2 b605 	strd	fp, r6, [r2, #20]
 8009bd8:	6852      	ldr	r2, [r2, #4]
 8009bda:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 8009bdc:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009be0:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 8009be2:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009be6:	e7e1      	b.n	8009bac <start_pass+0xe8>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 8009be8:	4b3c      	ldr	r3, [pc, #240]	; (8009cdc <start_pass+0x218>)
 8009bea:	e7ae      	b.n	8009b4a <start_pass+0x86>
      if (cinfo->Ss == 0)
 8009bec:	b90a      	cbnz	r2, 8009bf2 <start_pass+0x12e>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 8009bee:	4b3c      	ldr	r3, [pc, #240]	; (8009ce0 <start_pass+0x21c>)
 8009bf0:	e7ab      	b.n	8009b4a <start_pass+0x86>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 8009bf2:	4b3c      	ldr	r3, [pc, #240]	; (8009ce4 <start_pass+0x220>)
 8009bf4:	e7a9      	b.n	8009b4a <start_pass+0x86>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009bf6:	b96a      	cbnz	r2, 8009c14 <start_pass+0x150>
 8009bf8:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 8009bfc:	b953      	cbnz	r3, 8009c14 <start_pass+0x150>
 8009bfe:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8009c02:	b93b      	cbnz	r3, 8009c14 <start_pass+0x150>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8009c04:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8009c08:	2b3f      	cmp	r3, #63	; 0x3f
 8009c0a:	dc0b      	bgt.n	8009c24 <start_pass+0x160>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8009c0c:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d007      	beq.n	8009c24 <start_pass+0x160>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	227d      	movs	r2, #125	; 0x7d
 8009c18:	f04f 31ff 	mov.w	r1, #4294967295
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	615a      	str	r2, [r3, #20]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 8009c24:	4b30      	ldr	r3, [pc, #192]	; (8009ce8 <start_pass+0x224>)
 8009c26:	e790      	b.n	8009b4a <start_pass+0x86>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009c28:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8009c2c:	f856 bb04 	ldr.w	fp, [r6], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009c30:	b133      	cbz	r3, 8009c40 <start_pass+0x17c>
 8009c32:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009c36:	bb43      	cbnz	r3, 8009c8a <start_pass+0x1c6>
 8009c38:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d13a      	bne.n	8009cb6 <start_pass+0x1f2>
      tbl = compptr->dc_tbl_no;
 8009c40:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8009c44:	2f0f      	cmp	r7, #15
 8009c46:	d906      	bls.n	8009c56 <start_pass+0x192>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	2232      	movs	r2, #50	; 0x32
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 8009c56:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	b933      	cbnz	r3, 8009c6c <start_pass+0x1a8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8009c5e:	6863      	ldr	r3, [r4, #4]
 8009c60:	2240      	movs	r2, #64	; 0x40
 8009c62:	2101      	movs	r1, #1
 8009c64:	4620      	mov	r0, r4
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4798      	blx	r3
 8009c6a:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8009c6c:	2240      	movs	r2, #64	; 0x40
 8009c6e:	2100      	movs	r1, #0
 8009c70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c72:	f01e fccb 	bl	802860c <memset>
      entropy->last_dc_val[ci] = 0;
 8009c76:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 8009c7a:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8009c7e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009c82:	b9eb      	cbnz	r3, 8009cc0 <start_pass+0x1fc>
 8009c84:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009c88:	b1ab      	cbz	r3, 8009cb6 <start_pass+0x1f2>
      tbl = compptr->ac_tbl_no;
 8009c8a:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8009c8e:	2f0f      	cmp	r7, #15
 8009c90:	d819      	bhi.n	8009cc6 <start_pass+0x202>
      if (entropy->ac_stats[tbl] == NULL)
 8009c92:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8009c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c98:	b93b      	cbnz	r3, 8009caa <start_pass+0x1e6>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8009c9a:	6863      	ldr	r3, [r4, #4]
 8009c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4798      	blx	r3
 8009ca8:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8009caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cae:	2100      	movs	r1, #0
 8009cb0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009cb2:	f01e fcab 	bl	802860c <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009cb6:	f108 0801 	add.w	r8, r8, #1
 8009cba:	f109 0904 	add.w	r9, r9, #4
 8009cbe:	e74b      	b.n	8009b58 <start_pass+0x94>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8009cc0:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009cc4:	e7e0      	b.n	8009c88 <start_pass+0x1c4>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	2232      	movs	r2, #50	; 0x32
 8009cca:	4620      	mov	r0, r4
 8009ccc:	e9c3 2705 	strd	r2, r7, [r3, #20]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4798      	blx	r3
 8009cd4:	e7dd      	b.n	8009c92 <start_pass+0x1ce>
 8009cd6:	bf00      	nop
 8009cd8:	0800a28f 	.word	0x0800a28f
 8009cdc:	0800a15b 	.word	0x0800a15b
 8009ce0:	0800a109 	.word	0x0800a109
 8009ce4:	08009fe3 	.word	0x08009fe3
 8009ce8:	08009d8f 	.word	0x08009d8f

08009cec <process_restart>:
{
 8009cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8009cf0:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 8009cf4:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	4798      	blx	r3
 8009cfa:	b928      	cbnz	r0, 8009d08 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	2219      	movs	r2, #25
 8009d00:	4620      	mov	r0, r4
 8009d02:	615a      	str	r2, [r3, #20]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4798      	blx	r3
{
 8009d08:	2600      	movs	r6, #0
 8009d0a:	f105 0714 	add.w	r7, r5, #20
 8009d0e:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8009d12:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009d14:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009d18:	42b3      	cmp	r3, r6
 8009d1a:	dc0a      	bgt.n	8009d32 <process_restart+0x46>
  entropy->c = 0;
 8009d1c:	2300      	movs	r3, #0
  entropy->a = 0;
 8009d1e:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8009d22:	f06f 030f 	mvn.w	r3, #15
 8009d26:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 8009d28:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8009d2c:	636b      	str	r3, [r5, #52]	; 0x34
}
 8009d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009d32:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 8009d36:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8009d3a:	b12b      	cbz	r3, 8009d48 <process_restart+0x5c>
 8009d3c:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009d40:	b9ab      	cbnz	r3, 8009d6e <process_restart+0x82>
 8009d42:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009d46:	b9e3      	cbnz	r3, 8009d82 <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 8009d48:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009d4c:	2240      	movs	r2, #64	; 0x40
 8009d4e:	2100      	movs	r1, #0
 8009d50:	330e      	adds	r3, #14
 8009d52:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8009d56:	f01e fc59 	bl	802860c <memset>
      entropy->last_dc_val[ci] = 0;
 8009d5a:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 8009d5e:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8009d62:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8009d66:	b97b      	cbnz	r3, 8009d88 <process_restart+0x9c>
 8009d68:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009d6c:	b14b      	cbz	r3, 8009d82 <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8009d6e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8009d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d76:	2100      	movs	r1, #0
 8009d78:	331e      	adds	r3, #30
 8009d7a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8009d7e:	f01e fc45 	bl	802860c <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009d82:	3601      	adds	r6, #1
 8009d84:	3704      	adds	r7, #4
 8009d86:	e7c5      	b.n	8009d14 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8009d88:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 8009d8c:	e7ee      	b.n	8009d6c <process_restart+0x80>

08009d8e <decode_mcu>:
{
 8009d8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 8009d92:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009d96:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009d98:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 8009d9c:	ed2d 8b02 	vpush	{d8}
 8009da0:	b087      	sub	sp, #28
 8009da2:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 8009da4:	b133      	cbz	r3, 8009db4 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 8009da6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009da8:	b90b      	cbnz	r3, 8009dae <decode_mcu+0x20>
      process_restart(cinfo);
 8009daa:	f7ff ff9f 	bl	8009cec <process_restart>
    entropy->restarts_to_go--;
 8009dae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009db0:	3b01      	subs	r3, #1
 8009db2:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8009db4:	692b      	ldr	r3, [r5, #16]
 8009db6:	3301      	adds	r3, #1
 8009db8:	f000 809f 	beq.w	8009efa <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 8009dbc:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009dc0:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 8009dc2:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009dc4:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8009dc8:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009dca:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 8009dce:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009dd2:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 8009dd6:	42bb      	cmp	r3, r7
 8009dd8:	f340 808f 	ble.w	8009efa <decode_mcu+0x16c>
    block = MCU_data[blkn];
 8009ddc:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 8009dde:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 8009de0:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 8009de2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8009de6:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 8009de8:	f852 3b04 	ldr.w	r3, [r2], #4
 8009dec:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 8009dee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009df2:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8009df6:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009dfa:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 8009dfe:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 8009e00:	6952      	ldr	r2, [r2, #20]
 8009e02:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 8009e06:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8009e08:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 8009e0c:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 8009e0e:	4631      	mov	r1, r6
 8009e10:	f7ff fdea 	bl	80099e8 <arith_decode>
 8009e14:	bb68      	cbnz	r0, 8009e72 <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 8009e16:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 8009e1a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009e1e:	9a00      	ldr	r2, [sp, #0]
 8009e20:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 8009e22:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 80c4 	beq.w	8009fb4 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 8009e2c:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 8009e2e:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 8009e30:	699b      	ldr	r3, [r3, #24]
    k = 0;
 8009e32:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009e36:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 8009e3a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8009e3e:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8009e42:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 8009e44:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8009e48:	4649      	mov	r1, r9
 8009e4a:	f7ff fdcd 	bl	80099e8 <arith_decode>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	f040 80b0 	bne.w	8009fb4 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 8009e54:	f109 0101 	add.w	r1, r9, #1
 8009e58:	4620      	mov	r0, r4
	k++;
 8009e5a:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 8009e5c:	f7ff fdc4 	bl	80099e8 <arith_decode>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d16e      	bne.n	8009f42 <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 8009e64:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 8009e68:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 8009e6c:	42b2      	cmp	r2, r6
 8009e6e:	dcf1      	bgt.n	8009e54 <decode_mcu+0xc6>
 8009e70:	e038      	b.n	8009ee4 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 8009e72:	1c71      	adds	r1, r6, #1
 8009e74:	4620      	mov	r0, r4
 8009e76:	f7ff fdb7 	bl	80099e8 <arith_decode>
      st += 2; st += sign;
 8009e7a:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 8009e7c:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009e7e:	4620      	mov	r0, r4
      st += 2; st += sign;
 8009e80:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009e84:	4651      	mov	r1, sl
 8009e86:	f7ff fdaf 	bl	80099e8 <arith_decode>
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	b140      	cbz	r0, 8009ea0 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8009e8e:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 8009e92:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 8009e96:	4651      	mov	r1, sl
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f7ff fda5 	bl	80099e8 <arith_decode>
 8009e9e:	b9e8      	cbnz	r0, 8009edc <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8009ea0:	9b02      	ldr	r3, [sp, #8]
 8009ea2:	4423      	add	r3, r4
 8009ea4:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 8009ea8:	4699      	mov	r9, r3
 8009eaa:	2301      	movs	r3, #1
 8009eac:	fa03 f202 	lsl.w	r2, r3, r2
 8009eb0:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 8009eb4:	da2a      	bge.n	8009f0c <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8009eb6:	2200      	movs	r2, #0
      st += 14;
 8009eb8:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 8009ebc:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8009ebe:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 8009ec2:	1076      	asrs	r6, r6, #1
 8009ec4:	d130      	bne.n	8009f28 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 8009ec6:	f1b8 0f00 	cmp.w	r8, #0
 8009eca:	d137      	bne.n	8009f3c <decode_mcu+0x1ae>
 8009ecc:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 8009ed0:	f8db 2014 	ldr.w	r2, [fp, #20]
 8009ed4:	444a      	add	r2, r9
 8009ed6:	f8cb 2014 	str.w	r2, [fp, #20]
 8009eda:	e79e      	b.n	8009e1a <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 8009edc:	0076      	lsls	r6, r6, #1
 8009ede:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8009ee2:	d110      	bne.n	8009f06 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	2275      	movs	r2, #117	; 0x75
 8009ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8009eec:	4620      	mov	r0, r4
 8009eee:	615a      	str	r2, [r3, #20]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 8009ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef8:	612b      	str	r3, [r5, #16]
}
 8009efa:	2001      	movs	r0, #1
 8009efc:	b007      	add	sp, #28
 8009efe:	ecbd 8b02 	vpop	{d8}
 8009f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 8009f06:	f10a 0a01 	add.w	sl, sl, #1
 8009f0a:	e7c4      	b.n	8009e96 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8009f0c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 8009f10:	2301      	movs	r3, #1
 8009f12:	fa03 f202 	lsl.w	r2, r3, r2
 8009f16:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8009f1a:	bfcc      	ite	gt
 8009f1c:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8009f20:	f108 0201 	addle.w	r2, r8, #1
 8009f24:	0092      	lsls	r2, r2, #2
 8009f26:	e7c7      	b.n	8009eb8 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 8009f28:	4620      	mov	r0, r4
 8009f2a:	9102      	str	r1, [sp, #8]
 8009f2c:	f7ff fd5c 	bl	80099e8 <arith_decode>
 8009f30:	9902      	ldr	r1, [sp, #8]
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d0c5      	beq.n	8009ec2 <decode_mcu+0x134>
 8009f36:	ea49 0906 	orr.w	r9, r9, r6
 8009f3a:	e7c2      	b.n	8009ec2 <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 8009f3c:	ea6f 0909 	mvn.w	r9, r9
 8009f40:	e7c6      	b.n	8009ed0 <decode_mcu+0x142>
      st += 2;
 8009f42:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009f46:	ee18 1a10 	vmov	r1, s16
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f7ff fd4c 	bl	80099e8 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009f50:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8009f52:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 8009f54:	4620      	mov	r0, r4
 8009f56:	f7ff fd47 	bl	80099e8 <arith_decode>
 8009f5a:	4680      	mov	r8, r0
 8009f5c:	b1a8      	cbz	r0, 8009f8a <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 8009f5e:	4649      	mov	r1, r9
 8009f60:	4620      	mov	r0, r4
 8009f62:	f7ff fd41 	bl	80099e8 <arith_decode>
 8009f66:	b180      	cbz	r0, 8009f8a <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009f68:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 8009f6c:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 8009f70:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8009f74:	42b1      	cmp	r1, r6
 8009f76:	bfac      	ite	ge
 8009f78:	21bd      	movge	r1, #189	; 0xbd
 8009f7a:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 8009f7c:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 8009f80:	4649      	mov	r1, r9
 8009f82:	4620      	mov	r0, r4
 8009f84:	f7ff fd30 	bl	80099e8 <arith_decode>
 8009f88:	b9b0      	cbnz	r0, 8009fb8 <decode_mcu+0x22a>
      st += 14;
 8009f8a:	f109 010e 	add.w	r1, r9, #14
      v = m;
 8009f8e:	46c1      	mov	r9, r8
      while (m >>= 1)
 8009f90:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009f94:	d118      	bne.n	8009fc8 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 8009f96:	9b01      	ldr	r3, [sp, #4]
 8009f98:	bb03      	cbnz	r3, 8009fdc <decode_mcu+0x24e>
 8009f9a:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 8009f9e:	9b04      	ldr	r3, [sp, #16]
 8009fa0:	9900      	ldr	r1, [sp, #0]
 8009fa2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8009fa6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 8009faa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009fae:	42b3      	cmp	r3, r6
 8009fb0:	f73f af43 	bgt.w	8009e3a <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009fb4:	3701      	adds	r7, #1
 8009fb6:	e70c      	b.n	8009dd2 <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 8009fb8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8009fbc:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 8009fc0:	d090      	beq.n	8009ee4 <decode_mcu+0x156>
	    st += 1;
 8009fc2:	f109 0901 	add.w	r9, r9, #1
 8009fc6:	e7db      	b.n	8009f80 <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 8009fc8:	4620      	mov	r0, r4
 8009fca:	9102      	str	r1, [sp, #8]
 8009fcc:	f7ff fd0c 	bl	80099e8 <arith_decode>
 8009fd0:	9902      	ldr	r1, [sp, #8]
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d0dc      	beq.n	8009f90 <decode_mcu+0x202>
 8009fd6:	ea49 0908 	orr.w	r9, r9, r8
 8009fda:	e7d9      	b.n	8009f90 <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 8009fdc:	ea6f 0209 	mvn.w	r2, r9
 8009fe0:	e7dd      	b.n	8009f9e <decode_mcu+0x210>

08009fe2 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 8009fe2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 8009fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fea:	4604      	mov	r4, r0
 8009fec:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009fee:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 8009ff2:	ed2d 8b02 	vpush	{d8}
 8009ff6:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 8009ff8:	b133      	cbz	r3, 800a008 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 8009ffa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009ffc:	b90b      	cbnz	r3, 800a002 <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 8009ffe:	f7ff fe75 	bl	8009cec <process_restart>
    entropy->restarts_to_go--;
 800a002:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a004:	3b01      	subs	r3, #1
 800a006:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a008:	6933      	ldr	r3, [r6, #16]
 800a00a:	3301      	adds	r3, #1
 800a00c:	d076      	beq.n	800a0fc <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a00e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a012:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a014:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 800a018:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a01c:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a01e:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800a022:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a026:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800a028:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a02c:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a030:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a032:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800a034:	2f00      	cmp	r7, #0
 800a036:	dc37      	bgt.n	800a0a8 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a038:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a03c:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a040:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a042:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 800a046:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a04a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a04e:	42ab      	cmp	r3, r5
 800a050:	db54      	blt.n	800a0fc <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a052:	1e6b      	subs	r3, r5, #1
 800a054:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800a056:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a058:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a05c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a060:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800a064:	dd05      	ble.n	800a072 <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a066:	4651      	mov	r1, sl
 800a068:	4620      	mov	r0, r4
 800a06a:	f7ff fcbd 	bl	80099e8 <arith_decode>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d144      	bne.n	800a0fc <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 800a072:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 800a076:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 800a078:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 800a07c:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800a080:	b1d1      	cbz	r1, 800a0b8 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 800a082:	f10a 0102 	add.w	r1, sl, #2
 800a086:	4620      	mov	r0, r4
 800a088:	f7ff fcae 	bl	80099e8 <arith_decode>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d0dc      	beq.n	800a04a <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 800a090:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 800a094:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 800a098:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800a09a:	bfb4      	ite	lt
 800a09c:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800a09e:	9a01      	ldrge	r2, [sp, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f8a8 3000 	strh.w	r3, [r8]
 800a0a6:	e7d0      	b.n	800a04a <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 800a0a8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a0ac:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1c1      	bne.n	800a038 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 800a0b4:	3f01      	subs	r7, #1
 800a0b6:	e7bd      	b.n	800a034 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800a0b8:	f10a 0101 	add.w	r1, sl, #1
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f7ff fc93 	bl	80099e8 <arith_decode>
 800a0c2:	b150      	cbz	r0, 800a0da <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a0c4:	ee18 1a10 	vmov	r1, s16
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f7ff fc8d 	bl	80099e8 <arith_decode>
	  *thiscoef = m1;
 800a0ce:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	bf18      	it	ne
 800a0d6:	4613      	movne	r3, r2
 800a0d8:	e7e3      	b.n	800a0a2 <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 800a0da:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a0de:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800a0e2:	42aa      	cmp	r2, r5
 800a0e4:	dac5      	bge.n	800a072 <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	2275      	movs	r2, #117	; 0x75
 800a0ea:	f04f 31ff 	mov.w	r1, #4294967295
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	615a      	str	r2, [r3, #20]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800a0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0fa:	6133      	str	r3, [r6, #16]
}
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	b005      	add	sp, #20
 800a100:	ecbd 8b02 	vpop	{d8}
 800a104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a108 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800a108:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a110:	4604      	mov	r4, r0
 800a112:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a114:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a118:	b133      	cbz	r3, 800a128 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800a11a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a11c:	b90b      	cbnz	r3, 800a122 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800a11e:	f7ff fde5 	bl	8009cec <process_restart>
    entropy->restarts_to_go--;
 800a122:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a124:	3b01      	subs	r3, #1
 800a126:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a128:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800a12c:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800a12e:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a130:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a132:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a134:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a138:	42ab      	cmp	r3, r5
 800a13a:	dc02      	bgt.n	800a142 <decode_mcu_DC_refine+0x3a>
}
 800a13c:	2001      	movs	r0, #1
 800a13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800a142:	4631      	mov	r1, r6
 800a144:	4620      	mov	r0, r4
 800a146:	f7ff fc4f 	bl	80099e8 <arith_decode>
 800a14a:	b120      	cbz	r0, 800a156 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800a14c:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800a150:	8813      	ldrh	r3, [r2, #0]
 800a152:	433b      	orrs	r3, r7
 800a154:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a156:	3501      	adds	r5, #1
 800a158:	e7ec      	b.n	800a134 <decode_mcu_DC_refine+0x2c>

0800a15a <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800a15a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a15e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a162:	4604      	mov	r4, r0
 800a164:	b087      	sub	sp, #28
 800a166:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a168:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a16c:	b133      	cbz	r3, 800a17c <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a16e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a170:	b90b      	cbnz	r3, 800a176 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800a172:	f7ff fdbb 	bl	8009cec <process_restart>
    entropy->restarts_to_go--;
 800a176:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a178:	3b01      	subs	r3, #1
 800a17a:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a17c:	6933      	ldr	r3, [r6, #16]
 800a17e:	3301      	adds	r3, #1
 800a180:	d01d      	beq.n	800a1be <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 800a182:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a184:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 800a188:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 800a18c:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a18e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a192:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 800a19c:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a19e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a1a2:	42ab      	cmp	r3, r5
 800a1a4:	db0b      	blt.n	800a1be <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a1a6:	1e69      	subs	r1, r5, #1
 800a1a8:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a1ac:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a1ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a1b2:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a1b6:	4641      	mov	r1, r8
 800a1b8:	f7ff fc16 	bl	80099e8 <arith_decode>
 800a1bc:	b1b0      	cbz	r0, 800a1ec <decode_mcu_AC_first+0x92>
}
 800a1be:	2001      	movs	r0, #1
 800a1c0:	b007      	add	sp, #28
 800a1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800a1c6:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800a1c8:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a1cc:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 800a1d0:	42aa      	cmp	r2, r5
 800a1d2:	da0b      	bge.n	800a1ec <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	2275      	movs	r2, #117	; 0x75
 800a1d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a1dc:	4620      	mov	r0, r4
 800a1de:	615a      	str	r2, [r3, #20]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e8:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800a1ea:	e7e8      	b.n	800a1be <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 800a1ec:	f108 0101 	add.w	r1, r8, #1
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f7ff fbf9 	bl	80099e8 <arith_decode>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d0e5      	beq.n	800a1c6 <decode_mcu_AC_first+0x6c>
    st += 2;
 800a1fa:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a1fe:	4659      	mov	r1, fp
 800a200:	4620      	mov	r0, r4
 800a202:	f7ff fbf1 	bl	80099e8 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a206:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a208:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a20a:	4620      	mov	r0, r4
 800a20c:	f7ff fbec 	bl	80099e8 <arith_decode>
 800a210:	4607      	mov	r7, r0
 800a212:	b1b0      	cbz	r0, 800a242 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 800a214:	4641      	mov	r1, r8
 800a216:	4620      	mov	r0, r4
 800a218:	f7ff fbe6 	bl	80099e8 <arith_decode>
 800a21c:	b188      	cbz	r0, 800a242 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a21e:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800a220:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800a222:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a226:	18e1      	adds	r1, r4, r3
 800a228:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 800a22c:	42a9      	cmp	r1, r5
 800a22e:	bfac      	ite	ge
 800a230:	21bd      	movge	r1, #189	; 0xbd
 800a232:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800a234:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800a238:	4641      	mov	r1, r8
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7ff fbd4 	bl	80099e8 <arith_decode>
 800a240:	b988      	cbnz	r0, 800a266 <decode_mcu_AC_first+0x10c>
    st += 14;
 800a242:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800a246:	463a      	mov	r2, r7
    while (m >>= 1)
 800a248:	107f      	asrs	r7, r7, #1
 800a24a:	d113      	bne.n	800a274 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 800a24c:	9b03      	ldr	r3, [sp, #12]
 800a24e:	b9e3      	cbnz	r3, 800a28a <decode_mcu_AC_first+0x130>
 800a250:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a252:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800a256:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a25a:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a25c:	408a      	lsls	r2, r1
 800a25e:	9902      	ldr	r1, [sp, #8]
 800a260:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a264:	e79b      	b.n	800a19e <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800a266:	007f      	lsls	r7, r7, #1
 800a268:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800a26c:	d0b2      	beq.n	800a1d4 <decode_mcu_AC_first+0x7a>
	  st += 1;
 800a26e:	f108 0801 	add.w	r8, r8, #1
 800a272:	e7e1      	b.n	800a238 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800a274:	4620      	mov	r0, r4
 800a276:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a27a:	f7ff fbb5 	bl	80099e8 <arith_decode>
 800a27e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a282:	2800      	cmp	r0, #0
 800a284:	d0e0      	beq.n	800a248 <decode_mcu_AC_first+0xee>
 800a286:	433a      	orrs	r2, r7
 800a288:	e7de      	b.n	800a248 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 800a28a:	43d2      	mvns	r2, r2
 800a28c:	e7e1      	b.n	800a252 <decode_mcu_AC_first+0xf8>

0800a28e <decode_mcu_DC_first>:
{
 800a28e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a292:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a296:	b085      	sub	sp, #20
 800a298:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a29a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a29e:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800a2a0:	b133      	cbz	r3, 800a2b0 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a2a2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a2a4:	b90b      	cbnz	r3, 800a2aa <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800a2a6:	f7ff fd21 	bl	8009cec <process_restart>
    entropy->restarts_to_go--;
 800a2aa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a2b0:	6933      	ldr	r3, [r6, #16]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	d073      	beq.n	800a39e <decode_mcu_DC_first+0x110>
 800a2b6:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a2ba:	f04f 0800 	mov.w	r8, #0
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a2c4:	4543      	cmp	r3, r8
 800a2c6:	dd6a      	ble.n	800a39e <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 800a2c8:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 800a2ca:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a2cc:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800a2ce:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a2d2:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800a2d4:	f852 3b04 	ldr.w	r3, [r2], #4
 800a2d8:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a2da:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a2de:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800a2e2:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a2e6:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a2ea:	6952      	ldr	r2, [r2, #20]
 800a2ec:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 800a2f0:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a2f2:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 800a2f6:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	f7ff fb75 	bl	80099e8 <arith_decode>
 800a2fe:	b958      	cbnz	r0, 800a318 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800a300:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a304:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a308:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a30c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a310:	4093      	lsls	r3, r2
 800a312:	9a02      	ldr	r2, [sp, #8]
 800a314:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a316:	e7d3      	b.n	800a2c0 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800a318:	1c69      	adds	r1, r5, #1
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7ff fb64 	bl	80099e8 <arith_decode>
      st += 2; st += sign;
 800a320:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a322:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a324:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a326:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a32a:	4659      	mov	r1, fp
 800a32c:	f7ff fb5c 	bl	80099e8 <arith_decode>
 800a330:	4605      	mov	r5, r0
 800a332:	b140      	cbz	r0, 800a346 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a334:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a338:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800a33c:	4659      	mov	r1, fp
 800a33e:	4620      	mov	r0, r4
 800a340:	f7ff fb52 	bl	80099e8 <arith_decode>
 800a344:	b9e0      	cbnz	r0, 800a380 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a346:	9b00      	ldr	r3, [sp, #0]
 800a348:	4423      	add	r3, r4
 800a34a:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a34e:	4699      	mov	r9, r3
 800a350:	2301      	movs	r3, #1
 800a352:	fa03 f202 	lsl.w	r2, r3, r2
 800a356:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 800a35a:	da27      	bge.n	800a3ac <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a35c:	2300      	movs	r3, #0
 800a35e:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 800a362:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800a366:	46a9      	mov	r9, r5
 800a368:	106d      	asrs	r5, r5, #1
 800a36a:	d12d      	bne.n	800a3c8 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 800a36c:	2f00      	cmp	r7, #0
 800a36e:	d135      	bne.n	800a3dc <decode_mcu_DC_first+0x14e>
 800a370:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a374:	f8da 2014 	ldr.w	r2, [sl, #20]
 800a378:	444a      	add	r2, r9
 800a37a:	f8ca 2014 	str.w	r2, [sl, #20]
 800a37e:	e7c1      	b.n	800a304 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800a380:	006d      	lsls	r5, r5, #1
 800a382:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a386:	d10e      	bne.n	800a3a6 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	2275      	movs	r2, #117	; 0x75
 800a38c:	f04f 31ff 	mov.w	r1, #4294967295
 800a390:	4620      	mov	r0, r4
 800a392:	615a      	str	r2, [r3, #20]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a398:	f04f 33ff 	mov.w	r3, #4294967295
 800a39c:	6133      	str	r3, [r6, #16]
}
 800a39e:	2001      	movs	r0, #1
 800a3a0:	b005      	add	sp, #20
 800a3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a3a6:	f10b 0b01 	add.w	fp, fp, #1
 800a3aa:	e7c7      	b.n	800a33c <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a3ac:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	fa03 f202 	lsl.w	r2, r3, r2
 800a3b6:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a3ba:	bfcc      	ite	gt
 800a3bc:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a3be:	1c7a      	addle	r2, r7, #1
 800a3c0:	0092      	lsls	r2, r2, #2
 800a3c2:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800a3c6:	e7cc      	b.n	800a362 <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	9100      	str	r1, [sp, #0]
 800a3cc:	f7ff fb0c 	bl	80099e8 <arith_decode>
 800a3d0:	9900      	ldr	r1, [sp, #0]
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d0c8      	beq.n	800a368 <decode_mcu_DC_first+0xda>
 800a3d6:	ea49 0905 	orr.w	r9, r9, r5
 800a3da:	e7c5      	b.n	800a368 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 800a3dc:	ea6f 0909 	mvn.w	r9, r9
 800a3e0:	e7c8      	b.n	800a374 <decode_mcu_DC_first+0xe6>
	...

0800a3e4 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a3e4:	6843      	ldr	r3, [r0, #4]
 800a3e6:	22bc      	movs	r2, #188	; 0xbc
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	681b      	ldr	r3, [r3, #0]
{
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a3f0:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800a3f2:	4b14      	ldr	r3, [pc, #80]	; (800a444 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a3f4:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800a3f6:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800a3fa:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 800a3fc:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800a400:	2100      	movs	r1, #0
 800a402:	f01e f903 	bl	802860c <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800a406:	2371      	movs	r3, #113	; 0x71
 800a408:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800a40c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a410:	b17b      	cbz	r3, 800a432 <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a412:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a414:	2101      	movs	r1, #1
 800a416:	6863      	ldr	r3, [r4, #4]
 800a418:	4620      	mov	r0, r4
 800a41a:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a41c:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4798      	blx	r3
 800a422:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800a424:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a42a:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800a42e:	42ab      	cmp	r3, r5
 800a430:	dc00      	bgt.n	800a434 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800a432:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800a434:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a438:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a43a:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800a43c:	f01e f8e6 	bl	802860c <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a440:	e7f2      	b.n	800a428 <jinit_arith_decoder+0x44>
 800a442:	bf00      	nop
 800a444:	08009ac5 	.word	0x08009ac5

0800a448 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800a448:	4770      	bx	lr
	...

0800a44c <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a44c:	6803      	ldr	r3, [r0, #0]
 800a44e:	227b      	movs	r2, #123	; 0x7b
 800a450:	f04f 31ff 	mov.w	r1, #4294967295
{
 800a454:	b510      	push	{r4, lr}
 800a456:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a458:	615a      	str	r2, [r3, #20]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800a45e:	69a3      	ldr	r3, [r4, #24]
 800a460:	4a02      	ldr	r2, [pc, #8]	; (800a46c <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800a462:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800a464:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800a466:	2202      	movs	r2, #2
 800a468:	605a      	str	r2, [r3, #4]
}
 800a46a:	bd10      	pop	{r4, pc}
 800a46c:	0802be84 	.word	0x0802be84

0800a470 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800a470:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800a472:	1e0c      	subs	r4, r1, #0
{
 800a474:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800a476:	dd08      	ble.n	800a48a <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800a478:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800a47a:	6869      	ldr	r1, [r5, #4]
 800a47c:	42a1      	cmp	r1, r4
 800a47e:	db05      	blt.n	800a48c <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800a480:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a482:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 800a484:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a486:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800a488:	602b      	str	r3, [r5, #0]
  }
}
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 800a48c:	68eb      	ldr	r3, [r5, #12]
 800a48e:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 800a490:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 800a492:	4798      	blx	r3
 800a494:	e7f1      	b.n	800a47a <skip_input_data+0xa>

0800a496 <term_source>:
 800a496:	4770      	bx	lr

0800a498 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	4604      	mov	r4, r0
 800a49c:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800a49e:	460d      	mov	r5, r1
 800a4a0:	b101      	cbz	r1, 800a4a4 <jpeg_mem_src+0xc>
 800a4a2:	b92a      	cbnz	r2, 800a4b0 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800a4a4:	6823      	ldr	r3, [r4, #0]
 800a4a6:	222b      	movs	r2, #43	; 0x2b
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	615a      	str	r2, [r3, #20]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800a4b0:	69a1      	ldr	r1, [r4, #24]
 800a4b2:	b929      	cbnz	r1, 800a4c0 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a4b4:	6863      	ldr	r3, [r4, #4]
 800a4b6:	221c      	movs	r2, #28
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800a4be:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800a4c0:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800a4c2:	4a06      	ldr	r2, [pc, #24]	; (800a4dc <jpeg_mem_src+0x44>)
 800a4c4:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800a4c6:	4a06      	ldr	r2, [pc, #24]	; (800a4e0 <jpeg_mem_src+0x48>)
 800a4c8:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800a4ca:	4a06      	ldr	r2, [pc, #24]	; (800a4e4 <jpeg_mem_src+0x4c>)
 800a4cc:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800a4ce:	4a06      	ldr	r2, [pc, #24]	; (800a4e8 <jpeg_mem_src+0x50>)
 800a4d0:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800a4d2:	4a06      	ldr	r2, [pc, #24]	; (800a4ec <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800a4d4:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800a4d8:	619a      	str	r2, [r3, #24]
}
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	0800a449 	.word	0x0800a449
 800a4e0:	0800a44d 	.word	0x0800a44d
 800a4e4:	0800a471 	.word	0x0800a471
 800a4e8:	0800e6c9 	.word	0x0800e6c9
 800a4ec:	0800a497 	.word	0x0800a497

0800a4f0 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800a4f0:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a4f4:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800a4f8:	2a01      	cmp	r2, #1
 800a4fa:	dd05      	ble.n	800a508 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 800a4fc:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a4fe:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800a500:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800a502:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800a506:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a508:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a50c:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a510:	3a01      	subs	r2, #1
 800a512:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800a516:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a518:	bf34      	ite	cc
 800a51a:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a51c:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 800a51e:	e7ee      	b.n	800a4fe <start_iMCU_row+0xe>

0800a520 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800a520:	2200      	movs	r2, #0
 800a522:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800a526:	f7ff bfe3 	b.w	800a4f0 <start_iMCU_row>

0800a52a <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800a52a:	2000      	movs	r0, #0
 800a52c:	4770      	bx	lr

0800a52e <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800a52e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a532:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 800a536:	b08f      	sub	sp, #60	; 0x3c
 800a538:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a53a:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a53e:	465f      	mov	r7, fp
 800a540:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a542:	f04f 0801 	mov.w	r8, #1
 800a546:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a54a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a54e:	42b3      	cmp	r3, r6
 800a550:	dc13      	bgt.n	800a57a <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a552:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a554:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a558:	69eb      	ldr	r3, [r5, #28]
 800a55a:	42b3      	cmp	r3, r6
 800a55c:	dc22      	bgt.n	800a5a4 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a55e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a562:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a566:	3301      	adds	r3, #1
 800a568:	4293      	cmp	r3, r2
 800a56a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a56e:	d270      	bcs.n	800a652 <consume_data+0x124>
    start_iMCU_row(cinfo);
 800a570:	4620      	mov	r0, r4
 800a572:	f7ff ffbd 	bl	800a4f0 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800a576:	2003      	movs	r0, #3
 800a578:	e044      	b.n	800a604 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800a57a:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a57e:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800a580:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a582:	6849      	ldr	r1, [r1, #4]
 800a584:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a588:	3112      	adds	r1, #18
 800a58a:	f8cd 8000 	str.w	r8, [sp]
 800a58e:	435a      	muls	r2, r3
 800a590:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800a594:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a598:	4620      	mov	r0, r4
 800a59a:	47d0      	blx	sl
 800a59c:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a5a0:	3601      	adds	r6, #1
 800a5a2:	e7d2      	b.n	800a54a <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800a5a4:	00b3      	lsls	r3, r6, #2
 800a5a6:	696f      	ldr	r7, [r5, #20]
 800a5a8:	9308      	str	r3, [sp, #32]
 800a5aa:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800a5ae:	42bb      	cmp	r3, r7
 800a5b0:	f04f 0300 	mov.w	r3, #0
 800a5b4:	d94a      	bls.n	800a64c <consume_data+0x11e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a5b6:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800a5ba:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800a5bc:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a5be:	9206      	str	r2, [sp, #24]
 800a5c0:	e013      	b.n	800a5ea <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800a5c2:	f85a 2b04 	ldr.w	r2, [sl], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a5c6:	f04f 0c00 	mov.w	ip, #0
 800a5ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5ce:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 800a5d2:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a5d4:	fb07 f20e 	mul.w	r2, r7, lr
 800a5d8:	01d2      	lsls	r2, r2, #7
 800a5da:	9204      	str	r2, [sp, #16]
 800a5dc:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800a5e0:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a5e2:	9a05      	ldr	r2, [sp, #20]
 800a5e4:	4562      	cmp	r2, ip
 800a5e6:	dc10      	bgt.n	800a60a <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	9a06      	ldr	r2, [sp, #24]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	dce8      	bgt.n	800a5c2 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a5f0:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800a5f4:	f105 0120 	add.w	r1, r5, #32
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	4798      	blx	r3
 800a5fe:	bb18      	cbnz	r0, 800a648 <consume_data+0x11a>
	coef->MCU_ctr = MCU_col_num;
 800a600:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800a604:	b00f      	add	sp, #60	; 0x3c
 800a606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800a60a:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800a60e:	9904      	ldr	r1, [sp, #16]
 800a610:	f852 2008 	ldr.w	r2, [r2, r8]
 800a614:	440a      	add	r2, r1
 800a616:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a618:	9a03      	ldr	r2, [sp, #12]
 800a61a:	f102 0108 	add.w	r1, r2, #8
 800a61e:	2200      	movs	r2, #0
 800a620:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800a624:	9807      	ldr	r0, [sp, #28]
 800a626:	4596      	cmp	lr, r2
 800a628:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800a62c:	dc08      	bgt.n	800a640 <consume_data+0x112>
 800a62e:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a630:	f10c 0c01 	add.w	ip, ip, #1
 800a634:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a636:	f108 0804 	add.w	r8, r8, #4
 800a63a:	4411      	add	r1, r2
 800a63c:	9103      	str	r1, [sp, #12]
 800a63e:	e7d0      	b.n	800a5e2 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a640:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800a642:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800a646:	e7ed      	b.n	800a624 <consume_data+0xf6>
	 MCU_col_num++) {
 800a648:	3701      	adds	r7, #1
 800a64a:	e7ae      	b.n	800a5aa <consume_data+0x7c>
       yoffset++) {
 800a64c:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800a64e:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800a650:	e782      	b.n	800a558 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800a652:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a656:	4620      	mov	r0, r4
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800a65c:	2004      	movs	r0, #4
 800a65e:	e7d1      	b.n	800a604 <consume_data+0xd6>

0800a660 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a664:	4604      	mov	r4, r0
 800a666:	b089      	sub	sp, #36	; 0x24
 800a668:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a66a:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a66e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800a672:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a676:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a67a:	429a      	cmp	r2, r3
 800a67c:	db1d      	blt.n	800a6ba <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800a67e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800a682:	d103      	bne.n	800a68c <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800a684:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a688:	429a      	cmp	r2, r3
 800a68a:	d916      	bls.n	800a6ba <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a68c:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a68e:	2600      	movs	r6, #0
 800a690:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a694:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800a696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a69a:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a69c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800a69e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a6a2:	42b3      	cmp	r3, r6
 800a6a4:	dc13      	bgt.n	800a6ce <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800a6a6:	1c50      	adds	r0, r2, #1
 800a6a8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a6ac:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800a6b0:	4290      	cmp	r0, r2
 800a6b2:	bf2c      	ite	cs
 800a6b4:	2004      	movcs	r0, #4
 800a6b6:	2003      	movcc	r0, #3
 800a6b8:	e006      	b.n	800a6c8 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800a6ba:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a6be:	4620      	mov	r0, r4
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4798      	blx	r3
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d1d4      	bne.n	800a672 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800a6c8:	b009      	add	sp, #36	; 0x24
 800a6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800a6ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a6d0:	b913      	cbnz	r3, 800a6d8 <decompress_data+0x78>
       ci++, compptr++) {
 800a6d2:	3601      	adds	r6, #1
 800a6d4:	3558      	adds	r5, #88	; 0x58
 800a6d6:	e7e1      	b.n	800a69c <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800a6d8:	6861      	ldr	r1, [r4, #4]
 800a6da:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800a6dc:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800a6de:	9000      	str	r0, [sp, #0]
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	6a0f      	ldr	r7, [r1, #32]
 800a6e4:	435a      	muls	r2, r3
 800a6e6:	9906      	ldr	r1, [sp, #24]
 800a6e8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800a6ec:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800a6ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a6f2:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800a6f4:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	68eb      	ldr	r3, [r5, #12]
 800a6fa:	d221      	bcs.n	800a740 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800a6fc:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a6fe:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a702:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800a704:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 800a70c:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a710:	9202      	str	r2, [sp, #8]
 800a712:	9a02      	ldr	r2, [sp, #8]
 800a714:	4552      	cmp	r2, sl
 800a716:	dadc      	bge.n	800a6d2 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800a718:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800a71a:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800a71e:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a720:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800a722:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a726:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a728:	69e9      	ldr	r1, [r5, #28]
 800a72a:	9a05      	ldr	r2, [sp, #20]
 800a72c:	4541      	cmp	r1, r8
 800a72e:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800a732:	d80f      	bhi.n	800a754 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800a734:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a736:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800a73a:	9a02      	ldr	r2, [sp, #8]
 800a73c:	3201      	adds	r2, #1
 800a73e:	e7e7      	b.n	800a710 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800a740:	6a2a      	ldr	r2, [r5, #32]
 800a742:	fbb2 f1f3 	udiv	r1, r2, r3
 800a746:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800a74a:	f1ba 0f00 	cmp.w	sl, #0
 800a74e:	bf08      	it	eq
 800a750:	469a      	moveq	sl, r3
 800a752:	e7d4      	b.n	800a6fe <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800a754:	f8cd 9000 	str.w	r9, [sp]
 800a758:	4629      	mov	r1, r5
 800a75a:	9307      	str	r3, [sp, #28]
 800a75c:	4620      	mov	r0, r4
 800a75e:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800a760:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a762:	f108 0801 	add.w	r8, r8, #1
 800a766:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800a768:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800a76a:	e7dd      	b.n	800a728 <decompress_data+0xc8>

0800a76c <start_output_pass>:
{
 800a76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a770:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800a774:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800a776:	692b      	ldr	r3, [r5, #16]
 800a778:	b323      	cbz	r3, 800a7c4 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800a77a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d04b      	beq.n	800a818 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800a780:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d047      	beq.n	800a818 <start_output_pass+0xac>
 800a788:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d043      	beq.n	800a818 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800a790:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a792:	b93b      	cbnz	r3, 800a7a4 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a794:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800a796:	2118      	movs	r1, #24
 800a798:	6843      	ldr	r3, [r0, #4]
 800a79a:	434a      	muls	r2, r1
 800a79c:	2101      	movs	r1, #1
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800a7a2:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a7a4:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800a7a6:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a7aa:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800a7ae:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800a7b2:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a7b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a7b6:	fb0e c703 	mla	r7, lr, r3, ip
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	db07      	blt.n	800a7ce <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800a7be:	b359      	cbz	r1, 800a818 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800a7c0:	4b16      	ldr	r3, [pc, #88]	; (800a81c <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800a7c2:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800a7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800a7ce:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a7d0:	b312      	cbz	r2, 800a818 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800a7d2:	8816      	ldrh	r6, [r2, #0]
 800a7d4:	b306      	cbz	r6, 800a818 <start_output_pass+0xac>
 800a7d6:	8856      	ldrh	r6, [r2, #2]
 800a7d8:	b1f6      	cbz	r6, 800a818 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800a7da:	8a16      	ldrh	r6, [r2, #16]
 800a7dc:	b1e6      	cbz	r6, 800a818 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800a7de:	8c16      	ldrh	r6, [r2, #32]
 800a7e0:	b1d6      	cbz	r6, 800a818 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800a7e2:	8a56      	ldrh	r6, [r2, #18]
 800a7e4:	b1c6      	cbz	r6, 800a818 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800a7e6:	8892      	ldrh	r2, [r2, #4]
 800a7e8:	b1b2      	cbz	r2, 800a818 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800a7ea:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800a7ee:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800a7f0:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800a7f2:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800a7f6:	2a00      	cmp	r2, #0
 800a7f8:	db0e      	blt.n	800a818 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800a7fa:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800a7fc:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800a800:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800a802:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800a806:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800a80a:	bf18      	it	ne
 800a80c:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800a80e:	2a06      	cmp	r2, #6
 800a810:	d1f4      	bne.n	800a7fc <start_output_pass+0x90>
       ci++, compptr++) {
 800a812:	3301      	adds	r3, #1
 800a814:	3058      	adds	r0, #88	; 0x58
 800a816:	e7cd      	b.n	800a7b4 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800a818:	4b01      	ldr	r3, [pc, #4]	; (800a820 <start_output_pass+0xb4>)
 800a81a:	e7d2      	b.n	800a7c2 <start_output_pass+0x56>
 800a81c:	0800a9a3 	.word	0x0800a9a3
 800a820:	0800a661 	.word	0x0800a661

0800a824 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a824:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a82c:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a82e:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800a832:	4604      	mov	r4, r0
 800a834:	ed2d 8b02 	vpush	{d8}
 800a838:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800a83a:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a83c:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800a840:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a842:	3b01      	subs	r3, #1
 800a844:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a846:	69ab      	ldr	r3, [r5, #24]
 800a848:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a84a:	f105 0320 	add.w	r3, r5, #32
 800a84e:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a852:	69eb      	ldr	r3, [r5, #28]
 800a854:	9a03      	ldr	r2, [sp, #12]
 800a856:	4293      	cmp	r3, r2
 800a858:	dc13      	bgt.n	800a882 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800a85a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a85e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800a862:	3301      	adds	r3, #1
 800a864:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a868:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a86c:	3301      	adds	r3, #1
 800a86e:	4293      	cmp	r3, r2
 800a870:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a874:	f080 808e 	bcs.w	800a994 <decompress_onepass+0x170>
    start_iMCU_row(cinfo);
 800a878:	4620      	mov	r0, r4
 800a87a:	f7ff fe39 	bl	800a4f0 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800a87e:	2003      	movs	r0, #3
 800a880:	e02a      	b.n	800a8d8 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800a882:	696f      	ldr	r7, [r5, #20]
 800a884:	9b08      	ldr	r3, [sp, #32]
 800a886:	429f      	cmp	r7, r3
 800a888:	d905      	bls.n	800a896 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800a88e:	9b03      	ldr	r3, [sp, #12]
 800a890:	3301      	adds	r3, #1
 800a892:	9303      	str	r3, [sp, #12]
 800a894:	e7dd      	b.n	800a852 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800a896:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a89a:	b133      	cbz	r3, 800a8aa <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800a89c:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	6a28      	ldr	r0, [r5, #32]
 800a8a4:	01d2      	lsls	r2, r2, #7
 800a8a6:	f01d feb1 	bl	802860c <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a8aa:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800a8ae:	ee18 1a10 	vmov	r1, s16
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	4798      	blx	r3
 800a8b8:	b158      	cbz	r0, 800a8d2 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a8ba:	f04f 0b00 	mov.w	fp, #0
 800a8be:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 800a8c2:	46da      	mov	sl, fp
 800a8c4:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a8c6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a8ca:	455b      	cmp	r3, fp
 800a8cc:	dc09      	bgt.n	800a8e2 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800a8ce:	3701      	adds	r7, #1
 800a8d0:	e7d8      	b.n	800a884 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800a8d2:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 800a8d4:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800a8d8:	b00f      	add	sp, #60	; 0x3c
 800a8da:	ecbd 8b02 	vpop	{d8}
 800a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800a8e2:	9b05      	ldr	r3, [sp, #20]
 800a8e4:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8e8:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 800a8ea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a8ec:	b923      	cbnz	r3, 800a8f8 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800a8ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8f0:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a8f2:	f10b 0b01 	add.w	fp, fp, #1
 800a8f6:	e7e6      	b.n	800a8c6 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a8f8:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a8fa:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a8fe:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800a902:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800a904:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800a90c:	9b08      	ldr	r3, [sp, #32]
 800a90e:	429f      	cmp	r7, r3
 800a910:	bf34      	ite	cc
 800a912:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800a914:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800a916:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 800a918:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a91a:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800a91c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a91e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a922:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800a926:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800a928:	437a      	muls	r2, r7
 800a92a:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a92c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800a92e:	4542      	cmp	r2, r8
 800a930:	dddf      	ble.n	800a8f2 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800a932:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a936:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a938:	4282      	cmp	r2, r0
 800a93a:	d304      	bcc.n	800a946 <decompress_onepass+0x122>
 800a93c:	9a03      	ldr	r2, [sp, #12]
 800a93e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800a940:	4442      	add	r2, r8
 800a942:	4290      	cmp	r0, r2
 800a944:	dd0b      	ble.n	800a95e <decompress_onepass+0x13a>
 800a946:	f10a 0908 	add.w	r9, sl, #8
 800a94a:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800a94e:	f04f 0900 	mov.w	r9, #0
 800a952:	9207      	str	r2, [sp, #28]
 800a954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a956:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a958:	9a06      	ldr	r2, [sp, #24]
 800a95a:	4591      	cmp	r9, r2
 800a95c:	db07      	blt.n	800a96e <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800a95e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a960:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 800a964:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800a966:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800a968:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800a96c:	e7de      	b.n	800a92c <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800a96e:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a970:	f109 0901 	add.w	r9, r9, #1
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800a974:	f850 2b04 	ldr.w	r2, [r0], #4
 800a978:	9007      	str	r0, [sp, #28]
	      (*inverse_DCT) (cinfo, compptr,
 800a97a:	9804      	ldr	r0, [sp, #16]
 800a97c:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 800a980:	9000      	str	r0, [sp, #0]
 800a982:	4620      	mov	r0, r4
 800a984:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800a986:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a988:	9b04      	ldr	r3, [sp, #16]
 800a98a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800a98c:	4413      	add	r3, r2
 800a98e:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800a990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a992:	e7e1      	b.n	800a958 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800a994:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a998:	4620      	mov	r0, r4
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800a99e:	2004      	movs	r0, #4
 800a9a0:	e79a      	b.n	800a8d8 <decompress_onepass+0xb4>

0800a9a2 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800a9a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a9a6:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800a9aa:	b0c5      	sub	sp, #276	; 0x114
 800a9ac:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a9ae:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800a9b2:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a9b4:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800a9b6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a9ba:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a9be:	428b      	cmp	r3, r1
 800a9c0:	dc03      	bgt.n	800a9ca <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800a9c2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800a9c6:	6950      	ldr	r0, [r2, #20]
 800a9c8:	b1a8      	cbz	r0, 800a9f6 <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a9ca:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a9cc:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800a9d0:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	9303      	str	r3, [sp, #12]
 800a9d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9d8:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800a9da:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a9de:	428b      	cmp	r3, r1
 800a9e0:	dc1e      	bgt.n	800aa20 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800a9e2:	3201      	adds	r2, #1
 800a9e4:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 800a9e8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800a9ec:	4282      	cmp	r2, r0
 800a9ee:	bf2c      	ite	cs
 800a9f0:	2004      	movcs	r0, #4
 800a9f2:	2003      	movcc	r0, #3
 800a9f4:	e011      	b.n	800aa1a <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800a9f6:	428b      	cmp	r3, r1
 800a9f8:	d10a      	bne.n	800aa10 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800a9fa:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800a9fe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800aa02:	2900      	cmp	r1, #0
 800aa04:	bf08      	it	eq
 800aa06:	3301      	addeq	r3, #1
 800aa08:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800aa0c:	4299      	cmp	r1, r3
 800aa0e:	d8dc      	bhi.n	800a9ca <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800aa10:	6813      	ldr	r3, [r2, #0]
 800aa12:	4620      	mov	r0, r4
 800aa14:	4798      	blx	r3
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d1cd      	bne.n	800a9b6 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800aa1a:	b045      	add	sp, #276	; 0x114
 800aa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800aa20:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800aa22:	b923      	cbnz	r3, 800aa2e <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	3558      	adds	r5, #88	; 0x58
 800aa28:	3301      	adds	r3, #1
 800aa2a:	9303      	str	r3, [sp, #12]
 800aa2c:	e7d3      	b.n	800a9d6 <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800aa2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 800aa30:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800aa32:	4293      	cmp	r3, r2
 800aa34:	f240 815a 	bls.w	800acec <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800aa38:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800aa3a:	4681      	mov	r9, r0
      last_row = FALSE;
 800aa3c:	2100      	movs	r1, #0
      last_row = TRUE;
 800aa3e:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 800aa40:	6861      	ldr	r1, [r4, #4]
 800aa42:	9e03      	ldr	r6, [sp, #12]
 800aa44:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800aa48:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aa4a:	3148      	adds	r1, #72	; 0x48
 800aa4c:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800aa50:	2a00      	cmp	r2, #0
 800aa52:	f000 8159 	beq.w	800ad08 <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 800aa56:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800aa58:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800aa5a:	4403      	add	r3, r0
 800aa5c:	4342      	muls	r2, r0
 800aa5e:	4620      	mov	r0, r4
 800aa60:	9600      	str	r6, [sp, #0]
 800aa62:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800aa64:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800aa66:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800aa68:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800aa6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aa6e:	2218      	movs	r2, #24
 800aa70:	9903      	ldr	r1, [sp, #12]
 800aa72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800aa74:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800aa76:	fb02 3301 	mla	r3, r2, r1, r3
 800aa7a:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800aa7c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800aa7e:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800aa80:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800aa84:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800aa88:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800aa8a:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800aa8c:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800aa8e:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800aa90:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800aa94:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800aa9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa9e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800aaa2:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800aaa4:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800aaa8:	9313      	str	r3, [sp, #76]	; 0x4c
 800aaaa:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800aaae:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800aab0:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800aab4:	9315      	str	r3, [sp, #84]	; 0x54
 800aab6:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800aaba:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800aabc:	01f3      	lsls	r3, r6, #7
 800aabe:	9317      	str	r3, [sp, #92]	; 0x5c
 800aac0:	0233      	lsls	r3, r6, #8
 800aac2:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800aac4:	01cb      	lsls	r3, r1, #7
 800aac6:	9319      	str	r3, [sp, #100]	; 0x64
 800aac8:	020b      	lsls	r3, r1, #8
 800aaca:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800aacc:	01d3      	lsls	r3, r2, #7
 800aace:	931b      	str	r3, [sp, #108]	; 0x6c
 800aad0:	0213      	lsls	r3, r2, #8
 800aad2:	931c      	str	r3, [sp, #112]	; 0x70
 800aad4:	1f03      	subs	r3, r0, #4
 800aad6:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 800aad8:	2300      	movs	r3, #0
 800aada:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 800aadc:	f109 33ff 	add.w	r3, r9, #4294967295
 800aae0:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800aae2:	9b04      	ldr	r3, [sp, #16]
 800aae4:	454b      	cmp	r3, r9
 800aae6:	da9d      	bge.n	800aa24 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 800aae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaea:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800aaee:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 800aaf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aaf2:	b11b      	cbz	r3, 800aafc <decompress_smooth_data+0x15a>
 800aaf4:	9b04      	ldr	r3, [sp, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 810c 	beq.w	800ad14 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 800aafc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aafe:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ab02:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 800ab04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab06:	b123      	cbz	r3, 800ab12 <decompress_smooth_data+0x170>
 800ab08:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab0a:	9a04      	ldr	r2, [sp, #16]
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	f000 8104 	beq.w	800ad1a <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 800ab12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800ab18:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800ab1a:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800ab1c:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800ab1e:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800ab22:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800ab24:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800ab26:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800ab2a:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800ab2c:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800ab2e:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800ab30:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800ab32:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800ab36:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800ab3a:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800ab3c:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800ab3e:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800ab42:	2201      	movs	r2, #1
 800ab44:	a924      	add	r1, sp, #144	; 0x90
 800ab46:	4640      	mov	r0, r8
 800ab48:	930a      	str	r3, [sp, #40]	; 0x28
 800ab4a:	f00b fe0e 	bl	801676a <jcopy_block_row>
	if (block_num < last_block_column) {
 800ab4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab52:	4293      	cmp	r3, r2
 800ab54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab56:	f240 80ea 	bls.w	800ad2e <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800ab5a:	9a07      	ldr	r2, [sp, #28]
 800ab5c:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800ab60:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 800ab62:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 800ab66:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 800ab68:	9a08      	ldr	r2, [sp, #32]
 800ab6a:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800ab6e:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800ab70:	9a05      	ldr	r2, [sp, #20]
 800ab72:	6851      	ldr	r1, [r2, #4]
 800ab74:	b1c1      	cbz	r1, 800aba8 <decompress_smooth_data+0x206>
 800ab76:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800ab7a:	b9aa      	cbnz	r2, 800aba8 <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800ab7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ab7e:	1a3a      	subs	r2, r7, r0
 800ab80:	9806      	ldr	r0, [sp, #24]
 800ab82:	4342      	muls	r2, r0
	  if (num >= 0) {
 800ab84:	2024      	movs	r0, #36	; 0x24
 800ab86:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800ab88:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800ab8a:	f100 80d7 	bmi.w	800ad3c <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800ab8e:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ab90:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800ab92:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ab94:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ab98:	dd04      	ble.n	800aba4 <decompress_smooth_data+0x202>
 800ab9a:	fa06 f101 	lsl.w	r1, r6, r1
 800ab9e:	4291      	cmp	r1, r2
 800aba0:	dc00      	bgt.n	800aba4 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 800aba2:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800aba4:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800aba8:	9a05      	ldr	r2, [sp, #20]
 800abaa:	6891      	ldr	r1, [r2, #8]
 800abac:	b1c9      	cbz	r1, 800abe2 <decompress_smooth_data+0x240>
 800abae:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800abb2:	b9b2      	cbnz	r2, 800abe2 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 800abb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abb6:	9806      	ldr	r0, [sp, #24]
 800abb8:	ebab 0202 	sub.w	r2, fp, r2
 800abbc:	4342      	muls	r2, r0
	  if (num >= 0) {
 800abbe:	2024      	movs	r0, #36	; 0x24
 800abc0:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800abc2:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 800abc4:	f100 80c8 	bmi.w	800ad58 <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800abc8:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800abca:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800abcc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800abce:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800abd2:	dd04      	ble.n	800abde <decompress_smooth_data+0x23c>
 800abd4:	fa06 f101 	lsl.w	r1, r6, r1
 800abd8:	4291      	cmp	r1, r2
 800abda:	dc00      	bgt.n	800abde <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 800abdc:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800abde:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800abe2:	9a05      	ldr	r2, [sp, #20]
 800abe4:	68d1      	ldr	r1, [r2, #12]
 800abe6:	b1d1      	cbz	r1, 800ac1e <decompress_smooth_data+0x27c>
 800abe8:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800abec:	b9ba      	cbnz	r2, 800ac1e <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800abee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf0:	9806      	ldr	r0, [sp, #24]
 800abf2:	445a      	add	r2, fp
 800abf4:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800abf8:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800abfa:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 800abfc:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800ac00:	f100 80b8 	bmi.w	800ad74 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800ac04:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ac06:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800ac08:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ac0a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ac0e:	dd04      	ble.n	800ac1a <decompress_smooth_data+0x278>
 800ac10:	fa06 f101 	lsl.w	r1, r6, r1
 800ac14:	4291      	cmp	r1, r2
 800ac16:	dc00      	bgt.n	800ac1a <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 800ac18:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800ac1a:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800ac1e:	9a05      	ldr	r2, [sp, #20]
 800ac20:	6912      	ldr	r2, [r2, #16]
 800ac22:	b1e2      	cbz	r2, 800ac5e <decompress_smooth_data+0x2bc>
 800ac24:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800ac28:	b9c9      	cbnz	r1, 800ac5e <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800ac2a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ac2c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ac2e:	1a09      	subs	r1, r1, r0
 800ac30:	1acb      	subs	r3, r1, r3
 800ac32:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac34:	440b      	add	r3, r1
 800ac36:	9906      	ldr	r1, [sp, #24]
 800ac38:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800ac3a:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 800ac3c:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800ac40:	f100 80a6 	bmi.w	800ad90 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800ac44:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800ac46:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800ac48:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ac4a:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800ac4e:	dd04      	ble.n	800ac5a <decompress_smooth_data+0x2b8>
 800ac50:	fa06 f202 	lsl.w	r2, r6, r2
 800ac54:	429a      	cmp	r2, r3
 800ac56:	dc00      	bgt.n	800ac5a <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 800ac58:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800ac5a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800ac5e:	9b05      	ldr	r3, [sp, #20]
 800ac60:	695a      	ldr	r2, [r3, #20]
 800ac62:	b1da      	cbz	r2, 800ac9c <decompress_smooth_data+0x2fa>
 800ac64:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800ac68:	b9c3      	cbnz	r3, 800ac9c <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800ac6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac6c:	463b      	mov	r3, r7
 800ac6e:	440b      	add	r3, r1
 800ac70:	9906      	ldr	r1, [sp, #24]
 800ac72:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800ac76:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800ac78:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 800ac7a:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800ac7e:	f100 8095 	bmi.w	800adac <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800ac82:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800ac84:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800ac86:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ac88:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800ac8c:	dd04      	ble.n	800ac98 <decompress_smooth_data+0x2f6>
 800ac8e:	fa06 f202 	lsl.w	r2, r6, r2
 800ac92:	429a      	cmp	r2, r3
 800ac94:	dc00      	bgt.n	800ac98 <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 800ac96:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800ac98:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800ac9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac9e:	aa24      	add	r2, sp, #144	; 0x90
 800aca0:	4629      	mov	r1, r5
 800aca2:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	4620      	mov	r0, r4
 800aca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 800acaa:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800acae:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 800acb0:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800acb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acb4:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800acb6:	3380      	adds	r3, #128	; 0x80
 800acb8:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800acbc:	9307      	str	r3, [sp, #28]
 800acbe:	9b08      	ldr	r3, [sp, #32]
 800acc0:	3380      	adds	r3, #128	; 0x80
 800acc2:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 800acc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800acc6:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800acc8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 800acca:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800accc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acce:	3301      	adds	r3, #1
 800acd0:	930c      	str	r3, [sp, #48]	; 0x30
 800acd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800acd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd6:	428a      	cmp	r2, r1
 800acd8:	d222      	bcs.n	800ad20 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 800acda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800acde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ace2:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ace4:	9b04      	ldr	r3, [sp, #16]
 800ace6:	3301      	adds	r3, #1
 800ace8:	9304      	str	r3, [sp, #16]
 800acea:	e6fa      	b.n	800aae2 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800acec:	6a2b      	ldr	r3, [r5, #32]
 800acee:	fbb3 f1f0 	udiv	r1, r3, r0
 800acf2:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800acf6:	f1b9 0f00 	cmp.w	r9, #0
 800acfa:	d103      	bne.n	800ad04 <decompress_smooth_data+0x362>
 800acfc:	4603      	mov	r3, r0
 800acfe:	4681      	mov	r9, r0
      last_row = TRUE;
 800ad00:	2101      	movs	r1, #1
 800ad02:	e69c      	b.n	800aa3e <decompress_smooth_data+0x9c>
 800ad04:	464b      	mov	r3, r9
 800ad06:	e7fb      	b.n	800ad00 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 800ad08:	4620      	mov	r0, r4
 800ad0a:	9200      	str	r2, [sp, #0]
 800ad0c:	47c0      	blx	r8
      first_row = TRUE;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	931d      	str	r3, [sp, #116]	; 0x74
 800ad12:	e6ab      	b.n	800aa6c <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 800ad14:	f8cd 801c 	str.w	r8, [sp, #28]
 800ad18:	e6f4      	b.n	800ab04 <decompress_smooth_data+0x162>
 800ad1a:	f8cd 8020 	str.w	r8, [sp, #32]
 800ad1e:	e6fb      	b.n	800ab18 <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 800ad20:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 800ad22:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 800ad26:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 800ad2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad2c:	e709      	b.n	800ab42 <decompress_smooth_data+0x1a0>
 800ad2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad30:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800ad34:	9211      	str	r2, [sp, #68]	; 0x44
 800ad36:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800ad3a:	e719      	b.n	800ab70 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800ad3c:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800ad3e:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800ad40:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ad42:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ad46:	dd05      	ble.n	800ad54 <decompress_smooth_data+0x3b2>
 800ad48:	fa06 f101 	lsl.w	r1, r6, r1
 800ad4c:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800ad4e:	bfd8      	it	le
 800ad50:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800ad54:	4252      	negs	r2, r2
 800ad56:	e725      	b.n	800aba4 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800ad58:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800ad5a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800ad5c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ad5e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ad62:	dd05      	ble.n	800ad70 <decompress_smooth_data+0x3ce>
 800ad64:	fa06 f101 	lsl.w	r1, r6, r1
 800ad68:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800ad6a:	bfd8      	it	le
 800ad6c:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800ad70:	4252      	negs	r2, r2
 800ad72:	e734      	b.n	800abde <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800ad74:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800ad76:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800ad78:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ad7a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800ad7e:	dd05      	ble.n	800ad8c <decompress_smooth_data+0x3ea>
 800ad80:	fa06 f101 	lsl.w	r1, r6, r1
 800ad84:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800ad86:	bfd8      	it	le
 800ad88:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800ad8c:	4252      	negs	r2, r2
 800ad8e:	e744      	b.n	800ac1a <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800ad90:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800ad92:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800ad94:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ad96:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800ad9a:	dd05      	ble.n	800ada8 <decompress_smooth_data+0x406>
 800ad9c:	fa06 f202 	lsl.w	r2, r6, r2
 800ada0:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800ada2:	bfd8      	it	le
 800ada4:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800ada8:	425b      	negs	r3, r3
 800adaa:	e756      	b.n	800ac5a <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800adac:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800adae:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800adb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800adb2:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800adb6:	dd05      	ble.n	800adc4 <decompress_smooth_data+0x422>
 800adb8:	fa06 f202 	lsl.w	r2, r6, r2
 800adbc:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800adbe:	bfd8      	it	le
 800adc0:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800adc4:	425b      	negs	r3, r3
 800adc6:	e767      	b.n	800ac98 <decompress_smooth_data+0x2f6>

0800adc8 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800adc8:	6843      	ldr	r3, [r0, #4]
 800adca:	2274      	movs	r2, #116	; 0x74
{
 800adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800add0:	681b      	ldr	r3, [r3, #0]
{
 800add2:	b085      	sub	sp, #20
 800add4:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800add6:	2101      	movs	r1, #1
{
 800add8:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800adda:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800addc:	4b2c      	ldr	r3, [pc, #176]	; (800ae90 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800adde:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800ade0:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ade4:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800ade6:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800ade8:	f100 0948 	add.w	r9, r0, #72	; 0x48
 800adec:	4b29      	ldr	r3, [pc, #164]	; (800ae94 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 800adee:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800adf0:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800adf2:	b37e      	cbz	r6, 800ae54 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800adf4:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800adf8:	46ca      	mov	sl, r9
 800adfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800adfc:	42bb      	cmp	r3, r7
 800adfe:	dc07      	bgt.n	800ae10 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800ae00:	4b25      	ldr	r3, [pc, #148]	; (800ae98 <jinit_d_coef_controller+0xd0>)
 800ae02:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 800ae04:	4b25      	ldr	r3, [pc, #148]	; (800ae9c <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800ae06:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800ae0a:	b005      	add	sp, #20
 800ae0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800ae10:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800ae14:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 800ae18:	b10b      	cbz	r3, 800ae1e <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800ae1a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800ae1e:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800ae20:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800ae22:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800ae24:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800ae26:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800ae2a:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800ae2e:	f00b fc82 	bl	8016736 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800ae32:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800ae36:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800ae38:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800ae3c:	f00b fc7b 	bl	8016736 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800ae40:	2201      	movs	r2, #1
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	4611      	mov	r1, r2
 800ae46:	e9cd 0800 	strd	r0, r8, [sp]
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	47d8      	blx	fp
 800ae4e:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 800ae52:	e7d2      	b.n	800adfa <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae54:	686b      	ldr	r3, [r5, #4]
 800ae56:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800ae62:	f104 0320 	add.w	r3, r4, #32
 800ae66:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800ae68:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800ae6c:	454b      	cmp	r3, r9
 800ae6e:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800ae72:	d1f9      	bne.n	800ae68 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800ae74:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800ae78:	b919      	cbnz	r1, 800ae82 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800ae7a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800ae7e:	f01d fbc5 	bl	802860c <memset>
    coef->pub.consume_data = dummy_consume_data;
 800ae82:	4b07      	ldr	r3, [pc, #28]	; (800aea0 <jinit_d_coef_controller+0xd8>)
 800ae84:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 800ae86:	4b07      	ldr	r3, [pc, #28]	; (800aea4 <jinit_d_coef_controller+0xdc>)
 800ae88:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	6123      	str	r3, [r4, #16]
}
 800ae8e:	e7bc      	b.n	800ae0a <jinit_d_coef_controller+0x42>
 800ae90:	0800a521 	.word	0x0800a521
 800ae94:	0800a76d 	.word	0x0800a76d
 800ae98:	0800a52f 	.word	0x0800a52f
 800ae9c:	0800a661 	.word	0x0800a661
 800aea0:	0800a52b 	.word	0x0800a52b
 800aea4:	0800a825 	.word	0x0800a825

0800aea8 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aea8:	6843      	ldr	r3, [r0, #4]
 800aeaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aeae:	2101      	movs	r1, #1
 800aeb0:	681b      	ldr	r3, [r3, #0]
{
 800aeb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb6:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800aeb8:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aebc:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aec2:	6863      	ldr	r3, [r4, #4]
 800aec4:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800aec6:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aec8:	4620      	mov	r0, r4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aece:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800aed0:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2101      	movs	r1, #1
 800aeda:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800aedc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800af5c <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aee0:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aee2:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800aee4:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aee6:	2101      	movs	r1, #1
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4620      	mov	r0, r4
 800aeec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800aef0:	4f17      	ldr	r7, [pc, #92]	; (800af50 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aef2:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800aef4:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800aef6:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800aef8:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800aefa:	f8df e064 	ldr.w	lr, [pc, #100]	; 800af60 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800aefe:	4915      	ldr	r1, [pc, #84]	; (800af54 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800af00:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800af04:	4d14      	ldr	r5, [pc, #80]	; (800af58 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800af06:	fb08 e203 	mla	r2, r8, r3, lr
 800af0a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800af0c:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800af10:	fb07 f203 	mul.w	r2, r7, r3
 800af14:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800af18:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800af1c:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800af1e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800af22:	fb05 f203 	mul.w	r2, r5, r3
 800af26:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800af2a:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800af2e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800af32:	fb01 f203 	mul.w	r2, r1, r3
 800af36:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800af3a:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800af3e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800af42:	3301      	adds	r3, #1
 800af44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af48:	d1dd      	bne.n	800af06 <build_ycc_rgb_table+0x5e>
  }
}
 800af4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af4e:	bf00      	nop
 800af50:	0001c5a2 	.word	0x0001c5a2
 800af54:	ffffa7e6 	.word	0xffffa7e6
 800af58:	ffff492e 	.word	0xffff492e
 800af5c:	000166e9 	.word	0x000166e9
 800af60:	ff4d0b80 	.word	0xff4d0b80

0800af64 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800af64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800af68:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800af6c:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800af6e:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800af70:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800af74:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800af78:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800af7c:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800af7e:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800af80:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800af82:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800af86:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800af88:	6920      	ldr	r0, [r4, #16]
 800af8a:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800af8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af8e:	3a01      	subs	r2, #1
 800af90:	9210      	str	r2, [sp, #64]	; 0x40
 800af92:	d502      	bpl.n	800af9a <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800af94:	b007      	add	sp, #28
 800af96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800af9a:	9a05      	ldr	r2, [sp, #20]
 800af9c:	680c      	ldr	r4, [r1, #0]
 800af9e:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800afa0:	f853 0b04 	ldr.w	r0, [r3], #4
 800afa4:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800afa8:	684c      	ldr	r4, [r1, #4]
 800afaa:	5964      	ldr	r4, [r4, r5]
 800afac:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800afb0:	688c      	ldr	r4, [r1, #8]
 800afb2:	5967      	ldr	r7, [r4, r5]
 800afb4:	9c01      	ldr	r4, [sp, #4]
 800afb6:	3f01      	subs	r7, #1
 800afb8:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800afbc:	45d0      	cmp	r8, sl
 800afbe:	f100 0003 	add.w	r0, r0, #3
 800afc2:	d0e3      	beq.n	800af8c <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800afc4:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800afc8:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800afcc:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800afce:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800afd2:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800afd6:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800afd8:	fa0f fb8b 	sxth.w	fp, fp
 800afdc:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800afde:	5d65      	ldrb	r5, [r4, r5]
 800afe0:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800afe4:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800afe8:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800afec:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800afee:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800aff0:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800aff2:	5d65      	ldrb	r5, [r4, r5]
 800aff4:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800aff8:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800affc:	5d64      	ldrb	r4, [r4, r5]
 800affe:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800b002:	e7db      	b.n	800afbc <ycc_rgb_convert+0x58>

0800b004 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b008:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800b00c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800b010:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b012:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b014:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b016:	3d01      	subs	r5, #1
 800b018:	d501      	bpl.n	800b01e <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800b01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b01e:	189c      	adds	r4, r3, r2
 800b020:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800b022:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800b026:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800b02a:	6848      	ldr	r0, [r1, #4]
 800b02c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800b030:	6888      	ldr	r0, [r1, #8]
 800b032:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800b036:	2000      	movs	r0, #0
 800b038:	42b8      	cmp	r0, r7
 800b03a:	d0ec      	beq.n	800b016 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800b03c:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800b040:	f81c b000 	ldrb.w	fp, [ip, r0]
 800b044:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800b048:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800b04c:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800b050:	4454      	add	r4, sl
 800b052:	f818 a000 	ldrb.w	sl, [r8, r0]
 800b056:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800b05a:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800b05e:	4454      	add	r4, sl
		 >> SCALEBITS);
 800b060:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800b062:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800b066:	3001      	adds	r0, #1
 800b068:	e7e6      	b.n	800b038 <rgb_gray_convert+0x34>

0800b06a <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800b06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b06e:	9d06      	ldr	r5, [sp, #24]
 800b070:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b074:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b076:	3d01      	subs	r5, #1
 800b078:	d501      	bpl.n	800b07e <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800b07e:	1898      	adds	r0, r3, r2
 800b080:	680c      	ldr	r4, [r1, #0]
 800b082:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800b084:	684c      	ldr	r4, [r1, #4]
 800b086:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800b08a:	688c      	ldr	r4, [r1, #8]
 800b08c:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800b090:	2000      	movs	r0, #0
 800b092:	f853 4b04 	ldr.w	r4, [r3], #4
 800b096:	42b0      	cmp	r0, r6
 800b098:	f104 0403 	add.w	r4, r4, #3
 800b09c:	d0eb      	beq.n	800b076 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800b09e:	f817 8000 	ldrb.w	r8, [r7, r0]
 800b0a2:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800b0a6:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800b0aa:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800b0ae:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800b0b2:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800b0b4:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800b0b8:	e7ed      	b.n	800b096 <rgb_convert+0x2c>

0800b0ba <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800b0ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0be:	9e07      	ldr	r6, [sp, #28]
 800b0c0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800b0c4:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800b0c6:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800b0ca:	3e01      	subs	r6, #1
 800b0cc:	d418      	bmi.n	800b100 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800b0ce:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e00a      	b.n	800b0ec <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800b0d6:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b0da:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800b0de:	681c      	ldr	r4, [r3, #0]
 800b0e0:	eb05 080e 	add.w	r8, r5, lr
 800b0e4:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800b0e6:	4545      	cmp	r5, r8
 800b0e8:	d104      	bne.n	800b0f4 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800b0ea:	3001      	adds	r0, #1
 800b0ec:	42b8      	cmp	r0, r7
 800b0ee:	dbf2      	blt.n	800b0d6 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	e7ea      	b.n	800b0ca <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800b0f4:	f815 9b01 	ldrb.w	r9, [r5], #1
 800b0f8:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800b0fc:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800b0fe:	e7f2      	b.n	800b0e6 <null_convert+0x2c>
  }
}
 800b100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b104 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b106:	9d05      	ldr	r5, [sp, #20]
 800b108:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b10c:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b10e:	3d01      	subs	r5, #1
 800b110:	d500      	bpl.n	800b114 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800b114:	6808      	ldr	r0, [r1, #0]
 800b116:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800b118:	f853 0b04 	ldr.w	r0, [r3], #4
 800b11c:	58a4      	ldr	r4, [r4, r2]
 800b11e:	eb04 0c07 	add.w	ip, r4, r7
 800b122:	4564      	cmp	r4, ip
 800b124:	f100 0003 	add.w	r0, r0, #3
 800b128:	d0f1      	beq.n	800b10e <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800b12a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800b12e:	f800 6c03 	strb.w	r6, [r0, #-3]
 800b132:	f800 6c02 	strb.w	r6, [r0, #-2]
 800b136:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800b13a:	e7f2      	b.n	800b122 <gray_rgb_convert+0x1e>

0800b13c <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800b13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b140:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b144:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b146:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b148:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b14c:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b150:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800b154:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b156:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800b15a:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b15c:	6920      	ldr	r0, [r4, #16]
 800b15e:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b160:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b162:	3a01      	subs	r2, #1
 800b164:	9210      	str	r2, [sp, #64]	; 0x40
 800b166:	d502      	bpl.n	800b16e <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800b168:	b007      	add	sp, #28
 800b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b16e:	eb03 0008 	add.w	r0, r3, r8
 800b172:	680a      	ldr	r2, [r1, #0]
 800b174:	f853 5b04 	ldr.w	r5, [r3], #4
 800b178:	5812      	ldr	r2, [r2, r0]
 800b17a:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800b17c:	684a      	ldr	r2, [r1, #4]
 800b17e:	5812      	ldr	r2, [r2, r0]
 800b180:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800b182:	688a      	ldr	r2, [r1, #8]
 800b184:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800b188:	68ca      	ldr	r2, [r1, #12]
 800b18a:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800b18e:	2200      	movs	r2, #0
 800b190:	9800      	ldr	r0, [sp, #0]
 800b192:	3504      	adds	r5, #4
 800b194:	4282      	cmp	r2, r0
 800b196:	d0e3      	beq.n	800b160 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b198:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800b19c:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800b19e:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800b1a0:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800b1a4:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b1a6:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b1aa:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b1ae:	4404      	add	r4, r0
 800b1b0:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b1b4:	5d34      	ldrb	r4, [r6, r4]
 800b1b6:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b1ba:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800b1be:	9405      	str	r4, [sp, #20]
 800b1c0:	9c02      	ldr	r4, [sp, #8]
 800b1c2:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800b1c6:	9c05      	ldr	r4, [sp, #20]
 800b1c8:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800b1ca:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800b1ce:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b1d2:	5d34      	ldrb	r4, [r6, r4]
 800b1d4:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800b1d8:	9c01      	ldr	r4, [sp, #4]
 800b1da:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800b1de:	4420      	add	r0, r4
 800b1e0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b1e4:	5c30      	ldrb	r0, [r6, r0]
 800b1e6:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b1ea:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800b1ee:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b1f0:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800b1f4:	e7cc      	b.n	800b190 <ycck_cmyk_convert+0x54>

0800b1f6 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800b1f6:	4770      	bx	lr

0800b1f8 <grayscale_convert>:
{
 800b1f8:	b513      	push	{r0, r1, r4, lr}
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800b200:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800b202:	6820      	ldr	r0, [r4, #0]
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	9b04      	ldr	r3, [sp, #16]
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	2300      	movs	r3, #0
 800b20c:	f00b fa9b 	bl	8016746 <jcopy_sample_rows>
}
 800b210:	b002      	add	sp, #8
 800b212:	bd10      	pop	{r4, pc}

0800b214 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b214:	6843      	ldr	r3, [r0, #4]
 800b216:	221c      	movs	r2, #28
 800b218:	2101      	movs	r1, #1
 800b21a:	681b      	ldr	r3, [r3, #0]
{
 800b21c:	b570      	push	{r4, r5, r6, lr}
 800b21e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b220:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800b222:	4b4a      	ldr	r3, [pc, #296]	; (800b34c <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b224:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800b226:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800b22a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800b22c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b230:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b232:	2b03      	cmp	r3, #3
 800b234:	d821      	bhi.n	800b27a <jinit_color_deconverter+0x66>
 800b236:	2b01      	cmp	r3, #1
 800b238:	d82d      	bhi.n	800b296 <jinit_color_deconverter+0x82>
 800b23a:	d023      	beq.n	800b284 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800b23c:	2a00      	cmp	r2, #0
 800b23e:	dd23      	ble.n	800b288 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800b240:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b244:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800b248:	2902      	cmp	r1, #2
 800b24a:	d055      	beq.n	800b2f8 <jinit_color_deconverter+0xe4>
 800b24c:	2904      	cmp	r1, #4
 800b24e:	d066      	beq.n	800b31e <jinit_color_deconverter+0x10a>
 800b250:	2901      	cmp	r1, #1
 800b252:	d16d      	bne.n	800b330 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b254:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800b258:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b25a:	2a01      	cmp	r2, #1
 800b25c:	d124      	bne.n	800b2a8 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800b25e:	4b3c      	ldr	r3, [pc, #240]	; (800b350 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800b260:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b262:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800b264:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b266:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800b268:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b26a:	4299      	cmp	r1, r3
 800b26c:	dc15      	bgt.n	800b29a <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800b26e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b270:	2b00      	cmp	r3, #0
 800b272:	d169      	bne.n	800b348 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800b274:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b276:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800b278:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800b27a:	3b04      	subs	r3, #4
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d8dd      	bhi.n	800b23c <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800b280:	2a04      	cmp	r2, #4
 800b282:	e000      	b.n	800b286 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800b284:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800b286:	d0db      	beq.n	800b240 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800b288:	6823      	ldr	r3, [r4, #0]
 800b28a:	220b      	movs	r2, #11
 800b28c:	4620      	mov	r0, r4
 800b28e:	615a      	str	r2, [r3, #20]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4798      	blx	r3
 800b294:	e7d4      	b.n	800b240 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800b296:	2a03      	cmp	r2, #3
 800b298:	e7f5      	b.n	800b286 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800b29a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800b29e:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b2a2:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800b2a4:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b2a6:	e7e0      	b.n	800b26a <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d146      	bne.n	800b33a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800b2ac:	4b29      	ldr	r3, [pc, #164]	; (800b354 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b2ae:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b2b2:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b2b4:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800b2b8:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b2ba:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b2bc:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b2c4:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800b2c6:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b2c8:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800b2cc:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b2ce:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b2d2:	fb06 f203 	mul.w	r2, r6, r3
 800b2d6:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b2da:	fb05 f203 	mul.w	r2, r5, r3
 800b2de:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b2e2:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b2e6:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b2e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b2ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b2f0:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b2f4:	d1ed      	bne.n	800b2d2 <jinit_color_deconverter+0xbe>
 800b2f6:	e7ba      	b.n	800b26e <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b2f8:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b2fa:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b2fc:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b2fe:	d105      	bne.n	800b30c <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800b300:	4b15      	ldr	r3, [pc, #84]	; (800b358 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800b302:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b304:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800b306:	f7ff fdcf 	bl	800aea8 <build_ycc_rgb_table>
 800b30a:	e7b0      	b.n	800b26e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d102      	bne.n	800b316 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800b310:	4b12      	ldr	r3, [pc, #72]	; (800b35c <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800b312:	606b      	str	r3, [r5, #4]
 800b314:	e7ab      	b.n	800b26e <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b316:	2b02      	cmp	r3, #2
 800b318:	d10f      	bne.n	800b33a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800b31a:	4b11      	ldr	r3, [pc, #68]	; (800b360 <jinit_color_deconverter+0x14c>)
 800b31c:	e7f9      	b.n	800b312 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b31e:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800b320:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b322:	d101      	bne.n	800b328 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b324:	4b0f      	ldr	r3, [pc, #60]	; (800b364 <jinit_color_deconverter+0x150>)
 800b326:	e7ec      	b.n	800b302 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800b328:	2b04      	cmp	r3, #4
 800b32a:	d106      	bne.n	800b33a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800b32c:	4b0e      	ldr	r3, [pc, #56]	; (800b368 <jinit_color_deconverter+0x154>)
 800b32e:	e7f0      	b.n	800b312 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800b330:	4299      	cmp	r1, r3
 800b332:	d102      	bne.n	800b33a <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800b334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b336:	67a3      	str	r3, [r4, #120]	; 0x78
 800b338:	e7f8      	b.n	800b32c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	221c      	movs	r2, #28
 800b33e:	4620      	mov	r0, r4
 800b340:	615a      	str	r2, [r3, #20]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4798      	blx	r3
 800b346:	e792      	b.n	800b26e <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800b348:	2301      	movs	r3, #1
 800b34a:	e794      	b.n	800b276 <jinit_color_deconverter+0x62>
 800b34c:	0800b1f7 	.word	0x0800b1f7
 800b350:	0800b1f9 	.word	0x0800b1f9
 800b354:	0800b005 	.word	0x0800b005
 800b358:	0800af65 	.word	0x0800af65
 800b35c:	0800b105 	.word	0x0800b105
 800b360:	0800b06b 	.word	0x0800b06b
 800b364:	0800b13d 	.word	0x0800b13d
 800b368:	0800b0bb 	.word	0x0800b0bb

0800b36c <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800b36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b370:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800b374:	2500      	movs	r5, #0
{
 800b376:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b378:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800b37c:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800b380:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b382:	46ab      	mov	fp, r5
{
 800b384:	ed2d 8b04 	vpush	{d8-d9}
 800b388:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38c:	455b      	cmp	r3, fp
 800b38e:	dc04      	bgt.n	800b39a <start_pass+0x2e>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800b390:	b007      	add	sp, #28
 800b392:	ecbd 8b04 	vpop	{d8-d9}
 800b396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b39a:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800b39e:	f240 700e 	movw	r0, #1806	; 0x70e
 800b3a2:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800b3a6:	4283      	cmp	r3, r0
 800b3a8:	f000 80d9 	beq.w	800b55e <start_pass+0x1f2>
 800b3ac:	dc5a      	bgt.n	800b464 <start_pass+0xf8>
 800b3ae:	f240 4004 	movw	r0, #1028	; 0x404
 800b3b2:	4283      	cmp	r3, r0
 800b3b4:	f000 80d6 	beq.w	800b564 <start_pass+0x1f8>
 800b3b8:	dc2f      	bgt.n	800b41a <start_pass+0xae>
 800b3ba:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800b3be:	f000 80d3 	beq.w	800b568 <start_pass+0x1fc>
 800b3c2:	dc1a      	bgt.n	800b3fa <start_pass+0x8e>
 800b3c4:	f240 2001 	movw	r0, #513	; 0x201
 800b3c8:	4283      	cmp	r3, r0
 800b3ca:	f000 80cf 	beq.w	800b56c <start_pass+0x200>
 800b3ce:	dc0e      	bgt.n	800b3ee <start_pass+0x82>
 800b3d0:	f240 1001 	movw	r0, #257	; 0x101
 800b3d4:	4283      	cmp	r3, r0
 800b3d6:	f000 80cb 	beq.w	800b570 <start_pass+0x204>
 800b3da:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800b3de:	f000 80c9 	beq.w	800b574 <start_pass+0x208>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2007      	movs	r0, #7
 800b3e6:	61da      	str	r2, [r3, #28]
 800b3e8:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800b3ec:	e0b3      	b.n	800b556 <start_pass+0x1ea>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b3ee:	f240 2002 	movw	r0, #514	; 0x202
 800b3f2:	4283      	cmp	r3, r0
 800b3f4:	d1f5      	bne.n	800b3e2 <start_pass+0x76>
 800b3f6:	4d9e      	ldr	r5, [pc, #632]	; (800b670 <start_pass+0x304>)
 800b3f8:	e0b2      	b.n	800b560 <start_pass+0x1f4>
 800b3fa:	f240 3006 	movw	r0, #774	; 0x306
 800b3fe:	4283      	cmp	r3, r0
 800b400:	f000 80ba 	beq.w	800b578 <start_pass+0x20c>
 800b404:	f240 4002 	movw	r0, #1026	; 0x402
 800b408:	4283      	cmp	r3, r0
 800b40a:	f000 80b7 	beq.w	800b57c <start_pass+0x210>
 800b40e:	f240 3003 	movw	r0, #771	; 0x303
 800b412:	4283      	cmp	r3, r0
 800b414:	d1e5      	bne.n	800b3e2 <start_pass+0x76>
      method_ptr = jpeg_idct_3x3;
 800b416:	4d97      	ldr	r5, [pc, #604]	; (800b674 <start_pass+0x308>)
 800b418:	e0a2      	b.n	800b560 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b41a:	f240 6003 	movw	r0, #1539	; 0x603
 800b41e:	4283      	cmp	r3, r0
 800b420:	f000 80ae 	beq.w	800b580 <start_pass+0x214>
 800b424:	dc0e      	bgt.n	800b444 <start_pass+0xd8>
 800b426:	f240 5005 	movw	r0, #1285	; 0x505
 800b42a:	4283      	cmp	r3, r0
 800b42c:	f000 80aa 	beq.w	800b584 <start_pass+0x218>
 800b430:	f240 500a 	movw	r0, #1290	; 0x50a
 800b434:	4283      	cmp	r3, r0
 800b436:	f000 80a7 	beq.w	800b588 <start_pass+0x21c>
 800b43a:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800b43e:	d1d0      	bne.n	800b3e2 <start_pass+0x76>
      method_ptr = jpeg_idct_4x8;
 800b440:	4d8d      	ldr	r5, [pc, #564]	; (800b678 <start_pass+0x30c>)
 800b442:	e08d      	b.n	800b560 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b444:	f240 600c 	movw	r0, #1548	; 0x60c
 800b448:	4283      	cmp	r3, r0
 800b44a:	f000 809f 	beq.w	800b58c <start_pass+0x220>
 800b44e:	f240 7007 	movw	r0, #1799	; 0x707
 800b452:	4283      	cmp	r3, r0
 800b454:	f000 809c 	beq.w	800b590 <start_pass+0x224>
 800b458:	f240 6006 	movw	r0, #1542	; 0x606
 800b45c:	4283      	cmp	r3, r0
 800b45e:	d1c0      	bne.n	800b3e2 <start_pass+0x76>
      method_ptr = jpeg_idct_6x6;
 800b460:	4d86      	ldr	r5, [pc, #536]	; (800b67c <start_pass+0x310>)
 800b462:	e07d      	b.n	800b560 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b464:	f640 4006 	movw	r0, #3078	; 0xc06
 800b468:	4283      	cmp	r3, r0
 800b46a:	f000 8093 	beq.w	800b594 <start_pass+0x228>
 800b46e:	dc21      	bgt.n	800b4b4 <start_pass+0x148>
 800b470:	f640 1009 	movw	r0, #2313	; 0x909
 800b474:	4283      	cmp	r3, r0
 800b476:	f000 808f 	beq.w	800b598 <start_pass+0x22c>
 800b47a:	dc0d      	bgt.n	800b498 <start_pass+0x12c>
 800b47c:	f640 0008 	movw	r0, #2056	; 0x808
 800b480:	4283      	cmp	r3, r0
 800b482:	d039      	beq.n	800b4f8 <start_pass+0x18c>
 800b484:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800b488:	f000 8088 	beq.w	800b59c <start_pass+0x230>
 800b48c:	f640 0004 	movw	r0, #2052	; 0x804
 800b490:	4283      	cmp	r3, r0
 800b492:	d1a6      	bne.n	800b3e2 <start_pass+0x76>
      method_ptr = jpeg_idct_8x4;
 800b494:	4d7a      	ldr	r5, [pc, #488]	; (800b680 <start_pass+0x314>)
 800b496:	e063      	b.n	800b560 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b498:	f640 200a 	movw	r0, #2570	; 0xa0a
 800b49c:	4283      	cmp	r3, r0
 800b49e:	d07f      	beq.n	800b5a0 <start_pass+0x234>
 800b4a0:	f640 300b 	movw	r0, #2827	; 0xb0b
 800b4a4:	4283      	cmp	r3, r0
 800b4a6:	d07d      	beq.n	800b5a4 <start_pass+0x238>
 800b4a8:	f640 2005 	movw	r0, #2565	; 0xa05
 800b4ac:	4283      	cmp	r3, r0
 800b4ae:	d198      	bne.n	800b3e2 <start_pass+0x76>
      method_ptr = jpeg_idct_10x5;
 800b4b0:	4d74      	ldr	r5, [pc, #464]	; (800b684 <start_pass+0x318>)
 800b4b2:	e055      	b.n	800b560 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b4b4:	f640 600e 	movw	r0, #3598	; 0xe0e
 800b4b8:	4283      	cmp	r3, r0
 800b4ba:	d075      	beq.n	800b5a8 <start_pass+0x23c>
 800b4bc:	dc0d      	bgt.n	800b4da <start_pass+0x16e>
 800b4be:	f640 500d 	movw	r0, #3341	; 0xd0d
 800b4c2:	4283      	cmp	r3, r0
 800b4c4:	d072      	beq.n	800b5ac <start_pass+0x240>
 800b4c6:	f640 6007 	movw	r0, #3591	; 0xe07
 800b4ca:	4283      	cmp	r3, r0
 800b4cc:	d070      	beq.n	800b5b0 <start_pass+0x244>
 800b4ce:	f640 400c 	movw	r0, #3084	; 0xc0c
 800b4d2:	4283      	cmp	r3, r0
 800b4d4:	d185      	bne.n	800b3e2 <start_pass+0x76>
      method_ptr = jpeg_idct_12x12;
 800b4d6:	4d6c      	ldr	r5, [pc, #432]	; (800b688 <start_pass+0x31c>)
 800b4d8:	e042      	b.n	800b560 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b4da:	f241 0008 	movw	r0, #4104	; 0x1008
 800b4de:	4283      	cmp	r3, r0
 800b4e0:	d068      	beq.n	800b5b4 <start_pass+0x248>
 800b4e2:	f241 0010 	movw	r0, #4112	; 0x1010
 800b4e6:	4283      	cmp	r3, r0
 800b4e8:	d066      	beq.n	800b5b8 <start_pass+0x24c>
 800b4ea:	f640 700f 	movw	r0, #3855	; 0xf0f
 800b4ee:	4283      	cmp	r3, r0
 800b4f0:	f47f af77 	bne.w	800b3e2 <start_pass+0x76>
      method_ptr = jpeg_idct_15x15;
 800b4f4:	4d65      	ldr	r5, [pc, #404]	; (800b68c <start_pass+0x320>)
 800b4f6:	e033      	b.n	800b560 <start_pass+0x1f4>
      switch (cinfo->dct_method) {
 800b4f8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d827      	bhi.n	800b550 <start_pass+0x1e4>
 800b500:	461c      	mov	r4, r3
 800b502:	4b63      	ldr	r3, [pc, #396]	; (800b690 <start_pass+0x324>)
 800b504:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b508:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800b50c:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b510:	b1cb      	cbz	r3, 800b546 <start_pass+0x1da>
 800b512:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b516:	42a3      	cmp	r3, r4
 800b518:	d015      	beq.n	800b546 <start_pass+0x1da>
    qtbl = compptr->quant_table;
 800b51a:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800b51e:	b196      	cbz	r6, 800b546 <start_pass+0x1da>
    switch (method) {
 800b520:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800b522:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800b526:	d049      	beq.n	800b5bc <start_pass+0x250>
 800b528:	2c02      	cmp	r4, #2
 800b52a:	d05a      	beq.n	800b5e2 <start_pass+0x276>
 800b52c:	2c00      	cmp	r4, #0
 800b52e:	f040 8098 	bne.w	800b662 <start_pass+0x2f6>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800b532:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b536:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800b538:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800b53c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b540:	3301      	adds	r3, #1
 800b542:	2b40      	cmp	r3, #64	; 0x40
 800b544:	d1f8      	bne.n	800b538 <start_pass+0x1cc>
       ci++, compptr++) {
 800b546:	f10b 0b01 	add.w	fp, fp, #1
 800b54a:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800b54e:	e71c      	b.n	800b38a <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	2231      	movs	r2, #49	; 0x31
 800b554:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4638      	mov	r0, r7
 800b55a:	4798      	blx	r3
      break;
 800b55c:	e7d4      	b.n	800b508 <start_pass+0x19c>
      method_ptr = jpeg_idct_7x14;
 800b55e:	4d4d      	ldr	r5, [pc, #308]	; (800b694 <start_pass+0x328>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800b560:	2400      	movs	r4, #0
 800b562:	e7d1      	b.n	800b508 <start_pass+0x19c>
      method_ptr = jpeg_idct_4x4;
 800b564:	4d4c      	ldr	r5, [pc, #304]	; (800b698 <start_pass+0x32c>)
 800b566:	e7fb      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x4;
 800b568:	4d4c      	ldr	r5, [pc, #304]	; (800b69c <start_pass+0x330>)
 800b56a:	e7f9      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x1;
 800b56c:	4d4c      	ldr	r5, [pc, #304]	; (800b6a0 <start_pass+0x334>)
 800b56e:	e7f7      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x1;
 800b570:	4d4c      	ldr	r5, [pc, #304]	; (800b6a4 <start_pass+0x338>)
 800b572:	e7f5      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x2;
 800b574:	4d4c      	ldr	r5, [pc, #304]	; (800b6a8 <start_pass+0x33c>)
 800b576:	e7f3      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_3x6;
 800b578:	4d4c      	ldr	r5, [pc, #304]	; (800b6ac <start_pass+0x340>)
 800b57a:	e7f1      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_4x2;
 800b57c:	4d4c      	ldr	r5, [pc, #304]	; (800b6b0 <start_pass+0x344>)
 800b57e:	e7ef      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x3;
 800b580:	4d4c      	ldr	r5, [pc, #304]	; (800b6b4 <start_pass+0x348>)
 800b582:	e7ed      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x5;
 800b584:	4d4c      	ldr	r5, [pc, #304]	; (800b6b8 <start_pass+0x34c>)
 800b586:	e7eb      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x10;
 800b588:	4d4c      	ldr	r5, [pc, #304]	; (800b6bc <start_pass+0x350>)
 800b58a:	e7e9      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x12;
 800b58c:	4d4c      	ldr	r5, [pc, #304]	; (800b6c0 <start_pass+0x354>)
 800b58e:	e7e7      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_7x7;
 800b590:	4d4c      	ldr	r5, [pc, #304]	; (800b6c4 <start_pass+0x358>)
 800b592:	e7e5      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_12x6;
 800b594:	4d4c      	ldr	r5, [pc, #304]	; (800b6c8 <start_pass+0x35c>)
 800b596:	e7e3      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_9x9;
 800b598:	4d4c      	ldr	r5, [pc, #304]	; (800b6cc <start_pass+0x360>)
 800b59a:	e7e1      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_8x16;
 800b59c:	4d4c      	ldr	r5, [pc, #304]	; (800b6d0 <start_pass+0x364>)
 800b59e:	e7df      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_10x10;
 800b5a0:	4d4c      	ldr	r5, [pc, #304]	; (800b6d4 <start_pass+0x368>)
 800b5a2:	e7dd      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_11x11;
 800b5a4:	4d4c      	ldr	r5, [pc, #304]	; (800b6d8 <start_pass+0x36c>)
 800b5a6:	e7db      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x14;
 800b5a8:	4d4c      	ldr	r5, [pc, #304]	; (800b6dc <start_pass+0x370>)
 800b5aa:	e7d9      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_13x13;
 800b5ac:	4d4c      	ldr	r5, [pc, #304]	; (800b6e0 <start_pass+0x374>)
 800b5ae:	e7d7      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x7;
 800b5b0:	4d4c      	ldr	r5, [pc, #304]	; (800b6e4 <start_pass+0x378>)
 800b5b2:	e7d5      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x8;
 800b5b4:	4d4c      	ldr	r5, [pc, #304]	; (800b6e8 <start_pass+0x37c>)
 800b5b6:	e7d3      	b.n	800b560 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x16;
 800b5b8:	4d4c      	ldr	r5, [pc, #304]	; (800b6ec <start_pass+0x380>)
 800b5ba:	e7d1      	b.n	800b560 <start_pass+0x1f4>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800b5bc:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	494b      	ldr	r1, [pc, #300]	; (800b6f0 <start_pass+0x384>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800b5c4:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800b5c8:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800b5cc:	fb0c f303 	mul.w	r3, ip, r3
 800b5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5d4:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800b5d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b5da:	3201      	adds	r2, #1
 800b5dc:	2a40      	cmp	r2, #64	; 0x40
 800b5de:	d1f1      	bne.n	800b5c4 <start_pass+0x258>
 800b5e0:	e7b1      	b.n	800b546 <start_pass+0x1da>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b5e2:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800b5e6:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800b5ea:	9304      	str	r3, [sp, #16]
 800b5ec:	4b41      	ldr	r3, [pc, #260]	; (800b6f4 <start_pass+0x388>)
 800b5ee:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b5f0:	9b03      	ldr	r3, [sp, #12]
 800b5f2:	ecb3 7b02 	vldmia	r3!, {d7}
 800b5f6:	9303      	str	r3, [sp, #12]
 800b5f8:	eeb0 8a47 	vmov.f32	s16, s14
 800b5fc:	eef0 8a67 	vmov.f32	s17, s15
 800b600:	9b04      	ldr	r3, [sp, #16]
 800b602:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b606:	9301      	str	r3, [sp, #4]
 800b608:	4b3a      	ldr	r3, [pc, #232]	; (800b6f4 <start_pass+0x388>)
 800b60a:	9302      	str	r3, [sp, #8]
 800b60c:	f106 0310 	add.w	r3, r6, #16
 800b610:	9305      	str	r3, [sp, #20]
 800b612:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800b614:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b618:	ecb3 7b02 	vldmia	r3!, {d7}
 800b61c:	eeb0 9a47 	vmov.f32	s18, s14
 800b620:	eef0 9a67 	vmov.f32	s19, s15
 800b624:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800b626:	f7f4 ff85 	bl	8000534 <__aeabi_ui2d>
 800b62a:	ec53 2b18 	vmov	r2, r3, d8
 800b62e:	f7f4 fffb 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800b632:	ec53 2b19 	vmov	r2, r3, d9
 800b636:	f7f4 fff7 	bl	8000628 <__aeabi_dmul>
 800b63a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b63e:	2200      	movs	r2, #0
 800b640:	f7f4 fff2 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800b644:	f7f5 fa02 	bl	8000a4c <__aeabi_d2f>
 800b648:	9b01      	ldr	r3, [sp, #4]
 800b64a:	f843 0b04 	str.w	r0, [r3], #4
 800b64e:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800b650:	9b05      	ldr	r3, [sp, #20]
 800b652:	429e      	cmp	r6, r3
 800b654:	d1dd      	bne.n	800b612 <start_pass+0x2a6>
	    i++;
 800b656:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800b65a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800b65e:	d1c7      	bne.n	800b5f0 <start_pass+0x284>
 800b660:	e771      	b.n	800b546 <start_pass+0x1da>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	2231      	movs	r2, #49	; 0x31
 800b666:	4638      	mov	r0, r7
 800b668:	615a      	str	r2, [r3, #20]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4798      	blx	r3
      break;
 800b66e:	e76a      	b.n	800b546 <start_pass+0x1da>
 800b670:	08010829 	.word	0x08010829
 800b674:	08010735 	.word	0x08010735
 800b678:	080146a5 	.word	0x080146a5
 800b67c:	080102d5 	.word	0x080102d5
 800b680:	080135fd 	.word	0x080135fd
 800b684:	080133b5 	.word	0x080133b5
 800b688:	08011281 	.word	0x08011281
 800b68c:	08011f55 	.word	0x08011f55
 800b690:	0802be88 	.word	0x0802be88
 800b694:	08013e39 	.word	0x08013e39
 800b698:	08010609 	.word	0x08010609
 800b69c:	08014a0d 	.word	0x08014a0d
 800b6a0:	08013a1d 	.word	0x08013a1d
 800b6a4:	080108a1 	.word	0x080108a1
 800b6a8:	08014ae5 	.word	0x08014ae5
 800b6ac:	080148c1 	.word	0x080148c1
 800b6b0:	0801394d 	.word	0x0801394d
 800b6b4:	080137f1 	.word	0x080137f1
 800b6b8:	08010485 	.word	0x08010485
 800b6bc:	08014471 	.word	0x08014471
 800b6c0:	080141b1 	.word	0x080141b1
 800b6c4:	0801002d 	.word	0x0801002d
 800b6c8:	080130e9 	.word	0x080130e9
 800b6cc:	080108c5 	.word	0x080108c5
 800b6d0:	08013a55 	.word	0x08013a55
 800b6d4:	08010b91 	.word	0x08010b91
 800b6d8:	08010e89 	.word	0x08010e89
 800b6dc:	08011b01 	.word	0x08011b01
 800b6e0:	0801163d 	.word	0x0801163d
 800b6e4:	08012d69 	.word	0x08012d69
 800b6e8:	08012921 	.word	0x08012921
 800b6ec:	080123e9 	.word	0x080123e9
 800b6f0:	0802bed8 	.word	0x0802bed8
 800b6f4:	0802be98 	.word	0x0802be98

0800b6f8 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800b6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b6fa:	6843      	ldr	r3, [r0, #4]
{
 800b6fc:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b6fe:	2254      	movs	r2, #84	; 0x54
 800b700:	2101      	movs	r1, #1
 800b702:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b704:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b706:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800b708:	4b0f      	ldr	r3, [pc, #60]	; (800b748 <jinit_inverse_dct+0x50>)
 800b70a:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b70c:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800b710:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800b714:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b718:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b71a:	42b3      	cmp	r3, r6
 800b71c:	dc00      	bgt.n	800b720 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800b71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b720:	686b      	ldr	r3, [r5, #4]
 800b722:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b726:	2101      	movs	r1, #1
 800b728:	4628      	mov	r0, r5
 800b72a:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800b72c:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b72e:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800b730:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800b734:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800b736:	2100      	movs	r1, #0
 800b738:	f01c ff68 	bl	802860c <memset>
    idct->cur_method[ci] = -1;
 800b73c:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800b740:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800b742:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800b746:	e7e7      	b.n	800b718 <jinit_inverse_dct+0x20>
 800b748:	0800b36d 	.word	0x0800b36d

0800b74c <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800b74c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800b750:	6905      	ldr	r5, [r0, #16]
{
 800b752:	4607      	mov	r7, r0
 800b754:	4688      	mov	r8, r1
 800b756:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800b758:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800b75c:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800b75e:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800b762:	f1bb 0f00 	cmp.w	fp, #0
 800b766:	d042      	beq.n	800b7ee <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800b768:	454e      	cmp	r6, r9
 800b76a:	da42      	bge.n	800b7f2 <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800b76c:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800b770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b772:	b95b      	cbnz	r3, 800b78c <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	2278      	movs	r2, #120	; 0x78
 800b778:	f04f 31ff 	mov.w	r1, #4294967295
 800b77c:	4628      	mov	r0, r5
 800b77e:	615a      	str	r2, [r3, #20]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800b784:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800b788:	2201      	movs	r2, #1
 800b78a:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800b78c:	f1c6 0619 	rsb	r6, r6, #25
 800b790:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800b794:	2619      	movs	r6, #25
 800b796:	e02c      	b.n	800b7f2 <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800b798:	f1ba 0f00 	cmp.w	sl, #0
 800b79c:	d107      	bne.n	800b7ae <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800b79e:	69ab      	ldr	r3, [r5, #24]
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	4798      	blx	r3
 800b7a6:	b350      	cbz	r0, 800b7fe <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800b7a8:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800b7aa:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800b7ae:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800b7b2:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800b7b6:	2aff      	cmp	r2, #255	; 0xff
 800b7b8:	d116      	bne.n	800b7e8 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800b7ba:	f1ba 0f00 	cmp.w	sl, #0
 800b7be:	d109      	bne.n	800b7d4 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800b7c0:	69ab      	ldr	r3, [r5, #24]
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	9201      	str	r2, [sp, #4]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	4798      	blx	r3
 800b7ca:	b1c0      	cbz	r0, 800b7fe <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800b7cc:	69ab      	ldr	r3, [r5, #24]
 800b7ce:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800b7d0:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800b7d4:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800b7d8:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800b7dc:	2bff      	cmp	r3, #255	; 0xff
 800b7de:	d0ec      	beq.n	800b7ba <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800b7e0:	b113      	cbz	r3, 800b7e8 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800b7e2:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800b7e6:	e7bf      	b.n	800b768 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800b7e8:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800b7ec:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800b7ee:	2e18      	cmp	r6, #24
 800b7f0:	ddd2      	ble.n	800b798 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800b7f2:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800b7f6:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800b7fa:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800b7fe:	4658      	mov	r0, fp
 800b800:	b003      	add	sp, #12
 800b802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800b808 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800b808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b80a:	9d06      	ldr	r5, [sp, #24]
 800b80c:	4606      	mov	r6, r0
 800b80e:	468c      	mov	ip, r1
 800b810:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800b812:	4295      	cmp	r5, r2
{
 800b814:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800b816:	dd08      	ble.n	800b82a <jpeg_huff_decode+0x22>
 800b818:	462b      	mov	r3, r5
 800b81a:	f7ff ff97 	bl	800b74c <jpeg_fill_bit_buffer>
 800b81e:	b910      	cbnz	r0, 800b826 <jpeg_huff_decode+0x1e>
 800b820:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800b824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800b826:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800b82a:	1b62      	subs	r2, r4, r5
 800b82c:	4b1a      	ldr	r3, [pc, #104]	; (800b898 <jpeg_huff_decode+0x90>)
 800b82e:	fa4c f002 	asr.w	r0, ip, r2
 800b832:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b836:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800b838:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800b83c:	4283      	cmp	r3, r0
 800b83e:	db0d      	blt.n	800b85c <jpeg_huff_decode+0x54>
  if (l > 16) {
 800b840:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800b842:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800b846:	dd1e      	ble.n	800b886 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800b848:	6930      	ldr	r0, [r6, #16]
 800b84a:	2279      	movs	r2, #121	; 0x79
 800b84c:	f04f 31ff 	mov.w	r1, #4294967295
 800b850:	6803      	ldr	r3, [r0, #0]
 800b852:	615a      	str	r2, [r3, #20]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800b858:	2000      	movs	r0, #0
 800b85a:	e7e3      	b.n	800b824 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800b85c:	2a00      	cmp	r2, #0
    code <<= 1;
 800b85e:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800b862:	dc08      	bgt.n	800b876 <jpeg_huff_decode+0x6e>
 800b864:	2301      	movs	r3, #1
 800b866:	4661      	mov	r1, ip
 800b868:	4630      	mov	r0, r6
 800b86a:	f7ff ff6f 	bl	800b74c <jpeg_fill_bit_buffer>
 800b86e:	2800      	cmp	r0, #0
 800b870:	d0d6      	beq.n	800b820 <jpeg_huff_decode+0x18>
 800b872:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800b876:	3a01      	subs	r2, #1
    l++;
 800b878:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800b87a:	fa4c f002 	asr.w	r0, ip, r2
 800b87e:	f000 0001 	and.w	r0, r0, #1
 800b882:	4320      	orrs	r0, r4
    l++;
 800b884:	e7d8      	b.n	800b838 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800b886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b88a:	3512      	adds	r5, #18
 800b88c:	4418      	add	r0, r3
 800b88e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800b892:	4410      	add	r0, r2
 800b894:	7c40      	ldrb	r0, [r0, #17]
 800b896:	e7c5      	b.n	800b824 <jpeg_huff_decode+0x1c>
 800b898:	0802bf58 	.word	0x0802bf58

0800b89c <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800b89c:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800b89e:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800b8a2:	2600      	movs	r6, #0
{
 800b8a4:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800b8a6:	68eb      	ldr	r3, [r5, #12]
 800b8a8:	6991      	ldr	r1, [r2, #24]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	bfb8      	it	lt
 800b8ae:	3307      	addlt	r3, #7
 800b8b0:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800b8b4:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b8b6:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800b8b8:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800b8ba:	4798      	blx	r3
 800b8bc:	b190      	cbz	r0, 800b8e4 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800b8be:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	f105 0014 	add.w	r0, r5, #20
 800b8c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800b8cc:	0092      	lsls	r2, r2, #2
 800b8ce:	f01c fe9d 	bl	802860c <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800b8d2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800b8d6:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800b8d8:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800b8da:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800b8de:	b903      	cbnz	r3, 800b8e2 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800b8e0:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800b8e2:	2001      	movs	r0, #1
}
 800b8e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8e8 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800b8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800b8ec:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800b8f0:	b091      	sub	sp, #68	; 0x44
 800b8f2:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800b8f4:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800b8f8:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800b8fa:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800b8fe:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800b900:	b933      	cbnz	r3, 800b910 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800b902:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b904:	b17e      	cbz	r6, 800b926 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800b906:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800b908:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800b90a:	3b01      	subs	r3, #1
 800b90c:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800b90e:	e007      	b.n	800b920 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800b910:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b912:	2b00      	cmp	r3, #0
 800b914:	d1f5      	bne.n	800b902 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800b916:	f7ff ffc1 	bl	800b89c <process_restart>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d1f1      	bne.n	800b902 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800b91e:	2000      	movs	r0, #0
}
 800b920:	b011      	add	sp, #68	; 0x44
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b926:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800b928:	f104 0810 	add.w	r8, r4, #16
 800b92c:	af0b      	add	r7, sp, #44	; 0x2c
 800b92e:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	f104 0b10 	add.w	fp, r4, #16
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	9206      	str	r2, [sp, #24]
 800b93c:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800b93e:	f8df a118 	ldr.w	sl, [pc, #280]	; 800ba58 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b942:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800b944:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800b948:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800b94c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b94e:	f8d8 3000 	ldr.w	r3, [r8]
 800b952:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800b954:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800b958:	42b3      	cmp	r3, r6
 800b95a:	dc0d      	bgt.n	800b978 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b95c:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b95e:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b960:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800b962:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b964:	601a      	str	r2, [r3, #0]
 800b966:	9a07      	ldr	r2, [sp, #28]
 800b968:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800b96a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800b96c:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800b970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b972:	6833      	ldr	r3, [r6, #0]
 800b974:	602b      	str	r3, [r5, #0]
 800b976:	e7c6      	b.n	800b906 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800b978:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b97a:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800b97e:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800b982:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800b986:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800b988:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800b98c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800b990:	695b      	ldr	r3, [r3, #20]
 800b992:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b996:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800b99a:	dc0c      	bgt.n	800b9b6 <decode_mcu_DC_first+0xce>
 800b99c:	2300      	movs	r3, #0
 800b99e:	4662      	mov	r2, ip
 800b9a0:	4671      	mov	r1, lr
 800b9a2:	a806      	add	r0, sp, #24
 800b9a4:	f7ff fed2 	bl	800b74c <jpeg_fill_bit_buffer>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d0b8      	beq.n	800b91e <decode_mcu_DC_first+0x36>
 800b9ac:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800b9b0:	f1bc 0f07 	cmp.w	ip, #7
 800b9b4:	dd3e      	ble.n	800ba34 <decode_mcu_DC_first+0x14c>
 800b9b6:	f1ac 0308 	sub.w	r3, ip, #8
 800b9ba:	fa4e f303 	asr.w	r3, lr, r3
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800b9c4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800b9c8:	2a00      	cmp	r2, #0
 800b9ca:	d042      	beq.n	800ba52 <decode_mcu_DC_first+0x16a>
 800b9cc:	4443      	add	r3, r8
 800b9ce:	ebac 0c02 	sub.w	ip, ip, r2
 800b9d2:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800b9d6:	f1b8 0f00 	cmp.w	r8, #0
 800b9da:	d01b      	beq.n	800ba14 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800b9dc:	45e0      	cmp	r8, ip
 800b9de:	dd09      	ble.n	800b9f4 <decode_mcu_DC_first+0x10c>
 800b9e0:	4643      	mov	r3, r8
 800b9e2:	4662      	mov	r2, ip
 800b9e4:	4671      	mov	r1, lr
 800b9e6:	a806      	add	r0, sp, #24
 800b9e8:	f7ff feb0 	bl	800b74c <jpeg_fill_bit_buffer>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d096      	beq.n	800b91e <decode_mcu_DC_first+0x36>
 800b9f0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800b9f4:	ebac 0c08 	sub.w	ip, ip, r8
 800b9f8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800b9fc:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800ba00:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800ba04:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800ba08:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800ba0a:	4299      	cmp	r1, r3
 800ba0c:	bfac      	ite	ge
 800ba0e:	eba3 0802 	subge.w	r8, r3, r2
 800ba12:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800ba14:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ba16:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800ba18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800ba1c:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800ba1e:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800ba22:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800ba24:	fa00 f803 	lsl.w	r8, r0, r3
 800ba28:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800ba2a:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800ba2e:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ba32:	e78f      	b.n	800b954 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800ba34:	2301      	movs	r3, #1
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	4662      	mov	r2, ip
 800ba3a:	4643      	mov	r3, r8
 800ba3c:	4671      	mov	r1, lr
 800ba3e:	a806      	add	r0, sp, #24
 800ba40:	f7ff fee2 	bl	800b808 <jpeg_huff_decode>
 800ba44:	f1b0 0800 	subs.w	r8, r0, #0
 800ba48:	f6ff af69 	blt.w	800b91e <decode_mcu_DC_first+0x36>
 800ba4c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800ba50:	e7c1      	b.n	800b9d6 <decode_mcu_DC_first+0xee>
 800ba52:	2309      	movs	r3, #9
 800ba54:	e7ef      	b.n	800ba36 <decode_mcu_DC_first+0x14e>
 800ba56:	bf00      	nop
 800ba58:	0802bf58 	.word	0x0802bf58

0800ba5c <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800ba5c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba64:	4607      	mov	r7, r0
 800ba66:	b08d      	sub	sp, #52	; 0x34
 800ba68:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800ba6a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800ba6e:	b933      	cbnz	r3, 800ba7e <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800ba70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba72:	b17b      	cbz	r3, 800ba94 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800ba74:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800ba76:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800ba7c:	e007      	b.n	800ba8e <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800ba7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1f5      	bne.n	800ba70 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800ba84:	f7ff ff0a 	bl	800b89c <process_restart>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d1f1      	bne.n	800ba70 <decode_mcu_AC_first+0x14>
	return FALSE;
 800ba8c:	2000      	movs	r0, #0
}
 800ba8e:	b00d      	add	sp, #52	; 0x34
 800ba90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800ba94:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800ba96:	b116      	cbz	r6, 800ba9e <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800ba98:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800ba9a:	612e      	str	r6, [r5, #16]
 800ba9c:	e7ea      	b.n	800ba74 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800ba9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800baa2:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800baa6:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800baa8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800baac:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800bab0:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bab2:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800bab4:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	9207      	str	r2, [sp, #28]
 800babe:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800bac0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800bbb8 <decode_mcu_AC_first+0x15c>
      block = MCU_data[0];
 800bac4:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bac6:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800bac8:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800baca:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800bace:	9b03      	ldr	r3, [sp, #12]
 800bad0:	4598      	cmp	r8, r3
 800bad2:	dc69      	bgt.n	800bba8 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800bad4:	2a07      	cmp	r2, #7
 800bad6:	dc09      	bgt.n	800baec <decode_mcu_AC_first+0x90>
 800bad8:	2300      	movs	r3, #0
 800bada:	a807      	add	r0, sp, #28
 800badc:	f7ff fe36 	bl	800b74c <jpeg_fill_bit_buffer>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d0d3      	beq.n	800ba8c <decode_mcu_AC_first+0x30>
 800bae4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800bae8:	2a07      	cmp	r2, #7
 800baea:	dd33      	ble.n	800bb54 <decode_mcu_AC_first+0xf8>
 800baec:	f1a2 0308 	sub.w	r3, r2, #8
 800baf0:	fa41 f303 	asr.w	r3, r1, r3
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bafa:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800bafe:	b3a0      	cbz	r0, 800bb6a <decode_mcu_AC_first+0x10e>
 800bb00:	444b      	add	r3, r9
 800bb02:	1a12      	subs	r2, r2, r0
 800bb04:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bb08:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800bb0c:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800bb10:	d02d      	beq.n	800bb6e <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bb12:	42a2      	cmp	r2, r4
	  k += r;
 800bb14:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bb16:	da07      	bge.n	800bb28 <decode_mcu_AC_first+0xcc>
 800bb18:	4623      	mov	r3, r4
 800bb1a:	a807      	add	r0, sp, #28
 800bb1c:	f7ff fe16 	bl	800b74c <jpeg_fill_bit_buffer>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d0b3      	beq.n	800ba8c <decode_mcu_AC_first+0x30>
 800bb24:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800bb28:	1b12      	subs	r2, r2, r4
 800bb2a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800bb2e:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800bb30:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800bb34:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800bb38:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800bb3a:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800bb3c:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800bb3e:	bfa8      	it	ge
 800bb40:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800bb42:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800bb46:	40a3      	lsls	r3, r4
 800bb48:	9c05      	ldr	r4, [sp, #20]
 800bb4a:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800bb4e:	f108 0801 	add.w	r8, r8, #1
 800bb52:	e7bc      	b.n	800bace <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800bb54:	2301      	movs	r3, #1
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	a807      	add	r0, sp, #28
 800bb5a:	464b      	mov	r3, r9
 800bb5c:	f7ff fe54 	bl	800b808 <jpeg_huff_decode>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	db93      	blt.n	800ba8c <decode_mcu_AC_first+0x30>
 800bb64:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800bb68:	e7ce      	b.n	800bb08 <decode_mcu_AC_first+0xac>
 800bb6a:	2309      	movs	r3, #9
 800bb6c:	e7f3      	b.n	800bb56 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800bb6e:	2b0f      	cmp	r3, #15
 800bb70:	d102      	bne.n	800bb78 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800bb72:	f108 080f 	add.w	r8, r8, #15
 800bb76:	e7ea      	b.n	800bb4e <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800bb78:	2601      	movs	r6, #1
 800bb7a:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800bb7c:	b19b      	cbz	r3, 800bba6 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	da09      	bge.n	800bb96 <decode_mcu_AC_first+0x13a>
 800bb82:	a807      	add	r0, sp, #28
 800bb84:	9303      	str	r3, [sp, #12]
 800bb86:	f7ff fde1 	bl	800b74c <jpeg_fill_bit_buffer>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	f43f af7e 	beq.w	800ba8c <decode_mcu_AC_first+0x30>
 800bb90:	9b03      	ldr	r3, [sp, #12]
 800bb92:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800bb96:	1ad2      	subs	r2, r2, r3
 800bb98:	4807      	ldr	r0, [pc, #28]	; (800bbb8 <decode_mcu_AC_first+0x15c>)
 800bb9a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800bb9e:	fa41 f302 	asr.w	r3, r1, r2
 800bba2:	4003      	ands	r3, r0
	      EOBRUN += r;
 800bba4:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800bba6:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	9807      	ldr	r0, [sp, #28]
 800bbac:	6018      	str	r0, [r3, #0]
 800bbae:	9808      	ldr	r0, [sp, #32]
 800bbb0:	6058      	str	r0, [r3, #4]
 800bbb2:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800bbb6:	e770      	b.n	800ba9a <decode_mcu_AC_first+0x3e>
 800bbb8:	0802bf58 	.word	0x0802bf58

0800bbbc <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800bbbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bbc0:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800bbc4:	2701      	movs	r7, #1
{   
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bbca:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bbcc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bbd0:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bbd2:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bbd6:	b9c3      	cbnz	r3, 800bc0a <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bbd8:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bbda:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bbdc:	9405      	str	r4, [sp, #20]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	9201      	str	r2, [sp, #4]
 800bbe4:	9302      	str	r3, [sp, #8]
 800bbe6:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bbea:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800bbee:	42b3      	cmp	r3, r6
 800bbf0:	dc16      	bgt.n	800bc20 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bbf2:	69a3      	ldr	r3, [r4, #24]
 800bbf4:	9801      	ldr	r0, [sp, #4]
 800bbf6:	6018      	str	r0, [r3, #0]
 800bbf8:	9802      	ldr	r0, [sp, #8]
 800bbfa:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800bbfc:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bbfe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bc00:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bc02:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800bc06:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800bc08:	e007      	b.n	800bc1a <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800bc0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1e3      	bne.n	800bbd8 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800bc10:	f7ff fe44 	bl	800b89c <process_restart>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d1df      	bne.n	800bbd8 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800bc18:	2000      	movs	r0, #0
}
 800bc1a:	b007      	add	sp, #28
 800bc1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800bc20:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800bc22:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800bc26:	dc07      	bgt.n	800bc38 <decode_mcu_DC_refine+0x7c>
 800bc28:	2301      	movs	r3, #1
 800bc2a:	a801      	add	r0, sp, #4
 800bc2c:	f7ff fd8e 	bl	800b74c <jpeg_fill_bit_buffer>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	d0f1      	beq.n	800bc18 <decode_mcu_DC_refine+0x5c>
 800bc34:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800bc38:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bc3a:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800bc3c:	fa41 f302 	asr.w	r3, r1, r2
 800bc40:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800bc42:	bf42      	ittt	mi
 800bc44:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800bc48:	433b      	orrmi	r3, r7
 800bc4a:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bc4e:	e7cc      	b.n	800bbea <decode_mcu_DC_refine+0x2e>

0800bc50 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bc50:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4606      	mov	r6, r0
 800bc5a:	b0d1      	sub	sp, #324	; 0x144
 800bc5c:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bc5e:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bc62:	b95b      	cbnz	r3, 800bc7c <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800bc64:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800bc68:	f1bb 0f00 	cmp.w	fp, #0
 800bc6c:	d012      	beq.n	800bc94 <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bc6e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800bc72:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bc74:	3b01      	subs	r3, #1
 800bc76:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800bc7a:	e008      	b.n	800bc8e <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800bc7c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1ef      	bne.n	800bc64 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800bc84:	f7ff fe0a 	bl	800b89c <process_restart>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d1eb      	bne.n	800bc64 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800bc8c:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800bc8e:	b051      	add	sp, #324	; 0x144
 800bc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800bc94:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bc98:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bc9a:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800bc9c:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800bca0:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bca2:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800bca6:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bcaa:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bcac:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800bcae:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800bcb0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcb8:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800bcba:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800bcbe:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bcc0:	69b3      	ldr	r3, [r6, #24]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	602a      	str	r2, [r5, #0]
 800bcc8:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800bcca:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bcce:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800bcd2:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f040 80bf 	bne.w	800be58 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800bcda:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800bcde:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800bce0:	9b06      	ldr	r3, [sp, #24]
 800bce2:	429f      	cmp	r7, r3
 800bce4:	dd0a      	ble.n	800bcfc <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bce6:	69b3      	ldr	r3, [r6, #24]
 800bce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcea:	6019      	str	r1, [r3, #0]
 800bcec:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bcee:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800bcf0:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bcf2:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800bcf6:	f8c8 3010 	str.w	r3, [r8, #16]
 800bcfa:	e7b8      	b.n	800bc6e <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800bcfc:	2a07      	cmp	r2, #7
 800bcfe:	dc0a      	bgt.n	800bd16 <decode_mcu_AC_refine+0xc6>
 800bd00:	2300      	movs	r3, #0
 800bd02:	4621      	mov	r1, r4
 800bd04:	4628      	mov	r0, r5
 800bd06:	f7ff fd21 	bl	800b74c <jpeg_fill_bit_buffer>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d06e      	beq.n	800bdec <decode_mcu_AC_refine+0x19c>
 800bd0e:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800bd12:	2a07      	cmp	r2, #7
 800bd14:	dd61      	ble.n	800bdda <decode_mcu_AC_refine+0x18a>
 800bd16:	f1a2 0308 	sub.w	r3, r2, #8
 800bd1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd1c:	fa44 f303 	asr.w	r3, r4, r3
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bd26:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800bd2a:	2900      	cmp	r1, #0
 800bd2c:	d06b      	beq.n	800be06 <decode_mcu_AC_refine+0x1b6>
 800bd2e:	4403      	add	r3, r0
 800bd30:	1a52      	subs	r2, r2, r1
 800bd32:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bd36:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800bd3a:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800bd3e:	9304      	str	r3, [sp, #16]
 800bd40:	d066      	beq.n	800be10 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d009      	beq.n	800bd5a <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800bd46:	6833      	ldr	r3, [r6, #0]
 800bd48:	2179      	movs	r1, #121	; 0x79
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	9204      	str	r2, [sp, #16]
 800bd4e:	6159      	str	r1, [r3, #20]
 800bd50:	f04f 31ff 	mov.w	r1, #4294967295
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	4798      	blx	r3
 800bd58:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800bd5a:	2a00      	cmp	r2, #0
 800bd5c:	dc08      	bgt.n	800bd70 <decode_mcu_AC_refine+0x120>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	4621      	mov	r1, r4
 800bd62:	4628      	mov	r0, r5
 800bd64:	f7ff fcf2 	bl	800b74c <jpeg_fill_bit_buffer>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d03f      	beq.n	800bdec <decode_mcu_AC_refine+0x19c>
 800bd6c:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800bd70:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800bd72:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800bd74:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800bd78:	f013 0f01 	tst.w	r3, #1
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	bf08      	it	eq
 800bd80:	460b      	moveq	r3, r1
 800bd82:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800bd84:	9b08      	ldr	r3, [sp, #32]
 800bd86:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800bd8a:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800bd8c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d068      	beq.n	800be66 <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800bd94:	2a00      	cmp	r2, #0
 800bd96:	dc07      	bgt.n	800bda8 <decode_mcu_AC_refine+0x158>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f7ff fcd5 	bl	800b74c <jpeg_fill_bit_buffer>
 800bda2:	b318      	cbz	r0, 800bdec <decode_mcu_AC_refine+0x19c>
 800bda4:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800bda8:	3a01      	subs	r2, #1
 800bdaa:	fa44 f302 	asr.w	r3, r4, r2
 800bdae:	07d9      	lsls	r1, r3, #31
 800bdb0:	d50e      	bpl.n	800bdd0 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800bdb2:	9b05      	ldr	r3, [sp, #20]
 800bdb4:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800bdb8:	9b03      	ldr	r3, [sp, #12]
 800bdba:	4219      	tst	r1, r3
 800bdbc:	d108      	bne.n	800bdd0 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800bdbe:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800bdc0:	b28b      	uxth	r3, r1
 800bdc2:	bfac      	ite	ge
 800bdc4:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800bdc6:	9907      	ldrlt	r1, [sp, #28]
 800bdc8:	440b      	add	r3, r1
 800bdca:	9905      	ldr	r1, [sp, #20]
 800bdcc:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800bdd0:	3701      	adds	r7, #1
	} while (k <= Se);
 800bdd2:	9b06      	ldr	r3, [sp, #24]
 800bdd4:	42bb      	cmp	r3, r7
 800bdd6:	dad5      	bge.n	800bd84 <decode_mcu_AC_refine+0x134>
 800bdd8:	e048      	b.n	800be6c <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800bdda:	2301      	movs	r3, #1
 800bddc:	9300      	str	r3, [sp, #0]
 800bdde:	4621      	mov	r1, r4
 800bde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde2:	4628      	mov	r0, r5
 800bde4:	f7ff fd10 	bl	800b808 <jpeg_huff_decode>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	da0e      	bge.n	800be0a <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800bdec:	ab10      	add	r3, sp, #64	; 0x40
 800bdee:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800bdf0:	f1bb 0f00 	cmp.w	fp, #0
 800bdf4:	f43f af4a 	beq.w	800bc8c <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800bdf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdfc:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800be00:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800be04:	e7f4      	b.n	800bdf0 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800be06:	2309      	movs	r3, #9
 800be08:	e7e8      	b.n	800bddc <decode_mcu_AC_refine+0x18c>
 800be0a:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800be0e:	e792      	b.n	800bd36 <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800be10:	f1ba 0f0f 	cmp.w	sl, #15
 800be14:	d0b6      	beq.n	800bd84 <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800be16:	2301      	movs	r3, #1
 800be18:	fa03 f30a 	lsl.w	r3, r3, sl
 800be1c:	9302      	str	r3, [sp, #8]
	    if (r) {
 800be1e:	f1ba 0f00 	cmp.w	sl, #0
 800be22:	d015      	beq.n	800be50 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800be24:	4552      	cmp	r2, sl
 800be26:	da08      	bge.n	800be3a <decode_mcu_AC_refine+0x1ea>
 800be28:	4653      	mov	r3, sl
 800be2a:	4621      	mov	r1, r4
 800be2c:	a80b      	add	r0, sp, #44	; 0x2c
 800be2e:	f7ff fc8d 	bl	800b74c <jpeg_fill_bit_buffer>
 800be32:	2800      	cmp	r0, #0
 800be34:	d0da      	beq.n	800bdec <decode_mcu_AC_refine+0x19c>
 800be36:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800be3a:	4b26      	ldr	r3, [pc, #152]	; (800bed4 <decode_mcu_AC_refine+0x284>)
 800be3c:	eba2 020a 	sub.w	r2, r2, sl
 800be40:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800be44:	fa44 f302 	asr.w	r3, r4, r2
 800be48:	400b      	ands	r3, r1
	      EOBRUN += r;
 800be4a:	9902      	ldr	r1, [sp, #8]
 800be4c:	4419      	add	r1, r3
 800be4e:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800be50:	9b02      	ldr	r3, [sp, #8]
 800be52:	2b00      	cmp	r3, #0
 800be54:	f43f af47 	beq.w	800bce6 <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800be58:	9b06      	ldr	r3, [sp, #24]
 800be5a:	429f      	cmp	r7, r3
 800be5c:	dd15      	ble.n	800be8a <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800be5e:	9b02      	ldr	r3, [sp, #8]
 800be60:	3b01      	subs	r3, #1
 800be62:	9302      	str	r3, [sp, #8]
 800be64:	e73f      	b.n	800bce6 <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800be66:	f1ba 0a01 	subs.w	sl, sl, #1
 800be6a:	d2b1      	bcs.n	800bdd0 <decode_mcu_AC_refine+0x180>
	if (s) {
 800be6c:	9b04      	ldr	r3, [sp, #16]
 800be6e:	b153      	cbz	r3, 800be86 <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800be70:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800be72:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800be74:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800be78:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800be7c:	a910      	add	r1, sp, #64	; 0x40
 800be7e:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800be82:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800be86:	3701      	adds	r7, #1
 800be88:	e72a      	b.n	800bce0 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800be8a:	9b08      	ldr	r3, [sp, #32]
 800be8c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800be90:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800be94:	b1e3      	cbz	r3, 800bed0 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800be96:	2a00      	cmp	r2, #0
 800be98:	dc08      	bgt.n	800beac <decode_mcu_AC_refine+0x25c>
 800be9a:	2301      	movs	r3, #1
 800be9c:	4621      	mov	r1, r4
 800be9e:	a80b      	add	r0, sp, #44	; 0x2c
 800bea0:	f7ff fc54 	bl	800b74c <jpeg_fill_bit_buffer>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	d0a1      	beq.n	800bdec <decode_mcu_AC_refine+0x19c>
 800bea8:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800beac:	3a01      	subs	r2, #1
 800beae:	fa44 f302 	asr.w	r3, r4, r2
 800beb2:	07db      	lsls	r3, r3, #31
 800beb4:	d50c      	bpl.n	800bed0 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800beb6:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800beba:	9b03      	ldr	r3, [sp, #12]
 800bebc:	4219      	tst	r1, r3
 800bebe:	d107      	bne.n	800bed0 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800bec0:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800bec2:	b28b      	uxth	r3, r1
 800bec4:	bfac      	ite	ge
 800bec6:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800bec8:	9907      	ldrlt	r1, [sp, #28]
 800beca:	440b      	add	r3, r1
 800becc:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800bed0:	3701      	adds	r7, #1
 800bed2:	e7c1      	b.n	800be58 <decode_mcu_AC_refine+0x208>
 800bed4:	0802bf58 	.word	0x0802bf58

0800bed8 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bedc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800bee0:	b093      	sub	sp, #76	; 0x4c
 800bee2:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bee4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800bee8:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800beea:	b933      	cbnz	r3, 800befa <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800beec:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800beee:	b17f      	cbz	r7, 800bf10 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bef0:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800bef2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bef4:	3b01      	subs	r3, #1
 800bef6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800bef8:	e007      	b.n	800bf0a <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800befa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1f5      	bne.n	800beec <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800bf00:	f7ff fccc 	bl	800b89c <process_restart>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d1f1      	bne.n	800beec <decode_mcu_sub+0x14>
	return FALSE;
 800bf08:	2000      	movs	r0, #0
}
 800bf0a:	b013      	add	sp, #76	; 0x4c
 800bf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800bf10:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800bf14:	f105 0810 	add.w	r8, r5, #16
 800bf18:	ac0d      	add	r4, sp, #52	; 0x34
 800bf1a:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800bf1e:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800bf20:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800bf24:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800c1c4 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800bf28:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf2a:	69b3      	ldr	r3, [r6, #24]
 800bf2c:	960c      	str	r6, [sp, #48]	; 0x30
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	9208      	str	r2, [sp, #32]
 800bf34:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800bf36:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf3a:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800bf3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf40:	f8d8 3000 	ldr.w	r3, [r8]
 800bf44:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bf46:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800bf4a:	42bb      	cmp	r3, r7
 800bf4c:	dc0e      	bgt.n	800bf6c <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf4e:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bf50:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf52:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800bf54:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf58:	601a      	str	r2, [r3, #0]
 800bf5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf5c:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800bf5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bf60:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800bf64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bf66:	6833      	ldr	r3, [r6, #0]
 800bf68:	6023      	str	r3, [r4, #0]
 800bf6a:	e7c1      	b.n	800bef0 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800bf6c:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bf6e:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800bf72:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800bf76:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800bf7a:	dc0c      	bgt.n	800bf96 <decode_mcu_sub+0xbe>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4662      	mov	r2, ip
 800bf80:	4671      	mov	r1, lr
 800bf82:	a808      	add	r0, sp, #32
 800bf84:	f7ff fbe2 	bl	800b74c <jpeg_fill_bit_buffer>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d0bd      	beq.n	800bf08 <decode_mcu_sub+0x30>
 800bf8c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800bf90:	f1bc 0f07 	cmp.w	ip, #7
 800bf94:	dd4a      	ble.n	800c02c <decode_mcu_sub+0x154>
 800bf96:	f1ac 0308 	sub.w	r3, ip, #8
 800bf9a:	fa4e f303 	asr.w	r3, lr, r3
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800bfa4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfa8:	2a00      	cmp	r2, #0
 800bfaa:	d04d      	beq.n	800c048 <decode_mcu_sub+0x170>
 800bfac:	4423      	add	r3, r4
 800bfae:	ebac 0c02 	sub.w	ip, ip, r2
 800bfb2:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800bfb6:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800bfba:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800bfbe:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 80a0 	beq.w	800c106 <decode_mcu_sub+0x22e>
	if (s) {
 800bfc6:	b1cc      	cbz	r4, 800bffc <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bfc8:	45a4      	cmp	ip, r4
 800bfca:	da09      	bge.n	800bfe0 <decode_mcu_sub+0x108>
 800bfcc:	4623      	mov	r3, r4
 800bfce:	4662      	mov	r2, ip
 800bfd0:	4671      	mov	r1, lr
 800bfd2:	a808      	add	r0, sp, #32
 800bfd4:	f7ff fbba 	bl	800b74c <jpeg_fill_bit_buffer>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d095      	beq.n	800bf08 <decode_mcu_sub+0x30>
 800bfdc:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800bfe0:	ebac 0c04 	sub.w	ip, ip, r4
 800bfe4:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800bfe8:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800bfea:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800bfee:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800bff2:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800bff4:	4299      	cmp	r1, r3
 800bff6:	bfac      	ite	ge
 800bff8:	1a9c      	subge	r4, r3, r2
 800bffa:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800bffc:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c000:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c004:	ab12      	add	r3, sp, #72	; 0x48
 800c006:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c00a:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c00e:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c010:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c014:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c018:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c01a:	9b03      	ldr	r3, [sp, #12]
 800c01c:	429c      	cmp	r4, r3
 800c01e:	db15      	blt.n	800c04c <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800c020:	9b05      	ldr	r3, [sp, #20]
 800c022:	429c      	cmp	r4, r3
 800c024:	f340 8081 	ble.w	800c12a <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c028:	3701      	adds	r7, #1
 800c02a:	e78c      	b.n	800bf46 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c02c:	2301      	movs	r3, #1
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	4662      	mov	r2, ip
 800c032:	4623      	mov	r3, r4
 800c034:	4671      	mov	r1, lr
 800c036:	a808      	add	r0, sp, #32
 800c038:	f7ff fbe6 	bl	800b808 <jpeg_huff_decode>
 800c03c:	1e04      	subs	r4, r0, #0
 800c03e:	f6ff af63 	blt.w	800bf08 <decode_mcu_sub+0x30>
 800c042:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c046:	e7b6      	b.n	800bfb6 <decode_mcu_sub+0xde>
 800c048:	2309      	movs	r3, #9
 800c04a:	e7f0      	b.n	800c02e <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c04c:	f1bc 0f07 	cmp.w	ip, #7
 800c050:	dc0d      	bgt.n	800c06e <decode_mcu_sub+0x196>
 800c052:	2300      	movs	r3, #0
 800c054:	4662      	mov	r2, ip
 800c056:	4671      	mov	r1, lr
 800c058:	a808      	add	r0, sp, #32
 800c05a:	f7ff fb77 	bl	800b74c <jpeg_fill_bit_buffer>
 800c05e:	2800      	cmp	r0, #0
 800c060:	f43f af52 	beq.w	800bf08 <decode_mcu_sub+0x30>
 800c064:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c068:	f1bc 0f07 	cmp.w	ip, #7
 800c06c:	dd37      	ble.n	800c0de <decode_mcu_sub+0x206>
 800c06e:	f1ac 0308 	sub.w	r3, ip, #8
 800c072:	fa4e f303 	asr.w	r3, lr, r3
 800c076:	b2db      	uxtb	r3, r3
 800c078:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c07c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c080:	2a00      	cmp	r2, #0
 800c082:	d03a      	beq.n	800c0fa <decode_mcu_sub+0x222>
 800c084:	4443      	add	r3, r8
 800c086:	ebac 0c02 	sub.w	ip, ip, r2
 800c08a:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c08e:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c092:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c096:	d032      	beq.n	800c0fe <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c098:	459c      	cmp	ip, r3
	    k += r;
 800c09a:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c09c:	da0b      	bge.n	800c0b6 <decode_mcu_sub+0x1de>
 800c09e:	4662      	mov	r2, ip
 800c0a0:	4671      	mov	r1, lr
 800c0a2:	a808      	add	r0, sp, #32
 800c0a4:	9307      	str	r3, [sp, #28]
 800c0a6:	f7ff fb51 	bl	800b74c <jpeg_fill_bit_buffer>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	f43f af2c 	beq.w	800bf08 <decode_mcu_sub+0x30>
 800c0b0:	9b07      	ldr	r3, [sp, #28]
 800c0b2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800c0b6:	ebac 0c03 	sub.w	ip, ip, r3
 800c0ba:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c0be:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c0c0:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c0c4:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c0c8:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c0ca:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c0cc:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800c0ce:	bfa8      	it	ge
 800c0d0:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c0d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c0d6:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c0da:	3401      	adds	r4, #1
 800c0dc:	e79d      	b.n	800c01a <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c0de:	2301      	movs	r3, #1
 800c0e0:	9300      	str	r3, [sp, #0]
 800c0e2:	4662      	mov	r2, ip
 800c0e4:	4643      	mov	r3, r8
 800c0e6:	4671      	mov	r1, lr
 800c0e8:	a808      	add	r0, sp, #32
 800c0ea:	f7ff fb8d 	bl	800b808 <jpeg_huff_decode>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f6ff af0a 	blt.w	800bf08 <decode_mcu_sub+0x30>
 800c0f4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c0f8:	e7c9      	b.n	800c08e <decode_mcu_sub+0x1b6>
 800c0fa:	2309      	movs	r3, #9
 800c0fc:	e7f0      	b.n	800c0e0 <decode_mcu_sub+0x208>
	    if (r != 15)
 800c0fe:	2a0f      	cmp	r2, #15
 800c100:	d192      	bne.n	800c028 <decode_mcu_sub+0x150>
	    k += 15;
 800c102:	340f      	adds	r4, #15
 800c104:	e7e9      	b.n	800c0da <decode_mcu_sub+0x202>
	if (s) {
 800c106:	b174      	cbz	r4, 800c126 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c108:	45a4      	cmp	ip, r4
 800c10a:	da0a      	bge.n	800c122 <decode_mcu_sub+0x24a>
 800c10c:	4623      	mov	r3, r4
 800c10e:	4662      	mov	r2, ip
 800c110:	4671      	mov	r1, lr
 800c112:	a808      	add	r0, sp, #32
 800c114:	f7ff fb1a 	bl	800b74c <jpeg_fill_bit_buffer>
 800c118:	2800      	cmp	r0, #0
 800c11a:	f43f aef5 	beq.w	800bf08 <decode_mcu_sub+0x30>
 800c11e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c122:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c126:	2401      	movs	r4, #1
 800c128:	e77a      	b.n	800c020 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c12a:	f1bc 0f07 	cmp.w	ip, #7
 800c12e:	dc0d      	bgt.n	800c14c <decode_mcu_sub+0x274>
 800c130:	2300      	movs	r3, #0
 800c132:	4662      	mov	r2, ip
 800c134:	4671      	mov	r1, lr
 800c136:	a808      	add	r0, sp, #32
 800c138:	f7ff fb08 	bl	800b74c <jpeg_fill_bit_buffer>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	f43f aee3 	beq.w	800bf08 <decode_mcu_sub+0x30>
 800c142:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c146:	f1bc 0f07 	cmp.w	ip, #7
 800c14a:	dd25      	ble.n	800c198 <decode_mcu_sub+0x2c0>
 800c14c:	f1ac 0308 	sub.w	r3, ip, #8
 800c150:	fa4e f303 	asr.w	r3, lr, r3
 800c154:	b2db      	uxtb	r3, r3
 800c156:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c15a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c15e:	b34a      	cbz	r2, 800c1b4 <decode_mcu_sub+0x2dc>
 800c160:	4443      	add	r3, r8
 800c162:	ebac 0c02 	sub.w	ip, ip, r2
 800c166:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c16a:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c16e:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c172:	d021      	beq.n	800c1b8 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c174:	45dc      	cmp	ip, fp
	  k += r;
 800c176:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c178:	da0a      	bge.n	800c190 <decode_mcu_sub+0x2b8>
 800c17a:	465b      	mov	r3, fp
 800c17c:	4662      	mov	r2, ip
 800c17e:	4671      	mov	r1, lr
 800c180:	a808      	add	r0, sp, #32
 800c182:	f7ff fae3 	bl	800b74c <jpeg_fill_bit_buffer>
 800c186:	2800      	cmp	r0, #0
 800c188:	f43f aebe 	beq.w	800bf08 <decode_mcu_sub+0x30>
 800c18c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c190:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800c194:	3401      	adds	r4, #1
 800c196:	e743      	b.n	800c020 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c198:	2301      	movs	r3, #1
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	4662      	mov	r2, ip
 800c19e:	4643      	mov	r3, r8
 800c1a0:	4671      	mov	r1, lr
 800c1a2:	a808      	add	r0, sp, #32
 800c1a4:	f7ff fb30 	bl	800b808 <jpeg_huff_decode>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	f6ff aead 	blt.w	800bf08 <decode_mcu_sub+0x30>
 800c1ae:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c1b2:	e7da      	b.n	800c16a <decode_mcu_sub+0x292>
 800c1b4:	2309      	movs	r3, #9
 800c1b6:	e7f0      	b.n	800c19a <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800c1b8:	2b0f      	cmp	r3, #15
 800c1ba:	f47f af35 	bne.w	800c028 <decode_mcu_sub+0x150>
	  k += 15;
 800c1be:	340f      	adds	r4, #15
 800c1c0:	e7e8      	b.n	800c194 <decode_mcu_sub+0x2bc>
 800c1c2:	bf00      	nop
 800c1c4:	0802bf58 	.word	0x0802bf58

0800c1c8 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c1cc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c1d0:	b091      	sub	sp, #68	; 0x44
 800c1d2:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c1d4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c1d8:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800c1da:	b933      	cbnz	r3, 800c1ea <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c1dc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c1de:	b17f      	cbz	r7, 800c200 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c1e0:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c1e2:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c1e8:	e007      	b.n	800c1fa <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800c1ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1f5      	bne.n	800c1dc <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800c1f0:	f7ff fb54 	bl	800b89c <process_restart>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d1f1      	bne.n	800c1dc <decode_mcu+0x14>
	return FALSE;
 800c1f8:	2000      	movs	r0, #0
}
 800c1fa:	b011      	add	sp, #68	; 0x44
 800c1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c200:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800c202:	f105 0810 	add.w	r8, r5, #16
 800c206:	ac0b      	add	r4, sp, #44	; 0x2c
 800c208:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	9206      	str	r2, [sp, #24]
 800c212:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800c214:	f8df a290 	ldr.w	sl, [pc, #656]	; 800c4a8 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c218:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800c21a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c21e:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c224:	f8d8 3000 	ldr.w	r3, [r8]
 800c228:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c22a:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c22e:	42bb      	cmp	r3, r7
 800c230:	dc0e      	bgt.n	800c250 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c232:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c234:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c236:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c238:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	9a07      	ldr	r2, [sp, #28]
 800c240:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c242:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c244:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c24a:	6833      	ldr	r3, [r6, #0]
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	e7c7      	b.n	800c1e0 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c250:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c252:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c256:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800c25a:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c25e:	dc0c      	bgt.n	800c27a <decode_mcu+0xb2>
 800c260:	2300      	movs	r3, #0
 800c262:	4662      	mov	r2, ip
 800c264:	4671      	mov	r1, lr
 800c266:	a806      	add	r0, sp, #24
 800c268:	f7ff fa70 	bl	800b74c <jpeg_fill_bit_buffer>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d0c3      	beq.n	800c1f8 <decode_mcu+0x30>
 800c270:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c274:	f1bc 0f07 	cmp.w	ip, #7
 800c278:	dd49      	ble.n	800c30e <decode_mcu+0x146>
 800c27a:	f1ac 0308 	sub.w	r3, ip, #8
 800c27e:	fa4e f303 	asr.w	r3, lr, r3
 800c282:	b2db      	uxtb	r3, r3
 800c284:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c288:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c28c:	2a00      	cmp	r2, #0
 800c28e:	d04c      	beq.n	800c32a <decode_mcu+0x162>
 800c290:	4423      	add	r3, r4
 800c292:	ebac 0c02 	sub.w	ip, ip, r2
 800c296:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c29a:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800c29e:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800c2a2:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 809f 	beq.w	800c3e8 <decode_mcu+0x220>
	if (s) {
 800c2aa:	b1cc      	cbz	r4, 800c2e0 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c2ac:	45a4      	cmp	ip, r4
 800c2ae:	da09      	bge.n	800c2c4 <decode_mcu+0xfc>
 800c2b0:	4623      	mov	r3, r4
 800c2b2:	4662      	mov	r2, ip
 800c2b4:	4671      	mov	r1, lr
 800c2b6:	a806      	add	r0, sp, #24
 800c2b8:	f7ff fa48 	bl	800b74c <jpeg_fill_bit_buffer>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d09b      	beq.n	800c1f8 <decode_mcu+0x30>
 800c2c0:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800c2c4:	ebac 0c04 	sub.w	ip, ip, r4
 800c2c8:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c2cc:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c2ce:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c2d2:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c2d6:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800c2d8:	4299      	cmp	r1, r3
 800c2da:	bfac      	ite	ge
 800c2dc:	1a9c      	subge	r4, r3, r2
 800c2de:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800c2e0:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c2e4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c2e8:	ab10      	add	r3, sp, #64	; 0x40
 800c2ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c2ee:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c2f2:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c2f4:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c2f8:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c2fc:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c2fe:	9b03      	ldr	r3, [sp, #12]
 800c300:	429c      	cmp	r4, r3
 800c302:	db14      	blt.n	800c32e <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800c304:	2c3f      	cmp	r4, #63	; 0x3f
 800c306:	f340 8081 	ble.w	800c40c <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c30a:	3701      	adds	r7, #1
 800c30c:	e78d      	b.n	800c22a <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c30e:	2301      	movs	r3, #1
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	4662      	mov	r2, ip
 800c314:	4623      	mov	r3, r4
 800c316:	4671      	mov	r1, lr
 800c318:	a806      	add	r0, sp, #24
 800c31a:	f7ff fa75 	bl	800b808 <jpeg_huff_decode>
 800c31e:	1e04      	subs	r4, r0, #0
 800c320:	f6ff af6a 	blt.w	800c1f8 <decode_mcu+0x30>
 800c324:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c328:	e7b7      	b.n	800c29a <decode_mcu+0xd2>
 800c32a:	2309      	movs	r3, #9
 800c32c:	e7f0      	b.n	800c310 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c32e:	f1bc 0f07 	cmp.w	ip, #7
 800c332:	dc0d      	bgt.n	800c350 <decode_mcu+0x188>
 800c334:	2300      	movs	r3, #0
 800c336:	4662      	mov	r2, ip
 800c338:	4671      	mov	r1, lr
 800c33a:	a806      	add	r0, sp, #24
 800c33c:	f7ff fa06 	bl	800b74c <jpeg_fill_bit_buffer>
 800c340:	2800      	cmp	r0, #0
 800c342:	f43f af59 	beq.w	800c1f8 <decode_mcu+0x30>
 800c346:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c34a:	f1bc 0f07 	cmp.w	ip, #7
 800c34e:	dd37      	ble.n	800c3c0 <decode_mcu+0x1f8>
 800c350:	f1ac 0308 	sub.w	r3, ip, #8
 800c354:	fa4e f303 	asr.w	r3, lr, r3
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c35e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c362:	2a00      	cmp	r2, #0
 800c364:	d03a      	beq.n	800c3dc <decode_mcu+0x214>
 800c366:	4443      	add	r3, r8
 800c368:	ebac 0c02 	sub.w	ip, ip, r2
 800c36c:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c370:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c374:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c378:	d032      	beq.n	800c3e0 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c37a:	459c      	cmp	ip, r3
	    k += r;
 800c37c:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c37e:	da0b      	bge.n	800c398 <decode_mcu+0x1d0>
 800c380:	4662      	mov	r2, ip
 800c382:	4671      	mov	r1, lr
 800c384:	a806      	add	r0, sp, #24
 800c386:	9305      	str	r3, [sp, #20]
 800c388:	f7ff f9e0 	bl	800b74c <jpeg_fill_bit_buffer>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	f43f af33 	beq.w	800c1f8 <decode_mcu+0x30>
 800c392:	9b05      	ldr	r3, [sp, #20]
 800c394:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800c398:	ebac 0c03 	sub.w	ip, ip, r3
 800c39c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c3a0:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c3a2:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c3a6:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c3aa:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c3ac:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c3ae:	4b3d      	ldr	r3, [pc, #244]	; (800c4a4 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800c3b0:	bfa8      	it	ge
 800c3b2:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c3b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c3b8:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c3bc:	3401      	adds	r4, #1
 800c3be:	e79e      	b.n	800c2fe <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	4662      	mov	r2, ip
 800c3c6:	4643      	mov	r3, r8
 800c3c8:	4671      	mov	r1, lr
 800c3ca:	a806      	add	r0, sp, #24
 800c3cc:	f7ff fa1c 	bl	800b808 <jpeg_huff_decode>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	f6ff af11 	blt.w	800c1f8 <decode_mcu+0x30>
 800c3d6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c3da:	e7c9      	b.n	800c370 <decode_mcu+0x1a8>
 800c3dc:	2309      	movs	r3, #9
 800c3de:	e7f0      	b.n	800c3c2 <decode_mcu+0x1fa>
	    if (r != 15)
 800c3e0:	2a0f      	cmp	r2, #15
 800c3e2:	d192      	bne.n	800c30a <decode_mcu+0x142>
	    k += 15;
 800c3e4:	340f      	adds	r4, #15
 800c3e6:	e7e9      	b.n	800c3bc <decode_mcu+0x1f4>
	if (s) {
 800c3e8:	b174      	cbz	r4, 800c408 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c3ea:	45a4      	cmp	ip, r4
 800c3ec:	da0a      	bge.n	800c404 <decode_mcu+0x23c>
 800c3ee:	4623      	mov	r3, r4
 800c3f0:	4662      	mov	r2, ip
 800c3f2:	4671      	mov	r1, lr
 800c3f4:	a806      	add	r0, sp, #24
 800c3f6:	f7ff f9a9 	bl	800b74c <jpeg_fill_bit_buffer>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	f43f aefc 	beq.w	800c1f8 <decode_mcu+0x30>
 800c400:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c404:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c408:	2401      	movs	r4, #1
 800c40a:	e77b      	b.n	800c304 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c40c:	f1bc 0f07 	cmp.w	ip, #7
 800c410:	dc0d      	bgt.n	800c42e <decode_mcu+0x266>
 800c412:	2300      	movs	r3, #0
 800c414:	4662      	mov	r2, ip
 800c416:	4671      	mov	r1, lr
 800c418:	a806      	add	r0, sp, #24
 800c41a:	f7ff f997 	bl	800b74c <jpeg_fill_bit_buffer>
 800c41e:	2800      	cmp	r0, #0
 800c420:	f43f aeea 	beq.w	800c1f8 <decode_mcu+0x30>
 800c424:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c428:	f1bc 0f07 	cmp.w	ip, #7
 800c42c:	dd25      	ble.n	800c47a <decode_mcu+0x2b2>
 800c42e:	f1ac 0308 	sub.w	r3, ip, #8
 800c432:	fa4e f303 	asr.w	r3, lr, r3
 800c436:	b2db      	uxtb	r3, r3
 800c438:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c43c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c440:	b34a      	cbz	r2, 800c496 <decode_mcu+0x2ce>
 800c442:	4443      	add	r3, r8
 800c444:	ebac 0c02 	sub.w	ip, ip, r2
 800c448:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c44c:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c450:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c454:	d021      	beq.n	800c49a <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c456:	45dc      	cmp	ip, fp
	  k += r;
 800c458:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c45a:	da0a      	bge.n	800c472 <decode_mcu+0x2aa>
 800c45c:	465b      	mov	r3, fp
 800c45e:	4662      	mov	r2, ip
 800c460:	4671      	mov	r1, lr
 800c462:	a806      	add	r0, sp, #24
 800c464:	f7ff f972 	bl	800b74c <jpeg_fill_bit_buffer>
 800c468:	2800      	cmp	r0, #0
 800c46a:	f43f aec5 	beq.w	800c1f8 <decode_mcu+0x30>
 800c46e:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c472:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800c476:	3401      	adds	r4, #1
 800c478:	e744      	b.n	800c304 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c47a:	2301      	movs	r3, #1
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	4662      	mov	r2, ip
 800c480:	4643      	mov	r3, r8
 800c482:	4671      	mov	r1, lr
 800c484:	a806      	add	r0, sp, #24
 800c486:	f7ff f9bf 	bl	800b808 <jpeg_huff_decode>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	f6ff aeb4 	blt.w	800c1f8 <decode_mcu+0x30>
 800c490:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c494:	e7da      	b.n	800c44c <decode_mcu+0x284>
 800c496:	2309      	movs	r3, #9
 800c498:	e7f0      	b.n	800c47c <decode_mcu+0x2b4>
	  if (r != 15)
 800c49a:	2b0f      	cmp	r3, #15
 800c49c:	f47f af35 	bne.w	800c30a <decode_mcu+0x142>
	  k += 15;
 800c4a0:	340f      	adds	r4, #15
 800c4a2:	e7e8      	b.n	800c476 <decode_mcu+0x2ae>
 800c4a4:	0802d830 	.word	0x0802d830
 800c4a8:	0802bf58 	.word	0x0802bf58

0800c4ac <jpeg_make_d_derived_tbl>:
{
 800c4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c4b0:	2a03      	cmp	r2, #3
{
 800c4b2:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4616      	mov	r6, r2
 800c4ba:	461f      	mov	r7, r3
 800c4bc:	9103      	str	r1, [sp, #12]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c4be:	d905      	bls.n	800c4cc <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c4c0:	6803      	ldr	r3, [r0, #0]
 800c4c2:	2234      	movs	r2, #52	; 0x34
 800c4c4:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c4cc:	9b03      	ldr	r3, [sp, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d044      	beq.n	800c55c <jpeg_make_d_derived_tbl+0xb0>
 800c4d2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c4d6:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800c4da:	b935      	cbnz	r5, 800c4ea <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	2234      	movs	r2, #52	; 0x34
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4798      	blx	r3
  if (*pdtbl == NULL)
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	b93b      	cbnz	r3, 800c4fe <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c4ee:	6863      	ldr	r3, [r4, #4]
 800c4f0:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800c4f4:	2101      	movs	r1, #1
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800c4fc:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800c4fe:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800c502:	2601      	movs	r6, #1
  p = 0;
 800c504:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c506:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800c50a:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800c50e:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800c512:	46ba      	mov	sl, r7
 800c514:	444f      	add	r7, r9
 800c516:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800c51a:	dd05      	ble.n	800c528 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	4620      	mov	r0, r4
 800c520:	f8c3 b014 	str.w	fp, [r3, #20]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4798      	blx	r3
 800c528:	f10a 0318 	add.w	r3, sl, #24
 800c52c:	446b      	add	r3, sp
    while (i--)
 800c52e:	f1b9 0901 	subs.w	r9, r9, #1
 800c532:	d218      	bcs.n	800c566 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800c534:	3601      	adds	r6, #1
 800c536:	2e11      	cmp	r6, #17
 800c538:	d1e9      	bne.n	800c50e <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800c53a:	2200      	movs	r2, #0
 800c53c:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800c53e:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800c542:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800c546:	55da      	strb	r2, [r3, r7]
  p = 0;
 800c548:	4691      	mov	r9, r2
  si = huffsize[0];
 800c54a:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800c54e:	ab06      	add	r3, sp, #24
 800c550:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c554:	b313      	cbz	r3, 800c59c <jpeg_make_d_derived_tbl+0xf0>
 800c556:	4649      	mov	r1, r9
 800c558:	1a52      	subs	r2, r2, r1
 800c55a:	e00a      	b.n	800c572 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c55c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c560:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800c564:	e7b9      	b.n	800c4da <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800c566:	f803 6b01 	strb.w	r6, [r3], #1
 800c56a:	e7e0      	b.n	800c52e <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800c56c:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800c570:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800c572:	a806      	add	r0, sp, #24
 800c574:	1853      	adds	r3, r2, r1
 800c576:	4689      	mov	r9, r1
 800c578:	5c40      	ldrb	r0, [r0, r1]
 800c57a:	42b0      	cmp	r0, r6
 800c57c:	d0f6      	beq.n	800c56c <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800c57e:	fa0b f206 	lsl.w	r2, fp, r6
 800c582:	429a      	cmp	r2, r3
 800c584:	dc07      	bgt.n	800c596 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c586:	6822      	ldr	r2, [r4, #0]
 800c588:	2109      	movs	r1, #9
 800c58a:	4620      	mov	r0, r4
 800c58c:	9301      	str	r3, [sp, #4]
 800c58e:	6151      	str	r1, [r2, #20]
 800c590:	6812      	ldr	r2, [r2, #0]
 800c592:	4790      	blx	r2
 800c594:	9b01      	ldr	r3, [sp, #4]
    code <<= 1;
 800c596:	005a      	lsls	r2, r3, #1
    si++;
 800c598:	3601      	adds	r6, #1
 800c59a:	e7d8      	b.n	800c54e <jpeg_make_d_derived_tbl+0xa2>
 800c59c:	1c68      	adds	r0, r5, #1
 800c59e:	f108 0204 	add.w	r2, r8, #4
 800c5a2:	f108 0c44 	add.w	ip, r8, #68	; 0x44
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800c5a6:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c5aa:	ae47      	add	r6, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800c5ac:	f810 9b01 	ldrb.w	r9, [r0], #1
 800c5b0:	f1b9 0f00 	cmp.w	r9, #0
 800c5b4:	d029      	beq.n	800c60a <jpeg_make_d_derived_tbl+0x15e>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c5b6:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800c5ba:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800c5bc:	444b      	add	r3, r9
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800c5be:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800c5c0:	1e59      	subs	r1, r3, #1
 800c5c2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c5c6:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800c5c8:	3204      	adds	r2, #4
 800c5ca:	4594      	cmp	ip, r2
 800c5cc:	d1ee      	bne.n	800c5ac <jpeg_make_d_derived_tbl+0x100>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800c5ce:	4b2d      	ldr	r3, [pc, #180]	; (800c684 <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800c5d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800c5da:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800c5de:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800c5e0:	f01c f814 	bl	802860c <memset>
  p = 0;
 800c5e4:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c5e8:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c5ea:	5daa      	ldrb	r2, [r5, r6]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c5ec:	2101      	movs	r1, #1
 800c5ee:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c5f0:	9201      	str	r2, [sp, #4]
 800c5f2:	f1c6 0208 	rsb	r2, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c5f6:	fa01 fb02 	lsl.w	fp, r1, r2
 800c5fa:	9202      	str	r2, [sp, #8]
 800c5fc:	9a01      	ldr	r2, [sp, #4]
 800c5fe:	4452      	add	r2, sl
 800c600:	9204      	str	r2, [sp, #16]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c602:	f105 0211 	add.w	r2, r5, #17
 800c606:	9205      	str	r2, [sp, #20]
 800c608:	e020      	b.n	800c64c <jpeg_make_d_derived_tbl+0x1a0>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800c60a:	f8c2 e000 	str.w	lr, [r2]
 800c60e:	e7db      	b.n	800c5c8 <jpeg_make_d_derived_tbl+0x11c>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c610:	9a02      	ldr	r2, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c612:	46dc      	mov	ip, fp
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800c614:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800c618:	4090      	lsls	r0, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c61a:	9a05      	ldr	r2, [sp, #20]
 800c61c:	f812 1009 	ldrb.w	r1, [r2, r9]
 800c620:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800c624:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c628:	f1bc 0c01 	subs.w	ip, ip, #1
	dtbl->look_nbits[lookbits] = l;
 800c62c:	f842 6b04 	str.w	r6, [r2], #4
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800c630:	d1fa      	bne.n	800c628 <jpeg_make_d_derived_tbl+0x17c>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c632:	f1bb 0f00 	cmp.w	fp, #0
 800c636:	f500 6092 	add.w	r0, r0, #1168	; 0x490
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c63a:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800c63e:	bfcc      	ite	gt
 800c640:	465a      	movgt	r2, fp
 800c642:	2201      	movle	r2, #1
 800c644:	4440      	add	r0, r8
 800c646:	f01b ffe1 	bl	802860c <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800c64a:	ab47      	add	r3, sp, #284	; 0x11c
 800c64c:	9a04      	ldr	r2, [sp, #16]
 800c64e:	4591      	cmp	r9, r2
 800c650:	d1de      	bne.n	800c610 <jpeg_make_d_derived_tbl+0x164>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800c652:	3601      	adds	r6, #1
 800c654:	9a01      	ldr	r2, [sp, #4]
 800c656:	2e09      	cmp	r6, #9
 800c658:	4492      	add	sl, r2
 800c65a:	d1c6      	bne.n	800c5ea <jpeg_make_d_derived_tbl+0x13e>
  if (isDC) {
 800c65c:	9b03      	ldr	r3, [sp, #12]
 800c65e:	b11b      	cbz	r3, 800c668 <jpeg_make_d_derived_tbl+0x1bc>
 800c660:	3511      	adds	r5, #17
 800c662:	442f      	add	r7, r5
    for (i = 0; i < numsymbols; i++) {
 800c664:	42af      	cmp	r7, r5
 800c666:	d103      	bne.n	800c670 <jpeg_make_d_derived_tbl+0x1c4>
}
 800c668:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800c66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800c670:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800c674:	2b0f      	cmp	r3, #15
 800c676:	d9f5      	bls.n	800c664 <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	4620      	mov	r0, r4
 800c67c:	615e      	str	r6, [r3, #20]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800c682:	e7ef      	b.n	800c664 <jpeg_make_d_derived_tbl+0x1b8>
 800c684:	000fffff 	.word	0x000fffff

0800c688 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800c688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800c68c:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800c690:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c692:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800c696:	f500 74aa 	add.w	r4, r0, #340	; 0x154
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800c69a:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800c69e:	2d00      	cmp	r5, #0
 800c6a0:	f000 80b1 	beq.w	800c806 <start_pass_huff_decoder+0x17e>
    if (cinfo->Ss == 0) {
 800c6a4:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800c6a8:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800c6ac:	b962      	cbnz	r2, 800c6c8 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800c6ae:	b1a9      	cbz	r1, 800c6dc <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800c6b0:	f8da 3000 	ldr.w	r3, [sl]
 800c6b4:	2711      	movs	r7, #17
 800c6b6:	4650      	mov	r0, sl
 800c6b8:	625d      	str	r5, [r3, #36]	; 0x24
 800c6ba:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800c6be:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4798      	blx	r3
 800c6c6:	e00f      	b.n	800c6e8 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800c6c8:	428a      	cmp	r2, r1
 800c6ca:	dcf1      	bgt.n	800c6b0 <start_pass_huff_decoder+0x28>
 800c6cc:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800c6d0:	428b      	cmp	r3, r1
 800c6d2:	dbed      	blt.n	800c6b0 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800c6d4:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d1e9      	bne.n	800c6b0 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800c6dc:	b116      	cbz	r6, 800c6e4 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800c6de:	1e73      	subs	r3, r6, #1
 800c6e0:	42ab      	cmp	r3, r5
 800c6e2:	d1e5      	bne.n	800c6b0 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800c6e4:	2d0d      	cmp	r5, #13
 800c6e6:	dce3      	bgt.n	800c6b0 <start_pass_huff_decoder+0x28>
{
 800c6e8:	46a1      	mov	r9, r4
 800c6ea:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c6ec:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800c6f0:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c6f4:	42ba      	cmp	r2, r7
 800c6f6:	dc1e      	bgt.n	800c736 <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800c6f8:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800c6fc:	2a00      	cmp	r2, #0
 800c6fe:	d158      	bne.n	800c7b2 <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800c700:	2b00      	cmp	r3, #0
 800c702:	d154      	bne.n	800c7ae <start_pass_huff_decoder+0x126>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800c704:	4bbb      	ldr	r3, [pc, #748]	; (800c9f4 <start_pass_huff_decoder+0x36c>)
{
 800c706:	2600      	movs	r6, #0
 800c708:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800c70c:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c710:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c712:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800c716:	42b3      	cmp	r3, r6
 800c718:	dc50      	bgt.n	800c7bc <start_pass_huff_decoder+0x134>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800c720:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800c722:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800c726:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800c72a:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800c72e:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800c732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800c736:	f859 2b04 	ldr.w	r2, [r9], #4
 800c73a:	f8d2 8004 	ldr.w	r8, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800c73e:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800c742:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800c746:	eb02 2608 	add.w	r6, r2, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800c74a:	b173      	cbz	r3, 800c76a <start_pass_huff_decoder+0xe2>
 800c74c:	5853      	ldr	r3, [r2, r1]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	da0b      	bge.n	800c76a <start_pass_huff_decoder+0xe2>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800c752:	f8da 3000 	ldr.w	r3, [sl]
 800c756:	2276      	movs	r2, #118	; 0x76
 800c758:	f04f 31ff 	mov.w	r1, #4294967295
 800c75c:	4650      	mov	r0, sl
 800c75e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800c762:	2200      	movs	r2, #0
 800c764:	61da      	str	r2, [r3, #28]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c76a:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800c76e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800c772:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800c776:	42ab      	cmp	r3, r5
 800c778:	da01      	bge.n	800c77e <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c77a:	3701      	adds	r7, #1
 800c77c:	e7b6      	b.n	800c6ec <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800c77e:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800c780:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800c784:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800c788:	429a      	cmp	r2, r3
 800c78a:	d00a      	beq.n	800c7a2 <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800c78c:	f8da 3000 	ldr.w	r3, [sl]
 800c790:	2276      	movs	r2, #118	; 0x76
 800c792:	f04f 31ff 	mov.w	r1, #4294967295
 800c796:	4650      	mov	r0, sl
 800c798:	61dd      	str	r5, [r3, #28]
 800c79a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800c7a2:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c7a6:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800c7a8:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800c7ac:	e7e1      	b.n	800c772 <start_pass_huff_decoder+0xea>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800c7ae:	4b92      	ldr	r3, [pc, #584]	; (800c9f8 <start_pass_huff_decoder+0x370>)
 800c7b0:	e7a9      	b.n	800c706 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800c7b2:	b90b      	cbnz	r3, 800c7b8 <start_pass_huff_decoder+0x130>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800c7b4:	4b91      	ldr	r3, [pc, #580]	; (800c9fc <start_pass_huff_decoder+0x374>)
 800c7b6:	e7a6      	b.n	800c706 <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800c7b8:	4b91      	ldr	r3, [pc, #580]	; (800ca00 <start_pass_huff_decoder+0x378>)
 800c7ba:	e7a4      	b.n	800c706 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800c7bc:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800c7c0:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800c7c4:	b97a      	cbnz	r2, 800c7e6 <start_pass_huff_decoder+0x15e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800c7c6:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800c7ca:	b942      	cbnz	r2, 800c7de <start_pass_huff_decoder+0x156>
	  tbl = compptr->dc_tbl_no;
 800c7cc:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c7ce:	2101      	movs	r1, #1
 800c7d0:	4650      	mov	r0, sl
 800c7d2:	f102 030b 	add.w	r3, r2, #11
 800c7d6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c7da:	f7ff fe67 	bl	800c4ac <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c7de:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800c7e0:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c7e4:	e795      	b.n	800c712 <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800c7e6:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	4650      	mov	r0, sl
 800c7ec:	f105 030b 	add.w	r3, r5, #11
 800c7f0:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800c7f2:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c7f6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c7fa:	f7ff fe57 	bl	800c4ac <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800c7fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c800:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800c804:	e7eb      	b.n	800c7de <start_pass_huff_decoder+0x156>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800c806:	b982      	cbnz	r2, 800c82a <start_pass_huff_decoder+0x1a2>
 800c808:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800c80c:	b96b      	cbnz	r3, 800c82a <start_pass_huff_decoder+0x1a2>
 800c80e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800c812:	b953      	cbnz	r3, 800c82a <start_pass_huff_decoder+0x1a2>
 800c814:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800c818:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800c81c:	b90a      	cbnz	r2, 800c822 <start_pass_huff_decoder+0x19a>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800c81e:	2b3f      	cmp	r3, #63	; 0x3f
 800c820:	dc0c      	bgt.n	800c83c <start_pass_huff_decoder+0x1b4>
 800c822:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800c826:	429a      	cmp	r2, r3
 800c828:	d008      	beq.n	800c83c <start_pass_huff_decoder+0x1b4>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800c82a:	f8da 3000 	ldr.w	r3, [sl]
 800c82e:	227d      	movs	r2, #125	; 0x7d
 800c830:	f04f 31ff 	mov.w	r1, #4294967295
 800c834:	4650      	mov	r0, sl
 800c836:	615a      	str	r2, [r3, #20]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800c83c:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800c840:	2600      	movs	r6, #0
 800c842:	4b70      	ldr	r3, [pc, #448]	; (800ca04 <start_pass_huff_decoder+0x37c>)
 800c844:	f10b 0714 	add.w	r7, fp, #20
 800c848:	4a6f      	ldr	r2, [pc, #444]	; (800ca08 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c84a:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800c84c:	293f      	cmp	r1, #63	; 0x3f
 800c84e:	bf08      	it	eq
 800c850:	4613      	moveq	r3, r2
 800c852:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c856:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800c85a:	42b3      	cmp	r3, r6
 800c85c:	dc3c      	bgt.n	800c8d8 <start_pass_huff_decoder+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c85e:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800c862:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800c866:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800c86a:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c86e:	4f67      	ldr	r7, [pc, #412]	; (800ca0c <start_pass_huff_decoder+0x384>)
	  entropy->coef_limit[blkn] = 1;
 800c870:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c874:	42a8      	cmp	r0, r5
 800c876:	f77f af53 	ble.w	800c720 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800c87a:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800c87e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800c882:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800c886:	6953      	ldr	r3, [r2, #20]
 800c888:	3310      	adds	r3, #16
 800c88a:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c88e:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800c892:	6993      	ldr	r3, [r2, #24]
 800c894:	3314      	adds	r3, #20
 800c896:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c89a:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800c89c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d052      	beq.n	800c948 <start_pass_huff_decoder+0x2c0>
	switch (cinfo->lim_Se) {
 800c8a2:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800c8a6:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800c8a8:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800c8ac:	d075      	beq.n	800c99a <start_pass_huff_decoder+0x312>
 800c8ae:	dc30      	bgt.n	800c912 <start_pass_huff_decoder+0x28a>
 800c8b0:	2c03      	cmp	r4, #3
 800c8b2:	d04f      	beq.n	800c954 <start_pass_huff_decoder+0x2cc>
 800c8b4:	2c08      	cmp	r4, #8
 800c8b6:	d05d      	beq.n	800c974 <start_pass_huff_decoder+0x2ec>
 800c8b8:	2c00      	cmp	r4, #0
 800c8ba:	d047      	beq.n	800c94c <start_pass_huff_decoder+0x2c4>
	  if (ci <= 0 || ci > 8) ci = 8;
 800c8bc:	1e5c      	subs	r4, r3, #1
 800c8be:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800c8c0:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800c8c4:	bf28      	it	cs
 800c8c6:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800c8c8:	2c08      	cmp	r4, #8
 800c8ca:	bf28      	it	cs
 800c8cc:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c8ce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c8d2:	4b4f      	ldr	r3, [pc, #316]	; (800ca10 <start_pass_huff_decoder+0x388>)
 800c8d4:	3a09      	subs	r2, #9
 800c8d6:	e04a      	b.n	800c96e <start_pass_huff_decoder+0x2e6>
      compptr = cinfo->cur_comp_info[ci];
 800c8d8:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c8dc:	2101      	movs	r1, #1
 800c8de:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800c8e0:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800c8e4:	f102 0310 	add.w	r3, r2, #16
 800c8e8:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c8ec:	f7ff fdde 	bl	800c4ac <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800c8f0:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800c8f4:	b14b      	cbz	r3, 800c90a <start_pass_huff_decoder+0x282>
	tbl = compptr->ac_tbl_no;
 800c8f6:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	4650      	mov	r0, sl
 800c8fe:	f102 0314 	add.w	r3, r2, #20
 800c902:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800c906:	f7ff fdd1 	bl	800c4ac <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c90a:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800c90c:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800c910:	e7a1      	b.n	800c856 <start_pass_huff_decoder+0x1ce>
	switch (cinfo->lim_Se) {
 800c912:	2c23      	cmp	r4, #35	; 0x23
 800c914:	f103 3eff 	add.w	lr, r3, #4294967295
 800c918:	f102 39ff 	add.w	r9, r2, #4294967295
 800c91c:	d04b      	beq.n	800c9b6 <start_pass_huff_decoder+0x32e>
 800c91e:	2c30      	cmp	r4, #48	; 0x30
 800c920:	d057      	beq.n	800c9d2 <start_pass_huff_decoder+0x34a>
 800c922:	2c18      	cmp	r4, #24
 800c924:	d1ca      	bne.n	800c8bc <start_pass_huff_decoder+0x234>
	  if (ci <= 0 || ci > 5) ci = 5;
 800c926:	f1be 0f05 	cmp.w	lr, #5
 800c92a:	bf28      	it	cs
 800c92c:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800c92e:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c932:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800c936:	bf28      	it	cs
 800c938:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800c93a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c93e:	3a01      	subs	r2, #1
 800c940:	4413      	add	r3, r2
 800c942:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c946:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800c948:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c94a:	e001      	b.n	800c950 <start_pass_huff_decoder+0x2c8>
	  entropy->coef_limit[blkn] = 1;
 800c94c:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c950:	3501      	adds	r5, #1
 800c952:	e78f      	b.n	800c874 <start_pass_huff_decoder+0x1ec>
	  if (ci <= 0 || ci > 2) ci = 2;
 800c954:	1e5c      	subs	r4, r3, #1
 800c956:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800c958:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800c95c:	bf28      	it	cs
 800c95e:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800c960:	2c02      	cmp	r4, #2
 800c962:	bf28      	it	cs
 800c964:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800c966:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800c96a:	4b2a      	ldr	r3, [pc, #168]	; (800ca14 <start_pass_huff_decoder+0x38c>)
 800c96c:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800c96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c972:	e7e8      	b.n	800c946 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 3) ci = 3;
 800c974:	1e5c      	subs	r4, r3, #1
 800c976:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800c978:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800c97c:	bf28      	it	cs
 800c97e:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800c980:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800c982:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800c986:	bf28      	it	cs
 800c988:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800c98a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c98e:	3a01      	subs	r2, #1
 800c990:	4413      	add	r3, r2
 800c992:	4a21      	ldr	r2, [pc, #132]	; (800ca18 <start_pass_huff_decoder+0x390>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c998:	e7d5      	b.n	800c946 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 4) ci = 4;
 800c99a:	1e5c      	subs	r4, r3, #1
 800c99c:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800c99e:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800c9a2:	bf28      	it	cs
 800c9a4:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800c9a6:	2c04      	cmp	r4, #4
 800c9a8:	bf28      	it	cs
 800c9aa:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800c9ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c9b0:	4b1a      	ldr	r3, [pc, #104]	; (800ca1c <start_pass_huff_decoder+0x394>)
 800c9b2:	3a05      	subs	r2, #5
 800c9b4:	e7db      	b.n	800c96e <start_pass_huff_decoder+0x2e6>
	  if (ci <= 0 || ci > 6) ci = 6;
 800c9b6:	f1be 0f06 	cmp.w	lr, #6
 800c9ba:	bf28      	it	cs
 800c9bc:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800c9be:	f1b9 0f06 	cmp.w	r9, #6
 800c9c2:	bf28      	it	cs
 800c9c4:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	3a01      	subs	r2, #1
 800c9ca:	fb0c 2303 	mla	r3, ip, r3, r2
 800c9ce:	4a14      	ldr	r2, [pc, #80]	; (800ca20 <start_pass_huff_decoder+0x398>)
 800c9d0:	e7e0      	b.n	800c994 <start_pass_huff_decoder+0x30c>
	  if (ci <= 0 || ci > 7) ci = 7;
 800c9d2:	f1be 0f07 	cmp.w	lr, #7
 800c9d6:	bf28      	it	cs
 800c9d8:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800c9da:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c9de:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800c9e2:	bf28      	it	cs
 800c9e4:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800c9e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c9ea:	3a01      	subs	r2, #1
 800c9ec:	4413      	add	r3, r2
 800c9ee:	4a0d      	ldr	r2, [pc, #52]	; (800ca24 <start_pass_huff_decoder+0x39c>)
 800c9f0:	e7d0      	b.n	800c994 <start_pass_huff_decoder+0x30c>
 800c9f2:	bf00      	nop
 800c9f4:	0800b8e9 	.word	0x0800b8e9
 800c9f8:	0800ba5d 	.word	0x0800ba5d
 800c9fc:	0800bbbd 	.word	0x0800bbbd
 800ca00:	0800bc51 	.word	0x0800bc51
 800ca04:	0800bed9 	.word	0x0800bed9
 800ca08:	0800c1c9 	.word	0x0800c1c9
 800ca0c:	0802c10c 	.word	0x0802c10c
 800ca10:	0802bf98 	.word	0x0802bf98
 800ca14:	0802c098 	.word	0x0802c098
 800ca18:	0802c0a8 	.word	0x0802c0a8
 800ca1c:	0802c0cc 	.word	0x0802c0cc
 800ca20:	0802c170 	.word	0x0802c170
 800ca24:	0802c200 	.word	0x0802c200

0800ca28 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800ca28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca2a:	6843      	ldr	r3, [r0, #4]
 800ca2c:	22d8      	movs	r2, #216	; 0xd8
 800ca2e:	2101      	movs	r1, #1
{
 800ca30:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800ca36:	4b17      	ldr	r3, [pc, #92]	; (800ca94 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800ca38:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca3c:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800ca3e:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800ca40:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800ca44:	b943      	cbnz	r3, 800ca58 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800ca46:	6503      	str	r3, [r0, #80]	; 0x50
 800ca48:	6403      	str	r3, [r0, #64]	; 0x40
 800ca4a:	6543      	str	r3, [r0, #84]	; 0x54
 800ca4c:	6443      	str	r3, [r0, #68]	; 0x44
 800ca4e:	6583      	str	r3, [r0, #88]	; 0x58
 800ca50:	6483      	str	r3, [r0, #72]	; 0x48
 800ca52:	65c3      	str	r3, [r0, #92]	; 0x5c
 800ca54:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800ca56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca58:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ca5a:	2101      	movs	r1, #1
 800ca5c:	686b      	ldr	r3, [r5, #4]
 800ca5e:	4628      	mov	r0, r5
 800ca60:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ca62:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4798      	blx	r3
 800ca68:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800ca6a:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ca6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca70:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800ca74:	42b3      	cmp	r3, r6
 800ca76:	dc05      	bgt.n	800ca84 <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800ca7e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800ca82:	e7e8      	b.n	800ca56 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800ca84:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca88:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ca8a:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800ca8c:	f01b fdbe 	bl	802860c <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ca90:	e7ed      	b.n	800ca6e <jinit_huff_decoder+0x46>
 800ca92:	bf00      	nop
 800ca94:	0800c689 	.word	0x0800c689

0800ca98 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800ca98:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800ca9c:	4a01      	ldr	r2, [pc, #4]	; (800caa4 <finish_input_pass+0xc>)
 800ca9e:	601a      	str	r2, [r3, #0]
}
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	0800cc61 	.word	0x0800cc61

0800caa8 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800caa8:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800caaa:	4a0a      	ldr	r2, [pc, #40]	; (800cad4 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800caac:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800caae:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800cab2:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800cab4:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800cab6:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800cab8:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800cabc:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800cabe:	6803      	ldr	r3, [r0, #0]
 800cac0:	691b      	ldr	r3, [r3, #16]
 800cac2:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800cac4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cac8:	4620      	mov	r0, r4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800cace:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800cad2:	bd38      	pop	{r3, r4, r5, pc}
 800cad4:	0800cc61 	.word	0x0800cc61

0800cad8 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800cad8:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800cadc:	2a01      	cmp	r2, #1
{
 800cade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cae2:	4604      	mov	r4, r0
 800cae4:	f500 76aa 	add.w	r6, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800cae8:	d135      	bne.n	800cb56 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800caea:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800caee:	69d9      	ldr	r1, [r3, #28]
 800caf0:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800caf4:	6a19      	ldr	r1, [r3, #32]
 800caf6:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800cafa:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800cafc:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800cafe:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800cb02:	68d8      	ldr	r0, [r3, #12]
 800cb04:	fbb1 f5f0 	udiv	r5, r1, r0
 800cb08:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800cb0c:	2900      	cmp	r1, #0
 800cb0e:	bf08      	it	eq
 800cb10:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800cb12:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800cb16:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800cb18:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800cb1a:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800cb1e:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800cb22:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cb24:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800cb26:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cb2a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800cb2e:	429f      	cmp	r7, r3
 800cb30:	db71      	blt.n	800cc16 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800cb32:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800cb36:	4620      	mov	r0, r4
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800cb3c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800cb40:	4620      	mov	r0, r4
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800cb46:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800cb4a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800cb4e:	6852      	ldr	r2, [r2, #4]
 800cb50:	601a      	str	r2, [r3, #0]
}
 800cb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800cb56:	1e53      	subs	r3, r2, #1
 800cb58:	2b03      	cmp	r3, #3
 800cb5a:	d907      	bls.n	800cb6c <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800cb5c:	6803      	ldr	r3, [r0, #0]
 800cb5e:	211b      	movs	r1, #27
 800cb60:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800cb64:	2204      	movs	r2, #4
 800cb66:	61da      	str	r2, [r3, #28]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800cb6c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800cb70:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800cb72:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cb76:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800cb78:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800cb7a:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800cb7e:	4359      	muls	r1, r3
 800cb80:	f009 fdd4 	bl	801672c <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800cb84:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800cb88:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800cb8c:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800cb90:	4359      	muls	r1, r3
 800cb92:	6a20      	ldr	r0, [r4, #32]
 800cb94:	f009 fdca 	bl	801672c <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800cb98:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800cb9c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cba0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800cba4:	429d      	cmp	r5, r3
 800cba6:	dabc      	bge.n	800cb22 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800cba8:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800cbac:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800cbae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800cbb0:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800cbb2:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800cbb4:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800cbb8:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800cbba:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800cbbc:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800cbbe:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800cbc0:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800cbc2:	fbb2 fcf1 	udiv	ip, r2, r1
 800cbc6:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800cbca:	2a00      	cmp	r2, #0
 800cbcc:	bf08      	it	eq
 800cbce:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800cbd0:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800cbd2:	6a1a      	ldr	r2, [r3, #32]
 800cbd4:	fbb2 f1f0 	udiv	r1, r2, r0
 800cbd8:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800cbdc:	2a00      	cmp	r2, #0
 800cbde:	bf08      	it	eq
 800cbe0:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800cbe2:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800cbe4:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800cbe8:	443b      	add	r3, r7
 800cbea:	2b0a      	cmp	r3, #10
 800cbec:	dd05      	ble.n	800cbfa <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f8c3 9014 	str.w	r9, [r3, #20]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4798      	blx	r3
      while (mcublks-- > 0) {
 800cbfa:	2f00      	cmp	r7, #0
 800cbfc:	dc01      	bgt.n	800cc02 <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cbfe:	3501      	adds	r5, #1
 800cc00:	e7ce      	b.n	800cba0 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800cc02:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800cc06:	3f01      	subs	r7, #1
 800cc08:	1c5a      	adds	r2, r3, #1
 800cc0a:	335c      	adds	r3, #92	; 0x5c
 800cc0c:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800cc10:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800cc14:	e7f1      	b.n	800cbfa <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800cc16:	f859 6b04 	ldr.w	r6, [r9], #4
    if (compptr->quant_table != NULL)
 800cc1a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800cc1c:	b9eb      	cbnz	r3, 800cc5a <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800cc1e:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800cc20:	2a03      	cmp	r2, #3
 800cc22:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800cc26:	d803      	bhi.n	800cc30 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800cc28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	b92b      	cbnz	r3, 800cc3c <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800cc30:	6823      	ldr	r3, [r4, #0]
 800cc32:	4620      	mov	r0, r4
 800cc34:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc3c:	6863      	ldr	r3, [r4, #4]
 800cc3e:	2284      	movs	r2, #132	; 0x84
 800cc40:	2101      	movs	r1, #1
 800cc42:	4620      	mov	r0, r4
 800cc44:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800cc46:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cc4a:	4798      	blx	r3
 800cc4c:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800cc4e:	2284      	movs	r2, #132	; 0x84
 800cc50:	6869      	ldr	r1, [r5, #4]
 800cc52:	f01b fccd 	bl	80285f0 <memcpy>
    compptr->quant_table = qtbl;
 800cc56:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cc5a:	3701      	adds	r7, #1
 800cc5c:	e765      	b.n	800cb2a <start_input_pass+0x52>
	...

0800cc60 <consume_markers>:
{
 800cc60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800cc64:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800cc68:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800cc6a:	6973      	ldr	r3, [r6, #20]
 800cc6c:	b9eb      	cbnz	r3, 800ccaa <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800cc6e:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800cc72:	4db0      	ldr	r5, [pc, #704]	; (800cf34 <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800cc74:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cc78:	4620      	mov	r0, r4
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	4798      	blx	r3
    switch (val) {
 800cc7e:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800cc80:	4607      	mov	r7, r0
    switch (val) {
 800cc82:	d016      	beq.n	800ccb2 <consume_markers+0x52>
 800cc84:	2802      	cmp	r0, #2
 800cc86:	d111      	bne.n	800ccac <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800cc8c:	69b3      	ldr	r3, [r6, #24]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 8174 	beq.w	800cf7c <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800cc94:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	b133      	cbz	r3, 800ccaa <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800cc9c:	6823      	ldr	r3, [r4, #0]
 800cc9e:	223d      	movs	r2, #61	; 0x3d
 800cca0:	4620      	mov	r0, r4
 800cca2:	615a      	str	r2, [r3, #20]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4798      	blx	r3
 800cca8:	e000      	b.n	800ccac <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800ccaa:	2702      	movs	r7, #2
}
 800ccac:	4638      	mov	r0, r7
 800ccae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800ccb2:	69b3      	ldr	r3, [r6, #24]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f000 8150 	beq.w	800cf5a <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	f040 80d8 	bne.w	800ce70 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800ccc0:	6a22      	ldr	r2, [r4, #32]
 800ccc2:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	dc02      	bgt.n	800ccd0 <consume_markers+0x70>
 800ccca:	69e2      	ldr	r2, [r4, #28]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	dd08      	ble.n	800cce2 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	212a      	movs	r1, #42	; 0x2a
 800ccd4:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800ccd8:	4620      	mov	r0, r4
 800ccda:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800cce2:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800cce6:	2a08      	cmp	r2, #8
 800cce8:	d006      	beq.n	800ccf8 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	2110      	movs	r1, #16
 800ccee:	4620      	mov	r0, r4
 800ccf0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800ccf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ccfa:	2a0a      	cmp	r2, #10
 800ccfc:	dd08      	ble.n	800cd10 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	211b      	movs	r1, #27
 800cd02:	4620      	mov	r0, r4
 800cd04:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800cd08:	220a      	movs	r2, #10
 800cd0a:	61da      	str	r2, [r3, #28]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cd10:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800cd14:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800cd18:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800cd1c:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800cd20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd22:	459a      	cmp	sl, r3
 800cd24:	db0d      	blt.n	800cd42 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800cd26:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800cd2a:	b92b      	cbnz	r3, 800cd38 <consume_markers+0xd8>
 800cd2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800cd30:	b383      	cbz	r3, 800cd94 <consume_markers+0x134>
 800cd32:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800cd36:	b36b      	cbz	r3, 800cd94 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800cd38:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800cd3a:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800cd3e:	233f      	movs	r3, #63	; 0x3f
 800cd40:	e071      	b.n	800ce26 <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800cd42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd46:	3b01      	subs	r3, #1
 800cd48:	2b03      	cmp	r3, #3
 800cd4a:	d804      	bhi.n	800cd56 <consume_markers+0xf6>
 800cd4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cd50:	3b01      	subs	r3, #1
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d905      	bls.n	800cd62 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	4620      	mov	r0, r4
 800cd5a:	f8c3 b014 	str.w	fp, [r3, #20]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800cd62:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800cd66:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800cd6a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800cd6e:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800cd72:	429a      	cmp	r2, r3
 800cd74:	bfac      	ite	ge
 800cd76:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800cd7a:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800cd7e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800cd82:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	bfac      	ite	ge
 800cd8a:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800cd8e:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800cd92:	e7c5      	b.n	800cd20 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800cd94:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800cd98:	2b50      	cmp	r3, #80	; 0x50
 800cd9a:	f000 808a 	beq.w	800ceb2 <consume_markers+0x252>
 800cd9e:	dc2b      	bgt.n	800cdf8 <consume_markers+0x198>
 800cda0:	2b18      	cmp	r3, #24
 800cda2:	d078      	beq.n	800ce96 <consume_markers+0x236>
 800cda4:	dc1d      	bgt.n	800cde2 <consume_markers+0x182>
 800cda6:	2b08      	cmp	r3, #8
 800cda8:	d070      	beq.n	800ce8c <consume_markers+0x22c>
 800cdaa:	dc13      	bgt.n	800cdd4 <consume_markers+0x174>
 800cdac:	b3bb      	cbz	r3, 800ce1e <consume_markers+0x1be>
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d065      	beq.n	800ce7e <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800cdb2:	6822      	ldr	r2, [r4, #0]
 800cdb4:	2111      	movs	r1, #17
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	6151      	str	r1, [r2, #20]
 800cdba:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800cdbe:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800cdc2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800cdc6:	6213      	str	r3, [r2, #32]
 800cdc8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800cdcc:	6253      	str	r3, [r2, #36]	; 0x24
 800cdce:	6813      	ldr	r3, [r2, #0]
 800cdd0:	4798      	blx	r3
      break;
 800cdd2:	e02a      	b.n	800ce2a <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800cdd4:	2b0f      	cmp	r3, #15
 800cdd6:	d1ec      	bne.n	800cdb2 <consume_markers+0x152>
      cinfo->block_size = 4;
 800cdd8:	2204      	movs	r2, #4
 800cdda:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800cdde:	4a56      	ldr	r2, [pc, #344]	; (800cf38 <consume_markers+0x2d8>)
 800cde0:	e051      	b.n	800ce86 <consume_markers+0x226>
    switch (cinfo->Se) {
 800cde2:	2b30      	cmp	r3, #48	; 0x30
 800cde4:	d05c      	beq.n	800cea0 <consume_markers+0x240>
 800cde6:	2b3f      	cmp	r3, #63	; 0x3f
 800cde8:	d05f      	beq.n	800ceaa <consume_markers+0x24a>
 800cdea:	2b23      	cmp	r3, #35	; 0x23
 800cdec:	d1e1      	bne.n	800cdb2 <consume_markers+0x152>
      cinfo->block_size = 6;
 800cdee:	2206      	movs	r2, #6
 800cdf0:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800cdf4:	4a51      	ldr	r2, [pc, #324]	; (800cf3c <consume_markers+0x2dc>)
 800cdf6:	e046      	b.n	800ce86 <consume_markers+0x226>
    switch (cinfo->Se) {
 800cdf8:	2ba8      	cmp	r3, #168	; 0xa8
 800cdfa:	d060      	beq.n	800cebe <consume_markers+0x25e>
 800cdfc:	dc07      	bgt.n	800ce0e <consume_markers+0x1ae>
 800cdfe:	2b78      	cmp	r3, #120	; 0x78
 800ce00:	d059      	beq.n	800ceb6 <consume_markers+0x256>
 800ce02:	2b8f      	cmp	r3, #143	; 0x8f
 800ce04:	d059      	beq.n	800ceba <consume_markers+0x25a>
 800ce06:	2b63      	cmp	r3, #99	; 0x63
 800ce08:	d1d3      	bne.n	800cdb2 <consume_markers+0x152>
      cinfo->block_size = 10;
 800ce0a:	230a      	movs	r3, #10
 800ce0c:	e795      	b.n	800cd3a <consume_markers+0xda>
    switch (cinfo->Se) {
 800ce0e:	2be0      	cmp	r3, #224	; 0xe0
 800ce10:	d057      	beq.n	800cec2 <consume_markers+0x262>
 800ce12:	2bff      	cmp	r3, #255	; 0xff
 800ce14:	d057      	beq.n	800cec6 <consume_markers+0x266>
 800ce16:	2bc3      	cmp	r3, #195	; 0xc3
 800ce18:	d1cb      	bne.n	800cdb2 <consume_markers+0x152>
      cinfo->block_size = 14;
 800ce1a:	230e      	movs	r3, #14
 800ce1c:	e78d      	b.n	800cd3a <consume_markers+0xda>
      cinfo->block_size = 1;
 800ce1e:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800ce22:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800ce26:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ce2a:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800ce2e:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ce32:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800ce36:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800ce38:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ce3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800ce3e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ce42:	459a      	cmp	sl, r3
 800ce44:	db41      	blt.n	800ceca <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ce46:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800ce4a:	6a20      	ldr	r0, [r4, #32]
 800ce4c:	4359      	muls	r1, r3
 800ce4e:	f009 fc6d 	bl	801672c <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800ce52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce54:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800ce58:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ce62:	db03      	blt.n	800ce6c <consume_markers+0x20c>
 800ce64:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800ce68:	2a00      	cmp	r2, #0
 800ce6a:	d071      	beq.n	800cf50 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800ce6c:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800ce70:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d16d      	bne.n	800cf54 <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800ce78:	2302      	movs	r3, #2
 800ce7a:	61b3      	str	r3, [r6, #24]
	  break;
 800ce7c:	e6fa      	b.n	800cc74 <consume_markers+0x14>
      cinfo->block_size = 2;
 800ce7e:	2202      	movs	r2, #2
 800ce80:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800ce84:	4a2e      	ldr	r2, [pc, #184]	; (800cf40 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800ce86:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800ce8a:	e7cc      	b.n	800ce26 <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800ce8c:	2203      	movs	r2, #3
 800ce8e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800ce92:	4a2c      	ldr	r2, [pc, #176]	; (800cf44 <consume_markers+0x2e4>)
 800ce94:	e7f7      	b.n	800ce86 <consume_markers+0x226>
      cinfo->block_size = 5;
 800ce96:	2205      	movs	r2, #5
 800ce98:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800ce9c:	4a2a      	ldr	r2, [pc, #168]	; (800cf48 <consume_markers+0x2e8>)
 800ce9e:	e7f2      	b.n	800ce86 <consume_markers+0x226>
      cinfo->block_size = 7;
 800cea0:	2207      	movs	r2, #7
 800cea2:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800cea6:	4a29      	ldr	r2, [pc, #164]	; (800cf4c <consume_markers+0x2ec>)
 800cea8:	e7ed      	b.n	800ce86 <consume_markers+0x226>
      cinfo->block_size = 8;
 800ceaa:	2208      	movs	r2, #8
 800ceac:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800ceb0:	e7b7      	b.n	800ce22 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800ceb2:	2309      	movs	r3, #9
 800ceb4:	e741      	b.n	800cd3a <consume_markers+0xda>
      cinfo->block_size = 11;
 800ceb6:	230b      	movs	r3, #11
 800ceb8:	e73f      	b.n	800cd3a <consume_markers+0xda>
      cinfo->block_size = 12;
 800ceba:	230c      	movs	r3, #12
 800cebc:	e73d      	b.n	800cd3a <consume_markers+0xda>
      cinfo->block_size = 13;
 800cebe:	230d      	movs	r3, #13
 800cec0:	e73b      	b.n	800cd3a <consume_markers+0xda>
      cinfo->block_size = 15;
 800cec2:	230f      	movs	r3, #15
 800cec4:	e739      	b.n	800cd3a <consume_markers+0xda>
      cinfo->block_size = 16;
 800cec6:	2310      	movs	r3, #16
 800cec8:	e737      	b.n	800cd3a <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800ceca:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800cece:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800ced2:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800ced6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800ceda:	69e3      	ldr	r3, [r4, #28]
 800cedc:	4351      	muls	r1, r2
 800cede:	4358      	muls	r0, r3
 800cee0:	f009 fc24 	bl	801672c <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800cee4:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800cee8:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ceec:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800cef0:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800cef2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800cef6:	4358      	muls	r0, r3
 800cef8:	4351      	muls	r1, r2
 800cefa:	f009 fc17 	bl	801672c <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800cefe:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800cf02:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800cf06:	69e3      	ldr	r3, [r4, #28]
 800cf08:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800cf0c:	4358      	muls	r0, r3
 800cf0e:	f009 fc0d 	bl	801672c <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800cf12:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800cf16:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800cf1a:	6a23      	ldr	r3, [r4, #32]
 800cf1c:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800cf20:	4358      	muls	r0, r3
 800cf22:	f009 fc03 	bl	801672c <jdiv_round_up>
    compptr->quant_table = NULL;
 800cf26:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800cf2a:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800cf2e:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800cf32:	e783      	b.n	800ce3c <consume_markers+0x1dc>
 800cf34:	0802d830 	.word	0x0802d830
 800cf38:	0802da24 	.word	0x0802da24
 800cf3c:	0802db48 	.word	0x0802db48
 800cf40:	0802d970 	.word	0x0802d970
 800cf44:	0802d9c0 	.word	0x0802d9c0
 800cf48:	0802daa4 	.word	0x0802daa4
 800cf4c:	0802dc18 	.word	0x0802dc18
    cinfo->inputctl->has_multiple_scans = FALSE;
 800cf50:	611a      	str	r2, [r3, #16]
 800cf52:	e78d      	b.n	800ce70 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800cf54:	2300      	movs	r3, #0
 800cf56:	61b3      	str	r3, [r6, #24]
 800cf58:	e6a8      	b.n	800ccac <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800cf5a:	6933      	ldr	r3, [r6, #16]
 800cf5c:	b92b      	cbnz	r3, 800cf6a <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	2224      	movs	r2, #36	; 0x24
 800cf62:	4620      	mov	r0, r4
 800cf64:	615a      	str	r2, [r3, #20]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800cf6a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f43f ae80 	beq.w	800cc74 <consume_markers+0x14>
	start_input_pass(cinfo);
 800cf74:	4620      	mov	r0, r4
 800cf76:	f7ff fdaf 	bl	800cad8 <start_input_pass>
 800cf7a:	e697      	b.n	800ccac <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800cf7c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800cf80:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800cf84:	429a      	cmp	r2, r3
 800cf86:	f77f ae90 	ble.w	800ccaa <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800cf8a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800cf8e:	e68d      	b.n	800ccac <consume_markers+0x4c>

0800cf90 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800cf90:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800cf94:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800cf96:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cf98:	434a      	muls	r2, r1
 800cf9a:	429a      	cmp	r2, r3
{
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800cfa0:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800cfa2:	d80c      	bhi.n	800cfbe <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800cfa4:	f009 fbc2 	bl	801672c <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800cfa8:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800cfac:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800cfae:	6a20      	ldr	r0, [r4, #32]
 800cfb0:	f009 fbbc 	bl	801672c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800cfb4:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800cfb6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800cfb8:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800cfbc:	e059      	b.n	800d072 <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800cfbe:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800cfc2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800cfc6:	d80c      	bhi.n	800cfe2 <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800cfc8:	0040      	lsls	r0, r0, #1
 800cfca:	f009 fbaf 	bl	801672c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cfce:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800cfd0:	6a20      	ldr	r0, [r4, #32]
 800cfd2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cfd6:	0040      	lsls	r0, r0, #1
 800cfd8:	f009 fba8 	bl	801672c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800cfdc:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800cfde:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800cfe0:	e7ea      	b.n	800cfb8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800cfe2:	441d      	add	r5, r3
 800cfe4:	42aa      	cmp	r2, r5
 800cfe6:	d80e      	bhi.n	800d006 <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800cfe8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800cfec:	f009 fb9e 	bl	801672c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800cff0:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800cff2:	6a20      	ldr	r0, [r4, #32]
 800cff4:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cff8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800cffc:	f009 fb96 	bl	801672c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800d000:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800d002:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800d004:	e7d8      	b.n	800cfb8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800d006:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800d00a:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800d00e:	d80c      	bhi.n	800d02a <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800d010:	0080      	lsls	r0, r0, #2
 800d012:	f009 fb8b 	bl	801672c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d016:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800d018:	6a20      	ldr	r0, [r4, #32]
 800d01a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d01e:	0080      	lsls	r0, r0, #2
 800d020:	f009 fb84 	bl	801672c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800d024:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800d026:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800d028:	e7c6      	b.n	800cfb8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800d02a:	441d      	add	r5, r3
 800d02c:	42aa      	cmp	r2, r5
 800d02e:	d80e      	bhi.n	800d04e <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800d030:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d034:	f009 fb7a 	bl	801672c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d038:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800d03a:	6a20      	ldr	r0, [r4, #32]
 800d03c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d040:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d044:	f009 fb72 	bl	801672c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800d048:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800d04a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800d04c:	e7b4      	b.n	800cfb8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800d04e:	2506      	movs	r5, #6
 800d050:	fb05 f603 	mul.w	r6, r5, r3
 800d054:	42b2      	cmp	r2, r6
 800d056:	d813      	bhi.n	800d080 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800d058:	4368      	muls	r0, r5
 800d05a:	f009 fb67 	bl	801672c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d05e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800d060:	6a20      	ldr	r0, [r4, #32]
 800d062:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d066:	4368      	muls	r0, r5
 800d068:	f009 fb60 	bl	801672c <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800d06c:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800d06e:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d072:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d076:	2200      	movs	r2, #0
 800d078:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d07a:	4291      	cmp	r1, r2
 800d07c:	dc6f      	bgt.n	800d15e <jpeg_core_output_dimensions+0x1ce>
}
 800d07e:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800d080:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800d084:	00dd      	lsls	r5, r3, #3
 800d086:	42b2      	cmp	r2, r6
 800d088:	d80e      	bhi.n	800d0a8 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800d08a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d08e:	f009 fb4d 	bl	801672c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d092:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800d094:	6a20      	ldr	r0, [r4, #32]
 800d096:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d09a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d09e:	f009 fb45 	bl	801672c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800d0a2:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800d0a4:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800d0a6:	e787      	b.n	800cfb8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800d0a8:	42aa      	cmp	r2, r5
 800d0aa:	d80c      	bhi.n	800d0c6 <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800d0ac:	00c0      	lsls	r0, r0, #3
 800d0ae:	f009 fb3d 	bl	801672c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d0b2:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800d0b4:	6a20      	ldr	r0, [r4, #32]
 800d0b6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d0ba:	00c0      	lsls	r0, r0, #3
 800d0bc:	f009 fb36 	bl	801672c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800d0c0:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800d0c2:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800d0c4:	e778      	b.n	800cfb8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800d0c6:	441d      	add	r5, r3
 800d0c8:	42aa      	cmp	r2, r5
 800d0ca:	d80e      	bhi.n	800d0ea <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800d0cc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d0d0:	f009 fb2c 	bl	801672c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d0d4:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800d0d6:	6a20      	ldr	r0, [r4, #32]
 800d0d8:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d0dc:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d0e0:	f009 fb24 	bl	801672c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800d0e4:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800d0e6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800d0e8:	e766      	b.n	800cfb8 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800d0ea:	250a      	movs	r5, #10
 800d0ec:	fb05 f603 	mul.w	r6, r5, r3
 800d0f0:	42b2      	cmp	r2, r6
 800d0f2:	d9b1      	bls.n	800d058 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800d0f4:	250b      	movs	r5, #11
 800d0f6:	fb05 f603 	mul.w	r6, r5, r3
 800d0fa:	42b2      	cmp	r2, r6
 800d0fc:	d9ac      	bls.n	800d058 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800d0fe:	250c      	movs	r5, #12
 800d100:	fb05 f603 	mul.w	r6, r5, r3
 800d104:	42b2      	cmp	r2, r6
 800d106:	d9a7      	bls.n	800d058 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800d108:	250d      	movs	r5, #13
 800d10a:	fb05 f603 	mul.w	r6, r5, r3
 800d10e:	42b2      	cmp	r2, r6
 800d110:	d9a2      	bls.n	800d058 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800d112:	250e      	movs	r5, #14
 800d114:	fb05 f603 	mul.w	r6, r5, r3
 800d118:	42b2      	cmp	r2, r6
 800d11a:	d99d      	bls.n	800d058 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800d11c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800d120:	429a      	cmp	r2, r3
 800d122:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800d126:	d80d      	bhi.n	800d144 <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800d128:	1a18      	subs	r0, r3, r0
 800d12a:	f009 faff 	bl	801672c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d12e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800d130:	6a20      	ldr	r0, [r4, #32]
 800d132:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d136:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800d13a:	f009 faf7 	bl	801672c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800d13e:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800d140:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800d142:	e739      	b.n	800cfb8 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800d144:	4618      	mov	r0, r3
 800d146:	f009 faf1 	bl	801672c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d14a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800d14c:	6a20      	ldr	r0, [r4, #32]
 800d14e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d152:	0100      	lsls	r0, r0, #4
 800d154:	f009 faea 	bl	801672c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800d158:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800d15a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800d15c:	e72c      	b.n	800cfb8 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d15e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800d162:	3201      	adds	r2, #1
 800d164:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d166:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800d16a:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800d16e:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800d172:	e782      	b.n	800d07a <jpeg_core_output_dimensions+0xea>

0800d174 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d174:	6843      	ldr	r3, [r0, #4]
 800d176:	221c      	movs	r2, #28
 800d178:	2100      	movs	r1, #0
 800d17a:	681b      	ldr	r3, [r3, #0]
{
 800d17c:	b510      	push	{r4, lr}
 800d17e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d180:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800d182:	4b08      	ldr	r3, [pc, #32]	; (800d1a4 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800d184:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800d188:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800d18a:	4b07      	ldr	r3, [pc, #28]	; (800d1a8 <jinit_input_controller+0x34>)
 800d18c:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800d18e:	4b07      	ldr	r3, [pc, #28]	; (800d1ac <jinit_input_controller+0x38>)
 800d190:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800d192:	4b07      	ldr	r3, [pc, #28]	; (800d1b0 <jinit_input_controller+0x3c>)
 800d194:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800d196:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800d198:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800d19c:	2301      	movs	r3, #1
 800d19e:	6183      	str	r3, [r0, #24]
}
 800d1a0:	bd10      	pop	{r4, pc}
 800d1a2:	bf00      	nop
 800d1a4:	0800cc61 	.word	0x0800cc61
 800d1a8:	0800caa9 	.word	0x0800caa9
 800d1ac:	0800cad9 	.word	0x0800cad9
 800d1b0:	0800ca99 	.word	0x0800ca99

0800d1b4 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800d1b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d1b8:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800d1bc:	4602      	mov	r2, r0

  switch (pass_mode) {
 800d1be:	b149      	cbz	r1, 800d1d4 <start_pass_main+0x20>
 800d1c0:	2902      	cmp	r1, #2
 800d1c2:	d070      	beq.n	800d2a6 <start_pass_main+0xf2>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d1c4:	6803      	ldr	r3, [r0, #0]
 800d1c6:	2203      	movs	r2, #3
 800d1c8:	615a      	str	r2, [r3, #20]
 800d1ca:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800d1cc:	b003      	add	sp, #12
 800d1ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d1d2:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800d1d4:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800d1d8:	6880      	ldr	r0, [r0, #8]
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d060      	beq.n	800d2a0 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800d1de:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800d1e2:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d1e6:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800d1ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800d1ec:	482f      	ldr	r0, [pc, #188]	; (800d2ac <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d1ee:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d1f0:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800d1f2:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d1f4:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d1f6:	9a00      	ldr	r2, [sp, #0]
 800d1f8:	4291      	cmp	r1, r2
 800d1fa:	db09      	blt.n	800d210 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800d1fc:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800d1fe:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800d202:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800d204:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800d206:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800d20a:	b003      	add	sp, #12
 800d20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d210:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800d212:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d214:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d216:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d218:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800d21a:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800d21e:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d222:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d224:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800d228:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d22c:	fb02 f905 	mul.w	r9, r2, r5
 800d230:	2500      	movs	r5, #0
 800d232:	454d      	cmp	r5, r9
 800d234:	db1c      	blt.n	800d270 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d236:	fb02 fb07 	mul.w	fp, r2, r7
 800d23a:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800d23e:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d242:	fb05 b502 	mla	r5, r5, r2, fp
 800d246:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800d24a:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800d24e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d252:	2400      	movs	r4, #0
 800d254:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800d258:	4554      	cmp	r4, sl
 800d25a:	db11      	blt.n	800d280 <start_pass_main+0xcc>
 800d25c:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800d260:	2400      	movs	r4, #0
 800d262:	fb00 c502 	mla	r5, r0, r2, ip
 800d266:	42a2      	cmp	r2, r4
 800d268:	dc14      	bgt.n	800d294 <start_pass_main+0xe0>
       ci++, compptr++) {
 800d26a:	3101      	adds	r1, #1
 800d26c:	3658      	adds	r6, #88	; 0x58
 800d26e:	e7c2      	b.n	800d1f6 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800d270:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800d274:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800d278:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d27c:	3501      	adds	r5, #1
 800d27e:	e7d8      	b.n	800d232 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d280:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d284:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d286:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800d28a:	f855 bb04 	ldr.w	fp, [r5], #4
 800d28e:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d292:	e7e1      	b.n	800d258 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800d294:	f8dc 0000 	ldr.w	r0, [ip]
 800d298:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d29c:	3401      	adds	r4, #1
 800d29e:	e7e2      	b.n	800d266 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800d2a0:	4a03      	ldr	r2, [pc, #12]	; (800d2b0 <start_pass_main+0xfc>)
 800d2a2:	605a      	str	r2, [r3, #4]
 800d2a4:	e7ae      	b.n	800d204 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800d2a6:	4a03      	ldr	r2, [pc, #12]	; (800d2b4 <start_pass_main+0x100>)
 800d2a8:	605a      	str	r2, [r3, #4]
    break;
 800d2aa:	e7ae      	b.n	800d20a <start_pass_main+0x56>
 800d2ac:	0800d311 	.word	0x0800d311
 800d2b0:	0800d2b9 	.word	0x0800d2b9
 800d2b4:	0800d505 	.word	0x0800d505

0800d2b8 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800d2b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d2bc:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d2c0:	4698      	mov	r8, r3
 800d2c2:	460e      	mov	r6, r1
 800d2c4:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d2c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d2cc:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800d2d0:	b943      	cbnz	r3, 800d2e4 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d2d2:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800d2d6:	9105      	str	r1, [sp, #20]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	4798      	blx	r3
 800d2dc:	b1a8      	cbz	r0, 800d30a <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d2de:	2301      	movs	r3, #1
 800d2e0:	9905      	ldr	r1, [sp, #20]
 800d2e2:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800d2e4:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800d2e8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d2ec:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	9600      	str	r6, [sp, #0]
 800d2f4:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d2f8:	685e      	ldr	r6, [r3, #4]
 800d2fa:	464b      	mov	r3, r9
 800d2fc:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800d2fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d300:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800d302:	bf24      	itt	cs
 800d304:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800d306:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800d30a:	b007      	add	sp, #28
 800d30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d310 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800d310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d314:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d318:	4698      	mov	r8, r3
 800d31a:	b08b      	sub	sp, #44	; 0x2c
 800d31c:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d31e:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d320:	4689      	mov	r9, r1
 800d322:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800d324:	b973      	cbnz	r3, 800d344 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800d326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d328:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800d32c:	330e      	adds	r3, #14
 800d32e:	68d2      	ldr	r2, [r2, #12]
 800d330:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800d334:	4790      	blx	r2
 800d336:	2800      	cmp	r0, #0
 800d338:	d05a      	beq.n	800d3f0 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d33a:	2301      	movs	r3, #1
 800d33c:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800d33e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d340:	3301      	adds	r3, #1
 800d342:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800d344:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d346:	2b01      	cmp	r3, #1
 800d348:	d011      	beq.n	800d36e <process_data_context_main+0x5e>
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d036      	beq.n	800d3bc <process_data_context_main+0xac>
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d14e      	bne.n	800d3f0 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d352:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800d356:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d358:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d35a:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800d35e:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d360:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d362:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800d366:	429a      	cmp	r2, r3
 800d368:	d045      	beq.n	800d3f6 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800d36a:	2301      	movs	r3, #1
 800d36c:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d36e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d370:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d374:	4628      	mov	r0, r5
 800d376:	f103 010e 	add.w	r1, r3, #14
 800d37a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d37e:	f8cd 9000 	str.w	r9, [sp]
 800d382:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d386:	685e      	ldr	r6, [r3, #4]
 800d388:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d38c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d38e:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d390:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d392:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d394:	429a      	cmp	r2, r3
 800d396:	d32b      	bcc.n	800d3f0 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800d398:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800d39a:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800d39e:	2b01      	cmp	r3, #1
 800d3a0:	d063      	beq.n	800d46a <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800d3a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3a4:	f083 0301 	eor.w	r3, r3, #1
 800d3a8:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d3ae:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d3b0:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d3b2:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800d3b4:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d3b6:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800d3b8:	6463      	str	r3, [r4, #68]	; 0x44
 800d3ba:	e019      	b.n	800d3f0 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d3bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3be:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f103 010e 	add.w	r1, r3, #14
 800d3c8:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d3cc:	f8cd 9000 	str.w	r9, [sp]
 800d3d0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d3d4:	685e      	ldr	r6, [r3, #4]
 800d3d6:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d3da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d3dc:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d3de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d3e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d304      	bcc.n	800d3f0 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	4543      	cmp	r3, r8
 800d3ee:	d3b0      	bcc.n	800d352 <process_data_context_main+0x42>
  }
}
 800d3f0:	b00b      	add	sp, #44	; 0x2c
 800d3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d3f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d3f8:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d3fc:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d400:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800d404:	9206      	str	r2, [sp, #24]
 800d406:	9a06      	ldr	r2, [sp, #24]
 800d408:	4296      	cmp	r6, r2
 800d40a:	daae      	bge.n	800d36a <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800d40c:	68d8      	ldr	r0, [r3, #12]
 800d40e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d410:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800d412:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d414:	fbb0 fbf2 	udiv	fp, r0, r2
 800d418:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800d41c:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800d420:	2800      	cmp	r0, #0
 800d422:	bf08      	it	eq
 800d424:	4610      	moveq	r0, r2
    if (ci == 0) {
 800d426:	b926      	cbnz	r6, 800d432 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800d428:	1e42      	subs	r2, r0, #1
 800d42a:	fb92 f2fa 	sdiv	r2, r2, sl
 800d42e:	3201      	adds	r2, #1
 800d430:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800d432:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d434:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800d436:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800d43a:	320e      	adds	r2, #14
 800d43c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d440:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d444:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d448:	2200      	movs	r2, #0
 800d44a:	4658      	mov	r0, fp
 800d44c:	3004      	adds	r0, #4
 800d44e:	9205      	str	r2, [sp, #20]
 800d450:	9a05      	ldr	r2, [sp, #20]
 800d452:	4552      	cmp	r2, sl
 800d454:	db02      	blt.n	800d45c <process_data_context_main+0x14c>
       ci++, compptr++) {
 800d456:	3601      	adds	r6, #1
 800d458:	3358      	adds	r3, #88	; 0x58
 800d45a:	e7d4      	b.n	800d406 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d45c:	f8db 2000 	ldr.w	r2, [fp]
 800d460:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d464:	9a05      	ldr	r2, [sp, #20]
 800d466:	3201      	adds	r2, #1
 800d468:	e7f1      	b.n	800d44e <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d46a:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d46e:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d472:	9305      	str	r3, [sp, #20]
 800d474:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d476:	2500      	movs	r5, #0
 800d478:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d47a:	1c43      	adds	r3, r0, #1
 800d47c:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d47e:	9b08      	ldr	r3, [sp, #32]
 800d480:	429d      	cmp	r5, r3
 800d482:	da8e      	bge.n	800d3a2 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d484:	9b05      	ldr	r3, [sp, #20]
 800d486:	68da      	ldr	r2, [r3, #12]
 800d488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d48a:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800d48c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d490:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d494:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d498:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800d49c:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d4a0:	9b07      	ldr	r3, [sp, #28]
 800d4a2:	4353      	muls	r3, r2
 800d4a4:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800d4a8:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d4ac:	4413      	add	r3, r2
 800d4ae:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800d4b6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d4ba:	461e      	mov	r6, r3
 800d4bc:	f06f 0303 	mvn.w	r3, #3
 800d4c0:	fb03 fe02 	mul.w	lr, r3, r2
 800d4c4:	eb07 030e 	add.w	r3, r7, lr
 800d4c8:	44e6      	add	lr, ip
 800d4ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d4cc:	428a      	cmp	r2, r1
 800d4ce:	dc04      	bgt.n	800d4da <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800d4d0:	9b05      	ldr	r3, [sp, #20]
 800d4d2:	3501      	adds	r5, #1
 800d4d4:	3358      	adds	r3, #88	; 0x58
 800d4d6:	9305      	str	r3, [sp, #20]
 800d4d8:	e7d1      	b.n	800d47e <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d4da:	9b06      	ldr	r3, [sp, #24]
 800d4dc:	f853 bb04 	ldr.w	fp, [r3], #4
 800d4e0:	9306      	str	r3, [sp, #24]
 800d4e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e4:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800d4e8:	f85a bb04 	ldr.w	fp, [sl], #4
 800d4ec:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d4f0:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800d4f4:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d4f8:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d4fc:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d4fe:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800d502:	e7e3      	b.n	800d4cc <process_data_context_main+0x1bc>

0800d504 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800d504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800d506:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800d50a:	9100      	str	r1, [sp, #0]
 800d50c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d510:	2300      	movs	r3, #0
 800d512:	6864      	ldr	r4, [r4, #4]
 800d514:	461a      	mov	r2, r3
 800d516:	4619      	mov	r1, r3
 800d518:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800d51a:	b004      	add	sp, #16
 800d51c:	bd10      	pop	{r4, pc}
	...

0800d520 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800d520:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d524:	6843      	ldr	r3, [r0, #4]
{
 800d526:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d528:	2250      	movs	r2, #80	; 0x50
 800d52a:	2101      	movs	r1, #1
 800d52c:	681b      	ldr	r3, [r3, #0]
{
 800d52e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d530:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800d532:	4b3a      	ldr	r3, [pc, #232]	; (800d61c <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800d534:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d538:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800d53a:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800d53c:	b12d      	cbz	r5, 800d54a <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	2203      	movs	r2, #3
 800d542:	4620      	mov	r0, r4
 800d544:	615a      	str	r2, [r3, #20]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800d54a:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d54e:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	b31b      	cbz	r3, 800d59e <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d556:	2d01      	cmp	r5, #1
 800d558:	dc05      	bgt.n	800d566 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800d55a:	6823      	ldr	r3, [r4, #0]
 800d55c:	2230      	movs	r2, #48	; 0x30
 800d55e:	4620      	mov	r0, r4
 800d560:	615a      	str	r2, [r3, #20]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d566:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d568:	2101      	movs	r1, #1
 800d56a:	6863      	ldr	r3, [r4, #4]
 800d56c:	4620      	mov	r0, r4
 800d56e:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d570:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d574:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d576:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800d57a:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d57e:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d580:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800d582:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d584:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d588:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d58c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d590:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d592:	6a63      	ldr	r3, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800d594:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d598:	4598      	cmp	r8, r3
 800d59a:	db0a      	blt.n	800d5b2 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800d59c:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d59e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800d5a2:	3608      	adds	r6, #8
 800d5a4:	f04f 0800 	mov.w	r8, #0
 800d5a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5aa:	4543      	cmp	r3, r8
 800d5ac:	dc1d      	bgt.n	800d5ea <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800d5ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d5b2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d5b4:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d5b6:	68eb      	ldr	r3, [r5, #12]
       ci++, compptr++) {
 800d5b8:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d5ba:	4353      	muls	r3, r2
 800d5bc:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d5c0:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d5c2:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d5ce:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800d5d2:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800d5d6:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800d5da:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800d5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800d5e4:	f108 0801 	add.w	r8, r8, #1
 800d5e8:	e7d3      	b.n	800d592 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d5ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800d5ec:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d5f0:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800d5f2:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d5f4:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d5f8:	4353      	muls	r3, r2
 800d5fa:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d5fe:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d600:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800d604:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800d608:	436b      	muls	r3, r5
 800d60a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800d60e:	4620      	mov	r0, r4
 800d610:	434a      	muls	r2, r1
 800d612:	2101      	movs	r1, #1
 800d614:	47c8      	blx	r9
 800d616:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800d61a:	e7c5      	b.n	800d5a8 <jinit_d_main_controller+0x88>
 800d61c:	0800d1b5 	.word	0x0800d1b5

0800d620 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800d620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800d624:	6986      	ldr	r6, [r0, #24]
{
 800d626:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800d628:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800d62c:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800d630:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800d634:	b93d      	cbnz	r5, 800d646 <get_sof+0x26>
 800d636:	68f3      	ldr	r3, [r6, #12]
 800d638:	4798      	blx	r3
 800d63a:	b910      	cbnz	r0, 800d642 <get_sof+0x22>
 800d63c:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800d63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d642:	e9d6 c500 	ldrd	ip, r5, [r6]
 800d646:	1e6b      	subs	r3, r5, #1
 800d648:	f89c 7000 	ldrb.w	r7, [ip]
 800d64c:	f000 8088 	beq.w	800d760 <get_sof+0x140>
 800d650:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d654:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d656:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d65a:	f000 808a 	beq.w	800d772 <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d65e:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d660:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d662:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d664:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d668:	f000 808c 	beq.w	800d784 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d66c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d66e:	782a      	ldrb	r2, [r5, #0]
 800d670:	3b01      	subs	r3, #1
 800d672:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d676:	6222      	str	r2, [r4, #32]
 800d678:	f000 808d 	beq.w	800d796 <get_sof+0x176>
 800d67c:	3501      	adds	r5, #1
 800d67e:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d680:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d682:	6a22      	ldr	r2, [r4, #32]
 800d684:	440a      	add	r2, r1
 800d686:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d688:	f000 808e 	beq.w	800d7a8 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d68c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d68e:	782a      	ldrb	r2, [r5, #0]
 800d690:	3b01      	subs	r3, #1
 800d692:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d696:	61e2      	str	r2, [r4, #28]
 800d698:	f000 808f 	beq.w	800d7ba <get_sof+0x19a>
 800d69c:	3501      	adds	r5, #1
 800d69e:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d6a0:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d6a2:	69e2      	ldr	r2, [r4, #28]
 800d6a4:	440a      	add	r2, r1
 800d6a6:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d6a8:	f000 8090 	beq.w	800d7cc <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d6ac:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d6ae:	f103 39ff 	add.w	r9, r3, #4294967295
 800d6b2:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d6b6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800d6ba:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d6bc:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d6be:	4620      	mov	r0, r4
 800d6c0:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d6c2:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d6c6:	619a      	str	r2, [r3, #24]
  length -= 8;
 800d6c8:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800d6cc:	69e2      	ldr	r2, [r4, #28]
 800d6ce:	61da      	str	r2, [r3, #28]
 800d6d0:	6a22      	ldr	r2, [r4, #32]
 800d6d2:	621a      	str	r2, [r3, #32]
 800d6d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d6d6:	625a      	str	r2, [r3, #36]	; 0x24
 800d6d8:	2266      	movs	r2, #102	; 0x66
 800d6da:	615a      	str	r2, [r3, #20]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800d6e0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d6e4:	691b      	ldr	r3, [r3, #16]
 800d6e6:	b12b      	cbz	r3, 800d6f4 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800d6e8:	6823      	ldr	r3, [r4, #0]
 800d6ea:	223c      	movs	r2, #60	; 0x3c
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	615a      	str	r2, [r3, #20]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800d6f4:	6a23      	ldr	r3, [r4, #32]
 800d6f6:	b123      	cbz	r3, 800d702 <get_sof+0xe2>
 800d6f8:	69e3      	ldr	r3, [r4, #28]
 800d6fa:	b113      	cbz	r3, 800d702 <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800d6fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	dc05      	bgt.n	800d70e <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800d702:	6823      	ldr	r3, [r4, #0]
 800d704:	2221      	movs	r2, #33	; 0x21
 800d706:	4620      	mov	r0, r4
 800d708:	615a      	str	r2, [r3, #20]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800d70e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d710:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d714:	4543      	cmp	r3, r8
 800d716:	d005      	beq.n	800d724 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800d718:	6823      	ldr	r3, [r4, #0]
 800d71a:	220c      	movs	r2, #12
 800d71c:	4620      	mov	r0, r4
 800d71e:	615a      	str	r2, [r3, #20]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800d724:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d728:	b94b      	cbnz	r3, 800d73e <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800d72a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d72c:	2158      	movs	r1, #88	; 0x58
 800d72e:	6863      	ldr	r3, [r4, #4]
 800d730:	4620      	mov	r0, r4
 800d732:	434a      	muls	r2, r1
 800d734:	2101      	movs	r1, #1
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4798      	blx	r3
 800d73a:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d73e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800d742:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d746:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d74a:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d74e:	4543      	cmp	r3, r8
 800d750:	dc45      	bgt.n	800d7de <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800d752:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d756:	2001      	movs	r0, #1
 800d758:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800d75a:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800d75e:	e76e      	b.n	800d63e <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800d760:	68f3      	ldr	r3, [r6, #12]
 800d762:	4620      	mov	r0, r4
 800d764:	4798      	blx	r3
 800d766:	2800      	cmp	r0, #0
 800d768:	f43f af68 	beq.w	800d63c <get_sof+0x1c>
 800d76c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d770:	e770      	b.n	800d654 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800d772:	68f3      	ldr	r3, [r6, #12]
 800d774:	4620      	mov	r0, r4
 800d776:	4798      	blx	r3
 800d778:	2800      	cmp	r0, #0
 800d77a:	f43f af5f 	beq.w	800d63c <get_sof+0x1c>
 800d77e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d782:	e76d      	b.n	800d660 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800d784:	68f3      	ldr	r3, [r6, #12]
 800d786:	4620      	mov	r0, r4
 800d788:	4798      	blx	r3
 800d78a:	2800      	cmp	r0, #0
 800d78c:	f43f af56 	beq.w	800d63c <get_sof+0x1c>
 800d790:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d794:	e76b      	b.n	800d66e <get_sof+0x4e>
 800d796:	68f3      	ldr	r3, [r6, #12]
 800d798:	4620      	mov	r0, r4
 800d79a:	4798      	blx	r3
 800d79c:	2800      	cmp	r0, #0
 800d79e:	f43f af4d 	beq.w	800d63c <get_sof+0x1c>
 800d7a2:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d7a6:	e76a      	b.n	800d67e <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800d7a8:	68f3      	ldr	r3, [r6, #12]
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	4798      	blx	r3
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	f43f af44 	beq.w	800d63c <get_sof+0x1c>
 800d7b4:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d7b8:	e769      	b.n	800d68e <get_sof+0x6e>
 800d7ba:	68f3      	ldr	r3, [r6, #12]
 800d7bc:	4620      	mov	r0, r4
 800d7be:	4798      	blx	r3
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	f43f af3b 	beq.w	800d63c <get_sof+0x1c>
 800d7c6:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d7ca:	e768      	b.n	800d69e <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800d7cc:	68f3      	ldr	r3, [r6, #12]
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	4798      	blx	r3
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	f43f af32 	beq.w	800d63c <get_sof+0x1c>
 800d7d8:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d7dc:	e767      	b.n	800d6ae <get_sof+0x8e>
    compptr->component_index = ci;
 800d7de:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d7e2:	f1b9 0f00 	cmp.w	r9, #0
 800d7e6:	d107      	bne.n	800d7f8 <get_sof+0x1d8>
 800d7e8:	68f3      	ldr	r3, [r6, #12]
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	4798      	blx	r3
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	f43f af24 	beq.w	800d63c <get_sof+0x1c>
 800d7f4:	e9d6 5900 	ldrd	r5, r9, [r6]
 800d7f8:	782b      	ldrb	r3, [r5, #0]
 800d7fa:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800d7fe:	f1b9 0301 	subs.w	r3, r9, #1
 800d802:	d029      	beq.n	800d858 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800d804:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800d806:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d808:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800d80a:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800d80e:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800d812:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800d816:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d81a:	d026      	beq.n	800d86a <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d81c:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d81e:	f103 39ff 	add.w	r9, r3, #4294967295
 800d822:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d826:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800d82a:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d82c:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d830:	4620      	mov	r0, r4
 800d832:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800d834:	f108 0801 	add.w	r8, r8, #1
 800d838:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800d83a:	619a      	str	r2, [r3, #24]
 800d83c:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800d840:	61da      	str	r2, [r3, #28]
 800d842:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800d846:	621a      	str	r2, [r3, #32]
 800d848:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800d84c:	f8c3 a014 	str.w	sl, [r3, #20]
 800d850:	625a      	str	r2, [r3, #36]	; 0x24
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	4798      	blx	r3
       ci++, compptr++) {
 800d856:	e779      	b.n	800d74c <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800d858:	68f3      	ldr	r3, [r6, #12]
 800d85a:	4620      	mov	r0, r4
 800d85c:	4798      	blx	r3
 800d85e:	2800      	cmp	r0, #0
 800d860:	f43f aeec 	beq.w	800d63c <get_sof+0x1c>
 800d864:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d868:	e7cd      	b.n	800d806 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800d86a:	68f3      	ldr	r3, [r6, #12]
 800d86c:	4620      	mov	r0, r4
 800d86e:	4798      	blx	r3
 800d870:	2800      	cmp	r0, #0
 800d872:	f43f aee3 	beq.w	800d63c <get_sof+0x1c>
 800d876:	e9d6 5300 	ldrd	r5, r3, [r6]
 800d87a:	e7d0      	b.n	800d81e <get_sof+0x1fe>

0800d87c <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800d87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800d880:	2a0d      	cmp	r2, #13
{
 800d882:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800d884:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800d886:	eb02 0603 	add.w	r6, r2, r3
{
 800d88a:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800d88c:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800d88e:	d96d      	bls.n	800d96c <examine_app0+0xf0>
 800d890:	7822      	ldrb	r2, [r4, #0]
 800d892:	2a4a      	cmp	r2, #74	; 0x4a
 800d894:	f040 808f 	bne.w	800d9b6 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800d898:	7862      	ldrb	r2, [r4, #1]
 800d89a:	2a46      	cmp	r2, #70	; 0x46
 800d89c:	f040 808b 	bne.w	800d9b6 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800d8a0:	78a2      	ldrb	r2, [r4, #2]
 800d8a2:	2a49      	cmp	r2, #73	; 0x49
 800d8a4:	d16a      	bne.n	800d97c <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800d8a6:	78e2      	ldrb	r2, [r4, #3]
 800d8a8:	2a46      	cmp	r2, #70	; 0x46
 800d8aa:	d167      	bne.n	800d97c <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800d8ac:	7922      	ldrb	r2, [r4, #4]
 800d8ae:	2a00      	cmp	r2, #0
 800d8b0:	d164      	bne.n	800d97c <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800d8b8:	7962      	ldrb	r2, [r4, #5]
 800d8ba:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800d8be:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800d8c0:	f894 c006 	ldrb.w	ip, [r4, #6]
 800d8c4:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800d8c8:	79e7      	ldrb	r7, [r4, #7]
 800d8ca:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800d8ce:	f894 e008 	ldrb.w	lr, [r4, #8]
 800d8d2:	7a67      	ldrb	r7, [r4, #9]
 800d8d4:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800d8d8:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800d8dc:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800d8e0:	7ae7      	ldrb	r7, [r4, #11]
 800d8e2:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800d8e6:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800d8ea:	d007      	beq.n	800d8fc <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800d8ec:	277a      	movs	r7, #122	; 0x7a
 800d8ee:	f8c1 c01c 	str.w	ip, [r1, #28]
 800d8f2:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800d8f6:	f04f 31ff 	mov.w	r1, #4294967295
 800d8fa:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800d8fc:	682b      	ldr	r3, [r5, #0]
 800d8fe:	2101      	movs	r1, #1
 800d900:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800d904:	4628      	mov	r0, r5
 800d906:	619a      	str	r2, [r3, #24]
 800d908:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800d90c:	61da      	str	r2, [r3, #28]
 800d90e:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800d912:	621a      	str	r2, [r3, #32]
 800d914:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800d918:	625a      	str	r2, [r3, #36]	; 0x24
 800d91a:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800d91e:	629a      	str	r2, [r3, #40]	; 0x28
 800d920:	2259      	movs	r2, #89	; 0x59
 800d922:	615a      	str	r2, [r3, #20]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800d928:	7b22      	ldrb	r2, [r4, #12]
 800d92a:	7b63      	ldrb	r3, [r4, #13]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	d00a      	beq.n	800d946 <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	225c      	movs	r2, #92	; 0x5c
 800d934:	2101      	movs	r1, #1
 800d936:	4628      	mov	r0, r5
 800d938:	615a      	str	r2, [r3, #20]
 800d93a:	7b22      	ldrb	r2, [r4, #12]
 800d93c:	619a      	str	r2, [r3, #24]
 800d93e:	7b62      	ldrb	r2, [r4, #13]
 800d940:	61da      	str	r2, [r3, #28]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800d946:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800d948:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800d94a:	7b63      	ldrb	r3, [r4, #13]
 800d94c:	fb12 f203 	smulbb	r2, r2, r3
 800d950:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800d954:	42b2      	cmp	r2, r6
 800d956:	d030      	beq.n	800d9ba <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800d958:	682a      	ldr	r2, [r5, #0]
 800d95a:	235a      	movs	r3, #90	; 0x5a
 800d95c:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800d960:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d962:	4628      	mov	r0, r5
 800d964:	2101      	movs	r1, #1
  }
}
 800d966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d96a:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800d96c:	2a05      	cmp	r2, #5
 800d96e:	d922      	bls.n	800d9b6 <examine_app0+0x13a>
 800d970:	7822      	ldrb	r2, [r4, #0]
 800d972:	2a4a      	cmp	r2, #74	; 0x4a
 800d974:	d11f      	bne.n	800d9b6 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800d976:	7862      	ldrb	r2, [r4, #1]
 800d978:	2a46      	cmp	r2, #70	; 0x46
 800d97a:	d11c      	bne.n	800d9b6 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800d97c:	78a2      	ldrb	r2, [r4, #2]
 800d97e:	2a58      	cmp	r2, #88	; 0x58
 800d980:	d119      	bne.n	800d9b6 <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800d982:	78e2      	ldrb	r2, [r4, #3]
 800d984:	2a58      	cmp	r2, #88	; 0x58
 800d986:	d116      	bne.n	800d9b6 <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800d988:	7922      	ldrb	r2, [r4, #4]
 800d98a:	b9a2      	cbnz	r2, 800d9b6 <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800d98c:	7962      	ldrb	r2, [r4, #5]
 800d98e:	2a11      	cmp	r2, #17
 800d990:	d007      	beq.n	800d9a2 <examine_app0+0x126>
 800d992:	2a13      	cmp	r2, #19
 800d994:	d007      	beq.n	800d9a6 <examine_app0+0x12a>
 800d996:	2a10      	cmp	r2, #16
 800d998:	d107      	bne.n	800d9aa <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800d99a:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d99c:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800d9a0:	e7df      	b.n	800d962 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800d9a2:	226f      	movs	r2, #111	; 0x6f
 800d9a4:	e7fa      	b.n	800d99c <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800d9a6:	2270      	movs	r2, #112	; 0x70
 800d9a8:	e7f8      	b.n	800d99c <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800d9aa:	225b      	movs	r2, #91	; 0x5b
 800d9ac:	614a      	str	r2, [r1, #20]
 800d9ae:	7962      	ldrb	r2, [r4, #5]
 800d9b0:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800d9b4:	e7d5      	b.n	800d962 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800d9b6:	224f      	movs	r2, #79	; 0x4f
 800d9b8:	e7f0      	b.n	800d99c <examine_app0+0x120>
}
 800d9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d9be <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800d9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800d9c2:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800d9c4:	6804      	ldr	r4, [r0, #0]
{
 800d9c6:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800d9c8:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800d9ca:	d92b      	bls.n	800da24 <examine_app14+0x66>
 800d9cc:	780f      	ldrb	r7, [r1, #0]
 800d9ce:	2f41      	cmp	r7, #65	; 0x41
 800d9d0:	d128      	bne.n	800da24 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800d9d2:	784f      	ldrb	r7, [r1, #1]
 800d9d4:	2f64      	cmp	r7, #100	; 0x64
 800d9d6:	d125      	bne.n	800da24 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800d9d8:	788f      	ldrb	r7, [r1, #2]
 800d9da:	2f6f      	cmp	r7, #111	; 0x6f
 800d9dc:	d122      	bne.n	800da24 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800d9de:	78cf      	ldrb	r7, [r1, #3]
 800d9e0:	2f62      	cmp	r7, #98	; 0x62
 800d9e2:	d11f      	bne.n	800da24 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800d9e4:	790f      	ldrb	r7, [r1, #4]
 800d9e6:	2f65      	cmp	r7, #101	; 0x65
 800d9e8:	d11c      	bne.n	800da24 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800d9ea:	79cb      	ldrb	r3, [r1, #7]
 800d9ec:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800d9ee:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800d9f0:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800d9f4:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800d9f6:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800d9fa:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800d9fe:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800da00:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800da02:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800da06:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800da0a:	234e      	movs	r3, #78	; 0x4e
 800da0c:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800da10:	6163      	str	r3, [r4, #20]
 800da12:	2101      	movs	r1, #1
 800da14:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800da16:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800da18:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800da1c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800da20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800da24:	2150      	movs	r1, #80	; 0x50
 800da26:	4413      	add	r3, r2
 800da28:	4628      	mov	r0, r5
 800da2a:	6161      	str	r1, [r4, #20]
 800da2c:	2101      	movs	r1, #1
 800da2e:	61a3      	str	r3, [r4, #24]
 800da30:	4633      	mov	r3, r6
}
 800da32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800da36:	4718      	bx	r3

0800da38 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800da38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800da3c:	6986      	ldr	r6, [r0, #24]
{
 800da3e:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800da40:	6877      	ldr	r7, [r6, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800da42:	b39f      	cbz	r7, 800daac <get_interesting_appn+0x74>
  INPUT_VARS(cinfo);
 800da44:	6834      	ldr	r4, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800da46:	7825      	ldrb	r5, [r4, #0]
 800da48:	3f01      	subs	r7, #1
 800da4a:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800da4e:	d037      	beq.n	800dac0 <get_interesting_appn+0x88>
 800da50:	3401      	adds	r4, #1
 800da52:	f814 5b01 	ldrb.w	r5, [r4], #1
 800da56:	3f01      	subs	r7, #1
 800da58:	444d      	add	r5, r9
  length -= 2;
 800da5a:	3d02      	subs	r5, #2

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800da5c:	2d0d      	cmp	r5, #13
 800da5e:	dc37      	bgt.n	800dad0 <get_interesting_appn+0x98>
    numtoread = APPN_DATA_LEN;
  else if (length > 0)
 800da60:	2d00      	cmp	r5, #0
 800da62:	dd38      	ble.n	800dad6 <get_interesting_appn+0x9e>
    numtoread = (unsigned int) length;
 800da64:	46a9      	mov	r9, r5
  else
    numtoread = 0;
  for (i = 0; i < numtoread; i++)
 800da66:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800da6a:	b92f      	cbnz	r7, 800da78 <get_interesting_appn+0x40>
 800da6c:	68f3      	ldr	r3, [r6, #12]
 800da6e:	4640      	mov	r0, r8
 800da70:	4798      	blx	r3
 800da72:	b1f0      	cbz	r0, 800dab2 <get_interesting_appn+0x7a>
 800da74:	e9d6 4700 	ldrd	r4, r7, [r6]
 800da78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da7c:	3f01      	subs	r7, #1
 800da7e:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800da82:	f10a 0a01 	add.w	sl, sl, #1
 800da86:	45d1      	cmp	r9, sl
 800da88:	d1ef      	bne.n	800da6a <get_interesting_appn+0x32>
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
 800da8a:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800da8e:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800da92:	2ae0      	cmp	r2, #224	; 0xe0
 800da94:	d022      	beq.n	800dadc <get_interesting_appn+0xa4>
 800da96:	2aee      	cmp	r2, #238	; 0xee
 800da98:	d032      	beq.n	800db00 <get_interesting_appn+0xc8>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
    break;
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800da9a:	f8d8 3000 	ldr.w	r3, [r8]
 800da9e:	2146      	movs	r1, #70	; 0x46
 800daa0:	4640      	mov	r0, r8
 800daa2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4798      	blx	r3
    break;
 800daaa:	e01d      	b.n	800dae8 <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800daac:	68f3      	ldr	r3, [r6, #12]
 800daae:	4798      	blx	r3
 800dab0:	b918      	cbnz	r0, 800daba <get_interesting_appn+0x82>
 800dab2:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800dab4:	b004      	add	sp, #16
 800dab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800daba:	e9d6 4700 	ldrd	r4, r7, [r6]
 800dabe:	e7c2      	b.n	800da46 <get_interesting_appn+0xe>
 800dac0:	68f3      	ldr	r3, [r6, #12]
 800dac2:	4640      	mov	r0, r8
 800dac4:	4798      	blx	r3
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d0f3      	beq.n	800dab2 <get_interesting_appn+0x7a>
 800daca:	e9d6 4700 	ldrd	r4, r7, [r6]
 800dace:	e7c0      	b.n	800da52 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800dad0:	f04f 090e 	mov.w	r9, #14
 800dad4:	e7c7      	b.n	800da66 <get_interesting_appn+0x2e>
    numtoread = 0;
 800dad6:	f04f 0900 	mov.w	r9, #0
 800dada:	e7d6      	b.n	800da8a <get_interesting_appn+0x52>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800dadc:	462b      	mov	r3, r5
 800dade:	464a      	mov	r2, r9
 800dae0:	4669      	mov	r1, sp
 800dae2:	4640      	mov	r0, r8
 800dae4:	f7ff feca 	bl	800d87c <examine_app0>
  if (length > 0)
 800dae8:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800daea:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800daee:	dd05      	ble.n	800dafc <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800daf0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800daf4:	4629      	mov	r1, r5
 800daf6:	4640      	mov	r0, r8
 800daf8:	691b      	ldr	r3, [r3, #16]
 800dafa:	4798      	blx	r3
  return TRUE;
 800dafc:	2001      	movs	r0, #1
 800dafe:	e7d9      	b.n	800dab4 <get_interesting_appn+0x7c>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800db00:	462b      	mov	r3, r5
 800db02:	464a      	mov	r2, r9
 800db04:	4669      	mov	r1, sp
 800db06:	4640      	mov	r0, r8
 800db08:	f7ff ff59 	bl	800d9be <examine_app14>
    break;
 800db0c:	e7ec      	b.n	800dae8 <get_interesting_appn+0xb0>

0800db0e <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800db0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800db12:	6984      	ldr	r4, [r0, #24]
{
 800db14:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800db16:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800db18:	b31b      	cbz	r3, 800db62 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800db1a:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db1c:	782e      	ldrb	r6, [r5, #0]
 800db1e:	f1b3 0801 	subs.w	r8, r3, #1
 800db22:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800db26:	d025      	beq.n	800db74 <skip_variable+0x66>
 800db28:	3501      	adds	r5, #1
 800db2a:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800db2e:	235d      	movs	r3, #93	; 0x5d
 800db30:	683a      	ldr	r2, [r7, #0]
 800db32:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db34:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800db36:	4638      	mov	r0, r7
 800db38:	6153      	str	r3, [r2, #20]
  length -= 2;
 800db3a:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800db3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800db40:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800db44:	6853      	ldr	r3, [r2, #4]
 800db46:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db48:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800db4c:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800db4e:	6025      	str	r5, [r4, #0]
 800db50:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800db52:	dd04      	ble.n	800db5e <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	4631      	mov	r1, r6
 800db58:	4638      	mov	r0, r7
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	4798      	blx	r3

  return TRUE;
 800db5e:	2001      	movs	r0, #1
 800db60:	e003      	b.n	800db6a <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db62:	68e3      	ldr	r3, [r4, #12]
 800db64:	4798      	blx	r3
 800db66:	b910      	cbnz	r0, 800db6e <skip_variable+0x60>
 800db68:	2000      	movs	r0, #0
}
 800db6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db6e:	e9d4 5300 	ldrd	r5, r3, [r4]
 800db72:	e7d3      	b.n	800db1c <skip_variable+0xe>
 800db74:	68e3      	ldr	r3, [r4, #12]
 800db76:	4638      	mov	r0, r7
 800db78:	4798      	blx	r3
 800db7a:	2800      	cmp	r0, #0
 800db7c:	d0f4      	beq.n	800db68 <skip_variable+0x5a>
 800db7e:	e9d4 5800 	ldrd	r5, r8, [r4]
 800db82:	e7d2      	b.n	800db2a <skip_variable+0x1c>

0800db84 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800db84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800db88:	6986      	ldr	r6, [r0, #24]
{
 800db8a:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800db8c:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800db90:	b987      	cbnz	r7, 800dbb4 <next_marker+0x30>
 800db92:	68f3      	ldr	r3, [r6, #12]
 800db94:	4640      	mov	r0, r8
 800db96:	4798      	blx	r3
 800db98:	b950      	cbnz	r0, 800dbb0 <next_marker+0x2c>
 800db9a:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800db9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800dba0:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800dba4:	6993      	ldr	r3, [r2, #24]
 800dba6:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800dba8:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800dbaa:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800dbae:	e7ef      	b.n	800db90 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800dbb0:	e9d6 4700 	ldrd	r4, r7, [r6]
 800dbb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dbb8:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800dbba:	2bff      	cmp	r3, #255	; 0xff
 800dbbc:	d1f0      	bne.n	800dba0 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800dbbe:	b937      	cbnz	r7, 800dbce <next_marker+0x4a>
 800dbc0:	68f3      	ldr	r3, [r6, #12]
 800dbc2:	4640      	mov	r0, r8
 800dbc4:	4798      	blx	r3
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d0e7      	beq.n	800db9a <next_marker+0x16>
 800dbca:	e9d6 4700 	ldrd	r4, r7, [r6]
 800dbce:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dbd2:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800dbd4:	2dff      	cmp	r5, #255	; 0xff
 800dbd6:	d0f2      	beq.n	800dbbe <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800dbd8:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800dbdc:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800dbde:	b90d      	cbnz	r5, 800dbe4 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800dbe0:	3302      	adds	r3, #2
 800dbe2:	e7e1      	b.n	800dba8 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800dbe4:	b173      	cbz	r3, 800dc04 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800dbe6:	f8d8 2000 	ldr.w	r2, [r8]
 800dbea:	2177      	movs	r1, #119	; 0x77
 800dbec:	4640      	mov	r0, r8
 800dbee:	61d5      	str	r5, [r2, #28]
 800dbf0:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800dbf4:	6853      	ldr	r3, [r2, #4]
 800dbf6:	f04f 31ff 	mov.w	r1, #4294967295
 800dbfa:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800dbfc:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800dc00:	2200      	movs	r2, #0
 800dc02:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800dc04:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800dc08:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800dc0a:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800dc0e:	e7c5      	b.n	800db9c <next_marker+0x18>

0800dc10 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800dc10:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800dc14:	b510      	push	{r4, lr}
 800dc16:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800dc18:	b1e3      	cbz	r3, 800dc54 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800dc1a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800dc1e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800dc22:	6959      	ldr	r1, [r3, #20]
 800dc24:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d119      	bne.n	800dc60 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800dc2c:	6823      	ldr	r3, [r4, #0]
 800dc2e:	2264      	movs	r2, #100	; 0x64
 800dc30:	4620      	mov	r0, r4
 800dc32:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	2103      	movs	r1, #3
 800dc3a:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800dc42:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800dc46:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800dc48:	6953      	ldr	r3, [r2, #20]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	f003 0307 	and.w	r3, r3, #7
 800dc50:	6153      	str	r3, [r2, #20]
  return TRUE;
 800dc52:	e004      	b.n	800dc5e <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800dc54:	f7ff ff96 	bl	800db84 <next_marker>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d1de      	bne.n	800dc1a <read_restart_marker+0xa>
      return FALSE;
 800dc5c:	2000      	movs	r0, #0
}
 800dc5e:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800dc60:	69a3      	ldr	r3, [r4, #24]
 800dc62:	4620      	mov	r0, r4
 800dc64:	695b      	ldr	r3, [r3, #20]
 800dc66:	4798      	blx	r3
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	d1ea      	bne.n	800dc42 <read_restart_marker+0x32>
 800dc6c:	e7f6      	b.n	800dc5c <read_restart_marker+0x4c>

0800dc6e <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800dc6e:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800dc70:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800dc74:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800dc78:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800dc7c:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800dc80:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800dc82:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800dc86:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800dc8a:	4770      	bx	lr

0800dc8c <get_dht>:
{
 800dc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800dc90:	6987      	ldr	r7, [r0, #24]
{
 800dc92:	b0c9      	sub	sp, #292	; 0x124
 800dc94:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800dc96:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc98:	b1fe      	cbz	r6, 800dcda <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800dc9a:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dc9c:	f894 9000 	ldrb.w	r9, [r4]
 800dca0:	3e01      	subs	r6, #1
 800dca2:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800dca6:	d022      	beq.n	800dcee <get_dht+0x62>
 800dca8:	3401      	adds	r4, #1
 800dcaa:	f814 9b01 	ldrb.w	r9, [r4], #1
 800dcae:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800dcb0:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dcb4:	44c1      	add	r9, r8
  length -= 2;
 800dcb6:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800dcba:	f1b9 0f10 	cmp.w	r9, #16
 800dcbe:	dc1e      	bgt.n	800dcfe <get_dht+0x72>
  if (length != 0)
 800dcc0:	f1b9 0f00 	cmp.w	r9, #0
 800dcc4:	d005      	beq.n	800dcd2 <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800dcc6:	682b      	ldr	r3, [r5, #0]
 800dcc8:	220c      	movs	r2, #12
 800dcca:	4628      	mov	r0, r5
 800dccc:	615a      	str	r2, [r3, #20]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4798      	blx	r3
  return TRUE;
 800dcd2:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800dcd4:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800dcd8:	e003      	b.n	800dce2 <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	4798      	blx	r3
 800dcde:	b918      	cbnz	r0, 800dce8 <get_dht+0x5c>
 800dce0:	2000      	movs	r0, #0
}
 800dce2:	b049      	add	sp, #292	; 0x124
 800dce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dce8:	e9d7 4600 	ldrd	r4, r6, [r7]
 800dcec:	e7d6      	b.n	800dc9c <get_dht+0x10>
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	4798      	blx	r3
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d0f3      	beq.n	800dce0 <get_dht+0x54>
 800dcf8:	e9d7 4600 	ldrd	r4, r6, [r7]
 800dcfc:	e7d5      	b.n	800dcaa <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800dcfe:	b936      	cbnz	r6, 800dd0e <get_dht+0x82>
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	4628      	mov	r0, r5
 800dd04:	4790      	blx	r2
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d0ea      	beq.n	800dce0 <get_dht+0x54>
 800dd0a:	e9d7 4600 	ldrd	r4, r6, [r7]
 800dd0e:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800dd12:	2152      	movs	r1, #82	; 0x52
 800dd14:	682a      	ldr	r2, [r5, #0]
 800dd16:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800dd18:	f8cd 8000 	str.w	r8, [sp]
 800dd1c:	3e01      	subs	r6, #1
    count = 0;
 800dd1e:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800dd22:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800dd26:	6852      	ldr	r2, [r2, #4]
 800dd28:	2101      	movs	r1, #1
 800dd2a:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800dd2c:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800dd2e:	b946      	cbnz	r6, 800dd42 <get_dht+0xb6>
 800dd30:	68f9      	ldr	r1, [r7, #12]
 800dd32:	4628      	mov	r0, r5
 800dd34:	9201      	str	r2, [sp, #4]
 800dd36:	4788      	blx	r1
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d0d1      	beq.n	800dce0 <get_dht+0x54>
 800dd3c:	9a01      	ldr	r2, [sp, #4]
 800dd3e:	e9d7 4600 	ldrd	r4, r6, [r7]
 800dd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd46:	3e01      	subs	r6, #1
 800dd48:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800dd4c:	3201      	adds	r2, #1
      count += bits[i];
 800dd4e:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800dd50:	2a11      	cmp	r2, #17
 800dd52:	d1ec      	bne.n	800dd2e <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800dd54:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800dd56:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800dd5a:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800dd5e:	f04f 0958 	mov.w	r9, #88	; 0x58
 800dd62:	4628      	mov	r0, r5
    length -= 1 + 16;
 800dd64:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800dd66:	6191      	str	r1, [r2, #24]
 800dd68:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800dd6c:	f8c2 9014 	str.w	r9, [r2, #20]
 800dd70:	61d1      	str	r1, [r2, #28]
 800dd72:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800dd76:	6211      	str	r1, [r2, #32]
 800dd78:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800dd7c:	6251      	str	r1, [r2, #36]	; 0x24
 800dd7e:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800dd82:	6291      	str	r1, [r2, #40]	; 0x28
 800dd84:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800dd88:	62d1      	str	r1, [r2, #44]	; 0x2c
 800dd8a:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800dd8e:	6311      	str	r1, [r2, #48]	; 0x30
 800dd90:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800dd94:	6351      	str	r1, [r2, #52]	; 0x34
 800dd96:	2102      	movs	r1, #2
 800dd98:	6852      	ldr	r2, [r2, #4]
 800dd9a:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800dd9c:	682a      	ldr	r2, [r5, #0]
 800dd9e:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800dda2:	4628      	mov	r0, r5
 800dda4:	f8c2 9014 	str.w	r9, [r2, #20]
 800dda8:	6191      	str	r1, [r2, #24]
 800ddaa:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800ddae:	61d1      	str	r1, [r2, #28]
 800ddb0:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800ddb4:	6211      	str	r1, [r2, #32]
 800ddb6:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800ddba:	6251      	str	r1, [r2, #36]	; 0x24
 800ddbc:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800ddc0:	6291      	str	r1, [r2, #40]	; 0x28
 800ddc2:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800ddc6:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ddc8:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800ddcc:	6311      	str	r1, [r2, #48]	; 0x30
 800ddce:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800ddd2:	6351      	str	r1, [r2, #52]	; 0x34
 800ddd4:	2102      	movs	r1, #2
 800ddd6:	6852      	ldr	r2, [r2, #4]
 800ddd8:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800ddda:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800ddde:	dc02      	bgt.n	800dde6 <get_dht+0x15a>
 800dde0:	9b01      	ldr	r3, [sp, #4]
 800dde2:	4553      	cmp	r3, sl
 800dde4:	da05      	bge.n	800ddf2 <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800dde6:	682a      	ldr	r2, [r5, #0]
 800dde8:	2109      	movs	r1, #9
 800ddea:	4628      	mov	r0, r5
 800ddec:	6151      	str	r1, [r2, #20]
 800ddee:	6812      	ldr	r2, [r2, #0]
 800ddf0:	4790      	blx	r2
 800ddf2:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800ddf6:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800ddf8:	45d1      	cmp	r9, sl
 800ddfa:	d13f      	bne.n	800de7c <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800ddfc:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800de00:	9b01      	ldr	r3, [sp, #4]
 800de02:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800de06:	bf17      	itett	ne
 800de08:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800de0c:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800de10:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800de14:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800de16:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800de18:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800de1c:	2b03      	cmp	r3, #3
 800de1e:	d906      	bls.n	800de2e <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800de20:	682a      	ldr	r2, [r5, #0]
 800de22:	211f      	movs	r1, #31
 800de24:	4628      	mov	r0, r5
 800de26:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800de2a:	6812      	ldr	r2, [r2, #0]
 800de2c:	4790      	blx	r2
    if (*htblptr == NULL)
 800de2e:	f8d8 2000 	ldr.w	r2, [r8]
 800de32:	b922      	cbnz	r2, 800de3e <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800de34:	4628      	mov	r0, r5
 800de36:	f7fb fb8b 	bl	8009550 <jpeg_alloc_huff_table>
 800de3a:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800de3e:	2200      	movs	r2, #0
 800de40:	46de      	mov	lr, fp
 800de42:	f10d 0a1c 	add.w	sl, sp, #28
 800de46:	f88b 2000 	strb.w	r2, [fp]
 800de4a:	f8d8 2000 	ldr.w	r2, [r8]
 800de4e:	46f4      	mov	ip, lr
 800de50:	3208      	adds	r2, #8
 800de52:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800de56:	45d4      	cmp	ip, sl
 800de58:	f842 0c08 	str.w	r0, [r2, #-8]
 800de5c:	f842 1c04 	str.w	r1, [r2, #-4]
 800de60:	46e6      	mov	lr, ip
 800de62:	d1f4      	bne.n	800de4e <get_dht+0x1c2>
 800de64:	f89c 1000 	ldrb.w	r1, [ip]
 800de68:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800de6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de6e:	f8d8 0000 	ldr.w	r0, [r8]
 800de72:	a908      	add	r1, sp, #32
 800de74:	3011      	adds	r0, #17
 800de76:	f01a fbbb 	bl	80285f0 <memcpy>
 800de7a:	e71e      	b.n	800dcba <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800de7c:	b946      	cbnz	r6, 800de90 <get_dht+0x204>
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	4628      	mov	r0, r5
 800de82:	4790      	blx	r2
 800de84:	2800      	cmp	r0, #0
 800de86:	f43f af2b 	beq.w	800dce0 <get_dht+0x54>
 800de8a:	a908      	add	r1, sp, #32
 800de8c:	e9d7 4600 	ldrd	r4, r6, [r7]
 800de90:	f814 2b01 	ldrb.w	r2, [r4], #1
 800de94:	3e01      	subs	r6, #1
 800de96:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800de9a:	f109 0901 	add.w	r9, r9, #1
 800de9e:	e7ab      	b.n	800ddf8 <get_dht+0x16c>

0800dea0 <read_markers>:
{
 800dea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea4:	4604      	mov	r4, r0
 800dea6:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800dea8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800deac:	bb2b      	cbnz	r3, 800defa <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800deae:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d17c      	bne.n	800dfb2 <read_markers+0x112>
  INPUT_VARS(cinfo);
 800deb8:	69a7      	ldr	r7, [r4, #24]
 800deba:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800debc:	2b00      	cmp	r3, #0
 800debe:	d06a      	beq.n	800df96 <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800dec0:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800dec2:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800dec4:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800dec8:	d06c      	beq.n	800dfa4 <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800deca:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800decc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800ded0:	f103 36ff 	add.w	r6, r3, #4294967295
 800ded4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800ded8:	d102      	bne.n	800dee0 <read_markers+0x40>
 800deda:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800dede:	d008      	beq.n	800def2 <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	2237      	movs	r2, #55	; 0x37
 800dee4:	4620      	mov	r0, r4
 800dee6:	f8c3 901c 	str.w	r9, [r3, #28]
 800deea:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800def2:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800def6:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800defa:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800defe:	2b01      	cmp	r3, #1
 800df00:	f000 83c3 	beq.w	800e68a <read_markers+0x7ea>
 800df04:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800df08:	2a3e      	cmp	r2, #62	; 0x3e
 800df0a:	f200 83cb 	bhi.w	800e6a4 <read_markers+0x804>
 800df0e:	2a3e      	cmp	r2, #62	; 0x3e
 800df10:	f200 83c8 	bhi.w	800e6a4 <read_markers+0x804>
 800df14:	e8df f012 	tbh	[pc, r2, lsl #1]
 800df18:	009b0092 	.word	0x009b0092
 800df1c:	00a7009e 	.word	0x00a7009e
 800df20:	00a70239 	.word	0x00a70239
 800df24:	00a700a7 	.word	0x00a700a7
 800df28:	00a200a7 	.word	0x00a200a7
 800df2c:	00a700a4 	.word	0x00a700a4
 800df30:	00a701bf 	.word	0x00a701bf
 800df34:	00a700a7 	.word	0x00a700a7
 800df38:	03b903b9 	.word	0x03b903b9
 800df3c:	03b903b9 	.word	0x03b903b9
 800df40:	03b903b9 	.word	0x03b903b9
 800df44:	03b903b9 	.word	0x03b903b9
 800df48:	01b30054 	.word	0x01b30054
 800df4c:	023d00af 	.word	0x023d00af
 800df50:	035b03c2 	.word	0x035b03c2
 800df54:	03c603c6 	.word	0x03c603c6
 800df58:	03ad03ad 	.word	0x03ad03ad
 800df5c:	03ad03ad 	.word	0x03ad03ad
 800df60:	03ad03ad 	.word	0x03ad03ad
 800df64:	03ad03ad 	.word	0x03ad03ad
 800df68:	03ad03ad 	.word	0x03ad03ad
 800df6c:	03ad03ad 	.word	0x03ad03ad
 800df70:	03ad03ad 	.word	0x03ad03ad
 800df74:	03ad03ad 	.word	0x03ad03ad
 800df78:	03c603c6 	.word	0x03c603c6
 800df7c:	03c603c6 	.word	0x03c603c6
 800df80:	03c603c6 	.word	0x03c603c6
 800df84:	03c603c6 	.word	0x03c603c6
 800df88:	03c603c6 	.word	0x03c603c6
 800df8c:	03c603c6 	.word	0x03c603c6
 800df90:	03c603c6 	.word	0x03c603c6
 800df94:	03b5      	.short	0x03b5
  INPUT_BYTE(cinfo, c, return FALSE);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	4620      	mov	r0, r4
 800df9a:	4798      	blx	r3
 800df9c:	b170      	cbz	r0, 800dfbc <read_markers+0x11c>
 800df9e:	e9d7 5300 	ldrd	r5, r3, [r7]
 800dfa2:	e78e      	b.n	800dec2 <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	4798      	blx	r3
 800dfaa:	b138      	cbz	r0, 800dfbc <read_markers+0x11c>
 800dfac:	e9d7 5300 	ldrd	r5, r3, [r7]
 800dfb0:	e78c      	b.n	800decc <read_markers+0x2c>
	if (! next_marker(cinfo))
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f7ff fde6 	bl	800db84 <next_marker>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d19e      	bne.n	800defa <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	e0e9      	b.n	800e194 <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800dfc0:	6823      	ldr	r3, [r4, #0]
 800dfc2:	2268      	movs	r2, #104	; 0x68
 800dfc4:	2101      	movs	r1, #1
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	615a      	str	r2, [r3, #20]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800dfce:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	b12b      	cbz	r3, 800dfe2 <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800dfd6:	6823      	ldr	r3, [r4, #0]
 800dfd8:	223f      	movs	r2, #63	; 0x3f
 800dfda:	4620      	mov	r0, r4
 800dfdc:	615a      	str	r2, [r3, #20]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800dfe2:	2210      	movs	r2, #16
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800dfea:	f01a fb0f 	bl	802860c <memset>
    cinfo->arith_dc_U[i] = 1;
 800dfee:	2210      	movs	r2, #16
 800dff0:	2101      	movs	r1, #1
 800dff2:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800dff6:	f01a fb09 	bl	802860c <memset>
    cinfo->arith_ac_K[i] = 5;
 800dffa:	2210      	movs	r2, #16
 800dffc:	2105      	movs	r1, #5
 800dffe:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800e002:	f01a fb03 	bl	802860c <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e006:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e00a:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e00c:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800e010:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e014:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800e018:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800e01c:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800e020:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800e024:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800e028:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800e02c:	2201      	movs	r2, #1
 800e02e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e032:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800e03a:	e735      	b.n	800dea8 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800e03c:	2300      	movs	r3, #0
 800e03e:	2101      	movs	r1, #1
 800e040:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e042:	4620      	mov	r0, r4
 800e044:	f7ff faec 	bl	800d620 <get_sof>
      if (! skip_variable(cinfo))
 800e048:	2800      	cmp	r0, #0
 800e04a:	d1f3      	bne.n	800e034 <read_markers+0x194>
 800e04c:	e7b6      	b.n	800dfbc <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800e04e:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e050:	2200      	movs	r2, #0
 800e052:	e001      	b.n	800e058 <read_markers+0x1b8>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800e054:	2300      	movs	r3, #0
 800e056:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e058:	2100      	movs	r1, #0
 800e05a:	e7f2      	b.n	800e042 <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e05c:	2301      	movs	r3, #1
 800e05e:	e7f7      	b.n	800e050 <read_markers+0x1b0>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e060:	2301      	movs	r3, #1
 800e062:	461a      	mov	r2, r3
 800e064:	e7f8      	b.n	800e058 <read_markers+0x1b8>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800e066:	6822      	ldr	r2, [r4, #0]
 800e068:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e06a:	4620      	mov	r0, r4
 800e06c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e070:	6813      	ldr	r3, [r2, #0]
 800e072:	4798      	blx	r3
      break;
 800e074:	e7de      	b.n	800e034 <read_markers+0x194>
  if (! cinfo->marker->saw_SOF)
 800e076:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800e07a:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800e07c:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800e07e:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800e082:	b92b      	cbnz	r3, 800e090 <read_markers+0x1f0>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800e084:	6823      	ldr	r3, [r4, #0]
 800e086:	2240      	movs	r2, #64	; 0x40
 800e088:	4620      	mov	r0, r4
 800e08a:	615a      	str	r2, [r3, #20]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e090:	b936      	cbnz	r6, 800e0a0 <read_markers+0x200>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	4620      	mov	r0, r4
 800e096:	4798      	blx	r3
 800e098:	2800      	cmp	r0, #0
 800e09a:	d08f      	beq.n	800dfbc <read_markers+0x11c>
 800e09c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e0a0:	f895 8000 	ldrb.w	r8, [r5]
 800e0a4:	3e01      	subs	r6, #1
 800e0a6:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800e0aa:	d076      	beq.n	800e19a <read_markers+0x2fa>
 800e0ac:	3501      	adds	r5, #1
 800e0ae:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e0b0:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0b2:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e0b4:	d07a      	beq.n	800e1ac <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0b6:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e0b8:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e0bc:	2269      	movs	r2, #105	; 0x69
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	2101      	movs	r1, #1
 800e0c2:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e0c4:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e0c6:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800e0ce:	f109 0303 	add.w	r3, r9, #3
 800e0d2:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800e0d6:	d108      	bne.n	800e0ea <read_markers+0x24a>
 800e0d8:	f1b9 0f04 	cmp.w	r9, #4
 800e0dc:	dc05      	bgt.n	800e0ea <read_markers+0x24a>
 800e0de:	f1b9 0f00 	cmp.w	r9, #0
 800e0e2:	d108      	bne.n	800e0f6 <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800e0e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800e0e8:	b92b      	cbnz	r3, 800e0f6 <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e0ea:	6823      	ldr	r3, [r4, #0]
 800e0ec:	220c      	movs	r2, #12
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	615a      	str	r2, [r3, #20]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800e0f6:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800e0fa:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800e0fe:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800e102:	9301      	str	r3, [sp, #4]
 800e104:	45d1      	cmp	r9, sl
 800e106:	dc5a      	bgt.n	800e1be <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e108:	b93e      	cbnz	r6, 800e11a <read_markers+0x27a>
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	4620      	mov	r0, r4
 800e10e:	4798      	blx	r3
 800e110:	2800      	cmp	r0, #0
 800e112:	f43f af53 	beq.w	800dfbc <read_markers+0x11c>
 800e116:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e11a:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e11c:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e11e:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800e122:	f000 809a 	beq.w	800e25a <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e126:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e128:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e12a:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e12c:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800e130:	f000 809c 	beq.w	800e26c <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e134:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e136:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e13a:	2101      	movs	r1, #1
 800e13c:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800e13e:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800e140:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800e142:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800e146:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800e14a:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e14e:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800e152:	6823      	ldr	r3, [r4, #0]
 800e154:	619a      	str	r2, [r3, #24]
 800e156:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800e15a:	61da      	str	r2, [r3, #28]
 800e15c:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800e160:	621a      	str	r2, [r3, #32]
 800e162:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800e166:	625a      	str	r2, [r3, #36]	; 0x24
 800e168:	226b      	movs	r2, #107	; 0x6b
 800e16a:	615a      	str	r2, [r3, #20]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800e170:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e174:	2200      	movs	r2, #0
 800e176:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800e178:	f1b9 0f00 	cmp.w	r9, #0
 800e17c:	d004      	beq.n	800e188 <read_markers+0x2e8>
 800e17e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e182:	3301      	adds	r3, #1
 800e184:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800e188:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800e18a:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e18c:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800e190:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800e194:	b005      	add	sp, #20
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	4620      	mov	r0, r4
 800e19e:	4798      	blx	r3
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	f43f af0b 	beq.w	800dfbc <read_markers+0x11c>
 800e1a6:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e1aa:	e780      	b.n	800e0ae <read_markers+0x20e>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	4798      	blx	r3
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	f43f af02 	beq.w	800dfbc <read_markers+0x11c>
 800e1b8:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e1bc:	e77c      	b.n	800e0b8 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e1be:	b93e      	cbnz	r6, 800e1d0 <read_markers+0x330>
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	4798      	blx	r3
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	f43f aef8 	beq.w	800dfbc <read_markers+0x11c>
 800e1cc:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e1d0:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e1d2:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e1d6:	d02f      	beq.n	800e238 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e1d8:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800e1da:	3e01      	subs	r6, #1
 800e1dc:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e1e0:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e1e8:	4290      	cmp	r0, r2
 800e1ea:	db2e      	blt.n	800e24a <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800e1ec:	6821      	ldr	r1, [r4, #0]
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	9302      	str	r3, [sp, #8]
 800e1f2:	2304      	movs	r3, #4
 800e1f4:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800e1f8:	6809      	ldr	r1, [r1, #0]
 800e1fa:	4788      	blx	r1
 800e1fc:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800e1fe:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e200:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800e202:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e206:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800e208:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 800e20c:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e210:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e214:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800e216:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e21a:	f8c1 b018 	str.w	fp, [r1, #24]
 800e21e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800e222:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e224:	61cb      	str	r3, [r1, #28]
 800e226:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e22a:	620b      	str	r3, [r1, #32]
 800e22c:	236a      	movs	r3, #106	; 0x6a
 800e22e:	614b      	str	r3, [r1, #20]
 800e230:	684b      	ldr	r3, [r1, #4]
 800e232:	2101      	movs	r1, #1
 800e234:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800e236:	e765      	b.n	800e104 <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	4620      	mov	r0, r4
 800e23c:	4798      	blx	r3
 800e23e:	2800      	cmp	r0, #0
 800e240:	f43f aebc 	beq.w	800dfbc <read_markers+0x11c>
 800e244:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e248:	e7c7      	b.n	800e1da <read_markers+0x33a>
      if (cc == compptr->component_id)
 800e24a:	f8d8 1000 	ldr.w	r1, [r8]
 800e24e:	458b      	cmp	fp, r1
 800e250:	d0d5      	beq.n	800e1fe <read_markers+0x35e>
	 ci++, compptr++) {
 800e252:	3001      	adds	r0, #1
 800e254:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800e258:	e7c6      	b.n	800e1e8 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	4620      	mov	r0, r4
 800e25e:	4798      	blx	r3
 800e260:	2800      	cmp	r0, #0
 800e262:	f43f aeab 	beq.w	800dfbc <read_markers+0x11c>
 800e266:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e26a:	e75d      	b.n	800e128 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	4620      	mov	r0, r4
 800e270:	4798      	blx	r3
 800e272:	2800      	cmp	r0, #0
 800e274:	f43f aea2 	beq.w	800dfbc <read_markers+0x11c>
 800e278:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e27c:	e75b      	b.n	800e136 <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800e27e:	6823      	ldr	r3, [r4, #0]
 800e280:	2257      	movs	r2, #87	; 0x57
 800e282:	4620      	mov	r0, r4
 800e284:	2101      	movs	r1, #1
 800e286:	615a      	str	r2, [r3, #20]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800e28c:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800e28e:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800e290:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800e294:	e77e      	b.n	800e194 <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800e296:	69a7      	ldr	r7, [r4, #24]
 800e298:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e29a:	b1e6      	cbz	r6, 800e2d6 <read_markers+0x436>
  INPUT_VARS(cinfo);
 800e29c:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e29e:	f895 9000 	ldrb.w	r9, [r5]
 800e2a2:	3e01      	subs	r6, #1
 800e2a4:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800e2a8:	d01e      	beq.n	800e2e8 <read_markers+0x448>
 800e2aa:	3501      	adds	r5, #1
 800e2ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e2b0:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e2b2:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e2b6:	4499      	add	r9, r3
  length -= 2;
 800e2b8:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800e2bc:	f1b9 0f00 	cmp.w	r9, #0
 800e2c0:	dc1b      	bgt.n	800e2fa <read_markers+0x45a>
  if (length != 0)
 800e2c2:	d005      	beq.n	800e2d0 <read_markers+0x430>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e2c4:	6823      	ldr	r3, [r4, #0]
 800e2c6:	220c      	movs	r2, #12
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	615a      	str	r2, [r3, #20]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800e2d0:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800e2d2:	607e      	str	r6, [r7, #4]
  return TRUE;
 800e2d4:	e6ae      	b.n	800e034 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	4620      	mov	r0, r4
 800e2da:	4798      	blx	r3
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	f43f ae6d 	beq.w	800dfbc <read_markers+0x11c>
 800e2e2:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e2e6:	e7da      	b.n	800e29e <read_markers+0x3fe>
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	4798      	blx	r3
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	f43f ae64 	beq.w	800dfbc <read_markers+0x11c>
 800e2f4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e2f8:	e7d8      	b.n	800e2ac <read_markers+0x40c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e2fa:	b93e      	cbnz	r6, 800e30c <read_markers+0x46c>
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	4620      	mov	r0, r4
 800e300:	4798      	blx	r3
 800e302:	2800      	cmp	r0, #0
 800e304:	f43f ae5a 	beq.w	800dfbc <read_markers+0x11c>
 800e308:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e30c:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800e30e:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e312:	d01f      	beq.n	800e354 <read_markers+0x4b4>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e314:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e316:	6822      	ldr	r2, [r4, #0]
 800e318:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800e31a:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e31e:	2101      	movs	r1, #1
 800e320:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800e322:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e324:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800e328:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e32c:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800e330:	6852      	ldr	r2, [r2, #4]
 800e332:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800e334:	f1b8 0f1f 	cmp.w	r8, #31
 800e338:	d905      	bls.n	800e346 <read_markers+0x4a6>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e33a:	6822      	ldr	r2, [r4, #0]
 800e33c:	4620      	mov	r0, r4
 800e33e:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800e342:	6812      	ldr	r2, [r2, #0]
 800e344:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800e346:	f1b8 0f0f 	cmp.w	r8, #15
 800e34a:	44a0      	add	r8, r4
 800e34c:	dd0b      	ble.n	800e366 <read_markers+0x4c6>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800e34e:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800e352:	e7b3      	b.n	800e2bc <read_markers+0x41c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	4620      	mov	r0, r4
 800e358:	4798      	blx	r3
 800e35a:	2800      	cmp	r0, #0
 800e35c:	f43f ae2e 	beq.w	800dfbc <read_markers+0x11c>
 800e360:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e364:	e7d7      	b.n	800e316 <read_markers+0x476>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e366:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e36a:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e36e:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e370:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e374:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e378:	d9a0      	bls.n	800e2bc <read_markers+0x41c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800e37a:	6822      	ldr	r2, [r4, #0]
 800e37c:	211e      	movs	r1, #30
 800e37e:	4620      	mov	r0, r4
 800e380:	6813      	ldr	r3, [r2, #0]
 800e382:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800e386:	4798      	blx	r3
 800e388:	e798      	b.n	800e2bc <read_markers+0x41c>
      if (! get_dht(cinfo))
 800e38a:	4620      	mov	r0, r4
 800e38c:	f7ff fc7e 	bl	800dc8c <get_dht>
 800e390:	e65a      	b.n	800e048 <read_markers+0x1a8>
  INPUT_VARS(cinfo);
 800e392:	69a6      	ldr	r6, [r4, #24]
 800e394:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e396:	b1db      	cbz	r3, 800e3d0 <read_markers+0x530>
  INPUT_VARS(cinfo);
 800e398:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e39a:	f895 8000 	ldrb.w	r8, [r5]
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800e3a4:	d01d      	beq.n	800e3e2 <read_markers+0x542>
 800e3a6:	3501      	adds	r5, #1
 800e3a8:	f815 8b01 	ldrb.w	r8, [r5], #1
 800e3ac:	f103 3aff 	add.w	sl, r3, #4294967295
 800e3b0:	44b8      	add	r8, r7
  length -= 2;
 800e3b2:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800e3b6:	f1b8 0f00 	cmp.w	r8, #0
 800e3ba:	dc1b      	bgt.n	800e3f4 <read_markers+0x554>
  if (length != 0)
 800e3bc:	d005      	beq.n	800e3ca <read_markers+0x52a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e3be:	6822      	ldr	r2, [r4, #0]
 800e3c0:	210c      	movs	r1, #12
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	6151      	str	r1, [r2, #20]
 800e3c6:	6812      	ldr	r2, [r2, #0]
 800e3c8:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800e3ca:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800e3ce:	e631      	b.n	800e034 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e3d0:	68f3      	ldr	r3, [r6, #12]
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	4798      	blx	r3
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	f43f adf0 	beq.w	800dfbc <read_markers+0x11c>
 800e3dc:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e3e0:	e7db      	b.n	800e39a <read_markers+0x4fa>
 800e3e2:	68f3      	ldr	r3, [r6, #12]
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	4798      	blx	r3
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	f43f ade7 	beq.w	800dfbc <read_markers+0x11c>
 800e3ee:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e3f2:	e7d9      	b.n	800e3a8 <read_markers+0x508>
    length--;
 800e3f4:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800e3f8:	f1ba 0f00 	cmp.w	sl, #0
 800e3fc:	d107      	bne.n	800e40e <read_markers+0x56e>
 800e3fe:	68f3      	ldr	r3, [r6, #12]
 800e400:	4620      	mov	r0, r4
 800e402:	4798      	blx	r3
 800e404:	2800      	cmp	r0, #0
 800e406:	f43f add9 	beq.w	800dfbc <read_markers+0x11c>
 800e40a:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e40e:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e412:	2153      	movs	r1, #83	; 0x53
 800e414:	6822      	ldr	r2, [r4, #0]
 800e416:	4620      	mov	r0, r4
    prec = n >> 4;
 800e418:	ea4f 1329 	mov.w	r3, r9, asr #4
 800e41c:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800e420:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e424:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800e426:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e428:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e42c:	6852      	ldr	r2, [r2, #4]
 800e42e:	2101      	movs	r1, #1
 800e430:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800e432:	f019 0f0c 	tst.w	r9, #12
 800e436:	d006      	beq.n	800e446 <read_markers+0x5a6>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800e438:	6822      	ldr	r2, [r4, #0]
 800e43a:	2120      	movs	r1, #32
 800e43c:	4620      	mov	r0, r4
 800e43e:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e442:	6812      	ldr	r2, [r2, #0]
 800e444:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800e446:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800e44a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e44e:	b922      	cbnz	r2, 800e45a <read_markers+0x5ba>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800e450:	4620      	mov	r0, r4
 800e452:	f7fb f873 	bl	800953c <jpeg_alloc_quant_table>
 800e456:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800e45a:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800e45c:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800e460:	2b00      	cmp	r3, #0
 800e462:	d057      	beq.n	800e514 <read_markers+0x674>
      if (length < DCTSIZE2 * 2) {
 800e464:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800e468:	dc6c      	bgt.n	800e544 <read_markers+0x6a4>
 800e46a:	f1ab 0202 	sub.w	r2, fp, #2
 800e46e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e472:	2001      	movs	r0, #1
 800e474:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e478:	4291      	cmp	r1, r2
 800e47a:	d1fb      	bne.n	800e474 <read_markers+0x5d4>
	count = length >> 1;
 800e47c:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800e480:	f1b9 0f19 	cmp.w	r9, #25
 800e484:	d062      	beq.n	800e54c <read_markers+0x6ac>
 800e486:	dc53      	bgt.n	800e530 <read_markers+0x690>
 800e488:	f1b9 0f09 	cmp.w	r9, #9
 800e48c:	d060      	beq.n	800e550 <read_markers+0x6b0>
 800e48e:	f1b9 0f10 	cmp.w	r9, #16
 800e492:	d05f      	beq.n	800e554 <read_markers+0x6b4>
    default:    natural_order = jpeg_natural_order;  break;
 800e494:	4f85      	ldr	r7, [pc, #532]	; (800e6ac <read_markers+0x80c>)
 800e496:	4a86      	ldr	r2, [pc, #536]	; (800e6b0 <read_markers+0x810>)
 800e498:	f1b9 0f04 	cmp.w	r9, #4
 800e49c:	bf18      	it	ne
 800e49e:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800e4a0:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800e4a4:	9302      	str	r3, [sp, #8]
 800e4a6:	9b02      	ldr	r3, [sp, #8]
 800e4a8:	42bb      	cmp	r3, r7
 800e4aa:	d157      	bne.n	800e55c <read_markers+0x6bc>
    if (cinfo->err->trace_level >= 2) {
 800e4ac:	6822      	ldr	r2, [r4, #0]
 800e4ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e4b0:	2a01      	cmp	r2, #1
 800e4b2:	dd26      	ble.n	800e502 <read_markers+0x662>
 800e4b4:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e4b8:	275f      	movs	r7, #95	; 0x5f
 800e4ba:	f8bb 1000 	ldrh.w	r1, [fp]
 800e4be:	4620      	mov	r0, r4
 800e4c0:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e4c2:	f10b 0b10 	add.w	fp, fp, #16
 800e4c6:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e4c8:	6191      	str	r1, [r2, #24]
 800e4ca:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800e4ce:	61d1      	str	r1, [r2, #28]
 800e4d0:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800e4d4:	6211      	str	r1, [r2, #32]
 800e4d6:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800e4da:	6251      	str	r1, [r2, #36]	; 0x24
 800e4dc:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800e4e0:	6291      	str	r1, [r2, #40]	; 0x28
 800e4e2:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800e4e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e4e8:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800e4ec:	6311      	str	r1, [r2, #48]	; 0x30
 800e4ee:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800e4f2:	6157      	str	r7, [r2, #20]
 800e4f4:	6351      	str	r1, [r2, #52]	; 0x34
 800e4f6:	2102      	movs	r1, #2
 800e4f8:	6852      	ldr	r2, [r2, #4]
 800e4fa:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e4fc:	9b02      	ldr	r3, [sp, #8]
 800e4fe:	459b      	cmp	fp, r3
 800e500:	d1db      	bne.n	800e4ba <read_markers+0x61a>
    if (prec) length -= count;
 800e502:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800e504:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f43f af54 	beq.w	800e3b6 <read_markers+0x516>
 800e50e:	eba8 0809 	sub.w	r8, r8, r9
 800e512:	e750      	b.n	800e3b6 <read_markers+0x516>
      if (length < DCTSIZE2) {
 800e514:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800e518:	dc14      	bgt.n	800e544 <read_markers+0x6a4>
 800e51a:	f1ab 0202 	sub.w	r2, fp, #2
 800e51e:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e522:	2001      	movs	r0, #1
 800e524:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e528:	4291      	cmp	r1, r2
 800e52a:	d1fb      	bne.n	800e524 <read_markers+0x684>
 800e52c:	46c1      	mov	r9, r8
 800e52e:	e7a7      	b.n	800e480 <read_markers+0x5e0>
    switch (count) {
 800e530:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800e534:	d010      	beq.n	800e558 <read_markers+0x6b8>
    default:    natural_order = jpeg_natural_order;  break;
 800e536:	4f5e      	ldr	r7, [pc, #376]	; (800e6b0 <read_markers+0x810>)
 800e538:	4b5e      	ldr	r3, [pc, #376]	; (800e6b4 <read_markers+0x814>)
 800e53a:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800e53e:	bf08      	it	eq
 800e540:	461f      	moveq	r7, r3
 800e542:	e7ad      	b.n	800e4a0 <read_markers+0x600>
	count = DCTSIZE2;
 800e544:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800e548:	4f59      	ldr	r7, [pc, #356]	; (800e6b0 <read_markers+0x810>)
 800e54a:	e7a9      	b.n	800e4a0 <read_markers+0x600>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800e54c:	4f5a      	ldr	r7, [pc, #360]	; (800e6b8 <read_markers+0x818>)
 800e54e:	e7a7      	b.n	800e4a0 <read_markers+0x600>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800e550:	4f5a      	ldr	r7, [pc, #360]	; (800e6bc <read_markers+0x81c>)
 800e552:	e7a5      	b.n	800e4a0 <read_markers+0x600>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800e554:	4f5a      	ldr	r7, [pc, #360]	; (800e6c0 <read_markers+0x820>)
 800e556:	e7a3      	b.n	800e4a0 <read_markers+0x600>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800e558:	4f5a      	ldr	r7, [pc, #360]	; (800e6c4 <read_markers+0x824>)
 800e55a:	e7a1      	b.n	800e4a0 <read_markers+0x600>
      if (prec)
 800e55c:	9b01      	ldr	r3, [sp, #4]
 800e55e:	b333      	cbz	r3, 800e5ae <read_markers+0x70e>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e560:	f1ba 0f00 	cmp.w	sl, #0
 800e564:	d107      	bne.n	800e576 <read_markers+0x6d6>
 800e566:	68f3      	ldr	r3, [r6, #12]
 800e568:	4620      	mov	r0, r4
 800e56a:	4798      	blx	r3
 800e56c:	2800      	cmp	r0, #0
 800e56e:	f43f ad25 	beq.w	800dfbc <read_markers+0x11c>
 800e572:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e576:	782a      	ldrb	r2, [r5, #0]
 800e578:	f1ba 0301 	subs.w	r3, sl, #1
 800e57c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e580:	d00a      	beq.n	800e598 <read_markers+0x6f8>
 800e582:	3501      	adds	r5, #1
 800e584:	f815 1b01 	ldrb.w	r1, [r5], #1
 800e588:	f103 3aff 	add.w	sl, r3, #4294967295
 800e58c:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800e58e:	f857 1b04 	ldr.w	r1, [r7], #4
 800e592:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800e596:	e786      	b.n	800e4a6 <read_markers+0x606>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e598:	68f3      	ldr	r3, [r6, #12]
 800e59a:	4620      	mov	r0, r4
 800e59c:	9203      	str	r2, [sp, #12]
 800e59e:	4798      	blx	r3
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	f43f ad0b 	beq.w	800dfbc <read_markers+0x11c>
 800e5a6:	9a03      	ldr	r2, [sp, #12]
 800e5a8:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e5ac:	e7ea      	b.n	800e584 <read_markers+0x6e4>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800e5ae:	f1ba 0f00 	cmp.w	sl, #0
 800e5b2:	d107      	bne.n	800e5c4 <read_markers+0x724>
 800e5b4:	68f3      	ldr	r3, [r6, #12]
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	4798      	blx	r3
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	f43f acfe 	beq.w	800dfbc <read_markers+0x11c>
 800e5c0:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e5c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e5c8:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e5cc:	e7df      	b.n	800e58e <read_markers+0x6ee>
  INPUT_VARS(cinfo);
 800e5ce:	69a7      	ldr	r7, [r4, #24]
 800e5d0:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e5d2:	b353      	cbz	r3, 800e62a <read_markers+0x78a>
  INPUT_VARS(cinfo);
 800e5d4:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e5d6:	782a      	ldrb	r2, [r5, #0]
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800e5de:	d02d      	beq.n	800e63c <read_markers+0x79c>
 800e5e0:	3501      	adds	r5, #1
 800e5e2:	782a      	ldrb	r2, [r5, #0]
 800e5e4:	1e5e      	subs	r6, r3, #1
 800e5e6:	4442      	add	r2, r8
  if (length != 4)
 800e5e8:	2a04      	cmp	r2, #4
 800e5ea:	d005      	beq.n	800e5f8 <read_markers+0x758>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e5ec:	6823      	ldr	r3, [r4, #0]
 800e5ee:	220c      	movs	r2, #12
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	615a      	str	r2, [r3, #20]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e5f8:	b34e      	cbz	r6, 800e64e <read_markers+0x7ae>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e5fa:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e5fc:	f895 8000 	ldrb.w	r8, [r5]
 800e600:	3e01      	subs	r6, #1
 800e602:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800e606:	d02b      	beq.n	800e660 <read_markers+0x7c0>
 800e608:	3501      	adds	r5, #1
 800e60a:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e60e:	2254      	movs	r2, #84	; 0x54
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e614:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e616:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e618:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e61a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800e622:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800e626:	603d      	str	r5, [r7, #0]
 800e628:	e653      	b.n	800e2d2 <read_markers+0x432>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	4620      	mov	r0, r4
 800e62e:	4798      	blx	r3
 800e630:	2800      	cmp	r0, #0
 800e632:	f43f acc3 	beq.w	800dfbc <read_markers+0x11c>
 800e636:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e63a:	e7cc      	b.n	800e5d6 <read_markers+0x736>
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	4620      	mov	r0, r4
 800e640:	4798      	blx	r3
 800e642:	2800      	cmp	r0, #0
 800e644:	f43f acba 	beq.w	800dfbc <read_markers+0x11c>
 800e648:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e64c:	e7c9      	b.n	800e5e2 <read_markers+0x742>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	4620      	mov	r0, r4
 800e652:	4798      	blx	r3
 800e654:	2800      	cmp	r0, #0
 800e656:	f43f acb1 	beq.w	800dfbc <read_markers+0x11c>
 800e65a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e65e:	e7cd      	b.n	800e5fc <read_markers+0x75c>
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	4620      	mov	r0, r4
 800e664:	4798      	blx	r3
 800e666:	2800      	cmp	r0, #0
 800e668:	f43f aca8 	beq.w	800dfbc <read_markers+0x11c>
 800e66c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e670:	e7cb      	b.n	800e60a <read_markers+0x76a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800e672:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800e676:	3bd8      	subs	r3, #216	; 0xd8
 800e678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e67c:	4620      	mov	r0, r4
 800e67e:	4798      	blx	r3
 800e680:	e4e2      	b.n	800e048 <read_markers+0x1a8>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800e682:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e686:	69db      	ldr	r3, [r3, #28]
 800e688:	e7f8      	b.n	800e67c <read_markers+0x7dc>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800e68a:	6822      	ldr	r2, [r4, #0]
 800e68c:	215e      	movs	r1, #94	; 0x5e
 800e68e:	4620      	mov	r0, r4
 800e690:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e694:	6853      	ldr	r3, [r2, #4]
 800e696:	2101      	movs	r1, #1
 800e698:	4798      	blx	r3
      break;
 800e69a:	e4cb      	b.n	800e034 <read_markers+0x194>
      if (! skip_variable(cinfo))
 800e69c:	4620      	mov	r0, r4
 800e69e:	f7ff fa36 	bl	800db0e <skip_variable>
 800e6a2:	e4d1      	b.n	800e048 <read_markers+0x1a8>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e6a4:	6822      	ldr	r2, [r4, #0]
 800e6a6:	2146      	movs	r1, #70	; 0x46
 800e6a8:	e4df      	b.n	800e06a <read_markers+0x1ca>
 800e6aa:	bf00      	nop
 800e6ac:	0802d970 	.word	0x0802d970
 800e6b0:	0802d830 	.word	0x0802d830
 800e6b4:	0802dc18 	.word	0x0802dc18
 800e6b8:	0802daa4 	.word	0x0802daa4
 800e6bc:	0802d9c0 	.word	0x0802d9c0
 800e6c0:	0802da24 	.word	0x0802da24
 800e6c4:	0802db48 	.word	0x0802db48

0800e6c8 <jpeg_resync_to_restart>:
{
 800e6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6cc:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e6ce:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800e6d0:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e6d4:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e6d6:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e6da:	61d9      	str	r1, [r3, #28]
 800e6dc:	f04f 31ff 	mov.w	r1, #4294967295
{
 800e6e0:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e6e2:	f008 0807 	and.w	r8, r8, #7
 800e6e6:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800e6ea:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800e6f2:	2dbf      	cmp	r5, #191	; 0xbf
 800e6f4:	dd2e      	ble.n	800e754 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800e6f6:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800e6fa:	2b07      	cmp	r3, #7
 800e6fc:	d828      	bhi.n	800e750 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e6fe:	4545      	cmp	r5, r8
 800e700:	d026      	beq.n	800e750 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800e702:	1cbb      	adds	r3, r7, #2
 800e704:	f003 0307 	and.w	r3, r3, #7
 800e708:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800e70a:	429d      	cmp	r5, r3
 800e70c:	d020      	beq.n	800e750 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800e70e:	1e7b      	subs	r3, r7, #1
 800e710:	f003 0307 	and.w	r3, r3, #7
 800e714:	33d0      	adds	r3, #208	; 0xd0
 800e716:	429d      	cmp	r5, r3
 800e718:	d01c      	beq.n	800e754 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800e71a:	1ebc      	subs	r4, r7, #2
 800e71c:	f004 0407 	and.w	r4, r4, #7
 800e720:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800e722:	42a5      	cmp	r5, r4
 800e724:	bf14      	ite	ne
 800e726:	2401      	movne	r4, #1
 800e728:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800e72a:	6833      	ldr	r3, [r6, #0]
 800e72c:	2263      	movs	r2, #99	; 0x63
 800e72e:	2104      	movs	r1, #4
 800e730:	4630      	mov	r0, r6
 800e732:	61dc      	str	r4, [r3, #28]
 800e734:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	4798      	blx	r3
    switch (action) {
 800e73c:	2c02      	cmp	r4, #2
 800e73e:	d00b      	beq.n	800e758 <jpeg_resync_to_restart+0x90>
 800e740:	2c03      	cmp	r4, #3
 800e742:	d002      	beq.n	800e74a <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800e744:	2300      	movs	r3, #0
 800e746:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800e74a:	2001      	movs	r0, #1
}
 800e74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800e750:	2403      	movs	r4, #3
 800e752:	e7ea      	b.n	800e72a <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800e754:	2402      	movs	r4, #2
 800e756:	e7e8      	b.n	800e72a <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800e758:	4630      	mov	r0, r6
 800e75a:	f7ff fa13 	bl	800db84 <next_marker>
 800e75e:	2800      	cmp	r0, #0
 800e760:	d0f4      	beq.n	800e74c <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800e762:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800e766:	e7c4      	b.n	800e6f2 <jpeg_resync_to_restart+0x2a>

0800e768 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800e768:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e76a:	6843      	ldr	r3, [r0, #4]
 800e76c:	22ac      	movs	r2, #172	; 0xac
 800e76e:	2100      	movs	r1, #0
{
 800e770:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800e776:	4b11      	ldr	r3, [pc, #68]	; (800e7bc <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800e778:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800e77c:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800e77e:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800e780:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800e784:	4b0e      	ldr	r3, [pc, #56]	; (800e7c0 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800e786:	4a0f      	ldr	r2, [pc, #60]	; (800e7c4 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800e788:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800e78a:	4b0f      	ldr	r3, [pc, #60]	; (800e7c8 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800e78c:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800e78e:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800e790:	2300      	movs	r3, #0
 800e792:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800e794:	f100 0320 	add.w	r3, r0, #32
    marker->process_APPn[i] = skip_variable;
 800e798:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < 16; i++) {
 800e79c:	4299      	cmp	r1, r3
 800e79e:	d1fb      	bne.n	800e798 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800e7a0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800e7a4:	2240      	movs	r2, #64	; 0x40
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	f019 ff30 	bl	802860c <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800e7ac:	4b07      	ldr	r3, [pc, #28]	; (800e7cc <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800e7ae:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800e7b0:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800e7b2:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800e7b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800e7b8:	f7ff ba59 	b.w	800dc6e <reset_marker_reader>
 800e7bc:	0800dc6f 	.word	0x0800dc6f
 800e7c0:	0800dea1 	.word	0x0800dea1
 800e7c4:	0800db0f 	.word	0x0800db0f
 800e7c8:	0800dc11 	.word	0x0800dc11
 800e7cc:	0800da39 	.word	0x0800da39

0800e7d0 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800e7d0:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800e7d2:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800e7d6:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800e7d8:	68ab      	ldr	r3, [r5, #8]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d02a      	beq.n	800e834 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800e7de:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800e7e0:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800e7e4:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800e7ea:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800e7ee:	2102      	movs	r1, #2
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800e7f6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800e7fa:	2102      	movs	r1, #2
 800e7fc:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800e7fe:	4620      	mov	r0, r4
 800e800:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800e802:	68a2      	ldr	r2, [r4, #8]
 800e804:	b1aa      	cbz	r2, 800e832 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e806:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800e808:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e80a:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800e80c:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800e80e:	bf14      	ite	ne
 800e810:	2102      	movne	r1, #2
 800e812:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800e814:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800e816:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800e818:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800e81a:	b151      	cbz	r1, 800e832 <prepare_for_output_pass+0x62>
 800e81c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800e820:	6949      	ldr	r1, [r1, #20]
 800e822:	b931      	cbnz	r1, 800e832 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800e824:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800e826:	2900      	cmp	r1, #0
 800e828:	bf14      	ite	ne
 800e82a:	2102      	movne	r1, #2
 800e82c:	2101      	moveq	r1, #1
 800e82e:	440b      	add	r3, r1
 800e830:	6113      	str	r3, [r2, #16]
    }
  }
}
 800e832:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800e834:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800e836:	b16b      	cbz	r3, 800e854 <prepare_for_output_pass+0x84>
 800e838:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800e83c:	b953      	cbnz	r3, 800e854 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800e83e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e840:	2b00      	cmp	r3, #0
 800e842:	d037      	beq.n	800e8b4 <prepare_for_output_pass+0xe4>
 800e844:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800e846:	2b00      	cmp	r3, #0
 800e848:	d034      	beq.n	800e8b4 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800e84a:	69ab      	ldr	r3, [r5, #24]
 800e84c:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800e850:	2301      	movs	r3, #1
 800e852:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800e854:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800e858:	4620      	mov	r0, r4
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800e85e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800e862:	4620      	mov	r0, r4
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800e868:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1c9      	bne.n	800e802 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800e86e:	692b      	ldr	r3, [r5, #16]
 800e870:	b923      	cbnz	r3, 800e87c <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800e872:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800e876:	4620      	mov	r0, r4
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800e87c:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800e880:	4620      	mov	r0, r4
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800e886:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e888:	b12b      	cbz	r3, 800e896 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800e88a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800e88e:	4620      	mov	r0, r4
 800e890:	68a9      	ldr	r1, [r5, #8]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800e896:	68aa      	ldr	r2, [r5, #8]
 800e898:	4620      	mov	r0, r4
 800e89a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800e89e:	2a00      	cmp	r2, #0
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	bf14      	ite	ne
 800e8a4:	2103      	movne	r1, #3
 800e8a6:	2100      	moveq	r1, #0
 800e8a8:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800e8aa:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	e7a4      	b.n	800e7fe <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800e8b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8b6:	b11b      	cbz	r3, 800e8c0 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800e8b8:	696b      	ldr	r3, [r5, #20]
 800e8ba:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800e8be:	e7c9      	b.n	800e854 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	222f      	movs	r2, #47	; 0x2f
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	615a      	str	r2, [r3, #20]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4798      	blx	r3
 800e8cc:	e7c2      	b.n	800e854 <prepare_for_output_pass+0x84>

0800e8ce <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800e8ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800e8d0:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800e8d2:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800e8d6:	b11a      	cbz	r2, 800e8e0 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800e8d8:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	4798      	blx	r3
  master->pass_number++;
 800e8e0:	68e3      	ldr	r3, [r4, #12]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	60e3      	str	r3, [r4, #12]
}
 800e8e6:	bd10      	pop	{r4, pc}

0800e8e8 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800e8e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800e8ea:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d143      	bne.n	800e978 <use_merged_upsample+0x90>
 800e8f0:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800e8f4:	2a00      	cmp	r2, #0
 800e8f6:	d141      	bne.n	800e97c <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800e8f8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800e8fc:	2b03      	cmp	r3, #3
 800e8fe:	d139      	bne.n	800e974 <use_merged_upsample+0x8c>
 800e900:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e902:	2b03      	cmp	r3, #3
 800e904:	d136      	bne.n	800e974 <use_merged_upsample+0x8c>
 800e906:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800e90a:	2b02      	cmp	r3, #2
 800e90c:	d132      	bne.n	800e974 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800e90e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800e910:	2b03      	cmp	r3, #3
 800e912:	d12f      	bne.n	800e974 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800e914:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800e918:	6899      	ldr	r1, [r3, #8]
 800e91a:	2902      	cmp	r1, #2
 800e91c:	d12a      	bne.n	800e974 <use_merged_upsample+0x8c>
 800e91e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800e920:	2901      	cmp	r1, #1
 800e922:	d127      	bne.n	800e974 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800e924:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800e928:	2901      	cmp	r1, #1
 800e92a:	d123      	bne.n	800e974 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800e92c:	68d9      	ldr	r1, [r3, #12]
 800e92e:	2902      	cmp	r1, #2
 800e930:	dc20      	bgt.n	800e974 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800e932:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800e934:	2901      	cmp	r1, #1
 800e936:	d11d      	bne.n	800e974 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800e938:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800e93c:	2901      	cmp	r1, #1
 800e93e:	d119      	bne.n	800e974 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e940:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800e944:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e946:	42a1      	cmp	r1, r4
 800e948:	d114      	bne.n	800e974 <use_merged_upsample+0x8c>
 800e94a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800e94c:	42a1      	cmp	r1, r4
 800e94e:	d111      	bne.n	800e974 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e950:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800e954:	42a1      	cmp	r1, r4
 800e956:	d10d      	bne.n	800e974 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e958:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800e95c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800e95e:	4281      	cmp	r1, r0
 800e960:	d108      	bne.n	800e974 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e962:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e966:	4281      	cmp	r1, r0
 800e968:	d104      	bne.n	800e974 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800e96a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800e96e:	1a53      	subs	r3, r2, r1
 800e970:	425a      	negs	r2, r3
 800e972:	415a      	adcs	r2, r3
}
 800e974:	4610      	mov	r0, r2
 800e976:	bd10      	pop	{r4, pc}
    return FALSE;
 800e978:	2200      	movs	r2, #0
 800e97a:	e7fb      	b.n	800e974 <use_merged_upsample+0x8c>
 800e97c:	461a      	mov	r2, r3
 800e97e:	e7f9      	b.n	800e974 <use_merged_upsample+0x8c>

0800e980 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800e980:	6942      	ldr	r2, [r0, #20]
 800e982:	2aca      	cmp	r2, #202	; 0xca
{
 800e984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e988:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800e98a:	d005      	beq.n	800e998 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800e98c:	6803      	ldr	r3, [r0, #0]
 800e98e:	2115      	movs	r1, #21
 800e990:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800e998:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e99a:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800e99c:	f7fe faf8 	bl	800cf90 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e9a0:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800e9a4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800e9a8:	462b      	mov	r3, r5
 800e9aa:	45b4      	cmp	ip, r6
 800e9ac:	dd6b      	ble.n	800ea86 <jpeg_calc_output_dimensions+0x106>
 800e9ae:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800e9b0:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800e9b2:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800e9b6:	2a00      	cmp	r2, #0
 800e9b8:	bf14      	ite	ne
 800e9ba:	2708      	movne	r7, #8
 800e9bc:	2704      	moveq	r7, #4
 800e9be:	e00a      	b.n	800e9d6 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800e9c0:	689a      	ldr	r2, [r3, #8]
 800e9c2:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800e9c6:	434a      	muls	r2, r1
 800e9c8:	0052      	lsls	r2, r2, #1
 800e9ca:	fb9e f9f2 	sdiv	r9, lr, r2
 800e9ce:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800e9d2:	b922      	cbnz	r2, 800e9de <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 800e9d4:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800e9d6:	fb01 f008 	mul.w	r0, r1, r8
 800e9da:	42b8      	cmp	r0, r7
 800e9dc:	ddf0      	ble.n	800e9c0 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800e9de:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800e9e0:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800e9e4:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800e9e8:	fb08 f109 	mul.w	r1, r8, r9
 800e9ec:	42b9      	cmp	r1, r7
 800e9ee:	dd0b      	ble.n	800ea08 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800e9f0:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800e9f4:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800e9f6:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800e9fa:	dc14      	bgt.n	800ea26 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800e9fc:	0042      	lsls	r2, r0, #1
 800e9fe:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800ea02:	bfc8      	it	gt
 800ea04:	629a      	strgt	r2, [r3, #40]	; 0x28
 800ea06:	e00f      	b.n	800ea28 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800ea08:	68da      	ldr	r2, [r3, #12]
 800ea0a:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800ea0e:	fb02 f208 	mul.w	r2, r2, r8
 800ea12:	0052      	lsls	r2, r2, #1
 800ea14:	fb9e faf2 	sdiv	sl, lr, r2
 800ea18:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800ea1c:	2a00      	cmp	r2, #0
 800ea1e:	d1e7      	bne.n	800e9f0 <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 800ea20:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800ea24:	e7e0      	b.n	800e9e8 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800ea26:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800ea28:	3601      	adds	r6, #1
 800ea2a:	3358      	adds	r3, #88	; 0x58
 800ea2c:	e7bd      	b.n	800e9aa <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ea2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800ea30:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ea32:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800ea34:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800ea36:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800ea3a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ea3e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800ea40:	69e3      	ldr	r3, [r4, #28]
 800ea42:	4351      	muls	r1, r2
 800ea44:	4358      	muls	r0, r3
 800ea46:	f007 fe71 	bl	801672c <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800ea4a:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800ea4e:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800ea52:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800ea56:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800ea5a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800ea5e:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800ea60:	6a23      	ldr	r3, [r4, #32]
 800ea62:	4351      	muls	r1, r2
 800ea64:	4358      	muls	r0, r3
 800ea66:	f007 fe61 	bl	801672c <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800ea6a:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ea70:	42b2      	cmp	r2, r6
 800ea72:	dcdc      	bgt.n	800ea2e <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800ea74:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800ea78:	2b03      	cmp	r3, #3
 800ea7a:	d806      	bhi.n	800ea8a <jpeg_calc_output_dimensions+0x10a>
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d809      	bhi.n	800ea94 <jpeg_calc_output_dimensions+0x114>
 800ea80:	d009      	beq.n	800ea96 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 800ea82:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 800ea84:	e008      	b.n	800ea98 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ea86:	2600      	movs	r6, #0
 800ea88:	e7f1      	b.n	800ea6e <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800ea8a:	3b04      	subs	r3, #4
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d8f8      	bhi.n	800ea82 <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 800ea90:	2304      	movs	r3, #4
 800ea92:	e000      	b.n	800ea96 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800ea94:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 800ea96:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ea98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ea9a:	b95b      	cbnz	r3, 800eab4 <jpeg_calc_output_dimensions+0x134>
 800ea9c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800ea9e:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800eaa0:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800eaa2:	f7ff ff21 	bl	800e8e8 <use_merged_upsample>
 800eaa6:	b138      	cbz	r0, 800eab8 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800eaa8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800eaac:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800eab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800eab4:	2301      	movs	r3, #1
 800eab6:	e7f2      	b.n	800ea9e <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 800eab8:	2301      	movs	r3, #1
 800eaba:	e7f7      	b.n	800eaac <jpeg_calc_output_dimensions+0x12c>

0800eabc <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800eabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eabe:	6843      	ldr	r3, [r0, #4]
 800eac0:	221c      	movs	r2, #28
 800eac2:	2101      	movs	r1, #1
{
 800eac4:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eac6:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800eac8:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eaca:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800eacc:	4b6d      	ldr	r3, [pc, #436]	; (800ec84 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800eace:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ead2:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800ead4:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800ead6:	4b6c      	ldr	r3, [pc, #432]	; (800ec88 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800ead8:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800eada:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800eadc:	4620      	mov	r0, r4
 800eade:	f7ff ff4f 	bl	800e980 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eae2:	6863      	ldr	r3, [r4, #4]
 800eae4:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800eae8:	2101      	movs	r1, #1
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4620      	mov	r0, r4
 800eaee:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800eaf0:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800eaf4:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800eaf6:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800eaf8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800eafc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb00:	f019 fd84 	bl	802860c <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800eb04:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800eb08:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800eb0a:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800eb0e:	3101      	adds	r1, #1
 800eb10:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800eb14:	d1f9      	bne.n	800eb0a <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800eb16:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800eb1a:	21ff      	movs	r1, #255	; 0xff
 800eb1c:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800eb20:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800eb22:	f019 fd73 	bl	802860c <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800eb26:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800eb30:	f019 fd6c 	bl	802860c <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800eb34:	2280      	movs	r2, #128	; 0x80
 800eb36:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800eb3a:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800eb3e:	f019 fd57 	bl	80285f0 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800eb42:	4620      	mov	r0, r4
  master->pass_number = 0;
 800eb44:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800eb46:	f7ff fecf 	bl	800e8e8 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800eb4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800eb4c:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800eb4e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800eb52:	b1b3      	cbz	r3, 800eb82 <jinit_master_decompress+0xc6>
 800eb54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800eb56:	b1a2      	cbz	r2, 800eb82 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800eb58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d166      	bne.n	800ec2c <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800eb5e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800eb60:	2b03      	cmp	r3, #3
 800eb62:	f04f 0301 	mov.w	r3, #1
 800eb66:	d068      	beq.n	800ec3a <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800eb68:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800eb6a:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800eb6c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800eb70:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800eb74:	4620      	mov	r0, r4
 800eb76:	f006 fef1 	bl	801595c <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800eb7a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800eb7e:	616b      	str	r3, [r5, #20]
 800eb80:	e062      	b.n	800ec48 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800eb82:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800eb86:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1e5      	bne.n	800eb58 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800eb8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb8e:	b94b      	cbnz	r3, 800eba4 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800eb90:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800eb92:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d069      	beq.n	800ec6c <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800eb98:	f000 fa1c 	bl	800efd4 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800eb9c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f000 fb98 	bl	800f2d4 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800eba4:	4620      	mov	r0, r4
 800eba6:	f7fc fda7 	bl	800b6f8 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800ebaa:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800ebae:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d061      	beq.n	800ec78 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800ebb4:	f7fb fc16 	bl	800a3e4 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800ebb8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ebbc:	691b      	ldr	r3, [r3, #16]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d15d      	bne.n	800ec7e <jinit_master_decompress+0x1c2>
 800ebc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ebc4:	3900      	subs	r1, #0
 800ebc6:	bf18      	it	ne
 800ebc8:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f7fc f8fc 	bl	800adc8 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800ebd0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ebd2:	b911      	cbnz	r1, 800ebda <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	f7fe fca3 	bl	800d520 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800ebda:	6863      	ldr	r3, [r4, #4]
 800ebdc:	4620      	mov	r0, r4
 800ebde:	699b      	ldr	r3, [r3, #24]
 800ebe0:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800ebe2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800ebec:	68a2      	ldr	r2, [r4, #8]
 800ebee:	b1e2      	cbz	r2, 800ec2a <jinit_master_decompress+0x16e>
 800ebf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebf2:	b9d3      	cbnz	r3, 800ec2a <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800ebf4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	b1b3      	cbz	r3, 800ec2a <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800ebfc:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800ec00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 800ec02:	b111      	cbz	r1, 800ec0a <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800ec04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ec08:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800ec0a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800ec0e:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800ec10:	434b      	muls	r3, r1
    cinfo->progress->pass_counter = 0L;
 800ec12:	6050      	str	r0, [r2, #4]
    cinfo->progress->completed_passes = 0;
 800ec14:	e9c2 3002 	strd	r3, r0, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800ec18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ec1a:	4283      	cmp	r3, r0
 800ec1c:	bf14      	ite	ne
 800ec1e:	2303      	movne	r3, #3
 800ec20:	2302      	moveq	r3, #2
 800ec22:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800ec24:	68eb      	ldr	r3, [r5, #12]
 800ec26:	3301      	adds	r3, #1
 800ec28:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800ec2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800ec2c:	6823      	ldr	r3, [r4, #0]
 800ec2e:	2230      	movs	r2, #48	; 0x30
 800ec30:	4620      	mov	r0, r4
 800ec32:	615a      	str	r2, [r3, #20]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4798      	blx	r3
 800ec38:	e791      	b.n	800eb5e <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800ec3a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800ec3e:	b17a      	cbz	r2, 800ec60 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800ec40:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800ec42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d195      	bne.n	800eb74 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800ec48:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ec4a:	b913      	cbnz	r3, 800ec52 <jinit_master_decompress+0x196>
 800ec4c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d09c      	beq.n	800eb8c <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800ec52:	4620      	mov	r0, r4
 800ec54:	f007 fcfe 	bl	8016654 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800ec58:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800ec5c:	61ab      	str	r3, [r5, #24]
 800ec5e:	e795      	b.n	800eb8c <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800ec60:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ec62:	b10a      	cbz	r2, 800ec68 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800ec64:	66e3      	str	r3, [r4, #108]	; 0x6c
 800ec66:	e7ec      	b.n	800ec42 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800ec68:	6663      	str	r3, [r4, #100]	; 0x64
 800ec6a:	e783      	b.n	800eb74 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800ec6c:	f7fc fad2 	bl	800b214 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800ec70:	4620      	mov	r0, r4
 800ec72:	f000 fc4f 	bl	800f514 <jinit_upsampler>
 800ec76:	e791      	b.n	800eb9c <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800ec78:	f7fd fed6 	bl	800ca28 <jinit_huff_decoder>
 800ec7c:	e79c      	b.n	800ebb8 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800ec7e:	2101      	movs	r1, #1
 800ec80:	e7a3      	b.n	800ebca <jinit_master_decompress+0x10e>
 800ec82:	bf00      	nop
 800ec84:	0800e7d1 	.word	0x0800e7d1
 800ec88:	0800e8cf 	.word	0x0800e8cf

0800ec8c <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ec8c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800ec90:	2200      	movs	r2, #0
 800ec92:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800ec94:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800ec96:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ec98:	4770      	bx	lr

0800ec9a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800ec9a:	b570      	push	{r4, r5, r6, lr}
 800ec9c:	9d05      	ldr	r5, [sp, #20]
 800ec9e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800eca0:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800eca4:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800eca6:	68de      	ldr	r6, [r3, #12]
 800eca8:	9b04      	ldr	r3, [sp, #16]
 800ecaa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ecae:	6822      	ldr	r2, [r4, #0]
 800ecb0:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800ecb2:	682b      	ldr	r3, [r5, #0]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800ecb8:	6823      	ldr	r3, [r4, #0]
 800ecba:	3301      	adds	r3, #1
 800ecbc:	6023      	str	r3, [r4, #0]
}
 800ecbe:	bd70      	pop	{r4, r5, r6, pc}

0800ecc0 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800ecc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ecc4:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800ecc8:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800ecca:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800ecce:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800ecd0:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800ecd4:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800ecd6:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 800ecd8:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ecda:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800ecde:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ece0:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800ece2:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ece4:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 800ece6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800ecea:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 800ecec:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ecee:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800ecf0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ecf4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ecf8:	9903      	ldr	r1, [sp, #12]
 800ecfa:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ecfc:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800ecfe:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ed02:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800ed06:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800ed0a:	9205      	str	r2, [sp, #20]
 800ed0c:	9a05      	ldr	r2, [sp, #20]
 800ed0e:	3306      	adds	r3, #6
 800ed10:	3102      	adds	r1, #2
 800ed12:	4295      	cmp	r5, r2
 800ed14:	d128      	bne.n	800ed68 <h2v1_merged_upsample+0xa8>
 800ed16:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800ed18:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800ed1a:	fb03 f30e 	mul.w	r3, r3, lr
 800ed1e:	07d2      	lsls	r2, r2, #31
 800ed20:	eb0c 0103 	add.w	r1, ip, r3
 800ed24:	d51d      	bpl.n	800ed62 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800ed26:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ed28:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 800ed2a:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ed2e:	782a      	ldrb	r2, [r5, #0]
 800ed30:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800ed34:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800ed38:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ed3a:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800ed3c:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 800ed3e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 800ed42:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ed46:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800ed4a:	9a03      	ldr	r2, [sp, #12]
 800ed4c:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800ed50:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ed52:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800ed54:	5dbe      	ldrb	r6, [r7, r6]
 800ed56:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ed58:	5c80      	ldrb	r0, [r0, r2]
 800ed5a:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ed5c:	5ca2      	ldrb	r2, [r4, r2]
 800ed5e:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800ed62:	b007      	add	sp, #28
 800ed64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800ed68:	f819 ab01 	ldrb.w	sl, [r9], #1
 800ed6c:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ed6e:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 800ed72:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ed76:	9a02      	ldr	r2, [sp, #8]
 800ed78:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 800ed7c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 800ed80:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ed84:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 800ed86:	9f01      	ldr	r7, [sp, #4]
 800ed88:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800ed8c:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ed90:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 800ed94:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800ed98:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800ed9a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800ed9e:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800eda2:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800eda6:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800edaa:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800edae:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800edb2:	f817 700a 	ldrb.w	r7, [r7, sl]
 800edb6:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800edba:	f812 200a 	ldrb.w	r2, [r2, sl]
 800edbe:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800edc2:	f816 200a 	ldrb.w	r2, [r6, sl]
 800edc6:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800edca:	e79f      	b.n	800ed0c <h2v1_merged_upsample+0x4c>

0800edcc <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800edcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800edd0:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800edd4:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800edd6:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800edda:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800eddc:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800ede0:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 800ede2:	696e      	ldr	r6, [r5, #20]
 800ede4:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ede6:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800ede8:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800edea:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800edec:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800edf0:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800edf4:	686d      	ldr	r5, [r5, #4]
 800edf6:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800edf8:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800edfa:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 800edfc:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800edfe:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800ee00:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ee04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ee08:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800ee0a:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ee0c:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800ee1a:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 800ee1c:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 800ee1e:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 800ee20:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800ee22:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ee24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee26:	3206      	adds	r2, #6
 800ee28:	3306      	adds	r3, #6
 800ee2a:	f10e 0e02 	add.w	lr, lr, #2
 800ee2e:	4588      	cmp	r8, r1
 800ee30:	f10c 0c02 	add.w	ip, ip, #2
 800ee34:	d13a      	bne.n	800eeac <h2v2_merged_upsample+0xe0>
 800ee36:	2306      	movs	r3, #6
 800ee38:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800ee3a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800ee3c:	437b      	muls	r3, r7
 800ee3e:	07c0      	lsls	r0, r0, #31
 800ee40:	eb02 0103 	add.w	r1, r2, r3
 800ee44:	9a01      	ldr	r2, [sp, #4]
 800ee46:	441a      	add	r2, r3
 800ee48:	d52d      	bpl.n	800eea6 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800ee4a:	9808      	ldr	r0, [sp, #32]
 800ee4c:	9d03      	ldr	r5, [sp, #12]
 800ee4e:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ee50:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800ee54:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ee58:	9d05      	ldr	r5, [sp, #20]
 800ee5a:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800ee5e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ee62:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800ee66:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 800ee68:	9804      	ldr	r0, [sp, #16]
 800ee6a:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ee6e:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 800ee72:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ee74:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 800ee76:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800ee7a:	f815 e000 	ldrb.w	lr, [r5, r0]
 800ee7e:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ee82:	f81c e000 	ldrb.w	lr, [ip, r0]
 800ee86:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ee8a:	5c21      	ldrb	r1, [r4, r0]
 800ee8c:	9800      	ldr	r0, [sp, #0]
 800ee8e:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 800ee90:	9907      	ldr	r1, [sp, #28]
 800ee92:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800ee96:	5c68      	ldrb	r0, [r5, r1]
 800ee98:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800ee9a:	f81c 0001 	ldrb.w	r0, [ip, r1]
 800ee9e:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800eea0:	5c62      	ldrb	r2, [r4, r1]
 800eea2:	9901      	ldr	r1, [sp, #4]
 800eea4:	54ca      	strb	r2, [r1, r3]
  }
}
 800eea6:	b00b      	add	sp, #44	; 0x2c
 800eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800eeac:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800eeae:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 800eeb2:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800eeb6:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 800eeba:	9102      	str	r1, [sp, #8]
 800eebc:	9903      	ldr	r1, [sp, #12]
 800eebe:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800eec2:	9905      	ldr	r1, [sp, #20]
 800eec4:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 800eec8:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800eecc:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 800eece:	9e04      	ldr	r6, [sp, #16]
 800eed0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800eed4:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800eed8:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 800eedc:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800eee0:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800eee2:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800eee6:	f811 b009 	ldrb.w	fp, [r1, r9]
 800eeea:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800eeee:	f815 9009 	ldrb.w	r9, [r5, r9]
 800eef2:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800eef6:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800eefa:	f816 b009 	ldrb.w	fp, [r6, r9]
 800eefe:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800ef02:	f811 b009 	ldrb.w	fp, [r1, r9]
 800ef06:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800ef0a:	f815 9009 	ldrb.w	r9, [r5, r9]
 800ef0e:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800ef12:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800ef16:	f816 b009 	ldrb.w	fp, [r6, r9]
 800ef1a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800ef1e:	f811 b009 	ldrb.w	fp, [r1, r9]
 800ef22:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800ef26:	f815 9009 	ldrb.w	r9, [r5, r9]
 800ef2a:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800ef2e:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800ef32:	f816 6009 	ldrb.w	r6, [r6, r9]
 800ef36:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800ef3a:	f811 1009 	ldrb.w	r1, [r1, r9]
 800ef3e:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800ef42:	f815 1009 	ldrb.w	r1, [r5, r9]
 800ef46:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800ef4a:	e76b      	b.n	800ee24 <h2v2_merged_upsample+0x58>

0800ef4c <merged_2v_upsample>:
{
 800ef4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ef50:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800ef54:	4616      	mov	r6, r2
 800ef56:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800ef5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800ef5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ef60:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800ef64:	b1dd      	cbz	r5, 800ef9e <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800ef66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef68:	2501      	movs	r5, #1
 800ef6a:	f104 0020 	add.w	r0, r4, #32
 800ef6e:	9301      	str	r3, [sp, #4]
 800ef70:	2300      	movs	r3, #0
 800ef72:	9500      	str	r5, [sp, #0]
 800ef74:	4619      	mov	r1, r3
 800ef76:	f007 fbe6 	bl	8016746 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800ef7e:	f8d8 3000 	ldr.w	r3, [r8]
 800ef82:	442b      	add	r3, r5
 800ef84:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800ef88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ef8a:	1b5b      	subs	r3, r3, r5
 800ef8c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800ef8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef90:	b913      	cbnz	r3, 800ef98 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800ef92:	6833      	ldr	r3, [r6, #0]
 800ef94:	3301      	adds	r3, #1
 800ef96:	6033      	str	r3, [r6, #0]
}
 800ef98:	b004      	add	sp, #16
 800ef9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800ef9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800efa0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800efa2:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800efa4:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800efa8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800efac:	bf28      	it	cs
 800efae:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800efb0:	9302      	str	r3, [sp, #8]
 800efb2:	42bd      	cmp	r5, r7
 800efb4:	bf28      	it	cs
 800efb6:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800efb8:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800efba:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800efbc:	bf17      	itett	ne
 800efbe:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800efc0:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800efc2:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800efc4:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800efc6:	bf0c      	ite	eq
 800efc8:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800efca:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800efcc:	ab02      	add	r3, sp, #8
 800efce:	6832      	ldr	r2, [r6, #0]
 800efd0:	47b8      	blx	r7
 800efd2:	e7d4      	b.n	800ef7e <merged_2v_upsample+0x32>

0800efd4 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800efd4:	6843      	ldr	r3, [r0, #4]
 800efd6:	2230      	movs	r2, #48	; 0x30
 800efd8:	2101      	movs	r1, #1
 800efda:	681b      	ldr	r3, [r3, #0]
{
 800efdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe0:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800efe2:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800efe4:	4b37      	ldr	r3, [pc, #220]	; (800f0c4 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800efe6:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800efe8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800efea:	6f22      	ldr	r2, [r4, #112]	; 0x70
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800efec:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800eff0:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 800eff2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 800eff6:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800eff8:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 800effa:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800effc:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 800effe:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 800f000:	d15a      	bne.n	800f0b8 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800f002:	4b31      	ldr	r3, [pc, #196]	; (800f0c8 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f004:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 800f006:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800f008:	4b30      	ldr	r3, [pc, #192]	; (800f0cc <jinit_merged_upsampler+0xf8>)
 800f00a:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f00c:	4620      	mov	r0, r4
 800f00e:	6863      	ldr	r3, [r4, #4]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 800f014:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f016:	6863      	ldr	r3, [r4, #4]
 800f018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f01c:	2101      	movs	r1, #1
 800f01e:	4620      	mov	r0, r4
 800f020:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f022:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f026:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f028:	6863      	ldr	r3, [r4, #4]
 800f02a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800f02e:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f030:	2101      	movs	r1, #1
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4620      	mov	r0, r4
 800f036:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f038:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800f03a:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f03c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	2101      	movs	r1, #1
 800f044:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f046:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800f0e4 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f04a:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f04c:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800f04e:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f050:	2101      	movs	r1, #1
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	4620      	mov	r0, r4
 800f056:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f05a:	4f1d      	ldr	r7, [pc, #116]	; (800f0d0 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f05c:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f05e:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800f060:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f062:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f064:	f8df e080 	ldr.w	lr, [pc, #128]	; 800f0e8 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f068:	491a      	ldr	r1, [pc, #104]	; (800f0d4 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800f06a:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f06e:	4d1a      	ldr	r5, [pc, #104]	; (800f0d8 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f070:	fb08 e203 	mla	r2, r8, r3, lr
 800f074:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800f076:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f07a:	fb07 f203 	mul.w	r2, r7, r3
 800f07e:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800f082:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800f086:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800f088:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f08c:	fb05 f203 	mul.w	r2, r5, r3
 800f090:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800f094:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800f098:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f09c:	fb01 f203 	mul.w	r2, r1, r3
 800f0a0:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800f0a4:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800f0a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0b2:	d1dd      	bne.n	800f070 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800f0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800f0b8:	4a08      	ldr	r2, [pc, #32]	; (800f0dc <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 800f0ba:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 800f0bc:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800f0be:	4a08      	ldr	r2, [pc, #32]	; (800f0e0 <jinit_merged_upsampler+0x10c>)
 800f0c0:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 800f0c2:	e7a8      	b.n	800f016 <jinit_merged_upsampler+0x42>
 800f0c4:	0800ec8d 	.word	0x0800ec8d
 800f0c8:	0800ef4d 	.word	0x0800ef4d
 800f0cc:	0800edcd 	.word	0x0800edcd
 800f0d0:	0001c5a2 	.word	0x0001c5a2
 800f0d4:	ffffa7e6 	.word	0xffffa7e6
 800f0d8:	ffff492e 	.word	0xffff492e
 800f0dc:	0800ec9b 	.word	0x0800ec9b
 800f0e0:	0800ecc1 	.word	0x0800ecc1
 800f0e4:	000166e9 	.word	0x000166e9
 800f0e8:	ff4d0b80 	.word	0xff4d0b80

0800f0ec <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800f0ec:	2902      	cmp	r1, #2
{
 800f0ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f0f0:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800f0f4:	d023      	beq.n	800f13e <start_pass_dpost+0x52>
 800f0f6:	2903      	cmp	r1, #3
 800f0f8:	d019      	beq.n	800f12e <start_pass_dpost+0x42>
 800f0fa:	2900      	cmp	r1, #0
 800f0fc:	d128      	bne.n	800f150 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800f0fe:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f100:	b182      	cbz	r2, 800f124 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800f102:	4a16      	ldr	r2, [pc, #88]	; (800f15c <start_pass_dpost+0x70>)
 800f104:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800f106:	68e2      	ldr	r2, [r4, #12]
 800f108:	b93a      	cbnz	r2, 800f11a <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800f10a:	6843      	ldr	r3, [r0, #4]
 800f10c:	2101      	movs	r1, #1
 800f10e:	9100      	str	r1, [sp, #0]
 800f110:	69dd      	ldr	r5, [r3, #28]
 800f112:	68a1      	ldr	r1, [r4, #8]
 800f114:	6923      	ldr	r3, [r4, #16]
 800f116:	47a8      	blx	r5
 800f118:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800f11a:	2300      	movs	r3, #0
 800f11c:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800f120:	b003      	add	sp, #12
 800f122:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800f124:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800f128:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800f12a:	6063      	str	r3, [r4, #4]
    break;
 800f12c:	e7f5      	b.n	800f11a <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800f12e:	68a2      	ldr	r2, [r4, #8]
 800f130:	b91a      	cbnz	r2, 800f13a <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f132:	6803      	ldr	r3, [r0, #0]
 800f134:	6159      	str	r1, [r3, #20]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800f13a:	4b09      	ldr	r3, [pc, #36]	; (800f160 <start_pass_dpost+0x74>)
 800f13c:	e7f5      	b.n	800f12a <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800f13e:	68a2      	ldr	r2, [r4, #8]
 800f140:	b922      	cbnz	r2, 800f14c <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f142:	6803      	ldr	r3, [r0, #0]
 800f144:	2203      	movs	r2, #3
 800f146:	615a      	str	r2, [r3, #20]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800f14c:	4b05      	ldr	r3, [pc, #20]	; (800f164 <start_pass_dpost+0x78>)
 800f14e:	e7ec      	b.n	800f12a <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f150:	6803      	ldr	r3, [r0, #0]
 800f152:	2203      	movs	r2, #3
 800f154:	615a      	str	r2, [r3, #20]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4798      	blx	r3
    break;
 800f15a:	e7de      	b.n	800f11a <start_pass_dpost+0x2e>
 800f15c:	0800f169 	.word	0x0800f169
 800f160:	0800f1c9 	.word	0x0800f1c9
 800f164:	0800f257 	.word	0x0800f257

0800f168 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f16c:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f16e:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800f172:	4604      	mov	r4, r0
 800f174:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800f176:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f178:	682f      	ldr	r7, [r5, #0]
 800f17a:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800f17c:	2700      	movs	r7, #0
 800f17e:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800f180:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800f184:	9705      	str	r7, [sp, #20]
 800f186:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f18a:	42be      	cmp	r6, r7
 800f18c:	bf94      	ite	ls
 800f18e:	9602      	strls	r6, [sp, #8]
 800f190:	9702      	strhi	r7, [sp, #8]
 800f192:	ae07      	add	r6, sp, #28
 800f194:	9601      	str	r6, [sp, #4]
 800f196:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800f19a:	9600      	str	r6, [sp, #0]
 800f19c:	9e05      	ldr	r6, [sp, #20]
 800f19e:	6876      	ldr	r6, [r6, #4]
 800f1a0:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800f1a2:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f1a4:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f1ac:	685e      	ldr	r6, [r3, #4]
 800f1ae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f1b2:	9b07      	ldr	r3, [sp, #28]
 800f1b4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f1b8:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800f1ba:	682b      	ldr	r3, [r5, #0]
 800f1bc:	9a07      	ldr	r2, [sp, #28]
 800f1be:	4413      	add	r3, r2
 800f1c0:	602b      	str	r3, [r5, #0]
}
 800f1c2:	b008      	add	sp, #32
 800f1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1c8 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f1cc:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f1d0:	b085      	sub	sp, #20
 800f1d2:	469a      	mov	sl, r3
 800f1d4:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f1d6:	69a3      	ldr	r3, [r4, #24]
{
 800f1d8:	460e      	mov	r6, r1
 800f1da:	4691      	mov	r9, r2
 800f1dc:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800f1e0:	b943      	cbnz	r3, 800f1f4 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f1e2:	6843      	ldr	r3, [r0, #4]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	9200      	str	r2, [sp, #0]
 800f1e8:	69df      	ldr	r7, [r3, #28]
 800f1ea:	68a1      	ldr	r1, [r4, #8]
 800f1ec:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f1f0:	47b8      	blx	r7
 800f1f2:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800f1f4:	6922      	ldr	r2, [r4, #16]
 800f1f6:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800f1f8:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	9202      	str	r2, [sp, #8]
 800f1fe:	f104 0218 	add.w	r2, r4, #24
 800f202:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800f206:	9201      	str	r2, [sp, #4]
 800f208:	68e2      	ldr	r2, [r4, #12]
 800f20a:	9200      	str	r2, [sp, #0]
 800f20c:	464a      	mov	r2, r9
 800f20e:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800f212:	4653      	mov	r3, sl
 800f214:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800f216:	69a6      	ldr	r6, [r4, #24]
 800f218:	42be      	cmp	r6, r7
 800f21a:	d910      	bls.n	800f23e <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f21c:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800f220:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f222:	68e1      	ldr	r1, [r4, #12]
 800f224:	2200      	movs	r2, #0
 800f226:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f22a:	4628      	mov	r0, r5
 800f22c:	4633      	mov	r3, r6
 800f22e:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800f232:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800f234:	f8d8 3000 	ldr.w	r3, [r8]
 800f238:	4433      	add	r3, r6
 800f23a:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800f23e:	6922      	ldr	r2, [r4, #16]
 800f240:	69a3      	ldr	r3, [r4, #24]
 800f242:	4293      	cmp	r3, r2
 800f244:	d304      	bcc.n	800f250 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800f246:	6963      	ldr	r3, [r4, #20]
 800f248:	4413      	add	r3, r2
 800f24a:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	61a3      	str	r3, [r4, #24]
  }
}
 800f250:	b005      	add	sp, #20
 800f252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f256 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f256:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f25a:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f25e:	4607      	mov	r7, r0
 800f260:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f262:	69a3      	ldr	r3, [r4, #24]
 800f264:	b93b      	cbnz	r3, 800f276 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f266:	6842      	ldr	r2, [r0, #4]
 800f268:	9300      	str	r3, [sp, #0]
 800f26a:	69d5      	ldr	r5, [r2, #28]
 800f26c:	68a1      	ldr	r1, [r4, #8]
 800f26e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f272:	47a8      	blx	r5
 800f274:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800f276:	6963      	ldr	r3, [r4, #20]
 800f278:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f27a:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800f27c:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f27e:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f280:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f282:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f284:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f286:	429d      	cmp	r5, r3
 800f288:	bf28      	it	cs
 800f28a:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f28c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f28e:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f290:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f294:	429d      	cmp	r5, r3
 800f296:	bf28      	it	cs
 800f298:	461d      	movcs	r5, r3
 800f29a:	68e3      	ldr	r3, [r4, #12]
 800f29c:	9303      	str	r3, [sp, #12]
 800f29e:	9803      	ldr	r0, [sp, #12]
 800f2a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800f2a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f2ae:	462b      	mov	r3, r5
 800f2b0:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800f2b2:	6833      	ldr	r3, [r6, #0]
 800f2b4:	442b      	add	r3, r5
 800f2b6:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800f2b8:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f2ba:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800f2bc:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800f2be:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800f2c0:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f2c2:	d304      	bcc.n	800f2ce <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800f2c4:	6963      	ldr	r3, [r4, #20]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	61a3      	str	r3, [r4, #24]
  }
}
 800f2ce:	b004      	add	sp, #16
 800f2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f2d4 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f2d4:	6843      	ldr	r3, [r0, #4]
 800f2d6:	221c      	movs	r2, #28
{
 800f2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f2da:	681b      	ldr	r3, [r3, #0]
{
 800f2dc:	b085      	sub	sp, #20
 800f2de:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f2e0:	2101      	movs	r1, #1
{
 800f2e2:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f2e4:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800f2e6:	4b15      	ldr	r3, [pc, #84]	; (800f33c <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800f2e8:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800f2ea:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f2ee:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800f2f0:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800f2f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800f2f4:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800f2f8:	b1bb      	cbz	r3, 800f32a <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f2fa:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f2fe:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f300:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f302:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f304:	6861      	ldr	r1, [r4, #4]
 800f306:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800f308:	b18f      	cbz	r7, 800f32e <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f30a:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800f30c:	4619      	mov	r1, r3
 800f30e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f310:	9203      	str	r2, [sp, #12]
 800f312:	f007 fa10 	bl	8016736 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f316:	692b      	ldr	r3, [r5, #16]
 800f318:	2101      	movs	r1, #1
 800f31a:	9a03      	ldr	r2, [sp, #12]
 800f31c:	e9cd 0300 	strd	r0, r3, [sp]
 800f320:	4613      	mov	r3, r2
 800f322:	4620      	mov	r0, r4
 800f324:	4632      	mov	r2, r6
 800f326:	47b8      	blx	r7
 800f328:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800f32a:	b005      	add	sp, #20
 800f32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800f32e:	688e      	ldr	r6, [r1, #8]
 800f330:	4620      	mov	r0, r4
 800f332:	2101      	movs	r1, #1
 800f334:	47b0      	blx	r6
 800f336:	60e8      	str	r0, [r5, #12]
}
 800f338:	e7f7      	b.n	800f32a <jinit_d_post_controller+0x56>
 800f33a:	bf00      	nop
 800f33c:	0800f0ed 	.word	0x0800f0ed

0800f340 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f340:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f344:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f348:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f34a:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f34c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800f34e:	4770      	bx	lr

0800f350 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800f350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f354:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f358:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f35a:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800f35e:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f360:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800f362:	4683      	mov	fp, r0
 800f364:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f366:	429a      	cmp	r2, r3
 800f368:	db10      	blt.n	800f38c <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f36a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800f36e:	2600      	movs	r6, #0
 800f370:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800f374:	9303      	str	r3, [sp, #12]
 800f376:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f37a:	9a03      	ldr	r2, [sp, #12]
 800f37c:	fb0a 2106 	mla	r1, sl, r6, r2
 800f380:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800f384:	42b2      	cmp	r2, r6
 800f386:	dc32      	bgt.n	800f3ee <sep_upsample+0x9e>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800f388:	2300      	movs	r3, #0
 800f38a:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800f38c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f38e:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f390:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f392:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f39a:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 800f39e:	1ace      	subs	r6, r1, r3
 800f3a0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f3a2:	428e      	cmp	r6, r1
 800f3a4:	bf28      	it	cs
 800f3a6:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f3a8:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800f3ac:	4566      	cmp	r6, ip
 800f3ae:	bf28      	it	cs
 800f3b0:	4666      	movcs	r6, ip
 800f3b2:	9600      	str	r6, [sp, #0]
 800f3b4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f3b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f3ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f3be:	f104 010c 	add.w	r1, r4, #12
 800f3c2:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800f3c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4433      	add	r3, r6
 800f3cc:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800f3ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f3d0:	1b9b      	subs	r3, r3, r6
 800f3d2:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800f3d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f3d6:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800f3d8:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800f3dc:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800f3de:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800f3e0:	bfa2      	ittt	ge
 800f3e2:	682b      	ldrge	r3, [r5, #0]
 800f3e4:	3301      	addge	r3, #1
 800f3e6:	602b      	strge	r3, [r5, #0]
}
 800f3e8:	b005      	add	sp, #20
 800f3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800f3ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f3f0:	f103 0904 	add.w	r9, r3, #4
 800f3f4:	682a      	ldr	r2, [r5, #0]
 800f3f6:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800f3f8:	f853 0928 	ldr.w	r0, [r3], #-40
 800f3fc:	4607      	mov	r7, r0
 800f3fe:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800f402:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800f404:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f408:	4658      	mov	r0, fp
 800f40a:	47b8      	blx	r7
	 ci++, compptr++) {
 800f40c:	464b      	mov	r3, r9
 800f40e:	e7b4      	b.n	800f37a <sep_upsample+0x2a>

0800f410 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800f410:	601a      	str	r2, [r3, #0]
}
 800f412:	4770      	bx	lr

0800f414 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800f414:	2200      	movs	r2, #0
 800f416:	601a      	str	r2, [r3, #0]
}
 800f418:	4770      	bx	lr

0800f41a <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f41a:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800f41c:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f41e:	2300      	movs	r3, #0
 800f420:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800f424:	4299      	cmp	r1, r3
 800f426:	dc00      	bgt.n	800f42a <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800f428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800f42a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f42e:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800f430:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f434:	440c      	add	r4, r1
    while (outptr < outend) {
 800f436:	42a1      	cmp	r1, r4
 800f438:	d301      	bcc.n	800f43e <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f43a:	3301      	adds	r3, #1
 800f43c:	e7f0      	b.n	800f420 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f43e:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800f442:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800f446:	f801 6c01 	strb.w	r6, [r1, #-1]
 800f44a:	e7f4      	b.n	800f436 <h2v1_upsample+0x1c>

0800f44c <int_upsample>:
{
 800f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f450:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800f452:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f454:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800f458:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800f45a:	684b      	ldr	r3, [r1, #4]
 800f45c:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800f45e:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800f460:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800f462:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800f466:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f46a:	f108 33ff 	add.w	r3, r8, #4294967295
 800f46e:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800f470:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f474:	42a3      	cmp	r3, r4
 800f476:	dc02      	bgt.n	800f47e <int_upsample+0x32>
}
 800f478:	b005      	add	sp, #20
 800f47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800f47e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f482:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f484:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800f488:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800f48c:	454b      	cmp	r3, r9
 800f48e:	d30e      	bcc.n	800f4ae <int_upsample+0x62>
    if (v_expand > 1) {
 800f490:	f1b8 0f01 	cmp.w	r8, #1
 800f494:	dd09      	ble.n	800f4aa <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f496:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f498:	463a      	mov	r2, r7
 800f49a:	4621      	mov	r1, r4
 800f49c:	4638      	mov	r0, r7
 800f49e:	9301      	str	r3, [sp, #4]
 800f4a0:	9b03      	ldr	r3, [sp, #12]
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	1c63      	adds	r3, r4, #1
 800f4a6:	f007 f94e 	bl	8016746 <jcopy_sample_rows>
    outrow += v_expand;
 800f4aa:	4444      	add	r4, r8
 800f4ac:	e7e0      	b.n	800f470 <int_upsample+0x24>
	*outptr++ = invalue;
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	4652      	mov	r2, sl
 800f4b2:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800f4b6:	f019 f8a9 	bl	802860c <memset>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	4453      	add	r3, sl
 800f4be:	e7e5      	b.n	800f48c <int_upsample+0x40>

0800f4c0 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f4c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800f4c8:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800f4ca:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f4cc:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800f4d0:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f4d4:	42a3      	cmp	r3, r4
 800f4d6:	dc02      	bgt.n	800f4de <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800f4d8:	b002      	add	sp, #8
 800f4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800f4de:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f4e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f4e4:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800f4e8:	441a      	add	r2, r3
    while (outptr < outend) {
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d30a      	bcc.n	800f504 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f4ee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f4f0:	4621      	mov	r1, r4
 800f4f2:	4632      	mov	r2, r6
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	e9cd 8300 	strd	r8, r3, [sp]
 800f4fa:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800f4fc:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f4fe:	f007 f922 	bl	8016746 <jcopy_sample_rows>
    outrow += 2;
 800f502:	e7e5      	b.n	800f4d0 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f504:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800f508:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800f50c:	f803 0c01 	strb.w	r0, [r3, #-1]
 800f510:	e7eb      	b.n	800f4ea <h2v2_upsample+0x2a>
	...

0800f514 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800f514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f518:	6843      	ldr	r3, [r0, #4]
 800f51a:	22a0      	movs	r2, #160	; 0xa0
 800f51c:	2101      	movs	r1, #1
{
 800f51e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800f524:	4b3f      	ldr	r3, [pc, #252]	; (800f624 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f526:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f52a:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800f52c:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800f52e:	4b3e      	ldr	r3, [pc, #248]	; (800f628 <jinit_upsampler+0x114>)
 800f530:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800f532:	2300      	movs	r3, #0
 800f534:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800f536:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f53a:	b12b      	cbz	r3, 800f548 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800f53c:	6823      	ldr	r3, [r4, #0]
 800f53e:	221a      	movs	r2, #26
 800f540:	4620      	mov	r0, r4
 800f542:	615a      	str	r2, [r3, #20]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f548:	f105 060c 	add.w	r6, r5, #12
 800f54c:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800f550:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800f554:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800f558:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800f638 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f55c:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800f560:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f63c <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f564:	3574      	adds	r5, #116	; 0x74
 800f566:	eb05 0308 	add.w	r3, r5, r8
 800f56a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f56c:	429a      	cmp	r2, r3
 800f56e:	dc01      	bgt.n	800f574 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800f570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f576:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f578:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f57c:	4343      	muls	r3, r0
 800f57e:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f582:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800f586:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f58a:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800f58e:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800f592:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800f594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f596:	b932      	cbnz	r2, 800f5a6 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800f598:	4b24      	ldr	r3, [pc, #144]	; (800f62c <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800f59a:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800f59c:	3758      	adds	r7, #88	; 0x58
 800f59e:	3604      	adds	r6, #4
 800f5a0:	f108 0801 	add.w	r8, r8, #1
 800f5a4:	e7df      	b.n	800f566 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f5a6:	fb0c f20e 	mul.w	r2, ip, lr
 800f5aa:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800f5ae:	4559      	cmp	r1, fp
 800f5b0:	d103      	bne.n	800f5ba <jinit_upsampler+0xa6>
 800f5b2:	4283      	cmp	r3, r0
 800f5b4:	d101      	bne.n	800f5ba <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800f5b6:	4b1e      	ldr	r3, [pc, #120]	; (800f630 <jinit_upsampler+0x11c>)
 800f5b8:	e7ef      	b.n	800f59a <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800f5ba:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 800f5be:	d119      	bne.n	800f5f4 <jinit_upsampler+0xe0>
 800f5c0:	4283      	cmp	r3, r0
 800f5c2:	d111      	bne.n	800f5e8 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800f5c4:	4b1b      	ldr	r3, [pc, #108]	; (800f634 <jinit_upsampler+0x120>)
 800f5c6:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f5c8:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f5ca:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800f5ce:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f5d0:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f5d4:	f007 f8af 	bl	8016736 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f5d8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800f5dc:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800f5de:	2101      	movs	r1, #1
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	47d8      	blx	fp
 800f5e4:	6030      	str	r0, [r6, #0]
 800f5e6:	e7d9      	b.n	800f59c <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800f5e8:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800f5ec:	d102      	bne.n	800f5f4 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800f5ee:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800f5f2:	e7e9      	b.n	800f5c8 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800f5f4:	fb9b f2f1 	sdiv	r2, fp, r1
 800f5f8:	fb01 b112 	mls	r1, r1, r2, fp
 800f5fc:	b959      	cbnz	r1, 800f616 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800f5fe:	fb90 f1f3 	sdiv	r1, r0, r3
 800f602:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800f606:	b933      	cbnz	r3, 800f616 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800f608:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800f60c:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800f610:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 800f614:	e7d8      	b.n	800f5c8 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800f616:	6823      	ldr	r3, [r4, #0]
 800f618:	2227      	movs	r2, #39	; 0x27
 800f61a:	4620      	mov	r0, r4
 800f61c:	615a      	str	r2, [r3, #20]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4798      	blx	r3
    if (need_buffer) {
 800f622:	e7d1      	b.n	800f5c8 <jinit_upsampler+0xb4>
 800f624:	0800f341 	.word	0x0800f341
 800f628:	0800f351 	.word	0x0800f351
 800f62c:	0800f415 	.word	0x0800f415
 800f630:	0800f411 	.word	0x0800f411
 800f634:	0800f41b 	.word	0x0800f41b
 800f638:	0800f44d 	.word	0x0800f44d
 800f63c:	0800f4c1 	.word	0x0800f4c1

0800f640 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800f640:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800f642:	6803      	ldr	r3, [r0, #0]
{
 800f644:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	4669      	mov	r1, sp
 800f64a:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800f64c:	b033      	add	sp, #204	; 0xcc
 800f64e:	f85d fb04 	ldr.w	pc, [sp], #4

0800f652 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800f652:	2900      	cmp	r1, #0
{
 800f654:	4603      	mov	r3, r0
 800f656:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800f658:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800f65a:	da0b      	bge.n	800f674 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800f65c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800f65e:	b112      	cbz	r2, 800f666 <emit_message+0x14>
 800f660:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800f662:	2a02      	cmp	r2, #2
 800f664:	dd02      	ble.n	800f66c <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800f666:	68a2      	ldr	r2, [r4, #8]
 800f668:	4618      	mov	r0, r3
 800f66a:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800f66c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f66e:	3301      	adds	r3, #1
 800f670:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800f672:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800f674:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f676:	428b      	cmp	r3, r1
 800f678:	dbfb      	blt.n	800f672 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800f67a:	68a3      	ldr	r3, [r4, #8]
}
 800f67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800f680:	4718      	bx	r3

0800f682 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800f682:	6803      	ldr	r3, [r0, #0]
 800f684:	2200      	movs	r2, #0
 800f686:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800f688:	615a      	str	r2, [r3, #20]
}
 800f68a:	4770      	bx	lr

0800f68c <format_message>:
{
 800f68c:	4603      	mov	r3, r0
 800f68e:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800f690:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800f692:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f694:	2b00      	cmp	r3, #0
{
 800f696:	b530      	push	{r4, r5, lr}
 800f698:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800f69a:	dd1f      	ble.n	800f6dc <format_message+0x50>
 800f69c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800f69e:	4299      	cmp	r1, r3
 800f6a0:	db1c      	blt.n	800f6dc <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800f6a2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f6a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800f6a8:	b911      	cbnz	r1, 800f6b0 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800f6aa:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800f6ac:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800f6ae:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800f6b0:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800f6b2:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f6b6:	b9fc      	cbnz	r4, 800f6f8 <format_message+0x6c>
    sprintf(buffer, msgtext,
 800f6b8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f6ba:	9305      	str	r3, [sp, #20]
 800f6bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f6be:	9304      	str	r3, [sp, #16]
 800f6c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f6c2:	9303      	str	r3, [sp, #12]
 800f6c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800f6c6:	9302      	str	r3, [sp, #8]
 800f6c8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800f6ca:	9301      	str	r3, [sp, #4]
 800f6cc:	6a13      	ldr	r3, [r2, #32]
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800f6d4:	f019 fbc4 	bl	8028e60 <siprintf>
}
 800f6d8:	b007      	add	sp, #28
 800f6da:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800f6dc:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800f6de:	2c00      	cmp	r4, #0
 800f6e0:	d0e3      	beq.n	800f6aa <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800f6e2:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800f6e4:	4299      	cmp	r1, r3
 800f6e6:	dce0      	bgt.n	800f6aa <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800f6e8:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800f6ec:	429d      	cmp	r5, r3
 800f6ee:	dbdc      	blt.n	800f6aa <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800f6f0:	1a59      	subs	r1, r3, r1
 800f6f2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800f6f6:	e7d7      	b.n	800f6a8 <format_message+0x1c>
    if (ch == '%') {
 800f6f8:	2c25      	cmp	r4, #37	; 0x25
 800f6fa:	d1da      	bne.n	800f6b2 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	2b73      	cmp	r3, #115	; 0x73
 800f700:	d1da      	bne.n	800f6b8 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f702:	3218      	adds	r2, #24
}
 800f704:	b007      	add	sp, #28
 800f706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800f70a:	f019 bba9 	b.w	8028e60 <siprintf>

0800f70e <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800f70e:	6803      	ldr	r3, [r0, #0]
{
 800f710:	b510      	push	{r4, lr}
 800f712:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800f714:	689b      	ldr	r3, [r3, #8]
 800f716:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800f718:	4620      	mov	r0, r4
}
 800f71a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800f71e:	f7f9 bf03 	b.w	8009528 <jpeg_destroy>
	...

0800f724 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800f724:	4a0a      	ldr	r2, [pc, #40]	; (800f750 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800f726:	490b      	ldr	r1, [pc, #44]	; (800f754 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800f728:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800f72a:	4a0b      	ldr	r2, [pc, #44]	; (800f758 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800f72c:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800f72e:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800f730:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800f732:	4a0a      	ldr	r2, [pc, #40]	; (800f75c <jpeg_std_error+0x38>)
 800f734:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800f736:	4a0a      	ldr	r2, [pc, #40]	; (800f760 <jpeg_std_error+0x3c>)
 800f738:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800f73a:	4a0a      	ldr	r2, [pc, #40]	; (800f764 <jpeg_std_error+0x40>)
 800f73c:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800f73e:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800f740:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800f744:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800f746:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800f74a:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800f74e:	4770      	bx	lr
 800f750:	0800f70f 	.word	0x0800f70f
 800f754:	0802d514 	.word	0x0802d514
 800f758:	0800f653 	.word	0x0800f653
 800f75c:	0800f641 	.word	0x0800f641
 800f760:	0800f68d 	.word	0x0800f68d
 800f764:	0800f683 	.word	0x0800f683

0800f768 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800f76c:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800f770:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800f772:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f776:	3a02      	subs	r2, #2
 800f778:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800f77c:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f77e:	ed9f 5abd 	vldr	s10, [pc, #756]	; 800fa74 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f782:	ed9f 4abd 	vldr	s8, [pc, #756]	; 800fa78 <jpeg_idct_float+0x310>
 800f786:	eddf 4abd 	vldr	s9, [pc, #756]	; 800fa7c <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f78a:	eddf 3abd 	vldr	s7, [pc, #756]	; 800fa80 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f78e:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 800f792:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f794:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800f798:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800f79c:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f7a0:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800f7a4:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800f7a8:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f7ac:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800f7b0:	ecbc 7a01 	vldmia	ip!, {s14}
 800f7b4:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f7b8:	ea4e 0b09 	orr.w	fp, lr, r9
 800f7bc:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f7c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f7c4:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f7c8:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f7cc:	ea41 0b0b 	orr.w	fp, r1, fp
 800f7d0:	ea45 0b0b 	orr.w	fp, r5, fp
 800f7d4:	ea50 0b0b 	orrs.w	fp, r0, fp
 800f7d8:	f040 80c0 	bne.w	800f95c <jpeg_idct_float+0x1f4>
      wsptr[DCTSIZE*0] = dcval;
 800f7dc:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800f7e0:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800f7e4:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800f7e8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800f7ec:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800f7f0:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800f7f4:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800f7f8:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f7fc:	45e2      	cmp	sl, ip
 800f7fe:	d1c6      	bne.n	800f78e <jpeg_idct_float+0x26>
 800f800:	1f1c      	subs	r4, r3, #4
 800f802:	f103 001c 	add.w	r0, r3, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800f806:	466a      	mov	r2, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f808:	eddf 2a9e 	vldr	s5, [pc, #632]	; 800fa84 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f80c:	eddf 4a99 	vldr	s9, [pc, #612]	; 800fa74 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f810:	ed9f 3a99 	vldr	s6, [pc, #612]	; 800fa78 <jpeg_idct_float+0x310>
 800f814:	ed9f 4a99 	vldr	s8, [pc, #612]	; 800fa7c <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f818:	eddf 3a99 	vldr	s7, [pc, #612]	; 800fa80 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f81c:	edd2 5a00 	vldr	s11, [r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800f820:	3220      	adds	r2, #32
    tmp10 = z5 + wsptr[4];
 800f822:	ed52 7a04 	vldr	s15, [r2, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f826:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 800f82a:	ed52 6a02 	vldr	s13, [r2, #-8]
    z11 = wsptr[1] + wsptr[7];
 800f82e:	ed12 1a01 	vldr	s2, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 800f832:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 800f836:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr = output_buf[ctr] + output_col;
 800f83a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800f83c:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 800f840:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800f844:	18e9      	adds	r1, r5, r3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f846:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 800f848:	ee37 7aa6 	vadd.f32	s14, s15, s13
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f84c:	42a0      	cmp	r0, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f84e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f852:	eeb0 2a47 	vmov.f32	s4, s14
    tmp0 = tmp10 + tmp13;
 800f856:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 800f85a:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 800f85e:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f862:	ee97 2aa4 	vfnms.f32	s4, s15, s9
    z13 = wsptr[5] + wsptr[3];
 800f866:	ed52 7a03 	vldr	s15, [r2, #-12]
 800f86a:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 800f86e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 800f872:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 800f876:	ee75 6a82 	vadd.f32	s13, s11, s4
    tmp2 = tmp11 - tmp12;
 800f87a:	ee75 5ac2 	vsub.f32	s11, s11, s4
    z11 = wsptr[1] + wsptr[7];
 800f87e:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 800f882:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 800f886:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800f88a:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800f88e:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f892:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f896:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f89a:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f89e:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 800f8a2:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 800f8a6:	eef0 1a67 	vmov.f32	s3, s15
 800f8aa:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f8ae:	ee36 2a01 	vadd.f32	s4, s12, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f8b2:	ee36 6a41 	vsub.f32	s12, s12, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f8b6:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f8ba:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tmp4 = tmp10 - tmp5;
 800f8be:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f8c2:	ee12 3a10 	vmov	r3, s4
 800f8c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f8ca:	5cf3      	ldrb	r3, [r6, r3]
 800f8cc:	55eb      	strb	r3, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f8ce:	ee16 3a10 	vmov	r3, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f8d2:	ee36 6aa7 	vadd.f32	s12, s13, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f8d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f8da:	ee76 6ae7 	vsub.f32	s13, s13, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f8de:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f8e2:	5cf3      	ldrb	r3, [r6, r3]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f8e4:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f8e8:	71cb      	strb	r3, [r1, #7]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f8ea:	ee75 6aa1 	vadd.f32	s13, s11, s3
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f8ee:	ee16 3a10 	vmov	r3, s12
 800f8f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f8f6:	5cf3      	ldrb	r3, [r6, r3]
 800f8f8:	704b      	strb	r3, [r1, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f8fa:	ee17 3a90 	vmov	r3, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f8fe:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f906:	5cf3      	ldrb	r3, [r6, r3]
 800f908:	718b      	strb	r3, [r1, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f90a:	ee17 3a90 	vmov	r3, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f90e:	ee75 7ae1 	vsub.f32	s15, s11, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f912:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f91a:	5cf3      	ldrb	r3, [r6, r3]
 800f91c:	708b      	strb	r3, [r1, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f91e:	ee17 3a90 	vmov	r3, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f922:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f926:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f92a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f92e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f932:	5cf3      	ldrb	r3, [r6, r3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f934:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f938:	714b      	strb	r3, [r1, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f93a:	ee17 3a90 	vmov	r3, s15
 800f93e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f942:	5cf3      	ldrb	r3, [r6, r3]
 800f944:	70cb      	strb	r3, [r1, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f946:	ee17 3a10 	vmov	r3, s14
 800f94a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f94e:	5cf3      	ldrb	r3, [r6, r3]
 800f950:	710b      	strb	r3, [r1, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f952:	f47f af63 	bne.w	800f81c <jpeg_idct_float+0xb4>
  }
}
 800f956:	b041      	add	sp, #260	; 0x104
 800f958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f95c:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f960:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f964:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f968:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f96c:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f970:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f974:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f978:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f97c:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f980:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f984:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f988:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f98c:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f990:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 800f994:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f998:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f99c:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f9a0:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f9a4:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f9a8:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800f9ac:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 800f9b0:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800f9b4:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f9b8:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 800f9bc:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 800f9c0:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f9c4:	ee07 ea90 	vmov	s15, lr
 800f9c8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f9cc:	ee07 8a90 	vmov	s15, r8
 800f9d0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f9d4:	ee07 1a90 	vmov	s15, r1
 800f9d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9dc:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f9e0:	ee07 0a10 	vmov	s14, r0
 800f9e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f9e8:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 800f9ec:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 800f9f0:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 800f9f4:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 800f9f8:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 800f9fc:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 800fa00:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800fa04:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fa08:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 800fa0c:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fa10:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fa14:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800fa18:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fa1c:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fa20:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 800fa24:	eeb0 6a67 	vmov.f32	s12, s15
 800fa28:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800fa2c:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800fa30:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800fa34:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800fa38:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800fa3c:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800fa40:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800fa44:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 800fa48:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800fa4c:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800fa50:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800fa54:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800fa58:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800fa5c:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800fa60:	ee33 7a47 	vsub.f32	s14, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800fa64:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800fa68:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800fa6c:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 800fa70:	e6c4      	b.n	800f7fc <jpeg_idct_float+0x94>
 800fa72:	bf00      	nop
 800fa74:	3fb504f3 	.word	0x3fb504f3
 800fa78:	3f8a8bd4 	.word	0x3f8a8bd4
 800fa7c:	3fec835e 	.word	0x3fec835e
 800fa80:	40273d75 	.word	0x40273d75
 800fa84:	43008000 	.word	0x43008000

0800fa88 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa8c:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800fa8e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fa90:	3a02      	subs	r2, #2
{
 800fa92:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fa94:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800fa98:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fa9c:	f105 0320 	add.w	r3, r5, #32
 800faa0:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800faa2:	ab04      	add	r3, sp, #16
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800faa4:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800faa8:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800faaa:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
 800faae:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fab2:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 800fab6:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800faba:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800fabe:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800fac2:	f855 0b04 	ldr.w	r0, [r5], #4
 800fac6:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800faca:	9101      	str	r1, [sp, #4]
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800facc:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800face:	ea46 000c 	orr.w	r0, r6, ip
 800fad2:	4338      	orrs	r0, r7
 800fad4:	ea4a 0000 	orr.w	r0, sl, r0
 800fad8:	4308      	orrs	r0, r1
 800fada:	ea4e 0000 	orr.w	r0, lr, r0
 800fade:	ea58 0100 	orrs.w	r1, r8, r0
 800fae2:	d146      	bne.n	800fb72 <jpeg_idct_ifast+0xea>
      wsptr[DCTSIZE*0] = dcval;
 800fae4:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800fae8:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 800faea:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800faec:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800faee:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800faf0:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800faf4:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800faf8:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fafc:	9903      	ldr	r1, [sp, #12]
 800fafe:	42a9      	cmp	r1, r5
 800fb00:	d1d0      	bne.n	800faa4 <jpeg_idct_ifast+0x1c>
 800fb02:	9b02      	ldr	r3, [sp, #8]
 800fb04:	f1a3 0b04 	sub.w	fp, r3, #4
 800fb08:	331c      	adds	r3, #28
 800fb0a:	9302      	str	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800fb0c:	ab04      	add	r3, sp, #16
 800fb0e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fb10:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800fb12:	f85b af04 	ldr.w	sl, [fp, #4]!
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fb16:	9a00      	ldr	r2, [sp, #0]
    outptr = output_buf[ctr] + output_col;
 800fb18:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fb1c:	9b00      	ldr	r3, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fb1e:	9d00      	ldr	r5, [sp, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fb20:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 800fb24:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fb26:	ea4e 0701 	orr.w	r7, lr, r1
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fb2a:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fb2e:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 800fb32:	431f      	orrs	r7, r3
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fb34:	9500      	str	r5, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fb36:	ea47 0708 	orr.w	r7, r7, r8
 800fb3a:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 800fb3e:	4327      	orrs	r7, r4
 800fb40:	ea47 070c 	orr.w	r7, r7, ip
 800fb44:	ea57 0502 	orrs.w	r5, r7, r2
 800fb48:	d17e      	bne.n	800fc48 <jpeg_idct_ifast+0x1c0>
				  & RANGE_MASK];
 800fb4a:	f3c6 1849 	ubfx	r8, r6, #5, #10
      
      outptr[0] = dcval;
 800fb4e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fb50:	f819 3008 	ldrb.w	r3, [r9, r8]
      outptr[0] = dcval;
 800fb54:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 800fb58:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 800fb5a:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 800fb5c:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 800fb5e:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 800fb60:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 800fb62:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 800fb64:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fb66:	9b02      	ldr	r3, [sp, #8]
 800fb68:	455b      	cmp	r3, fp
 800fb6a:	d1d1      	bne.n	800fb10 <jpeg_idct_ifast+0x88>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800fb6c:	b045      	add	sp, #276	; 0x114
 800fb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fb72:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800fb74:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fb78:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fb7c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800fb7e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fb82:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800fb86:	fb00 f00e 	mul.w	r0, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800fb8a:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 800fb8e:	eba4 040a 	sub.w	r4, r4, sl
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800fb92:	eb0c 0a00 	add.w	sl, ip, r0
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800fb96:	ebac 0000 	sub.w	r0, ip, r0
 800fb9a:	4348      	muls	r0, r1
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800fb9c:	eb0b 0e0a 	add.w	lr, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800fba0:	ebca 2020 	rsb	r0, sl, r0, asr #8
    tmp3 = tmp10 - tmp13;
 800fba4:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = tmp11 + tmp12;
 800fba8:	eb04 0c00 	add.w	ip, r4, r0
    tmp2 = tmp11 - tmp12;
 800fbac:	1a21      	subs	r1, r4, r0
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fbae:	69e8      	ldr	r0, [r5, #28]
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fbb0:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp2 = tmp11 - tmp12;
 800fbb4:	9100      	str	r1, [sp, #0]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fbb6:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fbb8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fbba:	9901      	ldr	r1, [sp, #4]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fbbc:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fbbe:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800fbc2:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fbc4:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800fbc8:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 800fbcc:	eb07 0b01 	add.w	fp, r7, r1
    z10 = tmp6 - tmp5;
 800fbd0:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 800fbd2:	eb06 0800 	add.w	r8, r6, r0
    z12 = tmp4 - tmp7;
 800fbd6:	1a36      	subs	r6, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fbd8:	1988      	adds	r0, r1, r6
    tmp7 = z11 + z13;		/* phase 5 */
 800fbda:	eb0b 0708 	add.w	r7, fp, r8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fbde:	eba8 0b0b 	sub.w	fp, r8, fp
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fbe2:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fbe4:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 800fbe8:	4361      	muls	r1, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fbea:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 800fbee:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fbf2:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fbf6:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fbf8:	4366      	muls	r6, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fbfa:	eb01 2120 	add.w	r1, r1, r0, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fbfe:	1236      	asrs	r6, r6, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fc00:	1bc9      	subs	r1, r1, r7
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fc02:	eba6 2020 	sub.w	r0, r6, r0, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800fc06:	eb0e 0607 	add.w	r6, lr, r7
    tmp5 = tmp11 - tmp6;
 800fc0a:	ebc1 2b2b 	rsb	fp, r1, fp, asr #8
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800fc0e:	ebae 0707 	sub.w	r7, lr, r7
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800fc12:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800fc16:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800fc1a:	ebac 0101 	sub.w	r1, ip, r1
    tmp4 = tmp10 + tmp5;
 800fc1e:	4458      	add	r0, fp
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800fc20:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800fc24:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800fc28:	9900      	ldr	r1, [sp, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800fc2a:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800fc2c:	4459      	add	r1, fp
 800fc2e:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800fc30:	9900      	ldr	r1, [sp, #0]
 800fc32:	eba1 040b 	sub.w	r4, r1, fp
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800fc36:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800fc3a:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800fc3e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800fc42:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800fc44:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 800fc46:	e759      	b.n	800fafc <jpeg_idct_ifast+0x74>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 800fc48:	eb08 0706 	add.w	r7, r8, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fc4c:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 800fc50:	eba6 0808 	sub.w	r8, r6, r8
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 800fc54:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fc58:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 800fc5c:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fc60:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800fc62:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 800fc64:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 800fc66:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fc6a:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 800fc6e:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 800fc72:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800fc74:	9501      	str	r5, [sp, #4]
    tmp1 = tmp11 + tmp12;
 800fc76:	eb08 0701 	add.w	r7, r8, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fc7a:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 800fc7e:	eba8 0101 	sub.w	r1, r8, r1
    tmp7 = z11 + z13;		/* phase 5 */
 800fc82:	eb05 0804 	add.w	r8, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fc86:	f240 15d9 	movw	r5, #473	; 0x1d9
 800fc8a:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fc8e:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 800fc92:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fc94:	9d01      	ldr	r5, [sp, #4]
 800fc96:	1b64      	subs	r4, r4, r5
 800fc98:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fc9c:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fc9e:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fca0:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fca4:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fca8:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fcaa:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fcac:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fcb0:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 800fcb2:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fcb6:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fcba:	eb0c 0208 	add.w	r2, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800fcbe:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 800fcc2:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 800fcc6:	44a6      	add	lr, r4
			    & RANGE_MASK];
 800fcc8:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fccc:	f819 2002 	ldrb.w	r2, [r9, r2]
 800fcd0:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800fcd4:	f819 200c 	ldrb.w	r2, [r9, ip]
 800fcd8:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800fcda:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800fcdc:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 800fcde:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 800fce2:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800fce6:	f819 2002 	ldrb.w	r2, [r9, r2]
 800fcea:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800fcec:	f819 3007 	ldrb.w	r3, [r9, r7]
 800fcf0:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800fcf2:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800fcf4:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 800fcf6:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800fcfa:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800fcfe:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fd02:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800fd04:	f819 3001 	ldrb.w	r3, [r9, r1]
 800fd08:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800fd0a:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800fd0e:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 800fd12:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 800fd16:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800fd1a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fd1e:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800fd20:	f819 300e 	ldrb.w	r3, [r9, lr]
 800fd24:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800fd26:	e71e      	b.n	800fb66 <jpeg_idct_ifast+0xde>

0800fd28 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2c:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800fd2e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fd30:	3a02      	subs	r2, #2
{
 800fd32:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 800fd34:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fd36:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800fd3a:	3380      	adds	r3, #128	; 0x80
 800fd3c:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fd3e:	f105 0320 	add.w	r3, r5, #32
 800fd42:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fd44:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 800fd48:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fd4a:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fd4e:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 800fd52:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fd56:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 800fd5a:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 800fd5e:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800fd62:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd66:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 800fd6a:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fd6c:	ea4a 030b 	orr.w	r3, sl, fp
 800fd70:	ea4e 0303 	orr.w	r3, lr, r3
 800fd74:	433b      	orrs	r3, r7
 800fd76:	ea48 0303 	orr.w	r3, r8, r3
 800fd7a:	4333      	orrs	r3, r6
 800fd7c:	ea59 0303 	orrs.w	r3, r9, r3
 800fd80:	d145      	bne.n	800fe0e <jpeg_idct_islow+0xe6>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800fd82:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 800fd84:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800fd88:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 800fd8a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800fd8c:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800fd8e:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800fd90:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800fd94:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800fd98:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fd9c:	9b05      	ldr	r3, [sp, #20]
 800fd9e:	42ab      	cmp	r3, r5
 800fda0:	d1d0      	bne.n	800fd44 <jpeg_idct_islow+0x1c>
 800fda2:	9b04      	ldr	r3, [sp, #16]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800fda4:	ad06      	add	r5, sp, #24
 800fda6:	f1a3 0904 	sub.w	r9, r3, #4
 800fdaa:	331c      	adds	r3, #28
 800fdac:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800fdae:	f859 3f04 	ldr.w	r3, [r9, #4]!
 800fdb2:	9a50      	ldr	r2, [sp, #320]	; 0x140
 800fdb4:	9302      	str	r3, [sp, #8]
 800fdb6:	4413      	add	r3, r2
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fdb8:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fdbc:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 800fdc0:	e9d5 e703 	ldrd	lr, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fdc4:	ea4a 0200 	orr.w	r2, sl, r0
 800fdc8:	ea42 020e 	orr.w	r2, r2, lr
 800fdcc:	e9d5 8105 	ldrd	r8, r1, [r5, #20]
 800fdd0:	433a      	orrs	r2, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800fdd2:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fdd6:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800fdda:	3610      	adds	r6, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fddc:	430a      	orrs	r2, r1
 800fdde:	ea52 020c 	orrs.w	r2, r2, ip
 800fde2:	f040 8098 	bne.w	800ff16 <jpeg_idct_islow+0x1ee>
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800fde6:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 800fde8:	f3c6 1249 	ubfx	r2, r6, #5, #10

      outptr[0] = dcval;
 800fdec:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 800fdee:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 800fdf0:	9902      	ldr	r1, [sp, #8]
 800fdf2:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 800fdf4:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 800fdf6:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 800fdf8:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 800fdfa:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 800fdfc:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 800fdfe:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 800fe00:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fe02:	9b05      	ldr	r3, [sp, #20]
 800fe04:	454b      	cmp	r3, r9
 800fe06:	d1d2      	bne.n	800fdae <jpeg_idct_islow+0x86>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800fe08:	b047      	add	sp, #284	; 0x11c
 800fe0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fe0e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800fe10:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fe14:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800fe18:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800fe1a:	f241 1651 	movw	r6, #4433	; 0x1151
 800fe1e:	eb0b 0300 	add.w	r3, fp, r0
 800fe22:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800fe24:	f641 067e 	movw	r6, #6270	; 0x187e
 800fe28:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800fe2c:	4e7a      	ldr	r6, [pc, #488]	; (8010018 <jpeg_idct_islow+0x2f0>)
 800fe2e:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 800fe32:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe34:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 800fe36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fe3a:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 800fe3c:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 800fe40:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 800fe44:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 800fe48:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fe4c:	69ec      	ldr	r4, [r5, #28]
    tmp11 = tmp1 + tmp3;
 800fe4e:	18f7      	adds	r7, r6, r3
    tmp13 = tmp0 - tmp2;
 800fe50:	9002      	str	r0, [sp, #8]
    tmp12 = tmp1 - tmp3;
 800fe52:	1b9b      	subs	r3, r3, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fe54:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fe58:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 800fe5c:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800fe5e:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fe62:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fe66:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 800fe6a:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fe6e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800fe70:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 800fe74:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 800fe78:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800fe7c:	1930      	adds	r0, r6, r4
 800fe7e:	4358      	muls	r0, r3
    z2 += z1;
 800fe80:	4b66      	ldr	r3, [pc, #408]	; (801001c <jpeg_idct_islow+0x2f4>)
 800fe82:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 800fe86:	4b66      	ldr	r3, [pc, #408]	; (8010020 <jpeg_idct_islow+0x2f8>)
 800fe88:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800fe8c:	eb09 040a 	add.w	r4, r9, sl
 800fe90:	4b64      	ldr	r3, [pc, #400]	; (8010024 <jpeg_idct_islow+0x2fc>)
 800fe92:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 800fe94:	f640 138e 	movw	r3, #2446	; 0x98e
 800fe98:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 800fe9c:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 800fe9e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 800fea2:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800fea6:	4b60      	ldr	r3, [pc, #384]	; (8010028 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 800fea8:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800feac:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 800feb0:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800feb4:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800feb8:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 800feba:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 800febc:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 800febe:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 800fec2:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 800fec6:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800feca:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800fece:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800fed2:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800fed4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 800fed6:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 800feda:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800fede:	eb07 040a 	add.w	r4, r7, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800fee2:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800fee6:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800fee8:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 800feec:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800feee:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800fef0:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800fef2:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800fef4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 800fef6:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800fefa:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800fefc:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 800fefe:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800ff00:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 800ff02:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 800ff06:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 800ff08:	9b02      	ldr	r3, [sp, #8]
 800ff0a:	eba3 0909 	sub.w	r9, r3, r9
 800ff0e:	ea4f 23e9 	mov.w	r3, r9, asr #11
 800ff12:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 800ff14:	e742      	b.n	800fd9c <jpeg_idct_islow+0x74>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800ff16:	1842      	adds	r2, r0, r1
 800ff18:	f241 1451 	movw	r4, #4433	; 0x1151
 800ff1c:	4362      	muls	r2, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800ff1e:	f641 047e 	movw	r4, #6270	; 0x187e
 800ff22:	fb04 2000 	mla	r0, r4, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800ff26:	4c3c      	ldr	r4, [pc, #240]	; (8010018 <jpeg_idct_islow+0x2f0>)
 800ff28:	fb04 2101 	mla	r1, r4, r1, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 800ff2c:	19bc      	adds	r4, r7, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 800ff2e:	1bf2      	subs	r2, r6, r7
    tmp10 = tmp0 + tmp2;
 800ff30:	eb00 3744 	add.w	r7, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 800ff34:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 800ff38:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = tmp1 + tmp3;
 800ff3c:	eb01 3642 	add.w	r6, r1, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 800ff40:	9003      	str	r0, [sp, #12]
    tmp12 = tmp1 - tmp3;
 800ff42:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    z3 = tmp1 + tmp3;
 800ff46:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 800ff4a:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 800ff4c:	f242 52a1 	movw	r2, #9633	; 0x25a1
 800ff50:	1821      	adds	r1, r4, r0
 800ff52:	4351      	muls	r1, r2
    z2 += z1;
 800ff54:	4a31      	ldr	r2, [pc, #196]	; (801001c <jpeg_idct_islow+0x2f4>)
 800ff56:	fb02 1404 	mla	r4, r2, r4, r1
    z3 += z1;
 800ff5a:	4a31      	ldr	r2, [pc, #196]	; (8010020 <jpeg_idct_islow+0x2f8>)
 800ff5c:	fb02 1100 	mla	r1, r2, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 800ff60:	eb0a 000c 	add.w	r0, sl, ip
 800ff64:	4a2f      	ldr	r2, [pc, #188]	; (8010024 <jpeg_idct_islow+0x2fc>)
 800ff66:	4350      	muls	r0, r2
    tmp0 += z1 + z2;
 800ff68:	f640 128e 	movw	r2, #2446	; 0x98e
 800ff6c:	eb04 0b00 	add.w	fp, r4, r0
    tmp3 += z1 + z3;
 800ff70:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 800ff72:	fb02 bc0c 	mla	ip, r2, ip, fp
    tmp3 += z1 + z3;
 800ff76:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ff7a:	4a2b      	ldr	r2, [pc, #172]	; (8010028 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 800ff7c:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ff80:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 800ff84:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 800ff88:	fb02 fa0a 	mul.w	sl, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ff8c:	9a01      	ldr	r2, [sp, #4]
    tmp1 += z1 + z3;
 800ff8e:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 800ff90:	4454      	add	r4, sl
 800ff92:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 800ff96:	fb0b 1b08 	mla	fp, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ff9a:	eb07 0800 	add.w	r8, r7, r0
    tmp2 += z1 + z2;
 800ff9e:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ffa2:	9950      	ldr	r1, [sp, #320]	; 0x140
			    & RANGE_MASK];
 800ffa4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800ffa8:	1a3f      	subs	r7, r7, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800ffaa:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ffae:	f812 e008 	ldrb.w	lr, [r2, r8]
			    & RANGE_MASK];
 800ffb2:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ffb6:	9a02      	ldr	r2, [sp, #8]
			    & RANGE_MASK];
 800ffb8:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 800ffbc:	f802 e001 	strb.w	lr, [r2, r1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 800ffc0:	9a01      	ldr	r2, [sp, #4]
 800ffc2:	5dd0      	ldrb	r0, [r2, r7]
 800ffc4:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800ffc6:	1930      	adds	r0, r6, r4
			    & RANGE_MASK];
 800ffc8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 800ffcc:	5c10      	ldrb	r0, [r2, r0]
 800ffce:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800ffd0:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800ffd4:	9a04      	ldr	r2, [sp, #16]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 800ffd6:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800ffd8:	eb02 000b 	add.w	r0, r2, fp
 800ffdc:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 800ffde:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800ffe2:	5c10      	ldrb	r0, [r2, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800ffe4:	9a04      	ldr	r2, [sp, #16]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 800ffe6:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800ffe8:	eba2 010b 	sub.w	r1, r2, fp
 800ffec:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 800ffee:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800fff2:	5c52      	ldrb	r2, [r2, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800fff4:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 800fff6:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 800fff8:	9a03      	ldr	r2, [sp, #12]
 800fffa:	4462      	add	r2, ip
			    & RANGE_MASK];
 800fffc:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010000:	5c8a      	ldrb	r2, [r1, r2]
 8010002:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8010004:	9a03      	ldr	r2, [sp, #12]
 8010006:	eba2 0c0c 	sub.w	ip, r2, ip
			    & RANGE_MASK];
 801000a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801000e:	f811 200c 	ldrb.w	r2, [r1, ip]
 8010012:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010014:	e6f5      	b.n	800fe02 <jpeg_idct_islow+0xda>
 8010016:	bf00      	nop
 8010018:	ffffc4df 	.word	0xffffc4df
 801001c:	ffffc13b 	.word	0xffffc13b
 8010020:	fffff384 	.word	0xfffff384
 8010024:	ffffe333 	.word	0xffffe333
 8010028:	ffffadfd 	.word	0xffffadfd

0801002c <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801002c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010030:	b0b9      	sub	sp, #228	; 0xe4
 8010032:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010034:	1e96      	subs	r6, r2, #2
 8010036:	9304      	str	r3, [sp, #16]
 8010038:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801003a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801003e:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010042:	3380      	adds	r3, #128	; 0x80
 8010044:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8010046:	f102 030c 	add.w	r3, r2, #12
 801004a:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801004c:	f936 3f02 	ldrsh.w	r3, [r6, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010050:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010054:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8010058:	f10c 0c04 	add.w	ip, ip, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801005c:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010060:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010062:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010066:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 801006a:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 801006c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010070:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010072:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8010074:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010076:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801007a:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801007e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8010082:	4353      	muls	r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010084:	ebae 0203 	sub.w	r2, lr, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
 8010088:	eb04 0803 	add.w	r8, r4, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801008c:	fb01 f902 	mul.w	r9, r1, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010090:	eba4 010e 	sub.w	r1, r4, lr
 8010094:	f640 2212 	movw	r2, #2578	; 0xa12
 8010098:	fb02 f701 	mul.w	r7, r2, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801009c:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801009e:	f642 01c6 	movw	r1, #10438	; 0x28c6
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80100a2:	eb09 0007 	add.w	r0, r9, r7
 80100a6:	4410      	add	r0, r2
 80100a8:	4a87      	ldr	r2, [pc, #540]	; (80102c8 <jpeg_idct_7x7+0x29c>)
 80100aa:	fb02 000e 	mla	r0, r2, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80100ae:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
 80100b0:	ebae 0e08 	sub.w	lr, lr, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80100b4:	fb01 2108 	mla	r1, r1, r8, r2
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80100b8:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80100bc:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80100c0:	fb02 1203 	mla	r2, r2, r3, r1
 80100c4:	eb02 0309 	add.w	r3, r2, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80100c8:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80100cc:	f641 52ef 	movw	r2, #7663	; 0x1def
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80100d0:	9303      	str	r3, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80100d2:	4b7e      	ldr	r3, [pc, #504]	; (80102cc <jpeg_idct_7x7+0x2a0>)
 80100d4:	fb03 1104 	mla	r1, r3, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80100d8:	f9b6 4010 	ldrsh.w	r4, [r6, #16]
 80100dc:	6a2b      	ldr	r3, [r5, #32]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80100de:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80100e0:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80100e4:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80100e6:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 80100e8:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80100ea:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 80100ee:	fb07 f709 	mul.w	r7, r7, r9
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 80100f2:	eb03 0904 	add.w	r9, r3, r4
 80100f6:	fb02 fb09 	mul.w	fp, r2, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 80100fa:	eba3 0904 	sub.w	r9, r3, r4
 80100fe:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010102:	443b      	add	r3, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010104:	443c      	add	r4, r7
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010106:	fb02 f909 	mul.w	r9, r2, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801010a:	4a71      	ldr	r2, [pc, #452]	; (80102d0 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 801010c:	ebab 0a09 	sub.w	sl, fp, r9
    tmp1 += tmp2;
 8010110:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010112:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010116:	4354      	muls	r4, r2
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010118:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801011c:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8010120:	44a1      	add	r9, r4
    tmp0 += z2;
 8010122:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010124:	fb0b 3707 	mla	r7, fp, r7, r3

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010128:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801012a:	443c      	add	r4, r7
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801012c:	4453      	add	r3, sl
 801012e:	12db      	asrs	r3, r3, #11
 8010130:	f84c 3c04 	str.w	r3, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010134:	9b03      	ldr	r3, [sp, #12]
 8010136:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801013a:	eb00 0309 	add.w	r3, r0, r9
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801013e:	eba0 0009 	sub.w	r0, r0, r9
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010142:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010144:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010148:	f8cc 3018 	str.w	r3, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801014c:	190b      	adds	r3, r1, r4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801014e:	1b0c      	subs	r4, r1, r4
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010150:	12c0      	asrs	r0, r0, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010152:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010154:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010158:	12e4      	asrs	r4, r4, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801015a:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801015e:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010162:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010164:	f8cc 406c 	str.w	r4, [ip, #108]	; 0x6c
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010168:	fb08 3e0e 	mla	lr, r8, lr, r3
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 801016c:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8010170:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8010174:	9b05      	ldr	r3, [sp, #20]
 8010176:	42b3      	cmp	r3, r6
 8010178:	f47f af68 	bne.w	801004c <jpeg_idct_7x7+0x20>
 801017c:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 801017e:	ac07      	add	r4, sp, #28
 8010180:	f1a3 0904 	sub.w	r9, r3, #4
 8010184:	3318      	adds	r3, #24
 8010186:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010188:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 801018c:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 801018e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 8010190:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8010194:	189e      	adds	r6, r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010196:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 801019a:	9304      	str	r3, [sp, #16]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 801019c:	1b51      	subs	r1, r2, r5
 801019e:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 80101a2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 80101a6:	fb02 fe01 	mul.w	lr, r2, r1
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80101aa:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80101ae:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp0 = z1 + z3;
 80101b2:	eb03 0805 	add.w	r8, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80101b6:	eba3 0c02 	sub.w	ip, r3, r2
 80101ba:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80101be:	3710      	adds	r7, #16
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80101c0:	4941      	ldr	r1, [pc, #260]	; (80102c8 <jpeg_idct_7x7+0x29c>)
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80101c2:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80101c6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 80101ca:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 80101ce:	eb0e 000c 	add.w	r0, lr, ip
 80101d2:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 80101d6:	fb01 0002 	mla	r0, r1, r2, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80101da:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80101de:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80101e2:	fb02 f208 	mul.w	r2, r2, r8
 80101e6:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80101ea:	fb01 2105 	mla	r1, r1, r5, r2
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80101ee:	4d37      	ldr	r5, [pc, #220]	; (80102cc <jpeg_idct_7x7+0x2a0>)
 80101f0:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 80101f4:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 80101f8:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 80101fa:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 80101fe:	4463      	add	r3, ip
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010200:	eb02 050a 	add.w	r5, r2, sl
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010204:	9102      	str	r1, [sp, #8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010206:	9303      	str	r3, [sp, #12]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010208:	f641 53ef 	movw	r3, #7663	; 0x1def
 801020c:	fb03 fb05 	mul.w	fp, r3, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010210:	eba2 050a 	sub.w	r5, r2, sl
 8010214:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010218:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801021a:	44f2      	add	sl, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801021c:	435d      	muls	r5, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801021e:	4b2c      	ldr	r3, [pc, #176]	; (80102d0 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 8010220:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 8010224:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010226:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801022a:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801022e:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010230:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010234:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8010238:	4455      	add	r5, sl
    tmp0 += z2;
 801023a:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801023c:	fb0b 220e 	mla	r2, fp, lr, r2
 8010240:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010242:	eb01 020c 	add.w	r2, r1, ip
 8010246:	9942      	ldr	r1, [sp, #264]	; 0x108
			    & RANGE_MASK];
 8010248:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801024c:	5c9a      	ldrb	r2, [r3, r2]
 801024e:	9b04      	ldr	r3, [sp, #16]
 8010250:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010252:	9b02      	ldr	r3, [sp, #8]
 8010254:	eba3 0c0c 	sub.w	ip, r3, ip
 8010258:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801025a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801025e:	f813 200c 	ldrb.w	r2, [r3, ip]
 8010262:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010264:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010266:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8010268:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801026c:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010270:	5c9a      	ldrb	r2, [r3, r2]
 8010272:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010274:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010276:	9b03      	ldr	r3, [sp, #12]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010278:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801027a:	eb03 020a 	add.w	r2, r3, sl
 801027e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010280:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010284:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010286:	9b03      	ldr	r3, [sp, #12]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010288:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801028a:	eba3 0a0a 	sub.w	sl, r3, sl
 801028e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010290:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010294:	f813 300a 	ldrb.w	r3, [r3, sl]
 8010298:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 801029a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 801029e:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80102a2:	f642 5341 	movw	r3, #11585	; 0x2d41
 80102a6:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 80102aa:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80102ac:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 80102b0:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 80102b4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80102b8:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 80102ba:	9b05      	ldr	r3, [sp, #20]
 80102bc:	454b      	cmp	r3, r9
 80102be:	f47f af63 	bne.w	8010188 <jpeg_idct_7x7+0x15c>
  }
}
 80102c2:	b039      	add	sp, #228	; 0xe4
 80102c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c8:	ffffc515 	.word	0xffffc515
 80102cc:	ffffb0f1 	.word	0xffffb0f1
 80102d0:	ffffd3e1 	.word	0xffffd3e1

080102d4 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80102d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80102d8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80102dc:	b0a7      	sub	sp, #156	; 0x9c
 80102de:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80102e0:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80102e2:	3080      	adds	r0, #128	; 0x80
 80102e4:	320a      	adds	r2, #10
 80102e6:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80102e8:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80102ea:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80102ec:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80102ee:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80102f2:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80102f6:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80102fa:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80102fc:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010300:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010302:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010306:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801030a:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 801030c:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801030e:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010312:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010316:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801031a:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801031e:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 8010320:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8010322:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010326:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8010328:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801032c:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010330:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010332:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 8010334:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010338:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 801033c:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801033e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010342:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010344:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010348:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801034c:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010350:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010354:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010358:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801035c:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010360:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8010364:	eba9 0808 	sub.w	r8, r9, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010368:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801036c:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010370:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010374:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010378:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801037c:	12d2      	asrs	r2, r2, #11
 801037e:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010382:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8010386:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010388:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801038c:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010390:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010392:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010396:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 801039a:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801039c:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801039e:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80103a2:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80103a4:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80103a6:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80103a8:	42b2      	cmp	r2, r6
 80103aa:	d1a0      	bne.n	80102ee <jpeg_idct_6x6+0x1a>
 80103ac:	f1a3 0e04 	sub.w	lr, r3, #4
 80103b0:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 80103b4:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80103b6:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80103ba:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 80103be:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 80103c0:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80103c2:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 80103c6:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 80103c8:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80103cc:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80103d0:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80103d4:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80103d8:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 80103dc:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80103e0:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 80103e4:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 80103e8:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 80103ec:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80103f0:	f242 7231 	movw	r2, #10033	; 0x2731
 80103f4:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 80103f8:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 80103fc:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 8010400:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010404:	eb04 0508 	add.w	r5, r4, r8
 8010408:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801040c:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8010410:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010414:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010418:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801041c:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801041e:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010422:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010426:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801042a:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801042e:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8010432:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8010436:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801043a:	5d04      	ldrb	r4, [r0, r4]
 801043c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801043e:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010442:	9800      	ldr	r0, [sp, #0]
 8010444:	5d84      	ldrb	r4, [r0, r6]
 8010446:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010448:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801044c:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8010450:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8010454:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010458:	5d04      	ldrb	r4, [r0, r4]
 801045a:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801045c:	f810 3008 	ldrb.w	r3, [r0, r8]
 8010460:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010462:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010466:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 801046a:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 801046e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010472:	5cc3      	ldrb	r3, [r0, r3]
 8010474:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010476:	5d43      	ldrb	r3, [r0, r5]
 8010478:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 801047a:	d19c      	bne.n	80103b6 <jpeg_idct_6x6+0xe2>
  }
}
 801047c:	b027      	add	sp, #156	; 0x9c
 801047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010484 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010488:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 801048c:	b09d      	sub	sp, #116	; 0x74
 801048e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010490:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010492:	3080      	adds	r0, #128	; 0x80
 8010494:	3208      	adds	r2, #8
 8010496:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010498:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801049a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801049e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80104a2:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80104a4:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80104a6:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80104aa:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80104ac:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80104b0:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80104b4:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80104b6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80104b8:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80104bc:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80104be:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80104c2:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 80104c4:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80104c6:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80104ca:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 80104ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80104d2:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80104d6:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80104da:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80104de:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80104e2:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80104e4:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80104e8:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80104ec:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 80104f0:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80104f2:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 80104f6:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 80104fa:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 80104fe:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010502:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010506:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010508:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801050c:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010510:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010512:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010516:	483b      	ldr	r0, [pc, #236]	; (8010604 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010518:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 801051a:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801051e:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010522:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010526:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010528:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801052c:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010530:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010534:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010538:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801053c:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010540:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010544:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010548:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 801054c:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801054e:	d1aa      	bne.n	80104a6 <jpeg_idct_5x5+0x22>
 8010550:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 8010554:	a903      	add	r1, sp, #12
 8010556:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010558:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801055c:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8010560:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8010562:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010566:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 801056a:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 801056c:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 801056e:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8010572:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010576:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 801057a:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801057e:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 8010582:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 8010586:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801058a:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801058c:	1b1b      	subs	r3, r3, r4
 801058e:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010592:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 8010596:	eb03 344c 	add.w	r4, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 801059a:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 801059c:	1915      	adds	r5, r2, r4
    tmp11 = z3 - z1;
 801059e:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80105a0:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 80105a4:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80105a8:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80105aa:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 80105ae:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80105b2:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 80105b6:	4813      	ldr	r0, [pc, #76]	; (8010604 <jpeg_idct_5x5+0x180>)
 80105b8:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80105bc:	eb05 0b06 	add.w	fp, r5, r6
 80105c0:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80105c2:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 80105c4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 80105c8:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80105cc:	f810 b00b 	ldrb.w	fp, [r0, fp]
 80105d0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80105d2:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80105d6:	9800      	ldr	r0, [sp, #0]
 80105d8:	5d45      	ldrb	r5, [r0, r5]
 80105da:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80105dc:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80105de:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 80105e0:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80105e4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80105e8:	5d45      	ldrb	r5, [r0, r5]
 80105ea:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80105ec:	5c82      	ldrb	r2, [r0, r2]
 80105ee:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 80105f0:	f810 300c 	ldrb.w	r3, [r0, ip]
 80105f4:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 80105f6:	9b01      	ldr	r3, [sp, #4]
 80105f8:	4573      	cmp	r3, lr
 80105fa:	d1b2      	bne.n	8010562 <jpeg_idct_5x5+0xde>
  }
}
 80105fc:	b01d      	add	sp, #116	; 0x74
 80105fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010602:	bf00      	nop
 8010604:	ffffba5c 	.word	0xffffba5c

08010608 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801060e:	b093      	sub	sp, #76	; 0x4c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010610:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8010614:	1e96      	subs	r6, r2, #2
 8010616:	3c04      	subs	r4, #4
 8010618:	1d97      	adds	r7, r2, #6
 801061a:	3580      	adds	r5, #128	; 0x80

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801061c:	a902      	add	r1, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 801061e:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010622:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010626:	f8df c108 	ldr.w	ip, [pc, #264]	; 8010730 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801062a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801062e:	3104      	adds	r1, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010630:	f854 2f04 	ldr.w	r2, [r4, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010634:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010638:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801063a:	fb02 f000 	mul.w	r0, r2, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801063e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010640:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010644:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010648:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 801064c:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8010650:	eba0 0002 	sub.w	r0, r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010654:	6a22      	ldr	r2, [r4, #32]
 8010656:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801065a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801065c:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8010660:	eb0a 020b 	add.w	r2, sl, fp
 8010664:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010668:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801066c:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010670:	fb0c 220b 	mla	r2, ip, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010674:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010678:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 801067c:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010680:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010684:	eb02 0980 	add.w	r9, r2, r0, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 8010688:	f841 bc04 	str.w	fp, [r1, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 801068c:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010690:	f8c1 a02c 	str.w	sl, [r1, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010694:	f8c1 900c 	str.w	r9, [r1, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010698:	61ca      	str	r2, [r1, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801069a:	d1c6      	bne.n	801062a <jpeg_idct_4x4+0x22>
 801069c:	1f1e      	subs	r6, r3, #4
 801069e:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 80106a2:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80106a4:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80106a8:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80106ac:	f8df e080 	ldr.w	lr, [pc, #128]	; 8010730 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 80106b0:	f856 3f04 	ldr.w	r3, [r6, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 80106b4:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 80106b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80106b8:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 80106bc:	45b4      	cmp	ip, r6
    outptr = output_buf[ctr] + output_col;
 80106be:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 80106c2:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 80106c6:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80106ca:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 80106ce:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80106d2:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80106d6:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80106da:	eb01 020b 	add.w	r2, r1, fp
 80106de:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80106e2:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80106e6:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80106ea:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80106ee:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80106f2:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 80106f4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80106f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 80106fa:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80106fe:	f815 b00b 	ldrb.w	fp, [r5, fp]
 8010702:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010706:	5c6b      	ldrb	r3, [r5, r1]
 8010708:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801070a:	9b01      	ldr	r3, [sp, #4]
 801070c:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 8010710:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010714:	5ceb      	ldrb	r3, [r5, r3]
 8010716:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010718:	9b01      	ldr	r3, [sp, #4]
 801071a:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 801071e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010722:	5cab      	ldrb	r3, [r5, r2]
 8010724:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 8010726:	d1c3      	bne.n	80106b0 <jpeg_idct_4x4+0xa8>
  }
}
 8010728:	b013      	add	sp, #76	; 0x4c
 801072a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072e:	bf00      	nop
 8010730:	ffffc4df 	.word	0xffffc4df

08010734 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010738:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801073a:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801073e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010740:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010744:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010746:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801074a:	f1a1 0c04 	sub.w	ip, r1, #4
 801074e:	1d10      	adds	r0, r2, #4
 8010750:	4621      	mov	r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010752:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010756:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801075a:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801075e:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010760:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010764:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010768:	4540      	cmp	r0, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801076a:	fb05 f202 	mul.w	r2, r5, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801076e:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010772:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010776:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 <<= CONST_BITS;
 801077a:	ea4f 3242 	mov.w	r2, r2, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801077e:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010786:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801078a:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 801078e:	eb02 0605 	add.w	r6, r2, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8010792:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010796:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 801079a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801079e:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80107a2:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80107a6:	60a2      	str	r2, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80107a8:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80107ac:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80107b0:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80107b4:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80107b6:	d1d0      	bne.n	801075a <jpeg_idct_3x3+0x26>
 80107b8:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80107ba:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 80107be:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80107c0:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 80107c4:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 80107c8:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 80107ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80107cc:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 80107d0:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 80107d2:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80107d6:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80107da:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80107de:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80107e2:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80107e6:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80107e8:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 80107ec:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 80107f0:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80107f4:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80107f8:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 80107fc:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8010800:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8010804:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8010808:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801080c:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8010810:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010814:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8010818:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801081a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801081e:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8010820:	d1d0      	bne.n	80107c4 <jpeg_idct_3x3+0x90>
  }
}
 8010822:	b00b      	add	sp, #44	; 0x2c
 8010824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010828 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801082c:	6d4f      	ldr	r7, [r1, #84]	; 0x54
{
 801082e:	4698      	mov	r8, r3
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010830:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010834:	f9b2 1000 	ldrsh.w	r1, [r2]
 8010838:	6838      	ldr	r0, [r7, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801083a:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801083c:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010840:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010842:	6a38      	ldr	r0, [r7, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010844:	687b      	ldr	r3, [r7, #4]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010846:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 8010848:	3104      	adds	r1, #4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 801084a:	6a7f      	ldr	r7, [r7, #36]	; 0x24
  tmp0 = tmp4 + tmp5;
 801084c:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 801084e:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010850:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010854:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010858:	435c      	muls	r4, r3
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 801085a:	f8d8 c000 	ldr.w	ip, [r8]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 801085e:	437a      	muls	r2, r7
{
 8010860:	9e06      	ldr	r6, [sp, #24]
  tmp1 = tmp4 + tmp5;
 8010862:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 8010864:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 8010866:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 801086a:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 801086c:	1bc0      	subs	r0, r0, r7

  /* Row 1 */
  outptr = output_buf[1] + output_col;

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 801086e:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010870:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010872:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010876:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 801087a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 801087e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010882:	5d2c      	ldrb	r4, [r5, r4]
 8010884:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010888:	5c28      	ldrb	r0, [r5, r0]
 801088a:	f88e 0001 	strb.w	r0, [lr, #1]
  outptr = output_buf[1] + output_col;
 801088e:	f8d8 0004 	ldr.w	r0, [r8, #4]
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010892:	5ceb      	ldrb	r3, [r5, r3]
  outptr = output_buf[1] + output_col;
 8010894:	1984      	adds	r4, r0, r6
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010896:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010898:	5c6b      	ldrb	r3, [r5, r1]
 801089a:	7063      	strb	r3, [r4, #1]
}
 801089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080108a0 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 80108a0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80108a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80108a6:	6809      	ldr	r1, [r1, #0]
 80108a8:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 80108aa:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 80108ae:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 80108b0:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 80108b4:	440a      	add	r2, r1
 80108b6:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	9b00      	ldr	r3, [sp, #0]
 80108be:	54d1      	strb	r1, [r2, r3]
}
 80108c0:	4770      	bx	lr
	...

080108c4 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80108c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c8:	b0d1      	sub	sp, #324	; 0x144
 80108ca:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80108cc:	1e96      	subs	r6, r2, #2
 80108ce:	9306      	str	r3, [sp, #24]
 80108d0:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80108d2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80108d6:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80108d8:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80108dc:	f102 030e 	add.w	r3, r2, #14
 80108e0:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80108e2:	f936 5f02 	ldrsh.w	r5, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80108e6:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80108e8:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80108ec:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80108f0:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80108f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80108f4:	f9b6 2040 	ldrsh.w	r2, [r6, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80108f8:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80108fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80108fe:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    tmp0 <<= CONST_BITS;
 8010902:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010904:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010906:	f9b6 3060 	ldrsh.w	r3, [r6, #96]	; 0x60
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801090a:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801090e:	f9b6 c050 	ldrsh.w	ip, [r6, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010912:	437b      	muls	r3, r7
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010914:	f241 67a1 	movw	r7, #5793	; 0x16a1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010918:	f9b6 e070 	ldrsh.w	lr, [r6, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 801091c:	437b      	muls	r3, r7
    tmp1 = tmp0 + tmp3;
 801091e:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010920:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010924:	f241 65a1 	movw	r5, #5793	; 0x16a1
    tmp2 = tmp0 - tmp3 - tmp3;
 8010928:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 801092a:	1a8b      	subs	r3, r1, r2
 801092c:	436b      	muls	r3, r5
 801092e:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010930:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 8010934:	442b      	add	r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010936:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp11 = tmp2 + tmp0;
 801093a:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 801093c:	188b      	adds	r3, r1, r2
 801093e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010940:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010944:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010946:	f240 75dc 	movw	r5, #2012	; 0x7dc
 801094a:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 801094c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 801094e:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8010950:	1aad      	subs	r5, r5, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 8010952:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8010954:	1a79      	subs	r1, r7, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010956:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    tmp13 = tmp1 - tmp2 + tmp3;
 801095a:	188a      	adds	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801095c:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
    tmp12 = tmp1 - tmp0 + tmp2;
 8010960:	9304      	str	r3, [sp, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 8010962:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010964:	6a22      	ldr	r2, [r4, #32]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010966:	4b89      	ldr	r3, [pc, #548]	; (8010b8c <jpeg_idct_9x9+0x2c8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010968:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801096a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801096c:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801096e:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8010972:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010976:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801097a:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801097c:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010980:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010984:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010988:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801098c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010990:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010994:	ebac 0e07 	sub.w	lr, ip, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010998:	eba1 0c0c 	sub.w	ip, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 801099c:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80109a0:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80109a4:	ebac 0707 	sub.w	r7, ip, r7
    tmp0 = tmp2 + tmp3 - z2;
 80109a8:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 80109ac:	fb03 f30e 	mul.w	r3, r3, lr
    tmp0 = tmp2 + tmp3 - z2;
 80109b0:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 80109b4:	eba2 0e03 	sub.w	lr, r2, r3
    tmp3 += z2 + tmp1;
 80109b8:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80109ba:	f242 7331 	movw	r3, #10033	; 0x2731

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80109be:	eb05 0108 	add.w	r1, r5, r8
    tmp2 += z2 - tmp1;
 80109c2:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80109c4:	435f      	muls	r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80109c6:	9b03      	ldr	r3, [sp, #12]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80109c8:	12c9      	asrs	r1, r1, #11
    tmp3 += z2 + tmp1;
 80109ca:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80109cc:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80109d0:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80109d4:	19d9      	adds	r1, r3, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80109d6:	1bdf      	subs	r7, r3, r7
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80109d8:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80109da:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80109dc:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80109de:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80109e0:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80109e4:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80109e8:	12ff      	asrs	r7, r7, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80109ea:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80109ec:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80109f0:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80109f4:	f8c0 70dc 	str.w	r7, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80109f8:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80109fa:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 80109fe:	9b05      	ldr	r3, [sp, #20]
 8010a00:	4413      	add	r3, r2
 8010a02:	12db      	asrs	r3, r3, #11
 8010a04:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8010a06:	9b05      	ldr	r3, [sp, #20]
 8010a08:	1a9a      	subs	r2, r3, r2
 8010a0a:	12d2      	asrs	r2, r2, #11
 8010a0c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 8010a10:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8010a14:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8010a18:	12db      	asrs	r3, r3, #11
 8010a1a:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010a1c:	9b07      	ldr	r3, [sp, #28]
 8010a1e:	42b3      	cmp	r3, r6
 8010a20:	f47f af5f 	bne.w	80108e2 <jpeg_idct_9x9+0x1e>
 8010a24:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8010a26:	aa08      	add	r2, sp, #32
 8010a28:	3b04      	subs	r3, #4
 8010a2a:	9301      	str	r3, [sp, #4]
 8010a2c:	9b06      	ldr	r3, [sp, #24]
 8010a2e:	3320      	adds	r3, #32
 8010a30:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010a32:	9b01      	ldr	r3, [sp, #4]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010a34:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z1 = (INT32) wsptr[2];
 8010a38:	6890      	ldr	r0, [r2, #8]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010a3a:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8010a3c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z4 = (INT32) wsptr[7];
 8010a40:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 8010a44:	9106      	str	r1, [sp, #24]
 8010a46:	9301      	str	r3, [sp, #4]
 8010a48:	460b      	mov	r3, r1
 8010a4a:	995a      	ldr	r1, [sp, #360]	; 0x168
 8010a4c:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010a4e:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z2 = (INT32) wsptr[4];
 8010a52:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010a56:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010a5a:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8010a5e:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010a62:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 8010a66:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010a6a:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 8010a6e:	1b9e      	subs	r6, r3, r6
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010a70:	1a43      	subs	r3, r0, r1
 8010a72:	fb0c f303 	mul.w	r3, ip, r3
 8010a76:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010a78:	18f3      	adds	r3, r6, r3
 8010a7a:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010a7c:	1843      	adds	r3, r0, r1
 8010a7e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010a80:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010a84:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010a86:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8010a8a:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8010a8c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8010a8e:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8010a90:	1a6d      	subs	r5, r5, r1
    tmp12 = tmp1 - tmp0 + tmp2;
 8010a92:	4403      	add	r3, r0
    tmp13 = tmp1 - tmp2 + tmp3;
 8010a94:	1a38      	subs	r0, r7, r0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010a96:	4f3d      	ldr	r7, [pc, #244]	; (8010b8c <jpeg_idct_9x9+0x2c8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 8010a98:	1841      	adds	r1, r0, r1
    z1 = (INT32) wsptr[1];
 8010a9a:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp12 = tmp1 - tmp0 + tmp2;
 8010a9e:	9304      	str	r3, [sp, #16]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010aa0:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp13 = tmp1 - tmp2 + tmp3;
 8010aa4:	9105      	str	r1, [sp, #20]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010aa6:	eb00 0e09 	add.w	lr, r0, r9
    z2 = (INT32) wsptr[3];
 8010aaa:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010aae:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010ab0:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8010ab4:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010ab8:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010abc:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010ac0:	f640 737a 	movw	r3, #3962	; 0xf7a
 8010ac4:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010ac8:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 8010acc:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010ad0:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010ad4:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8010ad8:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 8010adc:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010ae0:	1ac0      	subs	r0, r0, r3
    tmp3 += z2 + tmp1;
 8010ae2:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010ae4:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 8010ae8:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010aea:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010aee:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010af2:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 8010af6:	448e      	add	lr, r1
			    & RANGE_MASK];
 8010af8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010afc:	fb03 f909 	mul.w	r9, r3, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b00:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 8010b02:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b06:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010b0a:	9b06      	ldr	r3, [sp, #24]
 8010b0c:	5458      	strb	r0, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010b0e:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010b10:	f81a 0005 	ldrb.w	r0, [sl, r5]
 8010b14:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010b16:	eb03 0009 	add.w	r0, r3, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010b1a:	eba3 0909 	sub.w	r9, r3, r9
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010b1e:	9b04      	ldr	r3, [sp, #16]
			    & RANGE_MASK];
 8010b20:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8010b24:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010b28:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010b2c:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010b2e:	f81a 0009 	ldrb.w	r0, [sl, r9]
 8010b32:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010b34:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010b36:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8010b38:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8010b3c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010b40:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010b44:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010b46:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8010b4a:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8010b4c:	9b05      	ldr	r3, [sp, #20]
 8010b4e:	4473      	add	r3, lr
			    & RANGE_MASK];
 8010b50:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8010b54:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010b58:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010b5a:	9b05      	ldr	r3, [sp, #20]
 8010b5c:	eba3 010e 	sub.w	r1, r3, lr
			    & RANGE_MASK];
 8010b60:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010b64:	f81a 3001 	ldrb.w	r3, [sl, r1]
  for (ctr = 0; ctr < 9; ctr++) {
 8010b68:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010b6a:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 8010b6c:	9b02      	ldr	r3, [sp, #8]
 8010b6e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
			    & RANGE_MASK];
 8010b72:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8010b76:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010b7a:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 8010b7c:	9b07      	ldr	r3, [sp, #28]
 8010b7e:	428b      	cmp	r3, r1
 8010b80:	f47f af57 	bne.w	8010a32 <jpeg_idct_9x9+0x16e>
  }
}
 8010b84:	b051      	add	sp, #324	; 0x144
 8010b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b8a:	bf00      	nop
 8010b8c:	ffffd8cf 	.word	0xffffd8cf

08010b90 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010b94:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8010b98:	b0d7      	sub	sp, #348	; 0x15c
 8010b9a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010b9c:	f1a2 0b02 	sub.w	fp, r2, #2
 8010ba0:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010ba2:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8010ba6:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010ba8:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010baa:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010bac:	f102 030e 	add.w	r3, r2, #14
 8010bb0:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010bb2:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010bb6:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010bba:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010bbe:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010bc0:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010bc4:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010bc6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010bca:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010bce:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010bd0:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8010bd4:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010bd6:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010bda:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010bde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010be2:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 8010be4:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 8010be6:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010be8:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010bea:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010bee:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010bf2:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8010bf6:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010bfa:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010bfc:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8010c00:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010c02:	19f3      	adds	r3, r6, r7
 8010c04:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8010c06:	f241 0071 	movw	r0, #4209	; 0x1071
 8010c0a:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8010c0e:	489d      	ldr	r0, [pc, #628]	; (8010e84 <jpeg_idct_10x10+0x2f4>)
 8010c10:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8010c14:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 8010c18:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010c1a:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 8010c1e:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8010c20:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010c22:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 8010c26:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010c28:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010c2a:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010c2e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010c30:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp24 = tmp10 - tmp12;
 8010c32:	9001      	str	r0, [sp, #4]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010c34:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010c38:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010c3a:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8010c3e:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010c42:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 8010c46:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 8010c48:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8010c4c:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010c4e:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8010c52:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8010c56:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010c5a:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 8010c5e:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010c62:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010c66:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010c6a:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010c6e:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010c70:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010c72:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010c76:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010c78:	1b86      	subs	r6, r0, r6
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010c7a:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010c7e:	f642 0353 	movw	r3, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010c82:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010c84:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010c88:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8010c8a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010c8e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010c92:	f241 468c 	movw	r6, #5260	; 0x148c
 8010c96:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010c98:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010c9c:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010ca0:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010ca4:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010ca8:	1b5b      	subs	r3, r3, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010caa:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010cac:	444d      	add	r5, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010cae:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010cb2:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8010cb6:	f8c1 211c 	str.w	r2, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010cba:	18fa      	adds	r2, r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010cbc:	1aff      	subs	r7, r7, r3
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8010cbe:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010cc0:	12d2      	asrs	r2, r2, #11
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8010cc2:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010cc6:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010cc8:	61ca      	str	r2, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8010cca:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8010ccc:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8010cce:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8010cd2:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8010cd6:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8010cda:	9b02      	ldr	r3, [sp, #8]
 8010cdc:	442b      	add	r3, r5
 8010cde:	12db      	asrs	r3, r3, #11
 8010ce0:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010ce2:	9b02      	ldr	r3, [sp, #8]
 8010ce4:	1b5d      	subs	r5, r3, r5
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010ce6:	9b01      	ldr	r3, [sp, #4]
 8010ce8:	4453      	add	r3, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010cea:	12ed      	asrs	r5, r5, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010cec:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8010cee:	f8c1 50bc 	str.w	r5, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8010cf2:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010cf4:	9b01      	ldr	r3, [sp, #4]
 8010cf6:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010cfa:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010cfc:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010d00:	455b      	cmp	r3, fp
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8010d02:	f8c1 609c 	str.w	r6, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010d06:	f47f af54 	bne.w	8010bb2 <jpeg_idct_10x10+0x22>
 8010d0a:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 8010d0c:	a906      	add	r1, sp, #24
 8010d0e:	f1a3 0b04 	sub.w	fp, r3, #4
 8010d12:	3324      	adds	r3, #36	; 0x24
 8010d14:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010d16:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010d1a:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8010d1e:	9a60      	ldr	r2, [sp, #384]	; 0x180
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010d20:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 8010d22:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8010d26:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010d28:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 8010d2c:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8010d2e:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010d32:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010d36:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010d3a:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8010d3c:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8010d3e:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010d42:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8010d44:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 8010d48:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010d4c:	006d      	lsls	r5, r5, #1
 8010d4e:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8010d52:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8010d56:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8010d58:	19eb      	adds	r3, r5, r7
 8010d5a:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8010d5c:	f241 0071 	movw	r0, #4209	; 0x1071
 8010d60:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8010d64:	4847      	ldr	r0, [pc, #284]	; (8010e84 <jpeg_idct_10x10+0x2f4>)
 8010d66:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 8010d6a:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8010d6e:	1b70      	subs	r0, r6, r5
    z2 = (INT32) wsptr[3];
 8010d70:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp21 = tmp11 + tmp13;
 8010d74:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8010d76:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8010d78:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010d7a:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 8010d7e:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 8010d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 8010d84:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8010d88:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 8010d8c:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8010d8e:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8010d92:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8010d96:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 8010d9a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8010d9e:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010da2:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8010da6:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010daa:	f240 7014 	movw	r0, #1812	; 0x714
 8010dae:	fb00 f602 	mul.w	r6, r0, r2
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010db2:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8010db6:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010db8:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010dbc:	eba6 0608 	sub.w	r6, r6, r8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8010dc0:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010dc4:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8010dc6:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010dc8:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010dcc:	035b      	lsls	r3, r3, #13
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8010dce:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010dd2:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8010dd6:	eba3 3840 	sub.w	r8, r3, r0, lsl #13
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010dda:	f642 0353 	movw	r3, #10323	; 0x2853
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010dde:	9800      	ldr	r0, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010de0:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010de2:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010de4:	9e60      	ldr	r6, [sp, #384]	; 0x180
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010de6:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010dea:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010dee:	eb0c 020e 	add.w	r2, ip, lr
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010df2:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8010df6:	1b5b      	subs	r3, r3, r5
			    & RANGE_MASK];
 8010df8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8010dfc:	444d      	add	r5, r9
			    & RANGE_MASK];
 8010dfe:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8010e02:	5c82      	ldrb	r2, [r0, r2]
 8010e04:	9804      	ldr	r0, [sp, #16]
 8010e06:	5582      	strb	r2, [r0, r6]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010e08:	9a00      	ldr	r2, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010e0a:	9800      	ldr	r0, [sp, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8010e0c:	f812 200c 	ldrb.w	r2, [r2, ip]
 8010e10:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010e12:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010e14:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8010e16:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8010e1a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8010e1e:	5c82      	ldrb	r2, [r0, r2]
 8010e20:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8010e22:	5dc3      	ldrb	r3, [r0, r7]
 8010e24:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010e26:	9b01      	ldr	r3, [sp, #4]
 8010e28:	4443      	add	r3, r8
			    & RANGE_MASK];
 8010e2a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8010e2e:	5cc3      	ldrb	r3, [r0, r3]
 8010e30:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010e32:	9b01      	ldr	r3, [sp, #4]
 8010e34:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 8010e38:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8010e3c:	f810 3008 	ldrb.w	r3, [r0, r8]
 8010e40:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010e42:	9b03      	ldr	r3, [sp, #12]
 8010e44:	442b      	add	r3, r5
			    & RANGE_MASK];
 8010e46:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8010e4a:	5cc3      	ldrb	r3, [r0, r3]
 8010e4c:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010e4e:	9b03      	ldr	r3, [sp, #12]
 8010e50:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8010e52:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8010e56:	5d43      	ldrb	r3, [r0, r5]
 8010e58:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010e5a:	9b02      	ldr	r3, [sp, #8]
 8010e5c:	4453      	add	r3, sl
			    & RANGE_MASK];
 8010e5e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8010e62:	5cc3      	ldrb	r3, [r0, r3]
 8010e64:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010e66:	9b02      	ldr	r3, [sp, #8]
 8010e68:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 8010e6c:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8010e70:	f810 300a 	ldrb.w	r3, [r0, sl]
 8010e74:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 8010e76:	9b05      	ldr	r3, [sp, #20]
 8010e78:	455b      	cmp	r3, fp
 8010e7a:	f47f af4c 	bne.w	8010d16 <jpeg_idct_10x10+0x186>
  }
}
 8010e7e:	b057      	add	sp, #348	; 0x15c
 8010e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e84:	ffffba5c 	.word	0xffffba5c

08010e88 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	b0e5      	sub	sp, #404	; 0x194
 8010e8e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010e90:	f1a2 0a02 	sub.w	sl, r2, #2
 8010e94:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010e96:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010e9a:	3380      	adds	r3, #128	; 0x80
 8010e9c:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010e9e:	1f0b      	subs	r3, r1, #4
 8010ea0:	9302      	str	r3, [sp, #8]
 8010ea2:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8010ea6:	aa0c      	add	r2, sp, #48	; 0x30
 8010ea8:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010eaa:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010eac:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010eb0:	f93a 3f02 	ldrsh.w	r3, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010eb4:	3204      	adds	r2, #4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010eb6:	f851 0f04 	ldr.w	r0, [r1, #4]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010eba:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ebe:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010ec0:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010ec2:	f9ba 5040 	ldrsh.w	r5, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010ec6:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010ec8:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010ecc:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp10 <<= CONST_BITS;
 8010ed0:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010ed2:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010ed4:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ed8:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010ede:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010ee0:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010ee4:	1a27      	subs	r7, r4, r0
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ee6:	f9ba e010 	ldrsh.w	lr, [sl, #16]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8010eea:	eba4 0b06 	sub.w	fp, r4, r6
 8010eee:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8010ef2:	f640 55c9 	movw	r5, #3529	; 0xdc9
 8010ef6:	436f      	muls	r7, r5
    z4 = z1 + z3;
 8010ef8:	1985      	adds	r5, r0, r6
    z4 -= z2;
 8010efa:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8010efc:	fb0c 3301 	mla	r3, ip, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010f00:	eb0b 0c07 	add.w	ip, fp, r7
    z4 -= z2;
 8010f04:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010f06:	449c      	add	ip, r3
 8010f08:	49d0      	ldr	r1, [pc, #832]	; (801124c <jpeg_idct_11x11+0x3c4>)
 8010f0a:	fb01 c104 	mla	r1, r1, r4, ip
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010f0e:	f244 3cb5 	movw	ip, #17333	; 0x43b5
    tmp21 = tmp20 + tmp23 + tmp25 -
 8010f12:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010f14:	fb0c 3c06 	mla	ip, ip, r6, r3
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010f18:	49cd      	ldr	r1, [pc, #820]	; (8011250 <jpeg_idct_11x11+0x3c8>)
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8010f1a:	44e3      	add	fp, ip
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010f1c:	fb01 3c00 	mla	ip, r1, r0, r3
 8010f20:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010f24:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010f28:	f9ba c050 	ldrsh.w	ip, [sl, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8010f2c:	9104      	str	r1, [sp, #16]
    tmp24 += tmp25;
 8010f2e:	49c9      	ldr	r1, [pc, #804]	; (8011254 <jpeg_idct_11x11+0x3cc>)
 8010f30:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010f34:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 8010f38:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010f3c:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8010f40:	9105      	str	r1, [sp, #20]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8010f42:	49c5      	ldr	r1, [pc, #788]	; (8011258 <jpeg_idct_11x11+0x3d0>)
 8010f44:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010f46:	fb06 0004 	mla	r0, r6, r4, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010f4a:	f9ba 6070 	ldrsh.w	r6, [sl, #112]	; 0x70

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010f4e:	f44f 644c 	mov.w	r4, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8010f52:	1941      	adds	r1, r0, r5
 8010f54:	9106      	str	r1, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010f56:	9902      	ldr	r1, [sp, #8]
 8010f58:	6a08      	ldr	r0, [r1, #32]
 8010f5a:	fb00 f90e 	mul.w	r9, r0, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010f5e:	6e08      	ldr	r0, [r1, #96]	; 0x60
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010f60:	f241 5e74 	movw	lr, #5492	; 0x1574
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010f64:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010f66:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 8010f6a:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010f6e:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
 8010f72:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 8010f74:	eb09 0007 	add.w	r0, r9, r7
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010f78:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010f7c:	eb09 0806 	add.w	r8, r9, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8010f80:	4435      	add	r5, r6
 8010f82:	4365      	muls	r5, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8010f84:	f641 446a 	movw	r4, #7274	; 0x1c6a
 8010f88:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010f8a:	eb09 040c 	add.w	r4, r9, ip
 8010f8e:	fb0e f104 	mul.w	r1, lr, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010f92:	f640 34b8 	movw	r4, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010f96:	eb00 0e01 	add.w	lr, r0, r1
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8010f9a:	fb04 5808 	mla	r8, r4, r8, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8010f9e:	9107      	str	r1, [sp, #28]
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010fa0:	eb07 040c 	add.w	r4, r7, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 8010fa4:	44c6      	add	lr, r8
 8010fa6:	49ad      	ldr	r1, [pc, #692]	; (801125c <jpeg_idct_11x11+0x3d4>)
 8010fa8:	fb01 ee09 	mla	lr, r1, r9, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010fac:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010fb0:	f244 2958 	movw	r9, #16984	; 0x4258
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8010fb4:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010fb8:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010fba:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010fbe:	fb01 440c 	mla	r4, r1, ip, r4
 8010fc2:	9907      	ldr	r1, [sp, #28]
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8010fc4:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010fc6:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8010fc8:	440c      	add	r4, r1
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8010fca:	49a5      	ldr	r1, [pc, #660]	; (8011260 <jpeg_idct_11x11+0x3d8>)
 8010fcc:	4348      	muls	r0, r1
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010fce:	f244 3147 	movw	r1, #17223	; 0x4347
    tmp11 += z1;
 8010fd2:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010fd4:	fb01 0006 	mla	r0, r1, r6, r0

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8010fd8:	9903      	ldr	r1, [sp, #12]
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8010fda:	4480      	add	r8, r0
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010fdc:	f242 000b 	movw	r0, #8203	; 0x200b
 8010fe0:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010fe4:	489f      	ldr	r0, [pc, #636]	; (8011264 <jpeg_idct_11x11+0x3dc>)
 8010fe6:	fb00 cc07 	mla	ip, r0, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8010fea:	f2a0 60f7 	subw	r0, r0, #1783	; 0x6f7
 8010fee:	fb00 cc06 	mla	ip, r0, r6, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010ff2:	eb0b 000e 	add.w	r0, fp, lr
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8010ff6:	ebab 0e0e 	sub.w	lr, fp, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010ffa:	12c0      	asrs	r0, r0, #11
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8010ffc:	4465      	add	r5, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8010ffe:	f842 0c04 	str.w	r0, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011002:	ea4f 20ee 	mov.w	r0, lr, asr #11
 8011006:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801100a:	eb01 0009 	add.w	r0, r1, r9
 801100e:	12c0      	asrs	r0, r0, #11
 8011010:	61d0      	str	r0, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011012:	eba1 0009 	sub.w	r0, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011016:	9905      	ldr	r1, [sp, #20]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011018:	12c0      	asrs	r0, r0, #11
 801101a:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801101e:	1908      	adds	r0, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011020:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011022:	12c0      	asrs	r0, r0, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011024:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011026:	63d0      	str	r0, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011028:	9904      	ldr	r1, [sp, #16]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801102a:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801102e:	eb01 0008 	add.w	r0, r1, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011032:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011036:	9906      	ldr	r1, [sp, #24]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011038:	12c0      	asrs	r0, r0, #11
 801103a:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801103c:	ea4f 20e8 	mov.w	r0, r8, asr #11
 8011040:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011044:	1948      	adds	r0, r1, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011046:	1b4d      	subs	r5, r1, r5
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011048:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801104a:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801104c:	12ed      	asrs	r5, r5, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801104e:	67d0      	str	r0, [r2, #124]	; 0x7c
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011050:	f645 00ad 	movw	r0, #22701	; 0x58ad
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011054:	f8c2 50bc 	str.w	r5, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011058:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 801105c:	12db      	asrs	r3, r3, #11
 801105e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011064:	4553      	cmp	r3, sl
 8011066:	f47f af20 	bne.w	8010eaa <jpeg_idct_11x11+0x22>
 801106a:	9b08      	ldr	r3, [sp, #32]
 801106c:	3b04      	subs	r3, #4
 801106e:	9303      	str	r3, [sp, #12]
 8011070:	9b08      	ldr	r3, [sp, #32]
 8011072:	3328      	adds	r3, #40	; 0x28
 8011074:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8011076:	ab0c      	add	r3, sp, #48	; 0x30
 8011078:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801107a:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801107c:	f245 1e7e 	movw	lr, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 8011080:	9a02      	ldr	r2, [sp, #8]
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8011082:	f241 5b74 	movw	fp, #5492	; 0x1574
    outptr = output_buf[ctr] + output_col;
 8011086:	f853 1f04 	ldr.w	r1, [r3, #4]!
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801108a:	f244 2a58 	movw	sl, #16984	; 0x4258
    z2 = (INT32) wsptr[4];
 801108e:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8011090:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8011092:	9109      	str	r1, [sp, #36]	; 0x24
 8011094:	9303      	str	r3, [sp, #12]
 8011096:	460b      	mov	r3, r1
 8011098:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801109a:	1bf0      	subs	r0, r6, r7
    z1 = (INT32) wsptr[2];
 801109c:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 801109e:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80110a0:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 80110a2:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 80110a4:	fb0e fe00 	mul.w	lr, lr, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80110a8:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80110ac:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80110ae:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80110b2:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80110b4:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 80110b6:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 80110ba:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 80110bc:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 80110be:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 80110c0:	f642 306c 	movw	r0, #11116	; 0x2b6c
 80110c4:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80110c8:	eb0e 000c 	add.w	r0, lr, ip
 80110cc:	4a5f      	ldr	r2, [pc, #380]	; (801124c <jpeg_idct_11x11+0x3c4>)
 80110ce:	4418      	add	r0, r3
 80110d0:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80110d4:	f244 30b5 	movw	r0, #17333	; 0x43b5
 80110d8:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 80110dc:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80110de:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80110e2:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80110e4:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80110e6:	4a5a      	ldr	r2, [pc, #360]	; (8011250 <jpeg_idct_11x11+0x3c8>)
 80110e8:	fb02 3e04 	mla	lr, r2, r4, r3
 80110ec:	eb0e 020c 	add.w	r2, lr, ip
 80110f0:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 80110f2:	4a58      	ldr	r2, [pc, #352]	; (8011254 <jpeg_idct_11x11+0x3cc>)
 80110f4:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80110f8:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 80110fc:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011100:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8011104:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8011106:	4a54      	ldr	r2, [pc, #336]	; (8011258 <jpeg_idct_11x11+0x3d0>)
 8011108:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801110a:	fb07 4406 	mla	r4, r7, r6, r4
 801110e:	1962      	adds	r2, r4, r5
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011110:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011114:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 8011116:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 8011118:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 801111c:	6857      	ldr	r7, [r2, #4]
    z3 = (INT32) wsptr[5];
 801111e:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 8011122:	eb07 040e 	add.w	r4, r7, lr
    z4 = (INT32) wsptr[7];
 8011126:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp10 = tmp11 + tmp12 + tmp13 -
 801112a:	4a4c      	ldr	r2, [pc, #304]	; (801125c <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 801112c:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011130:	eb07 090c 	add.w	r9, r7, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011134:	4466      	add	r6, ip
 8011136:	436e      	muls	r6, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8011138:	f641 456a 	movw	r5, #7274	; 0x1c6a
 801113c:	436c      	muls	r4, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801113e:	eb07 0508 	add.w	r5, r7, r8
 8011142:	fb0b fb05 	mul.w	fp, fp, r5
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011146:	f640 35b8 	movw	r5, #3000	; 0xbb8
 801114a:	fb05 6909 	mla	r9, r5, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 801114e:	eb04 050b 	add.w	r5, r4, fp
 8011152:	444d      	add	r5, r9
 8011154:	fb02 5707 	mla	r7, r2, r7, r5
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011158:	eb0e 0508 	add.w	r5, lr, r8
 801115c:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 8011160:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011164:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011166:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801116a:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801116e:	4a3c      	ldr	r2, [pc, #240]	; (8011260 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011170:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011172:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011176:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011178:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801117c:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801117e:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8011180:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011182:	fb0b 440c 	mla	r4, fp, ip, r4
 8011186:	44a1      	add	r9, r4
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011188:	f242 040b 	movw	r4, #8203	; 0x200b
 801118c:	fb04 f808 	mul.w	r8, r4, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011190:	4c34      	ldr	r4, [pc, #208]	; (8011264 <jpeg_idct_11x11+0x3dc>)
 8011192:	fb04 880e 	mla	r8, r4, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011196:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 801119a:	fb04 880c 	mla	r8, r4, ip, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801119e:	19d4      	adds	r4, r2, r7
 80111a0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80111a2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80111a6:	4446      	add	r6, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80111a8:	5d14      	ldrb	r4, [r2, r4]
 80111aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111ac:	5414      	strb	r4, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80111ae:	9a05      	ldr	r2, [sp, #20]
 80111b0:	1bd0      	subs	r0, r2, r7
 80111b2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80111b4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80111b8:	5c10      	ldrb	r0, [r2, r0]
 80111ba:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80111bc:	9a04      	ldr	r2, [sp, #16]
 80111be:	eb02 000a 	add.w	r0, r2, sl
 80111c2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80111c4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80111c8:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80111ca:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80111cc:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80111ce:	eba2 0a0a 	sub.w	sl, r2, sl
 80111d2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80111d4:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80111d8:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80111dc:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80111de:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80111e0:	1950      	adds	r0, r2, r5
 80111e2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80111e4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80111e8:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80111ea:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80111ec:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80111ee:	1b55      	subs	r5, r2, r5
 80111f0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80111f2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80111f6:	5d50      	ldrb	r0, [r2, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80111f8:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80111fa:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80111fc:	eb02 0009 	add.w	r0, r2, r9
 8011200:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011202:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011206:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011208:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801120a:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801120c:	eba2 0909 	sub.w	r9, r2, r9
 8011210:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011212:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011216:	f812 0009 	ldrb.w	r0, [r2, r9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801121a:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801121c:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801121e:	1990      	adds	r0, r2, r6
 8011220:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011222:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011226:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011228:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801122a:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801122c:	1b96      	subs	r6, r2, r6
 801122e:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011230:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011234:	5d90      	ldrb	r0, [r2, r6]
 8011236:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011238:	f645 00ad 	movw	r0, #22701	; 0x58ad
 801123c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801123e:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8011242:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011244:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8011248:	5cd3      	ldrb	r3, [r2, r3]
 801124a:	e00d      	b.n	8011268 <jpeg_idct_11x11+0x3e0>
 801124c:	ffffc5b4 	.word	0xffffc5b4
 8011250:	ffffcf91 	.word	0xffffcf91
 8011254:	ffffdb05 	.word	0xffffdb05
 8011258:	ffffd37d 	.word	0xffffd37d
 801125c:	ffffe276 	.word	0xffffe276
 8011260:	ffffc675 	.word	0xffffc675
 8011264:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 8011268:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 801126a:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 801126c:	9b02      	ldr	r3, [sp, #8]
 801126e:	3320      	adds	r3, #32
 8011270:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 8011272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011274:	4293      	cmp	r3, r2
 8011276:	f47f af00 	bne.w	801107a <jpeg_idct_11x11+0x1f2>
  }
}
 801127a:	b065      	add	sp, #404	; 0x194
 801127c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011280 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011284:	b0eb      	sub	sp, #428	; 0x1ac
 8011286:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011288:	f1a2 0902 	sub.w	r9, r2, #2
 801128c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801128e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011292:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011296:	1f0b      	subs	r3, r1, #4
 8011298:	9300      	str	r3, [sp, #0]
 801129a:	f102 030e 	add.w	r3, r2, #14
 801129e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 80112a0:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80112a2:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80112a4:	f641 388d 	movw	r8, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80112a8:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80112ac:	f640 0a5b 	movw	sl, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80112b0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80112b4:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80112b6:	f9b9 0040 	ldrsh.w	r0, [r9, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80112ba:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80112bc:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80112c0:	f9b9 5020 	ldrsh.w	r5, [r9, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80112c4:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80112c6:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80112ca:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 80112cc:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80112ce:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80112d0:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80112d2:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80112d6:	f9b9 c060 	ldrsh.w	ip, [r9, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80112da:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80112dc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80112e0:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80112e4:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 80112e6:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 80112e8:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80112ea:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 80112ee:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 80112f2:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 80112f4:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 80112f8:	eb07 010c 	add.w	r1, r7, ip
 80112fc:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 80112fe:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8011302:	1907      	adds	r7, r0, r4
    tmp12 = z4 - z1 - z2;
 8011304:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 8011308:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 801130a:	19f1      	adds	r1, r6, r7
    tmp12 = z4 - z1 - z2;
 801130c:	1b04      	subs	r4, r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801130e:	f9b9 c030 	ldrsh.w	ip, [r9, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 8011312:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8011314:	1bf1      	subs	r1, r6, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011316:	f9b9 7010 	ldrsh.w	r7, [r9, #16]
    tmp25 = tmp10 - tmp12;
 801131a:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 801131c:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 801131e:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011320:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011324:	f9b9 0070 	ldrsh.w	r0, [r9, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 8011328:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801132a:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 801132c:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801132e:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011332:	6a12      	ldr	r2, [r2, #32]
 8011334:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011336:	9a00      	ldr	r2, [sp, #0]
 8011338:	6e12      	ldr	r2, [r2, #96]	; 0x60
 801133a:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801133e:	9a00      	ldr	r2, [sp, #0]
 8011340:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011344:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011348:	49b6      	ldr	r1, [pc, #728]	; (8011624 <jpeg_idct_12x12+0x3a4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801134a:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801134c:	9a00      	ldr	r2, [sp, #0]
 801134e:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8011352:	197e      	adds	r6, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011354:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011356:	fb01 f00c 	mul.w	r0, r1, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801135a:	49b3      	ldr	r1, [pc, #716]	; (8011628 <jpeg_idct_12x12+0x3a8>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801135c:	eb02 0e06 	add.w	lr, r2, r6
 8011360:	fb08 fe0e 	mul.w	lr, r8, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011364:	fb0a ea06 	mla	sl, sl, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011368:	f640 06f7 	movw	r6, #2295	; 0x8f7
 801136c:	eb04 080a 	add.w	r8, r4, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011370:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011374:	fb06 8807 	mla	r8, r6, r7, r8
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011378:	18ae      	adds	r6, r5, r2
 801137a:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801137c:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801137e:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011380:	49aa      	ldr	r1, [pc, #680]	; (801162c <jpeg_idct_12x12+0x3ac>)
 8011382:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011386:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8011388:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801138c:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011390:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011392:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 8011396:	fb0a 4402 	mla	r4, sl, r2, r4
 801139a:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801139c:	49a4      	ldr	r1, [pc, #656]	; (8011630 <jpeg_idct_12x12+0x3b0>)
 801139e:	fb01 0007 	mla	r0, r1, r7, r0
 80113a2:	49a4      	ldr	r1, [pc, #656]	; (8011634 <jpeg_idct_12x12+0x3b4>)
 80113a4:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 80113a8:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80113aa:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80113ae:	f641 077e 	movw	r7, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80113b2:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80113b4:	eb02 0e05 	add.w	lr, r2, r5
 80113b8:	fb0c fe0e 	mul.w	lr, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80113bc:	fb01 e505 	mla	r5, r1, r5, lr

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80113c0:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80113c2:	fb07 e202 	mla	r2, r7, r2, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80113c6:	eb01 0708 	add.w	r7, r1, r8
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80113ca:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80113ce:	12ff      	asrs	r7, r7, #11
 80113d0:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80113d4:	ea4f 27e8 	mov.w	r7, r8, asr #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80113d8:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80113da:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80113de:	188f      	adds	r7, r1, r2
 80113e0:	12ff      	asrs	r7, r7, #11
 80113e2:	61df      	str	r7, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80113e4:	1a8f      	subs	r7, r1, r2
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80113e6:	9a05      	ldr	r2, [sp, #20]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80113e8:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80113ea:	4432      	add	r2, r6
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80113ec:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80113f0:	12d2      	asrs	r2, r2, #11
 80113f2:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80113f4:	9a05      	ldr	r2, [sp, #20]
 80113f6:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80113f8:	9a06      	ldr	r2, [sp, #24]
 80113fa:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80113fc:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80113fe:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011400:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011404:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011406:	9a06      	ldr	r2, [sp, #24]
 8011408:	1b14      	subs	r4, r2, r4
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801140a:	9a02      	ldr	r2, [sp, #8]
 801140c:	442a      	add	r2, r5
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801140e:	12e4      	asrs	r4, r4, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011410:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011412:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011416:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011418:	9a02      	ldr	r2, [sp, #8]
 801141a:	1b55      	subs	r5, r2, r5
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801141c:	9a04      	ldr	r2, [sp, #16]
 801141e:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011420:	12ed      	asrs	r5, r5, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011422:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011424:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011428:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801142c:	9a04      	ldr	r2, [sp, #16]
 801142e:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011430:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011432:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011434:	454a      	cmp	r2, r9
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011436:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801143a:	f47f af32 	bne.w	80112a2 <jpeg_idct_12x12+0x22>
 801143e:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 8011440:	aa0a      	add	r2, sp, #40	; 0x28
 8011442:	f1a3 0a04 	sub.w	sl, r3, #4
 8011446:	332c      	adds	r3, #44	; 0x2c
 8011448:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801144a:	f85a 3f04 	ldr.w	r3, [sl, #4]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801144e:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 8011452:	9974      	ldr	r1, [sp, #464]	; 0x1d0
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011454:	3220      	adds	r2, #32
    z2 = (INT32) wsptr[6];
 8011456:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 801145a:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 801145e:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 8011460:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011462:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 8011466:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 8011468:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 801146c:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011470:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 8011472:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011474:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011478:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801147c:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801147e:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8011482:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8011486:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 801148a:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 801148c:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8011490:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8011494:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 8011498:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 801149c:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 801149e:	1b0c      	subs	r4, r1, r4
    tmp25 = tmp10 - tmp12;
 80114a0:	eba6 030c 	sub.w	r3, r6, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80114a4:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z3 = (INT32) wsptr[5];
 80114a8:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp25 = tmp10 - tmp12;
 80114ac:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 80114ae:	1903      	adds	r3, r0, r4
    tmp20 = tmp10 + tmp12;
 80114b0:	eb06 070c 	add.w	r7, r6, ip
    tmp22 = tmp11 + tmp12;
 80114b4:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 80114b6:	1b03      	subs	r3, r0, r4
    z4 = (INT32) wsptr[7];
 80114b8:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 80114bc:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80114be:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80114c2:	eb05 0904 	add.w	r9, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80114c6:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80114ca:	4956      	ldr	r1, [pc, #344]	; (8011624 <jpeg_idct_12x12+0x3a4>)
 80114cc:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 80114ce:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 80114d2:	195e      	adds	r6, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80114d4:	eb04 0c06 	add.w	ip, r4, r6
 80114d8:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80114dc:	f640 0e5b 	movw	lr, #2139	; 0x85b
 80114e0:	fb0e c806 	mla	r8, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80114e4:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80114e8:	eb00 0e08 	add.w	lr, r0, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80114ec:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80114f0:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80114f4:	4b4c      	ldr	r3, [pc, #304]	; (8011628 <jpeg_idct_12x12+0x3a8>)
 80114f6:	fb03 f909 	mul.w	r9, r3, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80114fa:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 80114fe:	eb01 0609 	add.w	r6, r1, r9
 8011502:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011506:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801150a:	4446      	add	r6, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801150c:	f243 28c6 	movw	r8, #12998	; 0x32c6
 8011510:	fb08 0004 	mla	r0, r8, r4, r0
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011514:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011518:	4481      	add	r9, r0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801151a:	4845      	ldr	r0, [pc, #276]	; (8011630 <jpeg_idct_12x12+0x3b0>)
 801151c:	fb00 1103 	mla	r1, r0, r3, r1
 8011520:	4b44      	ldr	r3, [pc, #272]	; (8011634 <jpeg_idct_12x12+0x3b4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011522:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011524:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 8011528:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 801152c:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 801152e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011532:	4461      	add	r1, ip
    z2 -= z3;
 8011534:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011536:	4b40      	ldr	r3, [pc, #256]	; (8011638 <jpeg_idct_12x12+0x3b8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011538:	eb04 0c05 	add.w	ip, r4, r5
 801153c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011540:	f641 087e 	movw	r8, #6270	; 0x187e
 8011544:	fb08 c404 	mla	r4, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011548:	eb07 080e 	add.w	r8, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801154c:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011550:	fb03 c505 	mla	r5, r3, r5, ip
			     & RANGE_MASK];
 8011554:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011558:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 801155a:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801155e:	f81b c008 	ldrb.w	ip, [fp, r8]
 8011562:	f803 c000 	strb.w	ip, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011566:	9b00      	ldr	r3, [sp, #0]
 8011568:	f81b 7007 	ldrb.w	r7, [fp, r7]
 801156c:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801156e:	9b01      	ldr	r3, [sp, #4]
 8011570:	191f      	adds	r7, r3, r4
 8011572:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011574:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011578:	f81b 7007 	ldrb.w	r7, [fp, r7]
 801157c:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801157e:	9b01      	ldr	r3, [sp, #4]
 8011580:	eba3 0804 	sub.w	r8, r3, r4
			     & RANGE_MASK];
 8011584:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011588:	f81b 4008 	ldrb.w	r4, [fp, r8]
 801158c:	9b00      	ldr	r3, [sp, #0]
 801158e:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011590:	9b04      	ldr	r3, [sp, #16]
 8011592:	199c      	adds	r4, r3, r6
 8011594:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8011596:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801159a:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801159e:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80115a0:	9b04      	ldr	r3, [sp, #16]
 80115a2:	1b9e      	subs	r6, r3, r6
 80115a4:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80115a6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80115aa:	f81b 4006 	ldrb.w	r4, [fp, r6]
 80115ae:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80115b0:	9b05      	ldr	r3, [sp, #20]
 80115b2:	eb03 0409 	add.w	r4, r3, r9
 80115b6:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80115b8:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80115bc:	f81b 4004 	ldrb.w	r4, [fp, r4]
 80115c0:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80115c2:	9b05      	ldr	r3, [sp, #20]
 80115c4:	eba3 0009 	sub.w	r0, r3, r9
 80115c8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80115ca:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80115ce:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80115d2:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80115d4:	9b02      	ldr	r3, [sp, #8]
 80115d6:	1958      	adds	r0, r3, r5
 80115d8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80115da:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80115de:	f81b 0000 	ldrb.w	r0, [fp, r0]
 80115e2:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80115e4:	9b02      	ldr	r3, [sp, #8]
 80115e6:	1b5d      	subs	r5, r3, r5
 80115e8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80115ea:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80115ee:	f81b 0005 	ldrb.w	r0, [fp, r5]
 80115f2:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80115f4:	9b03      	ldr	r3, [sp, #12]
 80115f6:	1858      	adds	r0, r3, r1
 80115f8:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 80115fa:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80115fe:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8011602:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011604:	9b03      	ldr	r3, [sp, #12]
 8011606:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8011608:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801160c:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8011610:	9b00      	ldr	r3, [sp, #0]
 8011612:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8011614:	9b07      	ldr	r3, [sp, #28]
 8011616:	4553      	cmp	r3, sl
 8011618:	f47f af17 	bne.w	801144a <jpeg_idct_12x12+0x1ca>
  }
}
 801161c:	b06b      	add	sp, #428	; 0x1ac
 801161e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011622:	bf00      	nop
 8011624:	ffffeeaf 	.word	0xffffeeaf
 8011628:	ffffde8b 	.word	0xffffde8b
 801162c:	ffffd0b0 	.word	0xffffd0b0
 8011630:	ffffea5c 	.word	0xffffea5c
 8011634:	ffffc08c 	.word	0xffffc08c
 8011638:	ffffc4df 	.word	0xffffc4df

0801163c <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801163c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011640:	b0f9      	sub	sp, #484	; 0x1e4
 8011642:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 8011644:	f1a2 0b02 	sub.w	fp, r2, #2
 8011648:	930c      	str	r3, [sp, #48]	; 0x30
 801164a:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801164c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011650:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011654:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8011658:	aa10      	add	r2, sp, #64	; 0x40
 801165a:	930f      	str	r3, [sp, #60]	; 0x3c
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801165c:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011660:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011664:	f857 1f04 	ldr.w	r1, [r7, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011668:	f641 6802 	movw	r8, #7682	; 0x1e02
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801166c:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011670:	3204      	adds	r2, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011672:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011674:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011678:	f9bb 0060 	ldrsh.w	r0, [fp, #96]	; 0x60
    z1 <<= CONST_BITS;
 801167c:	035b      	lsls	r3, r3, #13
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801167e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011682:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011686:	435c      	muls	r4, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011688:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801168c:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801168e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011692:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 8011694:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 8011696:	1a09      	subs	r1, r1, r0
 8011698:	9104      	str	r1, [sp, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801169a:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801169e:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80116a0:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
 80116a4:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 80116a8:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 80116ac:	fb00 5004 	mla	r0, r0, r4, r5
 80116b0:	4408      	add	r0, r1
 80116b2:	9006      	str	r0, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80116b4:	f241 000c 	movw	r0, #4108	; 0x100c
 80116b8:	4360      	muls	r0, r4
 80116ba:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80116bc:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80116c0:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80116c2:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80116c6:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80116ca:	9007      	str	r0, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 80116cc:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80116d0:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 80116d2:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80116d4:	1a2d      	subs	r5, r5, r0
 80116d6:	440d      	add	r5, r1
 80116d8:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80116da:	4dd0      	ldr	r5, [pc, #832]	; (8011a1c <jpeg_idct_13x13+0x3e0>)
 80116dc:	fb05 0004 	mla	r0, r5, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80116e0:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80116e4:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80116e6:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80116e8:	9109      	str	r1, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 80116ea:	f640 51f2 	movw	r1, #3570	; 0xdf2
 80116ee:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80116f0:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 80116f4:	4371      	muls	r1, r6
 80116f6:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 80116f8:	48c9      	ldr	r0, [pc, #804]	; (8011a20 <jpeg_idct_13x13+0x3e4>)
 80116fa:	4360      	muls	r0, r4
 80116fc:	1ac0      	subs	r0, r0, r3
 80116fe:	1a40      	subs	r0, r0, r1
 8011700:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011702:	48c8      	ldr	r0, [pc, #800]	; (8011a24 <jpeg_idct_13x13+0x3e8>)
 8011704:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011708:	f9bb 0030 	ldrsh.w	r0, [fp, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801170c:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801170e:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011712:	930b      	str	r3, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011714:	6a3b      	ldr	r3, [r7, #32]
 8011716:	434b      	muls	r3, r1
 8011718:	9302      	str	r3, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801171a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801171c:	9902      	ldr	r1, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801171e:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011720:	f9bb 0050 	ldrsh.w	r0, [fp, #80]	; 0x50
 8011724:	4368      	muls	r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011726:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 801172a:	18ce      	adds	r6, r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801172c:	9001      	str	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801172e:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
 8011732:	4368      	muls	r0, r5
 8011734:	9003      	str	r0, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011736:	f642 2050 	movw	r0, #10832	; 0x2a50
 801173a:	4370      	muls	r0, r6
 801173c:	4601      	mov	r1, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801173e:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 8011742:	4428      	add	r0, r5
 8011744:	f242 553e 	movw	r5, #9534	; 0x253e
 8011748:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 801174a:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    tmp10 = tmp11 + tmp12 + tmp13 -
 801174e:	eb01 0e05 	add.w	lr, r1, r5
    tmp15 = z1 + z4;
 8011752:	eb06 0900 	add.w	r9, r6, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011756:	48b4      	ldr	r0, [pc, #720]	; (8011a28 <jpeg_idct_13x13+0x3ec>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011758:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 801175c:	44d6      	add	lr, sl
 801175e:	fb00 ee06 	mla	lr, r0, r6, lr
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011762:	9801      	ldr	r0, [sp, #4]
 8011764:	4eb1      	ldr	r6, [pc, #708]	; (8011a2c <jpeg_idct_13x13+0x3f0>)
 8011766:	1818      	adds	r0, r3, r0
 8011768:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801176a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 801176e:	fb06 0603 	mla	r6, r6, r3, r0
 8011772:	1871      	adds	r1, r6, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011774:	4eae      	ldr	r6, [pc, #696]	; (8011a30 <jpeg_idct_13x13+0x3f4>)
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011776:	910d      	str	r1, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011778:	9901      	ldr	r1, [sp, #4]
 801177a:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
    tmp11 += tmp14;
 801177e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011780:	1941      	adds	r1, r0, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011782:	f244 6094 	movw	r0, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011786:	910e      	str	r1, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011788:	9903      	ldr	r1, [sp, #12]
 801178a:	185d      	adds	r5, r3, r1
 801178c:	49a9      	ldr	r1, [pc, #676]	; (8011a34 <jpeg_idct_13x13+0x3f8>)
 801178e:	434d      	muls	r5, r1
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011790:	9903      	ldr	r1, [sp, #12]
    tmp11 += tmp14;
 8011792:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011794:	fb00 5501 	mla	r5, r0, r1, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011798:	9901      	ldr	r1, [sp, #4]
 801179a:	9803      	ldr	r0, [sp, #12]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801179c:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801179e:	eb01 0a00 	add.w	sl, r1, r0
 80117a2:	49a5      	ldr	r1, [pc, #660]	; (8011a38 <jpeg_idct_13x13+0x3fc>)
    tmp12 += tmp14;
 80117a4:	980e      	ldr	r0, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80117a6:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80117aa:	9902      	ldr	r1, [sp, #8]
    tmp12 += tmp14;
 80117ac:	4450      	add	r0, sl
    tmp13 += tmp14;
 80117ae:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 80117b0:	f640 25d5 	movw	r5, #2773	; 0xad5
 80117b4:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80117b8:	f640 2533 	movw	r5, #2611	; 0xa33
 80117bc:	fb05 9101 	mla	r1, r5, r1, r9
 80117c0:	4d9e      	ldr	r5, [pc, #632]	; (8011a3c <jpeg_idct_13x13+0x400>)
 80117c2:	fb05 1103 	mla	r1, r5, r3, r1
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 80117c6:	9d01      	ldr	r5, [sp, #4]
 80117c8:	1aeb      	subs	r3, r5, r3
 80117ca:	fb08 f803 	mul.w	r8, r8, r3
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80117ce:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 80117d2:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80117d4:	fb03 8805 	mla	r8, r3, r5, r8
 80117d8:	9d03      	ldr	r5, [sp, #12]
 80117da:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
 80117de:	fb03 8805 	mla	r8, r3, r5, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80117e2:	9b06      	ldr	r3, [sp, #24]
 80117e4:	4473      	add	r3, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80117e6:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80117e8:	12db      	asrs	r3, r3, #11
 80117ea:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80117ee:	9b06      	ldr	r3, [sp, #24]
 80117f0:	eba3 0e0e 	sub.w	lr, r3, lr
 80117f4:	ea4f 23ee 	mov.w	r3, lr, asr #11
 80117f8:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80117fc:	9b08      	ldr	r3, [sp, #32]
 80117fe:	4433      	add	r3, r6
 8011800:	12db      	asrs	r3, r3, #11
 8011802:	61d3      	str	r3, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011804:	9b08      	ldr	r3, [sp, #32]
 8011806:	1b9e      	subs	r6, r3, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011808:	9b07      	ldr	r3, [sp, #28]
 801180a:	4403      	add	r3, r0
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801180c:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801180e:	12db      	asrs	r3, r3, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011810:	f8c2 615c 	str.w	r6, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011814:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011816:	9b07      	ldr	r3, [sp, #28]
 8011818:	1a18      	subs	r0, r3, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801181a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801181c:	4453      	add	r3, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801181e:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011820:	12db      	asrs	r3, r3, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011822:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011826:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801182a:	eba3 0a0a 	sub.w	sl, r3, sl
 801182e:	ea4f 25ea 	mov.w	r5, sl, asr #11
 8011832:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011838:	440b      	add	r3, r1
 801183a:	12db      	asrs	r3, r3, #11
 801183c:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801183e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011840:	1a59      	subs	r1, r3, r1
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011844:	444b      	add	r3, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011846:	12c9      	asrs	r1, r1, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011848:	12db      	asrs	r3, r3, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801184a:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 801184e:	9905      	ldr	r1, [sp, #20]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011850:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011856:	eba3 0909 	sub.w	r9, r3, r9
 801185a:	ea4f 23e9 	mov.w	r3, r9, asr #11
 801185e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011862:	9b04      	ldr	r3, [sp, #16]
 8011864:	1b1c      	subs	r4, r3, r4
 8011866:	f642 5341 	movw	r3, #11585	; 0x2d41
 801186a:	fb03 1404 	mla	r4, r3, r4, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801186e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011870:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011872:	455b      	cmp	r3, fp
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011874:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011878:	f47f aef0 	bne.w	801165c <jpeg_idct_13x13+0x20>
 801187c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 801187e:	ac10      	add	r4, sp, #64	; 0x40
 8011880:	3b04      	subs	r3, #4
 8011882:	9303      	str	r3, [sp, #12]
 8011884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011886:	3330      	adds	r3, #48	; 0x30
 8011888:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801188a:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801188c:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8011890:	6920      	ldr	r0, [r4, #16]
    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011892:	f642 2b50 	movw	fp, #10832	; 0x2a50
    outptr = output_buf[ctr] + output_col;
 8011896:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801189a:	f641 6802 	movw	r8, #7682	; 0x1e02
    z4 = (INT32) wsptr[6];
 801189e:	69a1      	ldr	r1, [r4, #24]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80118a0:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 80118a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80118a4:	9303      	str	r3, [sp, #12]
 80118a6:	4613      	mov	r3, r2
 80118a8:	9a82      	ldr	r2, [sp, #520]	; 0x208
    z2 = (INT32) wsptr[2];
 80118aa:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 80118ae:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80118b0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80118b4:	3310      	adds	r3, #16
 80118b6:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 80118b8:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 80118ba:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80118bc:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 80118be:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80118c0:	f240 3119 	movw	r1, #793	; 0x319
 80118c4:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80118c6:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80118c8:	4341      	muls	r1, r0
 80118ca:	9802      	ldr	r0, [sp, #8]
 80118cc:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 80118d0:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 80118d4:	fb00 500e 	mla	r0, r0, lr, r5
 80118d8:	4408      	add	r0, r1
 80118da:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80118dc:	f241 000c 	movw	r0, #4108	; 0x100c
 80118e0:	fb00 f00e 	mul.w	r0, r0, lr
 80118e4:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80118e6:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80118ea:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 80118ec:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80118f0:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80118f4:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 80118f6:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 80118fa:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 80118fe:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011900:	1a2d      	subs	r5, r5, r0
 8011902:	440d      	add	r5, r1
 8011904:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011906:	4d45      	ldr	r5, [pc, #276]	; (8011a1c <jpeg_idct_13x13+0x3e0>)
 8011908:	fb05 000e 	mla	r0, r5, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801190c:	f242 553e 	movw	r5, #9534	; 0x253e
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011910:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011912:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011914:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011916:	f640 51f2 	movw	r1, #3570	; 0xdf2
 801191a:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 801191c:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8011920:	4371      	muls	r1, r6
 8011922:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011926:	483e      	ldr	r0, [pc, #248]	; (8011a20 <jpeg_idct_13x13+0x3e4>)
 8011928:	fb00 f00e 	mul.w	r0, r0, lr
 801192c:	1ac0      	subs	r0, r0, r3
 801192e:	1a40      	subs	r0, r0, r1
 8011930:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011932:	483c      	ldr	r0, [pc, #240]	; (8011a24 <jpeg_idct_13x13+0x3e8>)
 8011934:	fb00 330e 	mla	r3, r0, lr, r3
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011938:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801193c:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 801193e:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011942:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011944:	1808      	adds	r0, r1, r0
    z2 = (INT32) wsptr[3];
 8011946:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801194a:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 801194c:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011950:	18ce      	adds	r6, r1, r3
    tmp15 = z1 + z4;
 8011952:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011956:	4834      	ldr	r0, [pc, #208]	; (8011a28 <jpeg_idct_13x13+0x3ec>)
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011958:	fb0b fb06 	mul.w	fp, fp, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 801195c:	4e33      	ldr	r6, [pc, #204]	; (8011a2c <jpeg_idct_13x13+0x3f0>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801195e:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011962:	eb0b 0705 	add.w	r7, fp, r5
 8011966:	4457      	add	r7, sl
 8011968:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801196c:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011970:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011972:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8011976:	1818      	adds	r0, r3, r0
 8011978:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801197a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 801197e:	fb06 0603 	mla	r6, r6, r3, r0
 8011982:	44b3      	add	fp, r6
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011984:	4e2a      	ldr	r6, [pc, #168]	; (8011a30 <jpeg_idct_13x13+0x3f4>)
 8011986:	fb06 0007 	mla	r0, r6, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801198a:	f606 5611 	addw	r6, r6, #3345	; 0xd11
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801198e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011992:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011994:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8011998:	195d      	adds	r5, r3, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801199a:	900c      	str	r0, [sp, #48]	; 0x30
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801199c:	4375      	muls	r5, r6
    tmp11 += tmp14;
 801199e:	eb0b 0605 	add.w	r6, fp, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80119a2:	f244 6b94 	movw	fp, #18068	; 0x4694
 80119a6:	fb0b 5507 	mla	r5, fp, r7, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80119aa:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 80119ae:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80119b2:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80119b4:	eb07 0a00 	add.w	sl, r7, r0
 80119b8:	481f      	ldr	r0, [pc, #124]	; (8011a38 <jpeg_idct_13x13+0x3fc>)
 80119ba:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp14;
 80119be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80119c0:	4450      	add	r0, sl
    tmp13 += tmp14;
 80119c2:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 80119c4:	f640 25d5 	movw	r5, #2773	; 0xad5
 80119c8:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 80119cc:	f640 2533 	movw	r5, #2611	; 0xa33
 80119d0:	fb05 9101 	mla	r1, r5, r1, r9
 80119d4:	4d19      	ldr	r5, [pc, #100]	; (8011a3c <jpeg_idct_13x13+0x400>)
 80119d6:	fb05 1103 	mla	r1, r5, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 80119da:	1afb      	subs	r3, r7, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80119dc:	f854 5c04 	ldr.w	r5, [r4, #-4]
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 80119e0:	fb08 f803 	mul.w	r8, r8, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80119e4:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 80119e8:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80119ea:	fb03 8807 	mla	r8, r3, r7, r8
 80119ee:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80119f2:	9f82      	ldr	r7, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80119f4:	fb03 8805 	mla	r8, r3, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80119f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80119fa:	9b04      	ldr	r3, [sp, #16]
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80119fc:	44c1      	add	r9, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80119fe:	442b      	add	r3, r5
 8011a00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			     & RANGE_MASK];
 8011a02:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011a06:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011a0a:	55eb      	strb	r3, [r5, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011a0c:	9b04      	ldr	r3, [sp, #16]
 8011a0e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011a10:	1b5f      	subs	r7, r3, r5
			     & RANGE_MASK];
 8011a12:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011a16:	f81c 3007 	ldrb.w	r3, [ip, r7]
 8011a1a:	e011      	b.n	8011a40 <jpeg_idct_13x13+0x404>
 8011a1c:	ffffd7ee 	.word	0xffffd7ee
 8011a20:	fffffa8c 	.word	0xfffffa8c
 8011a24:	ffffe64b 	.word	0xffffe64b
 8011a28:	ffffbf5b 	.word	0xffffbf5b
 8011a2c:	fffff52b 	.word	0xfffff52b
 8011a30:	ffffcdb1 	.word	0xffffcdb1
 8011a34:	ffffdac2 	.word	0xffffdac2
 8011a38:	ffffeaf8 	.word	0xffffeaf8
 8011a3c:	fffff116 	.word	0xfffff116
 8011a40:	7313      	strb	r3, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011a42:	9b06      	ldr	r3, [sp, #24]
 8011a44:	4433      	add	r3, r6
			     & RANGE_MASK];
 8011a46:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011a4a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011a4e:	7053      	strb	r3, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011a50:	9b06      	ldr	r3, [sp, #24]
 8011a52:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8011a54:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011a58:	f81c 3006 	ldrb.w	r3, [ip, r6]
 8011a5c:	72d3      	strb	r3, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011a5e:	9b05      	ldr	r3, [sp, #20]
 8011a60:	4403      	add	r3, r0
			     & RANGE_MASK];
 8011a62:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011a66:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011a6a:	7093      	strb	r3, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011a6c:	9b05      	ldr	r3, [sp, #20]
 8011a6e:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 8011a70:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011a74:	f81c 3000 	ldrb.w	r3, [ip, r0]
 8011a78:	7293      	strb	r3, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011a7a:	9b08      	ldr	r3, [sp, #32]
 8011a7c:	4453      	add	r3, sl
			     & RANGE_MASK];
 8011a7e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011a82:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011a86:	70d3      	strb	r3, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011a88:	9b08      	ldr	r3, [sp, #32]
 8011a8a:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8011a8e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011a92:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8011a96:	7253      	strb	r3, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a9a:	440b      	add	r3, r1
			     & RANGE_MASK];
 8011a9c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011aa0:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011aa4:	7113      	strb	r3, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011aa8:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8011aaa:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011aae:	f81c 3001 	ldrb.w	r3, [ip, r1]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011ab2:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011ab6:	7213      	strb	r3, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011ab8:	9b07      	ldr	r3, [sp, #28]
 8011aba:	444b      	add	r3, r9
			     & RANGE_MASK];
 8011abc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011ac0:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011ac4:	7153      	strb	r3, [r2, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011ac6:	9b07      	ldr	r3, [sp, #28]
 8011ac8:	eba3 0909 	sub.w	r9, r3, r9
			     & RANGE_MASK];
 8011acc:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011ad0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8011ad4:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011ad6:	9b01      	ldr	r3, [sp, #4]
 8011ad8:	eba3 030e 	sub.w	r3, r3, lr
 8011adc:	434b      	muls	r3, r1
 8011ade:	9902      	ldr	r1, [sp, #8]
 8011ae0:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 8011ae4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8011ae8:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8011aec:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 8011aee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011af0:	9a03      	ldr	r2, [sp, #12]
 8011af2:	4293      	cmp	r3, r2
 8011af4:	f47f aec9 	bne.w	801188a <jpeg_idct_13x13+0x24e>
  }
}
 8011af8:	b079      	add	sp, #484	; 0x1e4
 8011afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011afe:	bf00      	nop

08011b00 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b04:	b0ff      	sub	sp, #508	; 0x1fc
 8011b06:	f1a2 0a02 	sub.w	sl, r2, #2
 8011b0a:	930a      	str	r3, [sp, #40]	; 0x28
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b0c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011b10:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8011b12:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011b16:	1f03      	subs	r3, r0, #4
 8011b18:	9301      	str	r3, [sp, #4]
 8011b1a:	f102 030e 	add.w	r3, r2, #14
 8011b1e:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8011b20:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b22:	9901      	ldr	r1, [sp, #4]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011b24:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b28:	f93a 4f02 	ldrsh.w	r4, [sl, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8011b2c:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b30:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011b34:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b36:	9101      	str	r1, [sp, #4]
 8011b38:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011b3a:	9a01      	ldr	r2, [sp, #4]
 8011b3c:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
 8011b40:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 8011b44:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b46:	9801      	ldr	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011b48:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011b4a:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011b4e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011b52:	fb01 f602 	mul.w	r6, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011b56:	f640 2112 	movw	r1, #2578	; 0xa12
 8011b5a:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011b5e:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8011b62:	19a7      	adds	r7, r4, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011b64:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011b66:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8011b68:	eb04 050c 	add.w	r5, r4, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011b6c:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011b70:	1ab6      	subs	r6, r6, r2
    tmp12 = z1 - z4;
 8011b72:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011b74:	eba4 0246 	sub.w	r2, r4, r6, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b78:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b7c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011b80:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b82:	9a01      	ldr	r2, [sp, #4]
 8011b84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8011b86:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b88:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011b8c:	48d2      	ldr	r0, [pc, #840]	; (8011ed8 <jpeg_idct_14x14+0x3d8>)
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b8e:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011b90:	1916      	adds	r6, r2, r4
 8011b92:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8011b96:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8011b9a:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011b9e:	fb00 6604 	mla	r6, r0, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8011ba2:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8011ba6:	4344      	muls	r4, r0
    tmp20 = tmp10 + tmp13;
 8011ba8:	eb07 000c 	add.w	r0, r7, ip
 8011bac:	9002      	str	r0, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8011bae:	eba7 000c 	sub.w	r0, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011bb2:	fb0e 4202 	mla	r2, lr, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011bb6:	f9ba 4010 	ldrsh.w	r4, [sl, #16]
    tmp26 = tmp10 - tmp13;
 8011bba:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8011bbc:	19a8      	adds	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011bbe:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8011bc2:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 8011bc4:	1ba8      	subs	r0, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011bc6:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8011bca:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8011bcc:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 8011bce:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011bd0:	f9ba 1070 	ldrsh.w	r1, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 8011bd4:	9006      	str	r0, [sp, #24]
    tmp24 = tmp12 - tmp15;
 8011bd6:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011bd8:	9a01      	ldr	r2, [sp, #4]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011bda:	48c0      	ldr	r0, [pc, #768]	; (8011edc <jpeg_idct_14x14+0x3dc>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011bdc:	6a12      	ldr	r2, [r2, #32]
 8011bde:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011be0:	9a01      	ldr	r2, [sp, #4]
 8011be2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8011be4:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011be6:	9a01      	ldr	r2, [sp, #4]
 8011be8:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011bec:	eb04 0907 	add.w	r9, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011bf0:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011bf2:	9a01      	ldr	r2, [sp, #4]
 8011bf4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp14 = z1 + z3;
 8011bf8:	eb04 0c06 	add.w	ip, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011bfc:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011bfe:	f642 21b7 	movw	r1, #10935	; 0x2ab7
 8011c02:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011c06:	f242 6152 	movw	r1, #9810	; 0x2652
 8011c0a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011c0e:	49b4      	ldr	r1, [pc, #720]	; (8011ee0 <jpeg_idct_14x14+0x3e0>)
 8011c10:	eb09 0e05 	add.w	lr, r9, r5
 8011c14:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8011c18:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011c1c:	f641 0114 	movw	r1, #6164	; 0x1814
 8011c20:	fb01 f10c 	mul.w	r1, r1, ip
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8011c24:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011c28:	9108      	str	r1, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011c2a:	fb00 1104 	mla	r1, r0, r4, r1
    z1    -= z2;
 8011c2e:	1be4      	subs	r4, r4, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011c30:	48ac      	ldr	r0, [pc, #688]	; (8011ee4 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8011c32:	fb08 f804 	mul.w	r8, r8, r4
 8011c36:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8011c3a:	4441      	add	r1, r8
 8011c3c:	9109      	str	r1, [sp, #36]	; 0x24
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8011c3e:	19b9      	adds	r1, r7, r6
 8011c40:	fb0c f101 	mul.w	r1, ip, r1
 8011c44:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011c48:	fb00 1c07 	mla	ip, r0, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8011c4c:	48a6      	ldr	r0, [pc, #664]	; (8011ee8 <jpeg_idct_14x14+0x3e8>)
 8011c4e:	fb00 1106 	mla	r1, r0, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8011c52:	44e1      	add	r9, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011c54:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011c58:	48a4      	ldr	r0, [pc, #656]	; (8011eec <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8011c5a:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011c5c:	1bf5      	subs	r5, r6, r7
 8011c5e:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011c62:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 8011c66:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011c68:	fb00 cc06 	mla	ip, r0, r6, ip
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 8011c6c:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011c6e:	9a02      	ldr	r2, [sp, #8]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8011c70:	00b6      	lsls	r6, r6, #2
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011c72:	9808      	ldr	r0, [sp, #32]
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011c74:	4472      	add	r2, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011c76:	4484      	add	ip, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011c78:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011c7c:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011c7e:	fb00 5507 	mla	r5, r0, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011c82:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011c86:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8011c88:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011c8a:	eba2 0e0e 	sub.w	lr, r2, lr
 8011c8e:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8011c92:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011c96:	9a04      	ldr	r2, [sp, #16]
 8011c98:	444a      	add	r2, r9
 8011c9a:	12d2      	asrs	r2, r2, #11
 8011c9c:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011c9e:	9a04      	ldr	r2, [sp, #16]
 8011ca0:	eba2 0909 	sub.w	r9, r2, r9
 8011ca4:	ea4f 22e9 	mov.w	r2, r9, asr #11
 8011ca8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011cac:	9a06      	ldr	r2, [sp, #24]
 8011cae:	440a      	add	r2, r1
 8011cb0:	12d2      	asrs	r2, r2, #11
 8011cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011cb4:	9a06      	ldr	r2, [sp, #24]
 8011cb6:	1a51      	subs	r1, r2, r1
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8011cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011cba:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011cbe:	12c9      	asrs	r1, r1, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8011cc0:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011cc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011cc4:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011cc8:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011ccc:	9a07      	ldr	r2, [sp, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011cce:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011cd0:	4462      	add	r2, ip
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8011cd2:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011cd6:	12d2      	asrs	r2, r2, #11
 8011cd8:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011cda:	9a07      	ldr	r2, [sp, #28]
 8011cdc:	eba2 0c0c 	sub.w	ip, r2, ip
 8011ce0:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8011ce4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011ce8:	9a05      	ldr	r2, [sp, #20]
 8011cea:	442a      	add	r2, r5
 8011cec:	12d2      	asrs	r2, r2, #11
 8011cee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011cf2:	9a05      	ldr	r2, [sp, #20]
 8011cf4:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011cf6:	9a03      	ldr	r2, [sp, #12]
 8011cf8:	440a      	add	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011cfa:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011cfc:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011cfe:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8011d02:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8011d06:	9a03      	ldr	r2, [sp, #12]
 8011d08:	1a52      	subs	r2, r2, r1
 8011d0a:	12d2      	asrs	r2, r2, #11
 8011d0c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d12:	4552      	cmp	r2, sl
 8011d14:	f47f af05 	bne.w	8011b22 <jpeg_idct_14x14+0x22>
 8011d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d1a:	3b04      	subs	r3, #4
 8011d1c:	9302      	str	r3, [sp, #8]
 8011d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d20:	3334      	adds	r3, #52	; 0x34
 8011d22:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8011d24:	ab0e      	add	r3, sp, #56	; 0x38
 8011d26:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011d28:	9b02      	ldr	r3, [sp, #8]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011d2a:	f640 2012 	movw	r0, #2578	; 0xa12
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011d2e:	f641 4437 	movw	r4, #7223	; 0x1c37

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011d32:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8011d36:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8011d3a:	920c      	str	r2, [sp, #48]	; 0x30
 8011d3c:	9302      	str	r3, [sp, #8]
 8011d3e:	4613      	mov	r3, r2
 8011d40:	9a88      	ldr	r2, [sp, #544]	; 0x220
 8011d42:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011d44:	9b01      	ldr	r3, [sp, #4]
    z4 = (INT32) wsptr[4];
 8011d46:	691e      	ldr	r6, [r3, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011d48:	6819      	ldr	r1, [r3, #0]
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011d4a:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011d4e:	fb00 f706 	mul.w	r7, r0, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011d52:	4861      	ldr	r0, [pc, #388]	; (8011ed8 <jpeg_idct_14x14+0x3d8>)
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011d54:	3110      	adds	r1, #16
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011d56:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011d58:	4366      	muls	r6, r4
    tmp10 = z1 + z2;
 8011d5a:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011d5e:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 8011d60:	ebc6 3441 	rsb	r4, r6, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011d64:	1b9b      	subs	r3, r3, r6
    tmp11 = z1 + z3;
 8011d66:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011d6a:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8011d6e:	005b      	lsls	r3, r3, #1
 8011d70:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8011d74:	9303      	str	r3, [sp, #12]
    z1 = (INT32) wsptr[2];
 8011d76:	9b01      	ldr	r3, [sp, #4]
 8011d78:	689e      	ldr	r6, [r3, #8]
    z2 = (INT32) wsptr[6];
 8011d7a:	699b      	ldr	r3, [r3, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011d7c:	18f1      	adds	r1, r6, r3
 8011d7e:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8011d80:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8011d84:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011d88:	fb00 1103 	mla	r1, r0, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8011d8c:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8011d90:	4343      	muls	r3, r0

    tmp20 = tmp10 + tmp13;
    tmp26 = tmp10 - tmp13;
 8011d92:	ebac 0007 	sub.w	r0, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8011d96:	fb0e 3306 	mla	r3, lr, r6, r3
    tmp20 = tmp10 + tmp13;
 8011d9a:	eb0c 0607 	add.w	r6, ip, r7
    tmp26 = tmp10 - tmp13;
 8011d9e:	9004      	str	r0, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8011da0:	1868      	adds	r0, r5, r1
    tmp25 = tmp11 - tmp14;
 8011da2:	1a69      	subs	r1, r5, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011da4:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8011da8:	9005      	str	r0, [sp, #20]
    tmp25 = tmp11 - tmp14;
 8011daa:	9106      	str	r1, [sp, #24]
    tmp22 = tmp12 + tmp15;
 8011dac:	18e1      	adds	r1, r4, r3
    tmp24 = tmp12 - tmp15;
 8011dae:	1ae3      	subs	r3, r4, r3
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011db0:	484a      	ldr	r0, [pc, #296]	; (8011edc <jpeg_idct_14x14+0x3dc>)
    tmp22 = tmp12 + tmp15;
 8011db2:	9107      	str	r1, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8011db4:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[3];
 8011db6:	9901      	ldr	r1, [sp, #4]
    z1 = (INT32) wsptr[1];
 8011db8:	9b01      	ldr	r3, [sp, #4]
    z2 = (INT32) wsptr[3];
 8011dba:	f8d1 800c 	ldr.w	r8, [r1, #12]
    z1 = (INT32) wsptr[1];
 8011dbe:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 8011dc0:	f8d1 c014 	ldr.w	ip, [r1, #20]
    z4 = (INT32) wsptr[7];
 8011dc4:	f8d1 901c 	ldr.w	r9, [r1, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011dc8:	eb03 0a08 	add.w	sl, r3, r8
 8011dcc:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8011dd0:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011dd4:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8011dd8:	f242 6152 	movw	r1, #9810	; 0x2652
 8011ddc:	fb01 f405 	mul.w	r4, r1, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8011de0:	493f      	ldr	r1, [pc, #252]	; (8011ee0 <jpeg_idct_14x14+0x3e0>)
 8011de2:	eb0a 0704 	add.w	r7, sl, r4
 8011de6:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 8011dea:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011dee:	f641 0114 	movw	r1, #6164	; 0x1814
 8011df2:	4369      	muls	r1, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011df4:	f46f 65a2 	mvn.w	r5, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8011df8:	9109      	str	r1, [sp, #36]	; 0x24
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8011dfa:	fb00 1103 	mla	r1, r0, r3, r1
    z1    -= z2;
 8011dfe:	eba3 0308 	sub.w	r3, r3, r8
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011e02:	4838      	ldr	r0, [pc, #224]	; (8011ee4 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011e04:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011e08:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8011e0c:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011e10:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 8011e12:	4471      	add	r1, lr
 8011e14:	910a      	str	r1, [sp, #40]	; 0x28
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8011e16:	eb08 010c 	add.w	r1, r8, ip
 8011e1a:	4369      	muls	r1, r5
 8011e1c:	eba1 3149 	sub.w	r1, r1, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011e20:	fb00 1508 	mla	r5, r0, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011e24:	4830      	ldr	r0, [pc, #192]	; (8011ee8 <jpeg_idct_14x14+0x3e8>)
 8011e26:	fb00 110c 	mla	r1, r0, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8011e2a:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011e2c:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011e30:	482e      	ldr	r0, [pc, #184]	; (8011eec <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011e32:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8011e34:	ebac 0408 	sub.w	r4, ip, r8
 8011e38:	436c      	muls	r4, r5
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8011e3a:	910b      	str	r1, [sp, #44]	; 0x2c
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011e3c:	f241 5199 	movw	r1, #5529	; 0x1599
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011e40:	eb04 3549 	add.w	r5, r4, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8011e44:	eb03 3949 	add.w	r9, r3, r9, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011e48:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011e4a:	fb00 550c 	mla	r5, r0, ip, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011e4e:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011e50:	9809      	ldr	r0, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8011e52:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011e56:	fb01 4408 	mla	r4, r1, r8, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011e5a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8011e5e:	4405      	add	r5, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011e60:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011e64:	9988      	ldr	r1, [sp, #544]	; 0x220
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8011e66:	4474      	add	r4, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011e68:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011e6a:	5443      	strb	r3, [r0, r1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011e6c:	f81b 3006 	ldrb.w	r3, [fp, r6]
 8011e70:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011e72:	9b05      	ldr	r3, [sp, #20]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011e76:	4453      	add	r3, sl
			     & RANGE_MASK];
 8011e78:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011e7c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011e80:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011e82:	9b05      	ldr	r3, [sp, #20]
 8011e84:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8011e88:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011e8c:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8011e90:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011e92:	9b07      	ldr	r3, [sp, #28]
 8011e94:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011e96:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011e9a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011e9e:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011ea0:	9b07      	ldr	r3, [sp, #28]
 8011ea2:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011ea4:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011ea8:	f81b 3001 	ldrb.w	r3, [fp, r1]
 8011eac:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011eae:	9b03      	ldr	r3, [sp, #12]
 8011eb0:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011eb2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011eb6:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011eba:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011ebc:	9b03      	ldr	r3, [sp, #12]
 8011ebe:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011ec2:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011ec6:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011eca:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011ecc:	9b08      	ldr	r3, [sp, #32]
 8011ece:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011ed0:	f3c3 4389 	ubfx	r3, r3, #18, #10
 8011ed4:	e00c      	b.n	8011ef0 <jpeg_idct_14x14+0x3f0>
 8011ed6:	bf00      	nop
 8011ed8:	ffffc8fc 	.word	0xffffc8fc
 8011edc:	ffffde0b 	.word	0xffffde0b
 8011ee0:	ffffdbf0 	.word	0xffffdbf0
 8011ee4:	fffff26e 	.word	0xfffff26e
 8011ee8:	ffffb409 	.word	0xffffb409
 8011eec:	ffffc9e6 	.word	0xffffc9e6
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011ef0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011ef4:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011ef6:	9b08      	ldr	r3, [sp, #32]
 8011ef8:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011efa:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011efe:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8011f02:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011f04:	9b06      	ldr	r3, [sp, #24]
 8011f06:	4423      	add	r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011f08:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011f0c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011f10:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011f12:	9b06      	ldr	r3, [sp, #24]
 8011f14:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011f16:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011f1a:	f81b 3004 	ldrb.w	r3, [fp, r4]
 8011f1e:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011f20:	9b04      	ldr	r3, [sp, #16]
 8011f22:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f24:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011f26:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8011f2a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8011f2e:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011f30:	9b04      	ldr	r3, [sp, #16]
 8011f32:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011f34:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8011f38:	f81b 3001 	ldrb.w	r3, [fp, r1]
 8011f3c:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 8011f3e:	9b01      	ldr	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 8011f40:	9a02      	ldr	r2, [sp, #8]
    wsptr += 8;		/* advance pointer to next row */
 8011f42:	3320      	adds	r3, #32
 8011f44:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 8011f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	f47f aeed 	bne.w	8011d28 <jpeg_idct_14x14+0x228>
  }
}
 8011f4e:	b07f      	add	sp, #508	; 0x1fc
 8011f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f54 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f58:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8011f5c:	f1a2 0b02 	sub.w	fp, r2, #2
 8011f60:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011f62:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011f66:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8011f68:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011f6c:	1f03      	subs	r3, r0, #4
 8011f6e:	9300      	str	r3, [sp, #0]
 8011f70:	f102 030e 	add.w	r3, r2, #14
 8011f74:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8011f76:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011f78:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011f7a:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011f7e:	f93b 5f02 	ldrsh.w	r5, [fp, #2]!
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8011f82:	f241 0971 	movw	r9, #4209	; 0x1071
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011f86:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8011f8a:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011f8e:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011f92:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011f94:	9100      	str	r1, [sp, #0]
 8011f96:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011f98:	9a00      	ldr	r2, [sp, #0]
 8011f9a:	f9bb 1020 	ldrsh.w	r1, [fp, #32]
 8011f9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8011fa0:	036d      	lsls	r5, r5, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011fa2:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011fa4:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011fa6:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011fa8:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011fac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011fb0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8011fb4:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011fb6:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011fba:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011fbe:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8011fc0:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8011fc4:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011fc8:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8011fcc:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 8011fce:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8011fd2:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011fd4:	eba4 040c 	sub.w	r4, r4, ip
 8011fd8:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 8011fdc:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 8011fde:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8011fe0:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8011fe4:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8011fe6:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011fea:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 8011fee:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8011ff2:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011ff6:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8011ff8:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8011ffc:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8011ffe:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 8012002:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012004:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012006:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801200a:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801200e:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012010:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8012012:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012016:	443c      	add	r4, r7
 8012018:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 801201c:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012020:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012024:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8012026:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012028:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801202a:	f641 114c 	movw	r1, #6476	; 0x194c
 801202e:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8012030:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8012034:	4417      	add	r7, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8012036:	4369      	muls	r1, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 8012038:	1ab2      	subs	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801203a:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 801203e:	1878      	adds	r0, r7, r1
    tmp24 = tmp13 - tmp10 + tmp11;
 8012040:	440a      	add	r2, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 8012042:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8012044:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8012046:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 801204a:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801204c:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp11 += tmp11;
 8012050:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8012052:	9908      	ldr	r1, [sp, #32]
 8012054:	9a01      	ldr	r2, [sp, #4]
 8012056:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012058:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801205c:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801205e:	9a00      	ldr	r2, [sp, #0]
 8012060:	6a12      	ldr	r2, [r2, #32]
 8012062:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012064:	9900      	ldr	r1, [sp, #0]
 8012066:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8012068:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801206a:	9900      	ldr	r1, [sp, #0]
 801206c:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012070:	9800      	ldr	r0, [sp, #0]
 8012072:	f9bb e070 	ldrsh.w	lr, [fp, #112]	; 0x70
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012076:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012078:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801207c:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012080:	48d2      	ldr	r0, [pc, #840]	; (80123cc <jpeg_idct_15x15+0x478>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012082:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012086:	434e      	muls	r6, r1
    tmp13 = z2 - z4;
 8012088:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801208c:	1917      	adds	r7, r2, r4
 801208e:	fb0c f707 	mul.w	r7, ip, r7
    z2 = z1 - z4;
 8012092:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012096:	fb09 7902 	mla	r9, r9, r2, r7
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801209a:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801209e:	48cc      	ldr	r0, [pc, #816]	; (80123d0 <jpeg_idct_15x15+0x47c>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 80120a0:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80120a4:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 80120a6:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80120aa:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 80120ac:	48c9      	ldr	r0, [pc, #804]	; (80123d4 <jpeg_idct_15x15+0x480>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80120ae:	fb08 480e 	mla	r8, r8, lr, r4
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80120b2:	fb01 fc0c 	mul.w	ip, r1, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80120b6:	eb02 010e 	add.w	r1, r2, lr
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 80120ba:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80120bc:	f200 7071 	addw	r0, r0, #1905	; 0x771
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80120c0:	ebac 0c06 	sub.w	ip, ip, r6
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80120c4:	fb00 4402 	mla	r4, r0, r2, r4
 80120c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80120ca:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80120ce:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80120d0:	f241 2068 	movw	r0, #4712	; 0x1268
 80120d4:	4341      	muls	r1, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 80120d6:	f640 7039 	movw	r0, #3897	; 0xf39
 80120da:	fb00 1202 	mla	r2, r0, r2, r1
 80120de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80120e0:	1b92      	subs	r2, r2, r6
 80120e2:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 80120e4:	48bc      	ldr	r0, [pc, #752]	; (80123d8 <jpeg_idct_15x15+0x484>)
 80120e6:	fb00 110e 	mla	r1, r0, lr, r1
 80120ea:	4431      	add	r1, r6
 80120ec:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80120ee:	9902      	ldr	r1, [sp, #8]
 80120f0:	4441      	add	r1, r8
 80120f2:	12c9      	asrs	r1, r1, #11
 80120f4:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80120f8:	9902      	ldr	r1, [sp, #8]
 80120fa:	eba1 0808 	sub.w	r8, r1, r8
 80120fe:	ea4f 21e8 	mov.w	r1, r8, asr #11
 8012102:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012106:	9906      	ldr	r1, [sp, #24]
 8012108:	4449      	add	r1, r9
 801210a:	12c9      	asrs	r1, r1, #11
 801210c:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801210e:	9906      	ldr	r1, [sp, #24]
 8012110:	eba1 0909 	sub.w	r9, r1, r9
 8012114:	ea4f 21e9 	mov.w	r1, r9, asr #11
 8012118:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801211c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801211e:	4461      	add	r1, ip
 8012120:	12c9      	asrs	r1, r1, #11
 8012122:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012126:	eba1 0c0c 	sub.w	ip, r1, ip
 801212a:	ea4f 21ec 	mov.w	r1, ip, asr #11
 801212e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012132:	9903      	ldr	r1, [sp, #12]
 8012134:	4411      	add	r1, r2
 8012136:	12c9      	asrs	r1, r1, #11
 8012138:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801213a:	9903      	ldr	r1, [sp, #12]
 801213c:	1a8a      	subs	r2, r1, r2
 801213e:	12d2      	asrs	r2, r2, #11
 8012140:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012144:	9a07      	ldr	r2, [sp, #28]
 8012146:	443a      	add	r2, r7
 8012148:	12d2      	asrs	r2, r2, #11
 801214a:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801214c:	9a07      	ldr	r2, [sp, #28]
 801214e:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012150:	9a04      	ldr	r2, [sp, #16]
 8012152:	442a      	add	r2, r5
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012154:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012156:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012158:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801215c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012160:	9a04      	ldr	r2, [sp, #16]
 8012162:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012164:	9a05      	ldr	r2, [sp, #20]
 8012166:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012168:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801216a:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801216c:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012170:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012174:	9a05      	ldr	r2, [sp, #20]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8012176:	9908      	ldr	r1, [sp, #32]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012178:	1b14      	subs	r4, r2, r4
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801217a:	9a01      	ldr	r2, [sp, #4]
 801217c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012180:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8012182:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012184:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8012188:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801218c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801218e:	455a      	cmp	r2, fp
 8012190:	f47f aef2 	bne.w	8011f78 <jpeg_idct_15x15+0x24>
 8012194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012196:	f1a3 0904 	sub.w	r9, r3, #4
 801219a:	3338      	adds	r3, #56	; 0x38
 801219c:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 801219e:	ab0e      	add	r3, sp, #56	; 0x38
 80121a0:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80121a2:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 80121a6:	f640 51fc 	movw	r1, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 80121aa:	9a90      	ldr	r2, [sp, #576]	; 0x240
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 80121ac:	f44f 74bb 	mov.w	r4, #374	; 0x176
    outptr = output_buf[ctr] + output_col;
 80121b0:	930c      	str	r3, [sp, #48]	; 0x30
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80121b2:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 80121b6:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80121b8:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80121ba:	f241 0871 	movw	r8, #4209	; 0x1071
    z2 = (INT32) wsptr[2];
 80121be:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 80121c0:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80121c2:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 80121c4:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80121c6:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 80121c8:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 80121cc:	f242 419d 	movw	r1, #9373	; 0x249d
 80121d0:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 80121d2:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 80121d6:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 80121da:	eba2 020c 	sub.w	r2, r2, ip
 80121de:	0052      	lsls	r2, r2, #1
 80121e0:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 80121e4:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 80121e6:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80121e8:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 80121ec:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 80121ee:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 80121f2:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 80121f6:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 80121f8:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80121fc:	1a8a      	subs	r2, r1, r2
 80121fe:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 8012200:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8012204:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012208:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 801220a:	9402      	str	r4, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801220c:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012210:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012212:	f241 1282 	movw	r2, #4482	; 0x1182
 8012216:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8012218:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801221c:	440a      	add	r2, r1
 801221e:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8012222:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012226:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 8012228:	9404      	str	r4, [sp, #16]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801222a:	4c68      	ldr	r4, [pc, #416]	; (80123cc <jpeg_idct_15x15+0x478>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801222c:	9205      	str	r2, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801222e:	f641 124c 	movw	r2, #6476	; 0x194c
 8012232:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8012234:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8012238:	4401      	add	r1, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801223a:	4372      	muls	r2, r6
    tmp24 = tmp13 - tmp10 + tmp11;
 801223c:	1a38      	subs	r0, r7, r0
    tmp21 = tmp12 + tmp10 + tmp11;
 801223e:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 8012240:	1882      	adds	r2, r0, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 8012242:	9106      	str	r1, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8012244:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8012246:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    z2 = (INT32) wsptr[3];
 801224a:	9900      	ldr	r1, [sp, #0]
    tmp11 += tmp11;
 801224c:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 801224e:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z2 = (INT32) wsptr[3];
 8012252:	68cf      	ldr	r7, [r1, #12]
    tmp11 += tmp11;
 8012254:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8012256:	9808      	ldr	r0, [sp, #32]
 8012258:	9a01      	ldr	r2, [sp, #4]
 801225a:	eb02 0b00 	add.w	fp, r2, r0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 801225e:	6948      	ldr	r0, [r1, #20]
 8012260:	f242 7131 	movw	r1, #10033	; 0x2731
    z1 = (INT32) wsptr[1];
 8012264:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012266:	fb01 fc00 	mul.w	ip, r1, r0
    z4 = (INT32) wsptr[7];
 801226a:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 801226c:	6852      	ldr	r2, [r2, #4]
    z4 = (INT32) wsptr[7];
 801226e:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 8012272:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012276:	1950      	adds	r0, r2, r5
 8012278:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801227a:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801227e:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012282:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 8012286:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801228a:	4c54      	ldr	r4, [pc, #336]	; (80123dc <jpeg_idct_15x15+0x488>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801228c:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801228e:	4850      	ldr	r0, [pc, #320]	; (80123d0 <jpeg_idct_15x15+0x47c>)
 8012290:	4378      	muls	r0, r7
 8012292:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012294:	484f      	ldr	r0, [pc, #316]	; (80123d4 <jpeg_idct_15x15+0x480>)
 8012296:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012298:	f642 5002 	movw	r0, #11522	; 0x2d02
 801229c:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80122a0:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 80122a2:	f640 7139 	movw	r1, #3897	; 0xf39
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80122a6:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80122aa:	fb04 0002 	mla	r0, r4, r2, r0
 80122ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80122b0:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80122b2:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80122b6:	4420      	add	r0, r4
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80122b8:	f241 2468 	movw	r4, #4712	; 0x1268
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 80122bc:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80122be:	eb02 000e 	add.w	r0, r2, lr
 80122c2:	4360      	muls	r0, r4
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 80122c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80122c6:	fb01 0202 	mla	r2, r1, r2, r0
 80122ca:	eba2 020c 	sub.w	r2, r2, ip
 80122ce:	4422      	add	r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 80122d0:	4c41      	ldr	r4, [pc, #260]	; (80123d8 <jpeg_idct_15x15+0x484>)
 80122d2:	fb04 000e 	mla	r0, r4, lr, r0
 80122d6:	4460      	add	r0, ip
 80122d8:	4407      	add	r7, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80122da:	9802      	ldr	r0, [sp, #8]
 80122dc:	4430      	add	r0, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80122de:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80122e2:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80122e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80122e8:	9990      	ldr	r1, [sp, #576]	; 0x240
 80122ea:	5460      	strb	r0, [r4, r1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80122ec:	9902      	ldr	r1, [sp, #8]
 80122ee:	1b8e      	subs	r6, r1, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80122f0:	9906      	ldr	r1, [sp, #24]
			     & RANGE_MASK];
 80122f2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80122f6:	f81a 0006 	ldrb.w	r0, [sl, r6]
 80122fa:	7398      	strb	r0, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80122fc:	eb01 0008 	add.w	r0, r1, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012300:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 8012304:	f3c0 4089 	ubfx	r0, r0, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012308:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801230c:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012310:	7058      	strb	r0, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012312:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8012316:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012318:	eb0b 0105 	add.w	r1, fp, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801231c:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 8012320:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012324:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012328:	f81a 1001 	ldrb.w	r1, [sl, r1]
 801232c:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801232e:	f81a 100b 	ldrb.w	r1, [sl, fp]
 8012332:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012334:	9903      	ldr	r1, [sp, #12]
 8012336:	4411      	add	r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012338:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801233c:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8012340:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012342:	9903      	ldr	r1, [sp, #12]
 8012344:	1a8a      	subs	r2, r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012346:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8012348:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801234c:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012350:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012352:	9a07      	ldr	r2, [sp, #28]
 8012354:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012356:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801235a:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801235e:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012360:	9a07      	ldr	r2, [sp, #28]
 8012362:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012364:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012368:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801236c:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801236e:	9a04      	ldr	r2, [sp, #16]
 8012370:	443a      	add	r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012372:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012376:	f81a 2002 	ldrb.w	r2, [sl, r2]
 801237a:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801237c:	9a04      	ldr	r2, [sp, #16]
 801237e:	1bd7      	subs	r7, r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012380:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012384:	f81a 2007 	ldrb.w	r2, [sl, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012388:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801238a:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801238c:	9a05      	ldr	r2, [sp, #20]
 801238e:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012390:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012394:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012398:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801239a:	9a05      	ldr	r2, [sp, #20]
 801239c:	1a50      	subs	r0, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801239e:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80123a0:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80123a4:	f81a 2000 	ldrb.w	r2, [sl, r0]
 80123a8:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80123aa:	9a01      	ldr	r2, [sp, #4]
 80123ac:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80123b0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 80123b4:	f81a 2002 	ldrb.w	r2, [sl, r2]
 80123b8:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 80123ba:	9b00      	ldr	r3, [sp, #0]
 80123bc:	3320      	adds	r3, #32
 80123be:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 80123c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123c2:	454b      	cmp	r3, r9
 80123c4:	f47f aeed 	bne.w	80121a2 <jpeg_idct_15x15+0x24e>
 80123c8:	e00a      	b.n	80123e0 <jpeg_idct_15x15+0x48c>
 80123ca:	bf00      	nop
 80123cc:	ffffba5c 	.word	0xffffba5c
 80123d0:	ffffe566 	.word	0xffffe566
 80123d4:	ffffd4f6 	.word	0xffffd4f6
 80123d8:	ffffe42f 	.word	0xffffe42f
 80123dc:	ffffdc67 	.word	0xffffdc67
  }
}
 80123e0:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 80123e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080123e8 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80123e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ec:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80123f0:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80123f2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80123f6:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80123fa:	1e93      	subs	r3, r2, #2
 80123fc:	9300      	str	r3, [sp, #0]
 80123fe:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8012400:	f1a3 0904 	sub.w	r9, r3, #4
 8012404:	f102 030e 	add.w	r3, r2, #14
 8012408:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 801240a:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801240c:	9900      	ldr	r1, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801240e:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012412:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012416:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801241a:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801241e:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012420:	9100      	str	r1, [sp, #0]
 8012422:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8012426:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012428:	9900      	ldr	r1, [sp, #0]
 801242a:	f9b1 0040 	ldrsh.w	r0, [r1, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 801242e:	0352      	lsls	r2, r2, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012430:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 8012434:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012438:	4341      	muls	r1, r0
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801243a:	f642 10cf 	movw	r0, #10703	; 0x29cf
 801243e:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012440:	4361      	muls	r1, r4
    tmp10 = tmp0 + tmp1;
 8012442:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8012444:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8012446:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8012448:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801244c:	9900      	ldr	r1, [sp, #0]
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801244e:	4ad6      	ldr	r2, [pc, #856]	; (80127a8 <jpeg_idct_16x16+0x3c0>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012450:	f9b1 4020 	ldrsh.w	r4, [r1, #32]
 8012454:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8012458:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801245c:	9900      	ldr	r1, [sp, #0]
 801245e:	f9b1 4060 	ldrsh.w	r4, [r1, #96]	; 0x60
 8012462:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8012466:	4361      	muls	r1, r4
    z3 = z1 - z2;
 8012468:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801246c:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012470:	f642 4563 	movw	r5, #11363	; 0x2c63
 8012474:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012476:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801247a:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801247e:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012482:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012486:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801248a:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 801248e:	eb07 020c 	add.w	r2, r7, ip
 8012492:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012494:	eba7 020c 	sub.w	r2, r7, ip
 8012498:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 801249a:	1972      	adds	r2, r6, r5
 801249c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 801249e:	1b72      	subs	r2, r6, r5
 80124a0:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 80124a2:	eb0b 0204 	add.w	r2, fp, r4
 80124a6:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 80124a8:	ebab 0204 	sub.w	r2, fp, r4
 80124ac:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80124ae:	1842      	adds	r2, r0, r1
 80124b0:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80124b2:	1a42      	subs	r2, r0, r1
 80124b4:	9208      	str	r2, [sp, #32]

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80124b6:	9a00      	ldr	r2, [sp, #0]
 80124b8:	f9b2 1010 	ldrsh.w	r1, [r2, #16]
 80124bc:	f8d9 2020 	ldr.w	r2, [r9, #32]
 80124c0:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80124c2:	9a00      	ldr	r2, [sp, #0]
 80124c4:	f9b2 0030 	ldrsh.w	r0, [r2, #48]	; 0x30
 80124c8:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 80124cc:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80124ce:	9800      	ldr	r0, [sp, #0]
 80124d0:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80124d4:	188e      	adds	r6, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80124d6:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80124da:	eba1 0b02 	sub.w	fp, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80124de:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80124e0:	9800      	ldr	r0, [sp, #0]
 80124e2:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	; 0x70
    tmp11 = z1 + z3;
 80124e6:	194f      	adds	r7, r1, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80124e8:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0
 80124ec:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80124ee:	f642 344e 	movw	r4, #11086	; 0x2b4e
 80124f2:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80124f4:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80124f8:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80124fc:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012500:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012504:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012508:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801250c:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012510:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012514:	f241 5455 	movw	r4, #5461	; 0x1555
 8012518:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 801251a:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 801251e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012520:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012524:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012526:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 801252a:	4ca0      	ldr	r4, [pc, #640]	; (80127ac <jpeg_idct_16x16+0x3c4>)
 801252c:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012530:	4f9f      	ldr	r7, [pc, #636]	; (80127b0 <jpeg_idct_16x16+0x3c8>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012532:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012534:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012536:	4464      	add	r4, ip
 8012538:	445c      	add	r4, fp
 801253a:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801253e:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012540:	4f9c      	ldr	r7, [pc, #624]	; (80127b4 <jpeg_idct_16x16+0x3cc>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012542:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012544:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8012548:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801254a:	f240 214d 	movw	r1, #589	; 0x24d
 801254e:	fb01 4102 	mla	r1, r1, r2, r4
 8012552:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012554:	4998      	ldr	r1, [pc, #608]	; (80127b8 <jpeg_idct_16x16+0x3d0>)
 8012556:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801255a:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801255c:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801255e:	f642 5a09 	movw	sl, #11529	; 0x2d09
 8012562:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012566:	fb07 1a05 	mla	sl, r7, r5, r1
 801256a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801256c:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801256e:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012572:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8012576:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012578:	4990      	ldr	r1, [pc, #576]	; (80127bc <jpeg_idct_16x16+0x3d4>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801257a:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801257c:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012580:	4351      	muls	r1, r2
    tmp1  += z1;
 8012582:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012584:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012588:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801258c:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801258e:	498c      	ldr	r1, [pc, #560]	; (80127c0 <jpeg_idct_16x16+0x3d8>)
 8012590:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012592:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8012596:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012598:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801259c:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801259e:	eb05 0b00 	add.w	fp, r5, r0
 80125a2:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80125a4:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80125a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80125a8:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80125ac:	f640 5123 	movw	r1, #3363	; 0xd23
 80125b0:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80125b2:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 80125b4:	445c      	add	r4, fp
    tmp3  += z2;
 80125b6:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80125b8:	4429      	add	r1, r5
    tmp10 += z2;
 80125ba:	4484      	add	ip, r0
    tmp11 += z2;
 80125bc:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80125be:	12c9      	asrs	r1, r1, #11
 80125c0:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80125c4:	9901      	ldr	r1, [sp, #4]
 80125c6:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80125c8:	9903      	ldr	r1, [sp, #12]
 80125ca:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80125cc:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80125ce:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80125d0:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80125d4:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80125d6:	9903      	ldr	r1, [sp, #12]
 80125d8:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80125da:	9905      	ldr	r1, [sp, #20]
 80125dc:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80125de:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80125e0:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80125e2:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80125e6:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80125e8:	9905      	ldr	r1, [sp, #20]
 80125ea:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80125ec:	9907      	ldr	r1, [sp, #28]
 80125ee:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80125f0:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80125f2:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80125f4:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80125f8:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 80125fa:	9907      	ldr	r1, [sp, #28]
 80125fc:	eba1 0e0e 	sub.w	lr, r1, lr
 8012600:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8012604:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8012608:	9908      	ldr	r1, [sp, #32]
 801260a:	4461      	add	r1, ip
 801260c:	12c9      	asrs	r1, r1, #11
 801260e:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8012610:	9908      	ldr	r1, [sp, #32]
 8012612:	eba1 0c0c 	sub.w	ip, r1, ip
 8012616:	ea4f 21ec 	mov.w	r1, ip, asr #11
 801261a:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 801261e:	9906      	ldr	r1, [sp, #24]
 8012620:	4401      	add	r1, r0
 8012622:	12c9      	asrs	r1, r1, #11
 8012624:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012628:	9906      	ldr	r1, [sp, #24]
 801262a:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801262c:	9904      	ldr	r1, [sp, #16]
 801262e:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012630:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012632:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012634:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012638:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801263c:	9904      	ldr	r1, [sp, #16]
 801263e:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012640:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012642:	12d2      	asrs	r2, r2, #11
 8012644:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012648:	9a02      	ldr	r2, [sp, #8]
 801264a:	440a      	add	r2, r1
 801264c:	12d2      	asrs	r2, r2, #11
 801264e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012652:	9a02      	ldr	r2, [sp, #8]
 8012654:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012656:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012658:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801265a:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801265c:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801265e:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012662:	f47f aed3 	bne.w	801240c <jpeg_idct_16x16+0x24>
 8012666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8012668:	ad0e      	add	r5, sp, #56	; 0x38
 801266a:	3b04      	subs	r3, #4
 801266c:	9300      	str	r3, [sp, #0]
 801266e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012670:	333c      	adds	r3, #60	; 0x3c
 8012672:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012674:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012676:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801267a:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 801267e:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8012682:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012686:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 801268a:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801268e:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8012692:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012694:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8012696:	9300      	str	r3, [sp, #0]
 8012698:	4613      	mov	r3, r2
 801269a:	9a98      	ldr	r2, [sp, #608]	; 0x260
 801269c:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 801269e:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80126a2:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80126a6:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80126a8:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80126aa:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80126ac:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 80126b0:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80126b4:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 80126b8:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 80126bc:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80126c0:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 80126c2:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80126c6:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80126c8:	4a37      	ldr	r2, [pc, #220]	; (80127a8 <jpeg_idct_16x16+0x3c0>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80126ca:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80126ce:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80126d2:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80126d6:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80126da:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80126de:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 80126e2:	eb0e 0207 	add.w	r2, lr, r7
 80126e6:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 80126e8:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 80126ec:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 80126f0:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80126f2:	eb0c 0206 	add.w	r2, ip, r6
 80126f6:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80126f8:	ebac 0206 	sub.w	r2, ip, r6
 80126fc:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 80126fe:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8012702:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8012706:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012708:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 801270a:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 801270c:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8012710:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012712:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012714:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8012718:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 801271c:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 801271e:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8012722:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012726:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801272a:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801272e:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012730:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012734:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012736:	4e1d      	ldr	r6, [pc, #116]	; (80127ac <jpeg_idct_16x16+0x3c4>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012738:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801273a:	f242 74e9 	movw	r4, #10217	; 0x27e9
 801273e:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012742:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012746:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801274a:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 801274e:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012752:	f241 5455 	movw	r4, #5461	; 0x1555
 8012756:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801275a:	f640 5423 	movw	r4, #3363	; 0xd23
 801275e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012762:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012764:	4454      	add	r4, sl
 8012766:	4474      	add	r4, lr
 8012768:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 801276c:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012770:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012772:	eb0c 0409 	add.w	r4, ip, r9
 8012776:	445c      	add	r4, fp
 8012778:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801277c:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801277e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012780:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012782:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8012786:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012788:	f240 224d 	movw	r2, #589	; 0x24d
 801278c:	fb02 4203 	mla	r2, r2, r3, r4
 8012790:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012792:	4a09      	ldr	r2, [pc, #36]	; (80127b8 <jpeg_idct_16x16+0x3d0>)
 8012794:	fb02 4407 	mla	r4, r2, r7, r4
 8012798:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801279c:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80127a0:	4c04      	ldr	r4, [pc, #16]	; (80127b4 <jpeg_idct_16x16+0x3cc>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80127a2:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80127a4:	1afa      	subs	r2, r7, r3
 80127a6:	e00d      	b.n	80127c4 <jpeg_idct_16x16+0x3dc>
 80127a8:	ffffecc2 	.word	0xffffecc2
 80127ac:	ffffb6d6 	.word	0xffffb6d6
 80127b0:	ffffc542 	.word	0xffffc542
 80127b4:	ffffe77a 	.word	0xffffe77a
 80127b8:	ffffdbfa 	.word	0xffffdbfa
 80127bc:	ffffeaab 	.word	0xffffeaab
 80127c0:	ffffd817 	.word	0xffffd817
 80127c4:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80127c8:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 80127cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80127ce:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80127d0:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 80127d4:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 80127d8:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80127da:	4a4f      	ldr	r2, [pc, #316]	; (8012918 <jpeg_idct_16x16+0x530>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80127dc:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80127de:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80127e2:	435a      	muls	r2, r3
    tmp1  += z1;
 80127e4:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80127e6:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80127ea:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80127ee:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80127f0:	4a4a      	ldr	r2, [pc, #296]	; (801291c <jpeg_idct_16x16+0x534>)
 80127f2:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80127f4:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 80127f8:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80127fa:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80127fe:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012800:	eb07 0b00 	add.w	fp, r7, r0
 8012804:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012806:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012808:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801280a:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801280e:	f640 5223 	movw	r2, #3363	; 0xd23
 8012812:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012814:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 8012816:	445c      	add	r4, fp
    tmp3  += z2;
 8012818:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 801281a:	443a      	add	r2, r7
 801281c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 801281e:	4484      	add	ip, r0
    tmp11 += z2;
 8012820:	4448      	add	r0, r9
			     & RANGE_MASK];
 8012822:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012826:	f818 2002 	ldrb.w	r2, [r8, r2]
 801282a:	9b98      	ldr	r3, [sp, #608]	; 0x260
 801282c:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801282e:	9b01      	ldr	r3, [sp, #4]
 8012830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012832:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012834:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 8012836:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801283a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801283e:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012840:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012842:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012844:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8012846:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801284a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801284e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012852:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012854:	f818 2006 	ldrb.w	r2, [r8, r6]
 8012858:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801285a:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801285c:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801285e:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012860:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012864:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012868:	f818 2002 	ldrb.w	r2, [r8, r2]
 801286c:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801286e:	f818 2004 	ldrb.w	r2, [r8, r4]
 8012872:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012874:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012878:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801287c:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 801287e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012882:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012886:	f818 2002 	ldrb.w	r2, [r8, r2]
 801288a:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801288c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8012890:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012892:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012896:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801289a:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 801289c:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80128a0:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80128a4:	f818 2002 	ldrb.w	r2, [r8, r2]
 80128a8:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80128aa:	f818 200c 	ldrb.w	r2, [r8, ip]
 80128ae:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80128b0:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80128b2:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80128b4:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 80128b6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80128ba:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80128be:	f818 2002 	ldrb.w	r2, [r8, r2]
 80128c2:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 80128c4:	f818 2000 	ldrb.w	r2, [r8, r0]
 80128c8:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80128ca:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80128ce:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 80128d2:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80128d6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 80128da:	f818 2002 	ldrb.w	r2, [r8, r2]
 80128de:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80128e0:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80128e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80128e6:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80128e8:	9b02      	ldr	r3, [sp, #8]
 80128ea:	4413      	add	r3, r2
			     & RANGE_MASK];
 80128ec:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80128f0:	f818 3003 	ldrb.w	r3, [r8, r3]
 80128f4:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80128f6:	9b02      	ldr	r3, [sp, #8]
 80128f8:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 80128fc:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 80128fe:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012902:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012906:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 8012908:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801290a:	4293      	cmp	r3, r2
 801290c:	f47f aeb2 	bne.w	8012674 <jpeg_idct_16x16+0x28c>
  }
}
 8012910:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8012914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012918:	ffffeaab 	.word	0xffffeaab
 801291c:	ffffd817 	.word	0xffffd817

08012920 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012924:	b0cf      	sub	sp, #316	; 0x13c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8012926:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8012928:	3a02      	subs	r2, #2
{
 801292a:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 801292c:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801292e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012932:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012936:	f105 0320 	add.w	r3, r5, #32
 801293a:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801293c:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8012940:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012942:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8012946:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 801294a:	f9b2 c042 	ldrsh.w	ip, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801294e:	f9b2 7052 	ldrsh.w	r7, [r2, #82]	; 0x52
 8012952:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8012956:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801295a:	f855 3b04 	ldr.w	r3, [r5], #4
 801295e:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8012962:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012964:	ea4a 030b 	orr.w	r3, sl, fp
 8012968:	ea4e 0303 	orr.w	r3, lr, r3
 801296c:	ea4c 0303 	orr.w	r3, ip, r3
 8012970:	433b      	orrs	r3, r7
 8012972:	4333      	orrs	r3, r6
 8012974:	ea59 0303 	orrs.w	r3, r9, r3
 8012978:	f040 8159 	bne.w	8012c2e <jpeg_idct_16x8+0x30e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801297c:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 801297e:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8012982:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8012984:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8012986:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8012988:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 801298a:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 801298e:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8012992:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012996:	9b04      	ldr	r3, [sp, #16]
 8012998:	42ab      	cmp	r3, r5
 801299a:	d1cf      	bne.n	801293c <jpeg_idct_16x8+0x1c>
 801299c:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 801299e:	ad0e      	add	r5, sp, #56	; 0x38
 80129a0:	3b04      	subs	r3, #4
 80129a2:	9300      	str	r3, [sp, #0]
 80129a4:	9b03      	ldr	r3, [sp, #12]
 80129a6:	331c      	adds	r3, #28
 80129a8:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80129aa:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80129ac:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80129b0:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 80129b4:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 80129b8:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80129bc:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 80129c0:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80129c4:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 80129c8:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80129ca:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 80129cc:	9300      	str	r3, [sp, #0]
 80129ce:	4613      	mov	r3, r2
 80129d0:	9a58      	ldr	r2, [sp, #352]	; 0x160
 80129d2:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 80129d4:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80129d8:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80129dc:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80129de:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80129e0:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80129e2:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 80129e6:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80129ea:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 80129ee:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 80129f2:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80129f6:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 80129f8:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80129fc:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80129fe:	4acf      	ldr	r2, [pc, #828]	; (8012d3c <jpeg_idct_16x8+0x41c>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012a00:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012a04:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012a08:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012a0c:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012a10:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012a14:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8012a18:	eb0e 0207 	add.w	r2, lr, r7
 8012a1c:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012a1e:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 8012a22:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8012a26:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012a28:	eb0c 0206 	add.w	r2, ip, r6
 8012a2c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012a2e:	ebac 0206 	sub.w	r2, ip, r6
 8012a32:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012a34:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8012a38:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8012a3c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012a3e:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012a40:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 8012a42:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 8012a46:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012a48:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a4a:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 8012a4e:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 8012a52:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 8012a54:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 8012a58:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012a5c:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012a60:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a64:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012a66:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a6a:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012a6c:	4eb4      	ldr	r6, [pc, #720]	; (8012d40 <jpeg_idct_16x8+0x420>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012a6e:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012a70:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8012a74:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012a78:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012a7c:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012a80:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012a84:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012a88:	f241 5455 	movw	r4, #5461	; 0x1555
 8012a8c:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012a90:	f640 5423 	movw	r4, #3363	; 0xd23
 8012a94:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012a98:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012a9a:	4454      	add	r4, sl
 8012a9c:	4474      	add	r4, lr
 8012a9e:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012aa2:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012aa6:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012aa8:	eb0c 0409 	add.w	r4, ip, r9
 8012aac:	445c      	add	r4, fp
 8012aae:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012ab2:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012ab4:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012ab6:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012ab8:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8012abc:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012abe:	f240 224d 	movw	r2, #589	; 0x24d
 8012ac2:	fb02 4203 	mla	r2, r2, r3, r4
 8012ac6:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012ac8:	4a9e      	ldr	r2, [pc, #632]	; (8012d44 <jpeg_idct_16x8+0x424>)
 8012aca:	fb02 4407 	mla	r4, r2, r7, r4
 8012ace:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012ad2:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012ad6:	4c9c      	ldr	r4, [pc, #624]	; (8012d48 <jpeg_idct_16x8+0x428>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012ad8:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012ada:	1afa      	subs	r2, r7, r3
 8012adc:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012ae0:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8012ae4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012ae6:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012ae8:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8012aec:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8012af0:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012af2:	4a96      	ldr	r2, [pc, #600]	; (8012d4c <jpeg_idct_16x8+0x42c>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012af4:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012af6:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012afa:	435a      	muls	r2, r3
    tmp1  += z1;
 8012afc:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012afe:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b02:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012b06:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012b08:	4a91      	ldr	r2, [pc, #580]	; (8012d50 <jpeg_idct_16x8+0x430>)
 8012b0a:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b0c:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8012b10:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b12:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012b16:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b18:	eb07 0b00 	add.w	fp, r7, r0
 8012b1c:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012b1e:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012b20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012b22:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012b26:	f640 5223 	movw	r2, #3363	; 0xd23
 8012b2a:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012b2c:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 8012b2e:	445c      	add	r4, fp
    tmp3  += z2;
 8012b30:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012b32:	443a      	add	r2, r7
 8012b34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8012b36:	4484      	add	ip, r0
    tmp11 += z2;
 8012b38:	4448      	add	r0, r9
			     & RANGE_MASK];
 8012b3a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012b3e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012b42:	9b58      	ldr	r3, [sp, #352]	; 0x160
 8012b44:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012b46:	9b01      	ldr	r3, [sp, #4]
 8012b48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b4a:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012b4c:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 8012b4e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012b52:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012b56:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012b58:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012b5a:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012b5c:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 8012b5e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012b62:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012b66:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012b6a:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012b6c:	f818 2006 	ldrb.w	r2, [r8, r6]
 8012b70:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012b72:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012b74:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012b76:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8012b78:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012b7c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012b80:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012b84:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012b86:	f818 2004 	ldrb.w	r2, [r8, r4]
 8012b8a:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012b8c:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012b90:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012b94:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8012b96:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012b9a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012b9e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012ba2:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012ba4:	f818 200e 	ldrb.w	r2, [r8, lr]
 8012ba8:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012baa:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012bae:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012bb2:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8012bb4:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012bb8:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012bbc:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012bc0:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012bc2:	f818 200c 	ldrb.w	r2, [r8, ip]
 8012bc6:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012bc8:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012bca:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012bcc:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8012bce:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012bd2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012bd6:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012bda:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012bdc:	f818 2000 	ldrb.w	r2, [r8, r0]
 8012be0:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012be2:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012be6:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8012bea:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8012bee:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012bf2:	f818 2002 	ldrb.w	r2, [r8, r2]
 8012bf6:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012bf8:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012bfe:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012c00:	9b02      	ldr	r3, [sp, #8]
 8012c02:	4413      	add	r3, r2
			     & RANGE_MASK];
 8012c04:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012c08:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012c0c:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012c0e:	9b02      	ldr	r3, [sp, #8]
 8012c10:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 8012c14:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8012c16:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012c1a:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012c1e:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 8012c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c22:	4293      	cmp	r3, r2
 8012c24:	f47f aec1 	bne.w	80129aa <jpeg_idct_16x8+0x8a>
  }
}
 8012c28:	b04f      	add	sp, #316	; 0x13c
 8012c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012c2e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8012c30:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012c34:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8012c38:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8012c3a:	f241 1651 	movw	r6, #4433	; 0x1151
 8012c3e:	eb0b 0300 	add.w	r3, fp, r0
 8012c42:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8012c44:	f641 067e 	movw	r6, #6270	; 0x187e
 8012c48:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8012c4c:	4e41      	ldr	r6, [pc, #260]	; (8012d54 <jpeg_idct_16x8+0x434>)
 8012c4e:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 8012c52:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012c54:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012c5a:	fb00 f00c 	mul.w	r0, r0, ip
    tmp0 = z2 + z3;
 8012c5e:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 8012c62:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8012c66:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 8012c6a:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012c6e:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8012c70:	9000      	str	r0, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8012c72:	18f0      	adds	r0, r6, r3
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012c74:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8012c78:	1b9b      	subs	r3, r3, r6
    tmp11 = tmp1 + tmp3;
 8012c7a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012c7c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp12 = tmp1 - tmp3;
 8012c80:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012c82:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012c86:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012c8a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8012c8e:	4347      	muls	r7, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012c90:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8012c92:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8012c96:	eb07 040a 	add.w	r4, r7, sl
    z2 = tmp0 + tmp2;
 8012c9a:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8012c9e:	1930      	adds	r0, r6, r4
 8012ca0:	4358      	muls	r0, r3
    z2 += z1;
 8012ca2:	4b2d      	ldr	r3, [pc, #180]	; (8012d58 <jpeg_idct_16x8+0x438>)
 8012ca4:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8012ca8:	4b2c      	ldr	r3, [pc, #176]	; (8012d5c <jpeg_idct_16x8+0x43c>)
 8012caa:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8012cae:	eb09 040a 	add.w	r4, r9, sl
 8012cb2:	4b2b      	ldr	r3, [pc, #172]	; (8012d60 <jpeg_idct_16x8+0x440>)
 8012cb4:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8012cb6:	f640 138e 	movw	r3, #2446	; 0x98e
 8012cba:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8012cbe:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8012cc0:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8012cc4:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012cc8:	4b26      	ldr	r3, [pc, #152]	; (8012d64 <jpeg_idct_16x8+0x444>)
    tmp3 += z1 + z3;
 8012cca:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012cce:	eb07 0a0e 	add.w	sl, r7, lr
    tmp1 += z1 + z3;
 8012cd2:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8012cd6:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012cda:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8012cdc:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8012cde:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8012ce0:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8012ce4:	fb0b 0007 	mla	r0, fp, r7, r0
    tmp2 += z1 + z2;
 8012ce8:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8012cec:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012cf0:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8012cf4:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012cf6:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8012cf8:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8012cfc:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012d00:	eb03 040a 	add.w	r4, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012d04:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012d08:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012d0a:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012d0c:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8012d10:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012d12:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8012d14:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012d16:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012d18:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8012d1a:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012d1e:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8012d20:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8012d22:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012d24:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8012d26:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8012d2a:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8012d2c:	9b00      	ldr	r3, [sp, #0]
 8012d2e:	eba3 0909 	sub.w	r9, r3, r9
 8012d32:	ea4f 20e9 	mov.w	r0, r9, asr #11
 8012d36:	67c8      	str	r0, [r1, #124]	; 0x7c
    wsptr++;
 8012d38:	e62d      	b.n	8012996 <jpeg_idct_16x8+0x76>
 8012d3a:	bf00      	nop
 8012d3c:	ffffecc2 	.word	0xffffecc2
 8012d40:	ffffb6d6 	.word	0xffffb6d6
 8012d44:	ffffdbfa 	.word	0xffffdbfa
 8012d48:	ffffe77a 	.word	0xffffe77a
 8012d4c:	ffffeaab 	.word	0xffffeaab
 8012d50:	ffffd817 	.word	0xffffd817
 8012d54:	ffffc4df 	.word	0xffffc4df
 8012d58:	ffffc13b 	.word	0xffffc13b
 8012d5c:	fffff384 	.word	0xfffff384
 8012d60:	ffffe333 	.word	0xffffe333
 8012d64:	ffffadfd 	.word	0xffffadfd

08012d68 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d6c:	b0c5      	sub	sp, #276	; 0x114
 8012d6e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8012d70:	f1a2 0c02 	sub.w	ip, r2, #2
 8012d74:	320e      	adds	r2, #14
 8012d76:	9302      	str	r3, [sp, #8]
 8012d78:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012d7a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8012d7e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8012d82:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012d84:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d86:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012d8a:	f641 4037 	movw	r0, #7223	; 0x1c37
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d8e:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012d92:	f642 0ac6 	movw	sl, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012d96:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012d9a:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012d9e:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012da0:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012da4:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8012da8:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012daa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012dae:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012db0:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8012db2:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012db4:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8012db8:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012dbc:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 8012dc0:	434a      	muls	r2, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8012dc2:	eba8 0102 	sub.w	r1, r8, r2
 8012dc6:	fb00 f901 	mul.w	r9, r0, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8012dca:	eba5 0008 	sub.w	r0, r5, r8
 8012dce:	f640 2112 	movw	r1, #2578	; 0xa12
 8012dd2:	fb01 f700 	mul.w	r7, r1, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012dd6:	9900      	ldr	r1, [sp, #0]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012dd8:	18a8      	adds	r0, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8012dda:	eb09 0407 	add.w	r4, r9, r7
 8012dde:	440c      	add	r4, r1
 8012de0:	49ba      	ldr	r1, [pc, #744]	; (80130cc <jpeg_idct_14x7+0x364>)
 8012de2:	fb01 4408 	mla	r4, r1, r8, r4
    tmp10 = z1 + z3;
 8012de6:	18a9      	adds	r1, r5, r2
 8012de8:	9103      	str	r1, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8012dea:	9900      	ldr	r1, [sp, #0]
 8012dec:	fb0a 1000 	mla	r0, sl, r0, r1
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012df0:	f46f 711f 	mvn.w	r1, #636	; 0x27c
 8012df4:	fb01 0102 	mla	r1, r1, r2, r0
 8012df8:	eb01 0209 	add.w	r2, r1, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012dfc:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8012e00:	f641 51ef 	movw	r1, #7663	; 0x1def
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8012e04:	9201      	str	r2, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012e06:	4ab2      	ldr	r2, [pc, #712]	; (80130d0 <jpeg_idct_14x7+0x368>)
 8012e08:	fb02 0005 	mla	r0, r2, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012e0c:	f9bc 5010 	ldrsh.w	r5, [ip, #16]
 8012e10:	6a32      	ldr	r2, [r6, #32]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8012e12:	4438      	add	r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012e14:	f9bc 7030 	ldrsh.w	r7, [ip, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012e18:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012e1a:	6e35      	ldr	r5, [r6, #96]	; 0x60
 8012e1c:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012e1e:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 8012e22:	fb07 f709 	mul.w	r7, r7, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8012e26:	eb02 0905 	add.w	r9, r2, r5
 8012e2a:	fb01 fb09 	mul.w	fp, r1, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012e2e:	eba2 0905 	sub.w	r9, r2, r5
 8012e32:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012e36:	443a      	add	r2, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012e38:	443d      	add	r5, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8012e3a:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012e3e:	49a5      	ldr	r1, [pc, #660]	; (80130d4 <jpeg_idct_14x7+0x36c>)
    tmp10 = tmp11 - tmp12;
 8012e40:	ebab 0a09 	sub.w	sl, fp, r9
    tmp11 += tmp12;
 8012e44:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012e46:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8012e4a:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8012e4c:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012e50:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8012e54:	44a9      	add	r9, r5
    tmp10 += z2;
 8012e56:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012e58:	fb0b 2707 	mla	r7, fp, r7, r2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012e5c:	9a01      	ldr	r2, [sp, #4]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8012e5e:	443d      	add	r5, r7
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012e60:	4452      	add	r2, sl
 8012e62:	12d2      	asrs	r2, r2, #11
 8012e64:	f84e 2c04 	str.w	r2, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012e68:	9a01      	ldr	r2, [sp, #4]
 8012e6a:	eba2 0a0a 	sub.w	sl, r2, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012e6e:	eb04 0209 	add.w	r2, r4, r9
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012e72:	eba4 0409 	sub.w	r4, r4, r9
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012e76:	12d2      	asrs	r2, r2, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012e78:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012e7c:	f8ce 201c 	str.w	r2, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012e80:	1942      	adds	r2, r0, r5
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012e82:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012e86:	1b45      	subs	r5, r0, r5
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012e88:	12d2      	asrs	r2, r2, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012e8a:	9900      	ldr	r1, [sp, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012e8c:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012e8e:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012e92:	12ed      	asrs	r5, r5, #11
    z2 -= tmp10;
 8012e94:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012e96:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    z2 -= tmp10;
 8012e9a:	eba8 0802 	sub.w	r8, r8, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012e9e:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012ea2:	f8ce 507c 	str.w	r5, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8012ea6:	fb02 1808 	mla	r8, r2, r8, r1
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8012eaa:	ea4f 22e8 	mov.w	r2, r8, asr #11
 8012eae:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012eb2:	9a04      	ldr	r2, [sp, #16]
 8012eb4:	4562      	cmp	r2, ip
 8012eb6:	f47f af66 	bne.w	8012d86 <jpeg_idct_14x7+0x1e>
 8012eba:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 8012ebc:	ac0c      	add	r4, sp, #48	; 0x30
 8012ebe:	3a04      	subs	r2, #4
 8012ec0:	9200      	str	r2, [sp, #0]
 8012ec2:	9a02      	ldr	r2, [sp, #8]
 8012ec4:	3218      	adds	r2, #24
 8012ec6:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012ec8:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012eca:	f640 2512 	movw	r5, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 8012ece:	6927      	ldr	r7, [r4, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012ed0:	f241 38a3 	movw	r8, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8012ed4:	f852 1f04 	ldr.w	r1, [r2, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012ed8:	f641 0b14 	movw	fp, #6164	; 0x1814
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012edc:	6820      	ldr	r0, [r4, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012ede:	fb05 fe07 	mul.w	lr, r5, r7
    outptr = output_buf[ctr] + output_col;
 8012ee2:	910a      	str	r1, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012ee4:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8012ee8:	9200      	str	r2, [sp, #0]
 8012eea:	460a      	mov	r2, r1
 8012eec:	994e      	ldr	r1, [sp, #312]	; 0x138
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012eee:	3010      	adds	r0, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012ef0:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8012ef2:	1851      	adds	r1, r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012ef4:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp11 = z1 + z3;
 8012ef8:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8012efc:	437a      	muls	r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8012efe:	436f      	muls	r7, r5
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012f00:	4d75      	ldr	r5, [pc, #468]	; (80130d8 <jpeg_idct_14x7+0x370>)
    tmp10 = z1 + z2;
 8012f02:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012f06:	4472      	add	r2, lr
    z1 = (INT32) wsptr[2];
 8012f08:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 8012f0c:	ebc7 3940 	rsb	r9, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012f10:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012f12:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8012f16:	0052      	lsls	r2, r2, #1
 8012f18:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 8012f1c:	9201      	str	r2, [sp, #4]
    z2 = (INT32) wsptr[6];
 8012f1e:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012f22:	eb0e 0002 	add.w	r0, lr, r2
 8012f26:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012f28:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8012f2c:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012f30:	fb05 0002 	mla	r0, r5, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012f34:	f605 25e5 	addw	r5, r5, #2789	; 0xae5
 8012f38:	436a      	muls	r2, r5
    tmp20 = tmp10 + tmp13;
 8012f3a:	eb0c 0507 	add.w	r5, ip, r7
 8012f3e:	9502      	str	r5, [sp, #8]
    tmp26 = tmp10 - tmp13;
 8012f40:	ebac 0507 	sub.w	r5, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012f44:	fb08 220e 	mla	r2, r8, lr, r2
    z2 = (INT32) wsptr[3];
 8012f48:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp26 = tmp10 - tmp13;
 8012f4c:	9503      	str	r5, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8012f4e:	1835      	adds	r5, r6, r0
    tmp25 = tmp11 - tmp14;
 8012f50:	1a30      	subs	r0, r6, r0
    z3 = (INT32) wsptr[5];
 8012f52:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp21 = tmp11 + tmp14;
 8012f56:	9504      	str	r5, [sp, #16]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012f58:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 8012f5c:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8012f5e:	eb09 0002 	add.w	r0, r9, r2
    tmp24 = tmp12 - tmp15;
 8012f62:	eba9 0202 	sub.w	r2, r9, r2
    z4 = (INT32) wsptr[7];
 8012f66:	f854 9c04 	ldr.w	r9, [r4, #-4]
    tmp22 = tmp12 + tmp15;
 8012f6a:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012f6c:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8012f70:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 8012f72:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012f76:	eb02 0a08 	add.w	sl, r2, r8
    tmp14 = z1 + z3;
 8012f7a:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012f7e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012f82:	f242 6052 	movw	r0, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012f86:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012f8a:	fb00 f506 	mul.w	r5, r0, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012f8e:	4853      	ldr	r0, [pc, #332]	; (80130dc <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012f90:	f46f 66a2 	mvn.w	r6, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012f94:	eb0a 0705 	add.w	r7, sl, r5
 8012f98:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 8012f9c:	fb00 7702 	mla	r7, r0, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012fa0:	f200 201b 	addw	r0, r0, #539	; 0x21b
 8012fa4:	fb00 b002 	mla	r0, r0, r2, fp
    z1    -= z2;
 8012fa8:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012fac:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012fb0:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012fb4:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012fb8:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 8012fba:	4470      	add	r0, lr
 8012fbc:	9008      	str	r0, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012fbe:	eb08 000c 	add.w	r0, r8, ip
 8012fc2:	4370      	muls	r0, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012fc4:	f6a6 0681 	subw	r6, r6, #2177	; 0x881
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012fc8:	eba0 3049 	sub.w	r0, r0, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012fcc:	fb06 0608 	mla	r6, r6, r8, r0
 8012fd0:	44b2      	add	sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012fd2:	4e43      	ldr	r6, [pc, #268]	; (80130e0 <jpeg_idct_14x7+0x378>)
 8012fd4:	fb06 000c 	mla	r0, r6, ip, r0
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012fd8:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012fdc:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012fde:	ebac 0508 	sub.w	r5, ip, r8
 8012fe2:	4375      	muls	r5, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012fe4:	9009      	str	r0, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012fe6:	eb05 3649 	add.w	r6, r5, r9, lsl #13
 8012fea:	483e      	ldr	r0, [pc, #248]	; (80130e4 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012fec:	eb02 3949 	add.w	r9, r2, r9, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012ff0:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012ff2:	fb00 660c 	mla	r6, r0, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012ff6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012ff8:	443a      	add	r2, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012ffa:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8012ffc:	f241 5b99 	movw	fp, #5529	; 0x1599
			     & RANGE_MASK];
 8013000:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013004:	fb0b 5508 	mla	r5, fp, r8, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013008:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 801300a:	44ae      	add	lr, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801300c:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 801300e:	5542      	strb	r2, [r0, r5]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013010:	9a02      	ldr	r2, [sp, #8]
 8013012:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 8013014:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013018:	5dda      	ldrb	r2, [r3, r7]
 801301a:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801301c:	9a04      	ldr	r2, [sp, #16]
 801301e:	4452      	add	r2, sl
			     & RANGE_MASK];
 8013020:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013024:	5c9a      	ldrb	r2, [r3, r2]
 8013026:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013028:	9a04      	ldr	r2, [sp, #16]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801302a:	9809      	ldr	r0, [sp, #36]	; 0x24
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801302c:	eba2 0a0a 	sub.w	sl, r2, sl
			     & RANGE_MASK];
 8013030:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013034:	f813 200a 	ldrb.w	r2, [r3, sl]
 8013038:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801303a:	9a06      	ldr	r2, [sp, #24]
 801303c:	4402      	add	r2, r0
			     & RANGE_MASK];
 801303e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013042:	5c9a      	ldrb	r2, [r3, r2]
 8013044:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013046:	9a06      	ldr	r2, [sp, #24]
 8013048:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 801304a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801304e:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013050:	9808      	ldr	r0, [sp, #32]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013052:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013054:	9a01      	ldr	r2, [sp, #4]
 8013056:	444a      	add	r2, r9
			     & RANGE_MASK];
 8013058:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801305c:	5c9a      	ldrb	r2, [r3, r2]
 801305e:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013060:	9a01      	ldr	r2, [sp, #4]
 8013062:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 8013066:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801306a:	f813 2009 	ldrb.w	r2, [r3, r9]
 801306e:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013070:	9a07      	ldr	r2, [sp, #28]
 8013072:	4432      	add	r2, r6
			     & RANGE_MASK];
 8013074:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013078:	5c9a      	ldrb	r2, [r3, r2]
 801307a:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801307c:	9a07      	ldr	r2, [sp, #28]
 801307e:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 8013080:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013084:	5d9a      	ldrb	r2, [r3, r6]
 8013086:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013088:	9a05      	ldr	r2, [sp, #20]
 801308a:	4472      	add	r2, lr
			     & RANGE_MASK];
 801308c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013090:	5c9a      	ldrb	r2, [r3, r2]
 8013092:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013094:	9a05      	ldr	r2, [sp, #20]
 8013096:	eba2 050e 	sub.w	r5, r2, lr
			     & RANGE_MASK];
 801309a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801309e:	5d5a      	ldrb	r2, [r3, r5]
 80130a0:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80130a2:	9a03      	ldr	r2, [sp, #12]
 80130a4:	4402      	add	r2, r0
			     & RANGE_MASK];
 80130a6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80130aa:	5c9a      	ldrb	r2, [r3, r2]
 80130ac:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80130ae:	9a03      	ldr	r2, [sp, #12]
 80130b0:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 80130b2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80130b6:	5c1a      	ldrb	r2, [r3, r0]
 80130b8:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 80130ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80130bc:	9900      	ldr	r1, [sp, #0]
 80130be:	428a      	cmp	r2, r1
 80130c0:	f47f af02 	bne.w	8012ec8 <jpeg_idct_14x7+0x160>
  }
}
 80130c4:	b045      	add	sp, #276	; 0x114
 80130c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ca:	bf00      	nop
 80130cc:	ffffc515 	.word	0xffffc515
 80130d0:	ffffb0f1 	.word	0xffffb0f1
 80130d4:	ffffd3e1 	.word	0xffffd3e1
 80130d8:	ffffc8fc 	.word	0xffffc8fc
 80130dc:	ffffdbf0 	.word	0xffffdbf0
 80130e0:	ffffb409 	.word	0xffffb409
 80130e4:	ffffc9e6 	.word	0xffffc9e6

080130e8 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80130e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80130ec:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80130f0:	b0bb      	sub	sp, #236	; 0xec
 80130f2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80130f4:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80130f6:	3080      	adds	r0, #128	; 0x80
 80130f8:	320e      	adds	r2, #14
 80130fa:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80130fc:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80130fe:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013100:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013102:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013106:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801310a:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801310e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013110:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013114:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013116:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801311a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801311e:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8013120:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013122:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013126:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801312a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801312e:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013132:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 8013134:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 8013136:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801313a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 801313c:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013140:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013144:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013146:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 8013148:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801314c:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 8013150:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013152:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013156:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013158:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801315c:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013160:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013164:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013168:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801316c:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013170:	eba2 0909 	sub.w	r9, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013174:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013178:	eba9 0808 	sub.w	r8, r9, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801317c:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013180:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013184:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013188:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801318c:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013190:	12d2      	asrs	r2, r2, #11
 8013192:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013196:	ea4f 22ee 	mov.w	r2, lr, asr #11
 801319a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 801319e:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 80131a2:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 80131a6:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80131a8:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80131ac:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 80131b0:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80131b2:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80131b4:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80131b8:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80131ba:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80131bc:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80131be:	42b2      	cmp	r2, r6
 80131c0:	d19f      	bne.n	8013102 <jpeg_idct_12x6+0x1a>
 80131c2:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 80131c6:	aa0a      	add	r2, sp, #40	; 0x28
 80131c8:	3314      	adds	r3, #20
 80131ca:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80131cc:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80131d0:	f640 0b5b 	movw	fp, #2139	; 0x85b
    outptr = output_buf[ctr] + output_col;
 80131d4:	9944      	ldr	r1, [sp, #272]	; 0x110
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80131d6:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 80131d8:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 80131da:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 80131de:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80131e0:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 80131e4:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 80131e8:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80131ea:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 80131ee:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80131f2:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 80131f6:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 80131fa:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80131fe:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013200:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 8013204:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013208:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 801320a:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 801320e:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8013210:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8013214:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 8013218:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 801321c:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 8013220:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 8013224:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 8013226:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 801322a:	1b4d      	subs	r5, r1, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801322c:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 8013230:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 8013232:	eba7 000c 	sub.w	r0, r7, ip
    tmp22 = tmp11 + tmp12;
 8013236:	1961      	adds	r1, r4, r5
    tmp10 = z1 + z3;
 8013238:	eb08 0706 	add.w	r7, r8, r6
    tmp25 = tmp10 - tmp12;
 801323c:	9005      	str	r0, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801323e:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp22 = tmp11 + tmp12;
 8013242:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 8013244:	1b61      	subs	r1, r4, r5
    z4 = (INT32) wsptr[7];
 8013246:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 801324a:	9107      	str	r1, [sp, #28]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801324c:	eb05 0c07 	add.w	ip, r5, r7
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013250:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013254:	eb06 0905 	add.w	r9, r6, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013258:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801325c:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013260:	484f      	ldr	r0, [pc, #316]	; (80133a0 <jpeg_idct_12x6+0x2b8>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013262:	fb0b cb07 	mla	fp, fp, r7, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013266:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801326a:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801326c:	484d      	ldr	r0, [pc, #308]	; (80133a4 <jpeg_idct_12x6+0x2bc>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801326e:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013272:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013276:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801327a:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801327e:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013282:	eb01 0709 	add.w	r7, r1, r9
 8013286:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801328a:	4847      	ldr	r0, [pc, #284]	; (80133a8 <jpeg_idct_12x6+0x2c0>)
 801328c:	fb00 1108 	mla	r1, r0, r8, r1
 8013290:	4846      	ldr	r0, [pc, #280]	; (80133ac <jpeg_idct_12x6+0x2c4>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013292:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013294:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013298:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 801329c:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80132a0:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 80132a4:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 80132a8:	1b86      	subs	r6, r0, r6
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80132aa:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80132ae:	444c      	add	r4, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80132b0:	eb01 090c 	add.w	r9, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80132b4:	eb05 0c06 	add.w	ip, r5, r6
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80132b8:	483d      	ldr	r0, [pc, #244]	; (80133b0 <jpeg_idct_12x6+0x2c8>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80132ba:	9901      	ldr	r1, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80132bc:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80132c0:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80132c4:	fb00 c606 	mla	r6, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80132c8:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80132ca:	fb08 c505 	mla	r5, r8, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80132ce:	eb00 080e 	add.w	r8, r0, lr
 80132d2:	9808      	ldr	r0, [sp, #32]
			     & RANGE_MASK];
 80132d4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80132d8:	f811 c008 	ldrb.w	ip, [r1, r8]
 80132dc:	9944      	ldr	r1, [sp, #272]	; 0x110
 80132de:	f800 c001 	strb.w	ip, [r0, r1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80132e2:	9904      	ldr	r1, [sp, #16]
 80132e4:	eba1 0e0e 	sub.w	lr, r1, lr
 80132e8:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80132ea:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80132ee:	f811 c00e 	ldrb.w	ip, [r1, lr]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80132f2:	9902      	ldr	r1, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80132f4:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80132f8:	eb01 0c05 	add.w	ip, r1, r5
 80132fc:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80132fe:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013302:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8013306:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801330a:	9902      	ldr	r1, [sp, #8]
 801330c:	eba1 0805 	sub.w	r8, r1, r5
 8013310:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013312:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013316:	f811 5008 	ldrb.w	r5, [r1, r8]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801331a:	9906      	ldr	r1, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801331c:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801331e:	19cd      	adds	r5, r1, r7
 8013320:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013322:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013326:	5d4d      	ldrb	r5, [r1, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013328:	9906      	ldr	r1, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801332a:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801332c:	1bcf      	subs	r7, r1, r7
 801332e:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013330:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013334:	5dcd      	ldrb	r5, [r1, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013336:	9907      	ldr	r1, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013338:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801333a:	190d      	adds	r5, r1, r4
 801333c:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801333e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013342:	5d4d      	ldrb	r5, [r1, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013344:	9907      	ldr	r1, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013346:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013348:	1b0c      	subs	r4, r1, r4
 801334a:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801334c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013350:	5d0c      	ldrb	r4, [r1, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013352:	9903      	ldr	r1, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013354:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013356:	198c      	adds	r4, r1, r6
 8013358:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 801335a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801335e:	5d0c      	ldrb	r4, [r1, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013360:	9903      	ldr	r1, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013362:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013364:	1b8e      	subs	r6, r1, r6
 8013366:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013368:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801336c:	5d8c      	ldrb	r4, [r1, r6]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801336e:	9905      	ldr	r1, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013370:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013372:	eb01 0409 	add.w	r4, r1, r9
 8013376:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013378:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801337c:	5d0c      	ldrb	r4, [r1, r4]
 801337e:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013380:	9905      	ldr	r1, [sp, #20]
 8013382:	9801      	ldr	r0, [sp, #4]
 8013384:	eba1 0109 	sub.w	r1, r1, r9
			     & RANGE_MASK];
 8013388:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801338c:	5c41      	ldrb	r1, [r0, r1]
 801338e:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8013390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013392:	4553      	cmp	r3, sl
 8013394:	f47f af1a 	bne.w	80131cc <jpeg_idct_12x6+0xe4>
  }
}
 8013398:	b03b      	add	sp, #236	; 0xec
 801339a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801339e:	bf00      	nop
 80133a0:	ffffeeaf 	.word	0xffffeeaf
 80133a4:	ffffde8b 	.word	0xffffde8b
 80133a8:	ffffea5c 	.word	0xffffea5c
 80133ac:	ffffc08c 	.word	0xffffc08c
 80133b0:	ffffc4df 	.word	0xffffc4df

080133b4 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80133b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80133b8:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80133bc:	b0af      	sub	sp, #188	; 0xbc
 80133be:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80133c0:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80133c2:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80133c4:	320e      	adds	r2, #14
 80133c6:	3d04      	subs	r5, #4
  wsptr = workspace;
 80133c8:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80133ca:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80133ce:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 80133d2:	9300      	str	r3, [sp, #0]
 80133d4:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80133d6:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80133da:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80133dc:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80133e0:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80133e4:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80133e6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80133e8:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80133ec:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80133ee:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80133f2:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 80133f4:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80133f6:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80133fa:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 80133fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013402:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013406:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801340a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801340e:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013412:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013414:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013418:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801341c:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 8013420:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013422:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8013426:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801342a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 801342e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013432:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8013436:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013438:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801343c:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8013440:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8013442:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8013446:	4b6c      	ldr	r3, [pc, #432]	; (80135f8 <jpeg_idct_10x5+0x244>)
 8013448:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801344c:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013450:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013452:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013456:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801345a:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801345e:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013462:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013464:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013468:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 801346c:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8013470:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013474:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013478:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801347c:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801347e:	d1aa      	bne.n	80133d6 <jpeg_idct_10x5+0x22>
 8013480:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 8013482:	a906      	add	r1, sp, #24
 8013484:	f1a3 0b04 	sub.w	fp, r3, #4
 8013488:	3310      	adds	r3, #16
 801348a:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801348c:	f85b 3f04 	ldr.w	r3, [fp, #4]!
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013490:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8013492:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    z4 = (INT32) wsptr[4];
 8013494:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8013498:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801349a:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 801349e:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80134a0:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80134a4:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80134a8:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[6];
 80134ac:	f851 cc08 	ldr.w	ip, [r1, #-8]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80134b0:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80134b2:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 80134b4:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80134b8:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 80134ba:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80134be:	f641 279a 	movw	r7, #6810	; 0x1a9a
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80134c2:	006d      	lsls	r5, r5, #1
 80134c4:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 80134c8:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80134cc:	9300      	str	r3, [sp, #0]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80134ce:	eb05 030c 	add.w	r3, r5, ip
 80134d2:	437b      	muls	r3, r7
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80134d4:	f241 0771 	movw	r7, #4209	; 0x1071
 80134d8:	fb07 3505 	mla	r5, r7, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80134dc:	4f46      	ldr	r7, [pc, #280]	; (80135f8 <jpeg_idct_10x5+0x244>)
 80134de:	fb07 330c 	mla	r3, r7, ip, r3
    tmp20 = tmp10 + tmp12;
 80134e2:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 80134e6:	1b75      	subs	r5, r6, r5
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80134e8:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp21 = tmp11 + tmp13;
 80134ec:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 80134ee:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 80134f0:	9501      	str	r5, [sp, #4]
    tmp23 = tmp11 - tmp13;
 80134f2:	9302      	str	r3, [sp, #8]
    z2 = (INT32) wsptr[3];
 80134f4:	f851 5c14 	ldr.w	r5, [r1, #-20]
    z4 = (INT32) wsptr[7];
 80134f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 80134fc:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8013500:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 8013504:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013506:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801350a:	fb06 f809 	mul.w	r8, r6, r9
    z4 = z3 + tmp12;
 801350e:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013512:	435d      	muls	r5, r3
    z4 = z3 + tmp12;
 8013514:	eb05 3a46 	add.w	sl, r5, r6, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013518:	f642 46b3 	movw	r6, #11443	; 0x2cb3
 801351c:	fb06 8e02 	mla	lr, r6, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013520:	f240 7614 	movw	r6, #1812	; 0x714
 8013524:	4356      	muls	r6, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013526:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013528:	eba6 0608 	sub.w	r6, r6, r8
 801352c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801352e:	f241 26cf 	movw	r6, #4815	; 0x12cf
 8013532:	fb06 f909 	mul.w	r9, r6, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013536:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 801353a:	ebc5 3546 	rsb	r5, r5, r6, lsl #13
 801353e:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8013542:	1ad3      	subs	r3, r2, r3
 8013544:	035b      	lsls	r3, r3, #13
 8013546:	eba3 3846 	sub.w	r8, r3, r6, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801354a:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801354e:	f642 0353 	movw	r3, #10323	; 0x2853
 8013552:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013554:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013556:	9e04      	ldr	r6, [sp, #16]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013558:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801355c:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013560:	eb0c 020e 	add.w	r2, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013564:	1b5b      	subs	r3, r3, r5
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013566:	ebac 0c0e 	sub.w	ip, ip, lr
			    & RANGE_MASK];
 801356a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801356e:	444d      	add	r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013570:	9303      	str	r3, [sp, #12]
			    & RANGE_MASK];
 8013572:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013576:	5c82      	ldrb	r2, [r0, r2]
 8013578:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801357a:	54f2      	strb	r2, [r6, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801357c:	9b03      	ldr	r3, [sp, #12]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801357e:	f810 200c 	ldrb.w	r2, [r0, ip]
 8013582:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013584:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013586:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8013588:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801358c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013590:	5c82      	ldrb	r2, [r0, r2]
 8013592:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013594:	5dc3      	ldrb	r3, [r0, r7]
 8013596:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013598:	9b00      	ldr	r3, [sp, #0]
 801359a:	4443      	add	r3, r8
			    & RANGE_MASK];
 801359c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80135a0:	5cc3      	ldrb	r3, [r0, r3]
 80135a2:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80135a4:	9b00      	ldr	r3, [sp, #0]
 80135a6:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 80135aa:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80135ae:	f810 3008 	ldrb.w	r3, [r0, r8]
 80135b2:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80135b4:	9b02      	ldr	r3, [sp, #8]
 80135b6:	442b      	add	r3, r5
			    & RANGE_MASK];
 80135b8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80135bc:	5cc3      	ldrb	r3, [r0, r3]
 80135be:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80135c0:	9b02      	ldr	r3, [sp, #8]
 80135c2:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 80135c4:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80135c8:	5d43      	ldrb	r3, [r0, r5]
 80135ca:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80135cc:	9b01      	ldr	r3, [sp, #4]
 80135ce:	4453      	add	r3, sl
			    & RANGE_MASK];
 80135d0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80135d4:	5cc3      	ldrb	r3, [r0, r3]
 80135d6:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80135d8:	9b01      	ldr	r3, [sp, #4]
 80135da:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 80135de:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80135e2:	f810 300a 	ldrb.w	r3, [r0, sl]
 80135e6:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 80135e8:	9b05      	ldr	r3, [sp, #20]
 80135ea:	455b      	cmp	r3, fp
 80135ec:	f47f af4e 	bne.w	801348c <jpeg_idct_10x5+0xd8>
  }
}
 80135f0:	b02f      	add	sp, #188	; 0xbc
 80135f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f6:	bf00      	nop
 80135f8:	ffffba5c 	.word	0xffffba5c

080135fc <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80135fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013600:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013604:	b0a5      	sub	sp, #148	; 0x94
 8013606:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013608:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801360a:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801360e:	f102 070e 	add.w	r7, r2, #14
 8013612:	3d04      	subs	r5, #4
  wsptr = workspace;
 8013614:	a804      	add	r0, sp, #16
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013616:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801361a:	f641 0e7e 	movw	lr, #6270	; 0x187e
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801361e:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013622:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013624:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013628:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801362c:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801362e:	fb02 f404 	mul.w	r4, r2, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013632:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013634:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013638:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801363c:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013640:	4966      	ldr	r1, [pc, #408]	; (80137dc <jpeg_idct_8x4+0x1e0>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8013642:	eb04 0902 	add.w	r9, r4, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8013646:	eba4 0402 	sub.w	r4, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801364a:	6a2a      	ldr	r2, [r5, #32]
 801364c:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013650:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8013652:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013656:	eb0a 020b 	add.w	r2, sl, fp
 801365a:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801365e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013662:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013666:	fb01 220b 	mla	r2, r1, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 801366a:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 801366e:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8013672:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013676:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801367a:	eb02 0984 	add.w	r9, r2, r4, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 801367e:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013682:	ebc2 0284 	rsb	r2, r2, r4, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013686:	f8c0 a05c 	str.w	sl, [r0, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801368a:	f8c0 901c 	str.w	r9, [r0, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 801368e:	63c2      	str	r2, [r0, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013690:	d1c5      	bne.n	801361e <jpeg_idct_8x4+0x22>
 8013692:	f1a3 0804 	sub.w	r8, r3, #4

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8013696:	a904      	add	r1, sp, #16
 8013698:	330c      	adds	r3, #12
 801369a:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801369c:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80136a0:	f241 1051 	movw	r0, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 80136a4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 80136a6:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 80136a8:	9302      	str	r3, [sp, #8]
 80136aa:	189c      	adds	r4, r3, r2
    z3 = (INT32) wsptr[6];
 80136ac:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z2 = (INT32) wsptr[2];
 80136b0:	f851 2c18 	ldr.w	r2, [r1, #-24]
    z3 = (INT32) wsptr[4];
 80136b4:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80136b8:	eb02 0b03 	add.w	fp, r2, r3
    tmp1 = (INT32) wsptr[5];
 80136bc:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    tmp3 = (INT32) wsptr[1];
 80136c0:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80136c4:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80136c8:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 80136cc:	f851 7c04 	ldr.w	r7, [r1, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80136d0:	fb00 b202 	mla	r2, r0, r2, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80136d4:	4841      	ldr	r0, [pc, #260]	; (80137dc <jpeg_idct_8x4+0x1e0>)
 80136d6:	fb00 bb03 	mla	fp, r0, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80136da:	f851 3c20 	ldr.w	r3, [r1, #-32]
 80136de:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 80136e0:	1958      	adds	r0, r3, r5
    tmp1 = (z2 - z3) << CONST_BITS;
 80136e2:	1b5b      	subs	r3, r3, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80136e4:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 80136e8:	eb02 3640 	add.w	r6, r2, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 80136ec:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 80136f0:	9200      	str	r2, [sp, #0]
    tmp11 = tmp1 + tmp3;
 80136f2:	eb0b 3243 	add.w	r2, fp, r3, lsl #13
    tmp12 = tmp1 - tmp3;
 80136f6:	ebcb 3b43 	rsb	fp, fp, r3, lsl #13
    z2 = tmp0 + tmp2;
 80136fa:	f851 3c14 	ldr.w	r3, [r1, #-20]
    tmp11 = tmp1 + tmp3;
 80136fe:	9201      	str	r2, [sp, #4]
    z3 = tmp1 + tmp3;
 8013700:	eb0e 0209 	add.w	r2, lr, r9
    z2 = tmp0 + tmp2;
 8013704:	18f8      	adds	r0, r7, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013706:	1883      	adds	r3, r0, r2
 8013708:	436b      	muls	r3, r5
    z2 += z1;
 801370a:	4d35      	ldr	r5, [pc, #212]	; (80137e0 <jpeg_idct_8x4+0x1e4>)
 801370c:	fb05 3000 	mla	r0, r5, r0, r3
    z3 += z1;
 8013710:	4d34      	ldr	r5, [pc, #208]	; (80137e4 <jpeg_idct_8x4+0x1e8>)
 8013712:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013716:	eb07 0209 	add.w	r2, r7, r9
 801371a:	4d33      	ldr	r5, [pc, #204]	; (80137e8 <jpeg_idct_8x4+0x1ec>)
 801371c:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 801371e:	f640 158e 	movw	r5, #2446	; 0x98e
 8013722:	eb00 0a02 	add.w	sl, r0, r2
    tmp3 += z1 + z3;
 8013726:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 8013728:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801372c:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 8013730:	f243 0a0b 	movw	sl, #12299	; 0x300b
 8013734:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013738:	eb0e 0905 	add.w	r9, lr, r5
 801373c:	4d2b      	ldr	r5, [pc, #172]	; (80137ec <jpeg_idct_8x4+0x1f0>)
    tmp1 += z1 + z3;
 801373e:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013742:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 8013746:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 801374a:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 801374c:	4448      	add	r0, r9
 801374e:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013752:	fb0a 3a0e 	mla	sl, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013756:	eb06 0e02 	add.w	lr, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801375a:	1ab6      	subs	r6, r6, r2
    tmp2 += z1 + z2;
 801375c:	fb09 0005 	mla	r0, r9, r5, r0
			    & RANGE_MASK];
 8013760:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013764:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8013766:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 8013768:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801376c:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8013770:	f805 e003 	strb.w	lr, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013774:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013776:	f81c 2006 	ldrb.w	r2, [ip, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801377a:	eba3 0900 	sub.w	r9, r3, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801377e:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013780:	181a      	adds	r2, r3, r0
			    & RANGE_MASK];
 8013782:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013786:	ebab 030a 	sub.w	r3, fp, sl
			    & RANGE_MASK];
 801378a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801378e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013792:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013796:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013798:	f81c 2009 	ldrb.w	r2, [ip, r9]
 801379c:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801379e:	eb0b 020a 	add.w	r2, fp, sl
			    & RANGE_MASK];
 80137a2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 80137a6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80137aa:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80137ac:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80137b0:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80137b2:	9b00      	ldr	r3, [sp, #0]
 80137b4:	443b      	add	r3, r7
			    & RANGE_MASK];
 80137b6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80137ba:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80137be:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80137c0:	9b00      	ldr	r3, [sp, #0]
 80137c2:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 80137c4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80137c8:	f81c 3007 	ldrb.w	r3, [ip, r7]
 80137cc:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 80137ce:	9b03      	ldr	r3, [sp, #12]
 80137d0:	4543      	cmp	r3, r8
 80137d2:	f47f af63 	bne.w	801369c <jpeg_idct_8x4+0xa0>
  }
}
 80137d6:	b025      	add	sp, #148	; 0x94
 80137d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137dc:	ffffc4df 	.word	0xffffc4df
 80137e0:	ffffc13b 	.word	0xffffc13b
 80137e4:	fffff384 	.word	0xfffff384
 80137e8:	ffffe333 	.word	0xffffe333
 80137ec:	ffffadfd 	.word	0xffffadfd

080137f0 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80137f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137f4:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80137f6:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 80137fa:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80137fc:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013800:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013802:	3080      	adds	r0, #128	; 0x80
 8013804:	f102 040a 	add.w	r4, r2, #10
 8013808:	f1a1 0c04 	sub.w	ip, r1, #4
 801380c:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801380e:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013812:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013816:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013818:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801381c:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801381e:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013822:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013826:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013828:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801382c:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013830:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013834:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 <<= CONST_BITS;
 8013838:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801383c:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013840:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013844:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013848:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 801384c:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8013850:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013854:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013858:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801385c:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013860:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013864:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013866:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801386a:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801386e:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013872:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013874:	d1d0      	bne.n	8013818 <jpeg_idct_6x3+0x28>
 8013876:	f1a3 0e04 	sub.w	lr, r3, #4
 801387a:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801387e:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013882:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8013886:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8013888:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801388a:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 801388e:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8013890:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013894:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013898:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 801389c:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80138a0:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 80138a4:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80138a8:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 80138ac:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 80138b0:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 80138b4:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80138b8:	f242 7131 	movw	r1, #10033	; 0x2731
 80138bc:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 80138c0:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 80138c4:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 80138c8:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80138cc:	eb04 0508 	add.w	r5, r4, r8
 80138d0:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80138d4:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 80138d8:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80138dc:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80138e0:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80138e4:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80138e6:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80138ea:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80138ee:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80138f2:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80138f6:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 80138fa:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80138fe:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013902:	5d04      	ldrb	r4, [r0, r4]
 8013904:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013906:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801390a:	9801      	ldr	r0, [sp, #4]
 801390c:	5d84      	ldrb	r4, [r0, r6]
 801390e:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013910:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013914:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8013918:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 801391c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013920:	5d04      	ldrb	r4, [r0, r4]
 8013922:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013924:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013928:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801392a:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801392e:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 8013932:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013936:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801393a:	5cc3      	ldrb	r3, [r0, r3]
 801393c:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801393e:	5d43      	ldrb	r3, [r0, r5]
 8013940:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8013942:	d19c      	bne.n	801387e <jpeg_idct_6x3+0x8e>
  }
}
 8013944:	b015      	add	sp, #84	; 0x54
 8013946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801394c <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801394c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013950:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013952:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8013956:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8013958:	1e96      	subs	r6, r2, #2
 801395a:	f10d 0c08 	add.w	ip, sp, #8
 801395e:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013960:	3c04      	subs	r4, #4
 8013962:	f102 0e06 	add.w	lr, r2, #6
 8013966:	4660      	mov	r0, ip
{
 8013968:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801396a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 801396e:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013972:	45b6      	cmp	lr, r6
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013974:	fb01 f202 	mul.w	r2, r1, r2

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013978:	6a27      	ldr	r7, [r4, #32]
 801397a:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 801397e:	fb07 f101 	mul.w	r1, r7, r1

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8013982:	eb02 0701 	add.w	r7, r2, r1
    wsptr[4*1] = tmp10 - tmp0;
 8013986:	eba2 0201 	sub.w	r2, r2, r1
    wsptr[4*0] = tmp10 + tmp0;
 801398a:	f84c 7b04 	str.w	r7, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 801398e:	f8cc 200c 	str.w	r2, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013992:	d1ea      	bne.n	801396a <jpeg_idct_4x2+0x1e>
 8013994:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013996:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801399a:	f641 097e 	movw	r9, #6270	; 0x187e
 801399e:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 80139a2:	46e0      	mov	r8, ip
 80139a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80139a6:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 80139aa:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 80139ac:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 80139b0:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 80139b4:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 80139b8:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 80139bc:	3404      	adds	r4, #4
    z2 = wsptr[1];
 80139be:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80139c2:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80139c6:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80139c8:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80139ca:	4b13      	ldr	r3, [pc, #76]	; (8013a18 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80139cc:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80139d0:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80139d4:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80139d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80139da:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80139de:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 80139e2:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 80139e6:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80139ea:	5def      	ldrb	r7, [r5, r7]
 80139ec:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80139f0:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 80139f2:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80139f4:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80139f6:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80139fa:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 80139fe:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8013a00:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8013a04:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013a08:	5c69      	ldrb	r1, [r5, r1]
 8013a0a:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013a0c:	5caa      	ldrb	r2, [r5, r2]
 8013a0e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8013a10:	d1c7      	bne.n	80139a2 <jpeg_idct_4x2+0x56>
  }
}
 8013a12:	b00b      	add	sp, #44	; 0x2c
 8013a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a18:	ffffc4df 	.word	0xffffc4df

08013a1c <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013a1c:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013a1e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013a22:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 8013a24:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013a26:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013a28:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013a2c:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013a2e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8013a32:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013a34:	437b      	muls	r3, r7
{
 8013a36:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 8013a38:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013a3a:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 8013a3c:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013a3e:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013a40:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013a42:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013a46:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013a4a:	5c41      	ldrb	r1, [r0, r1]
 8013a4c:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013a4e:	5cc3      	ldrb	r3, [r0, r3]
 8013a50:	7073      	strb	r3, [r6, #1]
}
 8013a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013a54 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a58:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8013a5c:	f1a2 0802 	sub.w	r8, r2, #2
 8013a60:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013a62:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013a66:	3380      	adds	r3, #128	; 0x80
 8013a68:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013a6a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8013a6c:	f1a3 0904 	sub.w	r9, r3, #4
 8013a70:	f102 030e 	add.w	r3, r2, #14
 8013a74:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8013a76:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013a78:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013a7c:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013a80:	f859 1f04 	ldr.w	r1, [r9, #4]!
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013a84:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013a88:	f9b8 0040 	ldrsh.w	r0, [r8, #64]	; 0x40
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013a8c:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013a90:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013a92:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013a96:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013a98:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 8013a9a:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013a9c:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013aa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013aa4:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013aa6:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013aa8:	f9b8 4020 	ldrsh.w	r4, [r8, #32]
    tmp10 = tmp0 + tmp1;
 8013aac:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8013aae:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8013ab0:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8013ab2:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ab6:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013aba:	4ad3      	ldr	r2, [pc, #844]	; (8013e08 <jpeg_idct_8x16+0x3b4>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013abc:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013ac0:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
 8013ac4:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8013ac8:	4361      	muls	r1, r4
    z3 = z1 - z2;
 8013aca:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013ace:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013ad2:	f642 4563 	movw	r5, #11363	; 0x2c63
 8013ad6:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013ad8:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013adc:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013ae0:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013ae4:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013ae8:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013aec:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 8013af0:	eb07 020c 	add.w	r2, r7, ip
 8013af4:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8013af6:	eba7 020c 	sub.w	r2, r7, ip
 8013afa:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8013afc:	1972      	adds	r2, r6, r5
 8013afe:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8013b00:	1b72      	subs	r2, r6, r5

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013b02:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8013b06:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8013b08:	eb0b 0204 	add.w	r2, fp, r4
 8013b0c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8013b0e:	ebab 0204 	sub.w	r2, fp, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013b12:	f9b8 4070 	ldrsh.w	r4, [r8, #112]	; 0x70
    tmp25 = tmp13 - tmp2;
 8013b16:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8013b18:	1842      	adds	r2, r0, r1
 8013b1a:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8013b1c:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013b1e:	f9b8 1010 	ldrsh.w	r1, [r8, #16]
    tmp24 = tmp11 - tmp3;
 8013b22:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013b24:	f8d9 2020 	ldr.w	r2, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013b28:	f9b8 0030 	ldrsh.w	r0, [r8, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013b2c:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013b2e:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 8013b32:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013b34:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 8013b38:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013b3a:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013b3e:	188e      	adds	r6, r1, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013b40:	eba1 0b02 	sub.w	fp, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013b44:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013b46:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 8013b4a:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013b4c:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013b4e:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013b52:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013b56:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013b5a:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013b5e:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8013b62:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013b66:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8013b6a:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013b6e:	f241 5455 	movw	r4, #5461	; 0x1555
 8013b72:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013b74:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013b78:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013b7a:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013b7e:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013b80:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013b84:	4ca1      	ldr	r4, [pc, #644]	; (8013e0c <jpeg_idct_8x16+0x3b8>)
 8013b86:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013b8a:	4fa1      	ldr	r7, [pc, #644]	; (8013e10 <jpeg_idct_8x16+0x3bc>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013b8c:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013b8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013b90:	4464      	add	r4, ip
 8013b92:	445c      	add	r4, fp
 8013b94:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013b98:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013b9a:	4f9e      	ldr	r7, [pc, #632]	; (8013e14 <jpeg_idct_8x16+0x3c0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013b9c:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013b9e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8013ba2:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013ba4:	f240 214d 	movw	r1, #589	; 0x24d
 8013ba8:	fb01 4102 	mla	r1, r1, r2, r4
 8013bac:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013bae:	499a      	ldr	r1, [pc, #616]	; (8013e18 <jpeg_idct_8x16+0x3c4>)
 8013bb0:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013bb4:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013bb6:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013bb8:	f642 5a09 	movw	sl, #11529	; 0x2d09
 8013bbc:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013bc0:	fb07 1a05 	mla	sl, r7, r5, r1
 8013bc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013bc6:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013bc8:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8013bcc:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8013bd0:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013bd2:	4992      	ldr	r1, [pc, #584]	; (8013e1c <jpeg_idct_8x16+0x3c8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013bd4:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013bd6:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013bda:	4351      	muls	r1, r2
    tmp1  += z1;
 8013bdc:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013bde:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013be2:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013be6:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013be8:	498d      	ldr	r1, [pc, #564]	; (8013e20 <jpeg_idct_8x16+0x3cc>)
 8013bea:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013bec:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8013bf0:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013bf2:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013bf6:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013bf8:	eb05 0b00 	add.w	fp, r5, r0
 8013bfc:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013bfe:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013c00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013c02:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013c06:	f640 5123 	movw	r1, #3363	; 0xd23
 8013c0a:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013c0c:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8013c0e:	445c      	add	r4, fp
    tmp3  += z2;
 8013c10:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013c12:	4429      	add	r1, r5
    tmp10 += z2;
 8013c14:	4484      	add	ip, r0
    tmp11 += z2;
 8013c16:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013c18:	12c9      	asrs	r1, r1, #11
 8013c1a:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013c1e:	9901      	ldr	r1, [sp, #4]
 8013c20:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013c22:	9903      	ldr	r1, [sp, #12]
 8013c24:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013c26:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013c28:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013c2a:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013c2e:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013c30:	9903      	ldr	r1, [sp, #12]
 8013c32:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013c34:	9905      	ldr	r1, [sp, #20]
 8013c36:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013c38:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013c3a:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013c3c:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013c40:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013c42:	9905      	ldr	r1, [sp, #20]
 8013c44:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013c46:	9907      	ldr	r1, [sp, #28]
 8013c48:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013c4a:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013c4c:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013c4e:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013c52:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8013c54:	9907      	ldr	r1, [sp, #28]
 8013c56:	eba1 0e0e 	sub.w	lr, r1, lr
 8013c5a:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8013c5e:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8013c62:	9908      	ldr	r1, [sp, #32]
 8013c64:	4461      	add	r1, ip
 8013c66:	12c9      	asrs	r1, r1, #11
 8013c68:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8013c6a:	9908      	ldr	r1, [sp, #32]
 8013c6c:	eba1 0c0c 	sub.w	ip, r1, ip
 8013c70:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8013c74:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8013c78:	9906      	ldr	r1, [sp, #24]
 8013c7a:	4401      	add	r1, r0
 8013c7c:	12c9      	asrs	r1, r1, #11
 8013c7e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013c82:	9906      	ldr	r1, [sp, #24]
 8013c84:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013c86:	9904      	ldr	r1, [sp, #16]
 8013c88:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013c8a:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013c8c:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8013c8e:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8013c92:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013c96:	9904      	ldr	r1, [sp, #16]
 8013c98:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8013c9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8013c9c:	12d2      	asrs	r2, r2, #11
 8013c9e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8013ca2:	9a02      	ldr	r2, [sp, #8]
 8013ca4:	440a      	add	r2, r1
 8013ca6:	12d2      	asrs	r2, r2, #11
 8013ca8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013cac:	9a02      	ldr	r2, [sp, #8]
 8013cae:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013cb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013cb2:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013cb4:	4542      	cmp	r2, r8
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8013cb6:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013cba:	f47f aedd 	bne.w	8013a78 <jpeg_idct_8x16+0x24>
 8013cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8013cc0:	a80e      	add	r0, sp, #56	; 0x38
 8013cc2:	f1a3 0904 	sub.w	r9, r3, #4
 8013cc6:	333c      	adds	r3, #60	; 0x3c
 8013cc8:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013cca:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013cce:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8013cd2:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8013cd4:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8013cd6:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 8013cda:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 8013cdc:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8013ce0:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013ce2:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8013ce4:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp1 = (INT32) wsptr[5];
 8013ce8:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013cec:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013cee:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp2 = (INT32) wsptr[3];
 8013cf2:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013cf6:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013cfa:	4c4a      	ldr	r4, [pc, #296]	; (8013e24 <jpeg_idct_8x16+0x3d0>)
    tmp3 = (INT32) wsptr[1];
 8013cfc:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013d00:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013d04:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp0 = (INT32) wsptr[7];
 8013d08:	f850 cc04 	ldr.w	ip, [r0, #-4]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013d0c:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8013d0e:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 8013d10:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 8013d12:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8013d16:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 8013d1a:	eb0c 040e 	add.w	r4, ip, lr
    tmp11 = tmp1 + tmp3;
 8013d1e:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8013d22:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 8013d24:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 8013d28:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 8013d2c:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013d2e:	f242 53a1 	movw	r3, #9633	; 0x25a1
 8013d32:	1862      	adds	r2, r4, r1
 8013d34:	435a      	muls	r2, r3
    z2 += z1;
 8013d36:	4b3c      	ldr	r3, [pc, #240]	; (8013e28 <jpeg_idct_8x16+0x3d4>)
 8013d38:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 8013d3c:	4b3b      	ldr	r3, [pc, #236]	; (8013e2c <jpeg_idct_8x16+0x3d8>)
 8013d3e:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013d42:	eb0c 010a 	add.w	r1, ip, sl
 8013d46:	4b3a      	ldr	r3, [pc, #232]	; (8013e30 <jpeg_idct_8x16+0x3dc>)
 8013d48:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 8013d4a:	f640 138e 	movw	r3, #2446	; 0x98e
 8013d4e:	eb04 0b01 	add.w	fp, r4, r1
    tmp3 += z1 + z3;
 8013d52:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 8013d54:	fb03 bc0c 	mla	ip, r3, ip, fp
    tmp3 += z1 + z3;
 8013d58:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013d5c:	4b35      	ldr	r3, [pc, #212]	; (8013e34 <jpeg_idct_8x16+0x3e0>)
    tmp3 += z1 + z3;
 8013d5e:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013d62:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8013d66:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013d6a:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013d6e:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 8013d70:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8013d72:	4454      	add	r4, sl
 8013d74:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013d78:	fb0b 2b08 	mla	fp, fp, r8, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013d7c:	eb07 0801 	add.w	r8, r7, r1
    tmp2 += z1 + z2;
 8013d80:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013d84:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
 8013d86:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013d8a:	1a7f      	subs	r7, r7, r1
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013d8c:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013d90:	f813 e008 	ldrb.w	lr, [r3, r8]
			    & RANGE_MASK];
 8013d94:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013d98:	9b03      	ldr	r3, [sp, #12]
			    & RANGE_MASK];
 8013d9a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013d9e:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013da2:	9b00      	ldr	r3, [sp, #0]
 8013da4:	5dd9      	ldrb	r1, [r3, r7]
 8013da6:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013da8:	1931      	adds	r1, r6, r4
			    & RANGE_MASK];
 8013daa:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013dae:	5c59      	ldrb	r1, [r3, r1]
 8013db0:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013db2:	f813 100a 	ldrb.w	r1, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013db6:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013db8:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013dba:	eb03 010b 	add.w	r1, r3, fp
 8013dbe:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013dc0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013dc4:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013dc6:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013dc8:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013dca:	eba3 020b 	sub.w	r2, r3, fp
 8013dce:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8013dd0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013dd4:	5c9b      	ldrb	r3, [r3, r2]
 8013dd6:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013dd8:	9b01      	ldr	r3, [sp, #4]
 8013dda:	9a00      	ldr	r2, [sp, #0]
 8013ddc:	4463      	add	r3, ip
			    & RANGE_MASK];
 8013dde:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013de2:	5cd3      	ldrb	r3, [r2, r3]
 8013de4:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013de6:	9b01      	ldr	r3, [sp, #4]
 8013de8:	eba3 0c0c 	sub.w	ip, r3, ip
			    & RANGE_MASK];
 8013dec:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013df0:	f812 300c 	ldrb.w	r3, [r2, ip]
 8013df4:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8013df6:	9b04      	ldr	r3, [sp, #16]
 8013df8:	454b      	cmp	r3, r9
 8013dfa:	f47f af66 	bne.w	8013cca <jpeg_idct_8x16+0x276>
  }
}
 8013dfe:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8013e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e06:	bf00      	nop
 8013e08:	ffffecc2 	.word	0xffffecc2
 8013e0c:	ffffb6d6 	.word	0xffffb6d6
 8013e10:	ffffc542 	.word	0xffffc542
 8013e14:	ffffe77a 	.word	0xffffe77a
 8013e18:	ffffdbfa 	.word	0xffffdbfa
 8013e1c:	ffffeaab 	.word	0xffffeaab
 8013e20:	ffffd817 	.word	0xffffd817
 8013e24:	ffffc4df 	.word	0xffffc4df
 8013e28:	ffffc13b 	.word	0xffffc13b
 8013e2c:	fffff384 	.word	0xfffff384
 8013e30:	ffffe333 	.word	0xffffe333
 8013e34:	ffffadfd 	.word	0xffffadfd

08013e38 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e3c:	b0ef      	sub	sp, #444	; 0x1bc
 8013e3e:	f1a2 0e02 	sub.w	lr, r2, #2
 8013e42:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013e44:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013e48:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8013e4a:	3380      	adds	r3, #128	; 0x80
 8013e4c:	3804      	subs	r0, #4
 8013e4e:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8013e50:	f102 030c 	add.w	r3, r2, #12
 8013e54:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8013e56:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e58:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013e5c:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e60:	f850 1f04 	ldr.w	r1, [r0, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013e64:	f641 0b14 	movw	fp, #6164	; 0x1814
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013e68:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8013e6c:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e6e:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013e70:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8013e74:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013e76:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 8013e7a:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013e7c:	fb01 f604 	mul.w	r6, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013e80:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013e84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013e88:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013e8c:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8013e90:	1997      	adds	r7, r2, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013e92:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013e94:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8013e96:	eb02 050c 	add.w	r5, r2, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013e9a:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013e9e:	1b36      	subs	r6, r6, r4
    tmp12 = z1 - z4;
 8013ea0:	eba2 0904 	sub.w	r9, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ea4:	f9be 4020 	ldrsh.w	r4, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013ea8:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013eac:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013eb0:	49b7      	ldr	r1, [pc, #732]	; (8014190 <jpeg_idct_7x14+0x358>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8013eb2:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013eb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013eb6:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013eb8:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 8013ebc:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8013ebe:	1916      	adds	r6, r2, r4
 8013ec0:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8013ec4:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8013ec8:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013ecc:	fb01 6604 	mla	r6, r1, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8013ed0:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 8013ed4:	434c      	muls	r4, r1
    tmp20 = tmp10 + tmp13;
 8013ed6:	eb07 010c 	add.w	r1, r7, ip
 8013eda:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 8013edc:	eba7 010c 	sub.w	r1, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013ee0:	fb08 4202 	mla	r2, r8, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ee4:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp26 = tmp10 - tmp13;
 8013ee8:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 8013eea:	19a9      	adds	r1, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013eec:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8013ef0:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8013ef2:	1ba9      	subs	r1, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013ef4:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8013ef8:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 8013efa:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 8013efe:	eba9 0202 	sub.w	r2, r9, r2
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8013f02:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 8013f06:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 8013f08:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013f0a:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013f0c:	f9be 1070 	ldrsh.w	r1, [lr, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013f10:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013f12:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8013f14:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013f16:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 8013f1a:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013f1c:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013f20:	eb04 0a07 	add.w	sl, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013f24:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013f26:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8013f2a:	eb04 0c06 	add.w	ip, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013f2e:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013f32:	f242 6152 	movw	r1, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013f36:	fb0b fb0c 	mul.w	fp, fp, ip
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013f3a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013f3e:	4995      	ldr	r1, [pc, #596]	; (8014194 <jpeg_idct_7x14+0x35c>)
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8013f40:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013f44:	eb0a 0805 	add.w	r8, sl, r5
 8013f48:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 8013f4c:	fb01 8804 	mla	r8, r1, r4, r8
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013f50:	f201 211b 	addw	r1, r1, #539	; 0x21b
 8013f54:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 8013f58:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8013f5a:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 8013f5e:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8013f60:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013f64:	4c8c      	ldr	r4, [pc, #560]	; (8014198 <jpeg_idct_7x14+0x360>)
    tmp16 += tmp15;
 8013f66:	4449      	add	r1, r9
 8013f68:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8013f6a:	19b9      	adds	r1, r7, r6
 8013f6c:	fb0c f101 	mul.w	r1, ip, r1
 8013f70:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013f74:	fb04 1c07 	mla	ip, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8013f78:	4c88      	ldr	r4, [pc, #544]	; (801419c <jpeg_idct_7x14+0x364>)
 8013f7a:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8013f7e:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013f80:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013f84:	4c86      	ldr	r4, [pc, #536]	; (80141a0 <jpeg_idct_7x14+0x368>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8013f86:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013f88:	1bf5      	subs	r5, r6, r7
 8013f8a:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013f8e:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8013f92:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8013f96:	9c07      	ldr	r4, [sp, #28]
 8013f98:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013f9a:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013f9c:	f241 5b99 	movw	fp, #5529	; 0x1599

    tmp13 = (z1 - z3) << PASS1_BITS;
 8013fa0:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013fa2:	9a01      	ldr	r2, [sp, #4]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013fa4:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013fa8:	4442      	add	r2, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 8013faa:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8013fac:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013fae:	12d2      	asrs	r2, r2, #11
 8013fb0:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013fb4:	9a01      	ldr	r2, [sp, #4]
 8013fb6:	eba2 0208 	sub.w	r2, r2, r8
 8013fba:	12d2      	asrs	r2, r2, #11
 8013fbc:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013fc0:	9a03      	ldr	r2, [sp, #12]
 8013fc2:	4452      	add	r2, sl
 8013fc4:	12d2      	asrs	r2, r2, #11
 8013fc6:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013fc8:	9a03      	ldr	r2, [sp, #12]
 8013fca:	eba2 0a0a 	sub.w	sl, r2, sl
 8013fce:	ea4f 22ea 	mov.w	r2, sl, asr #11
 8013fd2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013fd6:	9a05      	ldr	r2, [sp, #20]
 8013fd8:	440a      	add	r2, r1
 8013fda:	12d2      	asrs	r2, r2, #11
 8013fdc:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013fde:	9a05      	ldr	r2, [sp, #20]
 8013fe0:	1a51      	subs	r1, r2, r1
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8013fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013fe4:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013fe8:	12c9      	asrs	r1, r1, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8013fea:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8013fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013fee:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8013ff2:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013ff6:	9a06      	ldr	r2, [sp, #24]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8013ff8:	9908      	ldr	r1, [sp, #32]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013ffa:	4462      	add	r2, ip
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8013ffc:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014000:	12d2      	asrs	r2, r2, #11
 8014002:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014004:	9a06      	ldr	r2, [sp, #24]
 8014006:	eba2 0c0c 	sub.w	ip, r2, ip
 801400a:	ea4f 22ec 	mov.w	r2, ip, asr #11
 801400e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014012:	9a04      	ldr	r2, [sp, #16]
 8014014:	442a      	add	r2, r5
 8014016:	12d2      	asrs	r2, r2, #11
 8014018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801401c:	9a04      	ldr	r2, [sp, #16]
 801401e:	1b55      	subs	r5, r2, r5
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014020:	9a02      	ldr	r2, [sp, #8]
 8014022:	440a      	add	r2, r1
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014024:	12ed      	asrs	r5, r5, #11
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014026:	12d2      	asrs	r2, r2, #11
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014028:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801402c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8014030:	9a02      	ldr	r2, [sp, #8]
 8014032:	1a52      	subs	r2, r2, r1
 8014034:	12d2      	asrs	r2, r2, #11
 8014036:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801403a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801403c:	4572      	cmp	r2, lr
 801403e:	f47f af0b 	bne.w	8013e58 <jpeg_idct_7x14+0x20>
 8014042:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8014044:	ac0c      	add	r4, sp, #48	; 0x30
 8014046:	f1a3 0904 	sub.w	r9, r3, #4
 801404a:	3334      	adds	r3, #52	; 0x34
 801404c:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801404e:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8014052:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 8014054:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 8014056:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 801405a:	189e      	adds	r6, r3, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801405c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 8014060:	9303      	str	r3, [sp, #12]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014062:	1b51      	subs	r1, r2, r5
 8014064:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8014068:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801406c:	fb02 fe01 	mul.w	lr, r2, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014070:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014074:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp10 = z1 + z3;
 8014078:	eb03 0805 	add.w	r8, r3, r5
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801407c:	eba3 0c02 	sub.w	ip, r3, r2
 8014080:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014084:	3710      	adds	r7, #16
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014086:	4947      	ldr	r1, [pc, #284]	; (80141a4 <jpeg_idct_7x14+0x36c>)
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014088:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801408c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8014090:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014094:	eb0e 000c 	add.w	r0, lr, ip
 8014098:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 801409c:	fb01 0002 	mla	r0, r1, r2, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80140a0:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80140a4:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 80140a8:	fb02 f208 	mul.w	r2, r2, r8
 80140ac:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80140b0:	fb01 2105 	mla	r1, r1, r5, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80140b4:	4d3c      	ldr	r5, [pc, #240]	; (80141a8 <jpeg_idct_7x14+0x370>)
 80140b6:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 80140ba:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80140be:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 80140c0:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80140c4:	4463      	add	r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80140c6:	eb02 050a 	add.w	r5, r2, sl
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 80140ca:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80140cc:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80140ce:	f641 53ef 	movw	r3, #7663	; 0x1def
 80140d2:	fb03 fb05 	mul.w	fp, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80140d6:	eba2 050a 	sub.w	r5, r2, sl
 80140da:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80140de:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80140e0:	44f2      	add	sl, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80140e2:	435d      	muls	r5, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80140e4:	4b31      	ldr	r3, [pc, #196]	; (80141ac <jpeg_idct_7x14+0x374>)
    tmp10 = tmp11 - tmp12;
 80140e6:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 80140ea:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80140ec:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80140f0:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80140f4:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80140f6:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80140fa:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 80140fe:	4455      	add	r5, sl
    tmp10 += z2;
 8014100:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014102:	fb0b 220e 	mla	r2, fp, lr, r2
 8014106:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014108:	eb01 020c 	add.w	r2, r1, ip
 801410c:	9978      	ldr	r1, [sp, #480]	; 0x1e0
			    & RANGE_MASK];
 801410e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014112:	5c9a      	ldrb	r2, [r3, r2]
 8014114:	9b03      	ldr	r3, [sp, #12]
 8014116:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014118:	9b01      	ldr	r3, [sp, #4]
 801411a:	eba3 0c0c 	sub.w	ip, r3, ip
 801411e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014120:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014124:	f813 200c 	ldrb.w	r2, [r3, ip]
 8014128:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801412a:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801412c:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 801412e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8014132:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014136:	5c9a      	ldrb	r2, [r3, r2]
 8014138:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801413a:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801413c:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801413e:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014140:	eb03 020a 	add.w	r2, r3, sl
 8014144:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014146:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801414a:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801414c:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801414e:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014150:	eba3 0a0a 	sub.w	sl, r3, sl
 8014154:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014156:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801415a:	f813 300a 	ldrb.w	r3, [r3, sl]
 801415e:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 8014160:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8014164:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014168:	f642 5341 	movw	r3, #11585	; 0x2d41
 801416c:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8014170:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014172:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8014176:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 801417a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801417e:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8014180:	9b04      	ldr	r3, [sp, #16]
 8014182:	454b      	cmp	r3, r9
 8014184:	f47f af63 	bne.w	801404e <jpeg_idct_7x14+0x216>
  }
}
 8014188:	b06f      	add	sp, #444	; 0x1bc
 801418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801418e:	bf00      	nop
 8014190:	ffffc8fc 	.word	0xffffc8fc
 8014194:	ffffdbf0 	.word	0xffffdbf0
 8014198:	fffff26e 	.word	0xfffff26e
 801419c:	ffffb409 	.word	0xffffb409
 80141a0:	ffffc9e6 	.word	0xffffc9e6
 80141a4:	ffffc515 	.word	0xffffc515
 80141a8:	ffffb0f1 	.word	0xffffb0f1
 80141ac:	ffffd3e1 	.word	0xffffd3e1

080141b0 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80141b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b4:	b0d3      	sub	sp, #332	; 0x14c
 80141b6:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80141b8:	f1a2 0a02 	sub.w	sl, r2, #2
 80141bc:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80141be:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80141c2:	3380      	adds	r3, #128	; 0x80
 80141c4:	9301      	str	r3, [sp, #4]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80141c6:	1f0b      	subs	r3, r1, #4
 80141c8:	9300      	str	r3, [sp, #0]
 80141ca:	f102 030a 	add.w	r3, r2, #10
 80141ce:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 80141d0:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80141d2:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80141d4:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80141d8:	f93a 7f02 	ldrsh.w	r7, [sl, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80141dc:	f640 0b5b 	movw	fp, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80141e0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80141e4:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80141e6:	f9ba 0040 	ldrsh.w	r0, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80141ea:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80141ec:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80141f0:	f9ba 5020 	ldrsh.w	r5, [sl, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80141f4:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80141f6:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80141fa:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 80141fc:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80141fe:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014200:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014202:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014206:	f9ba c060 	ldrsh.w	ip, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801420a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801420c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014210:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014214:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014218:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 801421a:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 801421c:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801421e:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 8014222:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8014226:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8014228:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 801422c:	eb07 010c 	add.w	r1, r7, ip
 8014230:	9102      	str	r1, [sp, #8]
    tmp24 = z3 - tmp12;
 8014232:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8014236:	eb00 0c04 	add.w	ip, r0, r4
    tmp12 = z4 - z1 - z2;
 801423a:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 801423e:	9103      	str	r1, [sp, #12]
    tmp12 = z4 - z1 - z2;
 8014240:	1b04      	subs	r4, r0, r4
    tmp25 = tmp10 - tmp12;
 8014242:	eba6 010c 	sub.w	r1, r6, ip
    tmp20 = tmp10 + tmp12;
 8014246:	eb06 070c 	add.w	r7, r6, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801424a:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp25 = tmp10 - tmp12;
 801424e:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 8014250:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 8014252:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014254:	f9ba 5050 	ldrsh.w	r5, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014258:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 801425c:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801425e:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 8014260:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8014262:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014266:	6a12      	ldr	r2, [r2, #32]
 8014268:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801426c:	9a00      	ldr	r2, [sp, #0]
 801426e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8014270:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014274:	9a00      	ldr	r2, [sp, #0]
 8014276:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801427a:	fb01 f40e 	mul.w	r4, r1, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801427e:	4977      	ldr	r1, [pc, #476]	; (801445c <jpeg_idct_6x12+0x2ac>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014280:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014282:	9a00      	ldr	r2, [sp, #0]
 8014284:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8014288:	eb0c 0605 	add.w	r6, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801428c:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801428e:	fb01 f00e 	mul.w	r0, r1, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014292:	4973      	ldr	r1, [pc, #460]	; (8014460 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014294:	eb02 0806 	add.w	r8, r2, r6
 8014298:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801429c:	fb0b 8b06 	mla	fp, fp, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80142a0:	f640 06f7 	movw	r6, #2295	; 0x8f7
 80142a4:	eb04 090b 	add.w	r9, r4, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80142a8:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80142ac:	fb06 990c 	mla	r9, r6, ip, r9
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80142b0:	18ae      	adds	r6, r5, r2
 80142b2:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80142b4:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80142b6:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80142b8:	496a      	ldr	r1, [pc, #424]	; (8014464 <jpeg_idct_6x12+0x2b4>)
 80142ba:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80142be:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 80142c0:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80142c4:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80142c8:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80142ca:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 80142ce:	fb0b 4402 	mla	r4, fp, r2, r4
 80142d2:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80142d4:	4964      	ldr	r1, [pc, #400]	; (8014468 <jpeg_idct_6x12+0x2b8>)
 80142d6:	fb01 000c 	mla	r0, r1, ip, r0
 80142da:	4964      	ldr	r1, [pc, #400]	; (801446c <jpeg_idct_6x12+0x2bc>)
 80142dc:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 80142e0:	ebac 0202 	sub.w	r2, ip, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80142e4:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80142e8:	f641 0c7e 	movw	ip, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80142ec:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80142ee:	eb02 0805 	add.w	r8, r2, r5
 80142f2:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80142f6:	fb01 8e05 	mla	lr, r1, r5, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80142fa:	eb07 0509 	add.w	r5, r7, r9
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80142fe:	eba7 0709 	sub.w	r7, r7, r9
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014302:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014306:	12ed      	asrs	r5, r5, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014308:	12ff      	asrs	r7, r7, #11
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801430a:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801430e:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014312:	9902      	ldr	r1, [sp, #8]
 8014314:	188d      	adds	r5, r1, r2
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014316:	1a8a      	subs	r2, r1, r2
 8014318:	12d2      	asrs	r2, r2, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801431a:	12ed      	asrs	r5, r5, #11
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801431c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014320:	9a05      	ldr	r2, [sp, #20]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014322:	615d      	str	r5, [r3, #20]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014324:	4432      	add	r2, r6
 8014326:	12d2      	asrs	r2, r2, #11
 8014328:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801432a:	9a05      	ldr	r2, [sp, #20]
 801432c:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801432e:	9a06      	ldr	r2, [sp, #24]
 8014330:	4422      	add	r2, r4
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014332:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014334:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014336:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801433a:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801433c:	9a06      	ldr	r2, [sp, #24]
 801433e:	1b14      	subs	r4, r2, r4
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014340:	9a03      	ldr	r2, [sp, #12]
 8014342:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014344:	12e4      	asrs	r4, r4, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014346:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014348:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801434c:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801434e:	9a03      	ldr	r2, [sp, #12]
 8014350:	eba2 050e 	sub.w	r5, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014354:	9a04      	ldr	r2, [sp, #16]
 8014356:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014358:	12ed      	asrs	r5, r5, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801435a:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801435c:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014360:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014362:	9a04      	ldr	r2, [sp, #16]
 8014364:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014366:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014368:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801436a:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801436c:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014370:	f47f af2f 	bne.w	80141d2 <jpeg_idct_6x12+0x22>
 8014374:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 8014376:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014378:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 801437c:	f1a3 0c04 	sub.w	ip, r3, #4
 8014380:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 8014384:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014388:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 801438c:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 801438e:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014390:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 8014394:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8014396:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801439a:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801439e:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80143a2:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80143a6:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 80143aa:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 80143ae:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 80143b2:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 80143b6:	eba3 0302 	sub.w	r3, r3, r2
 80143ba:	9300      	str	r3, [sp, #0]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80143bc:	f242 7331 	movw	r3, #10033	; 0x2731
 80143c0:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 80143c4:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80143c8:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 80143cc:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 80143d0:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80143d4:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80143d8:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80143dc:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80143e0:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 80143e4:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 80143e6:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80143ea:	9b01      	ldr	r3, [sp, #4]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80143ec:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 80143f0:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80143f4:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80143f8:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80143fc:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8014400:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8014404:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014408:	5c18      	ldrb	r0, [r3, r0]
 801440a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 801440c:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014410:	9b01      	ldr	r3, [sp, #4]
 8014412:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014414:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014416:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014418:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 801441c:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801441e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014422:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014424:	9b00      	ldr	r3, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014426:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014428:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 801442c:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801442e:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8014430:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014434:	f813 300e 	ldrb.w	r3, [r3, lr]
 8014438:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801443a:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801443e:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 8014442:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8014446:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801444a:	5cc3      	ldrb	r3, [r0, r3]
 801444c:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801444e:	5d03      	ldrb	r3, [r0, r4]
 8014450:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8014452:	d197      	bne.n	8014384 <jpeg_idct_6x12+0x1d4>
  }
}
 8014454:	b053      	add	sp, #332	; 0x14c
 8014456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801445a:	bf00      	nop
 801445c:	ffffeeaf 	.word	0xffffeeaf
 8014460:	ffffde8b 	.word	0xffffde8b
 8014464:	ffffd0b0 	.word	0xffffd0b0
 8014468:	ffffea5c 	.word	0xffffea5c
 801446c:	ffffc08c 	.word	0xffffc08c

08014470 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014474:	b0b9      	sub	sp, #228	; 0xe4
 8014476:	1e94      	subs	r4, r2, #2
 8014478:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801447a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801447e:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014480:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014482:	3380      	adds	r3, #128	; 0x80
 8014484:	3804      	subs	r0, #4
 8014486:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014488:	f102 0308 	add.w	r3, r2, #8
 801448c:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801448e:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014492:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014494:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014498:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801449c:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801449e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80144a2:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80144a4:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 80144a8:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80144aa:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80144ae:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80144b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80144b6:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80144b8:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 80144bc:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 80144be:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80144c2:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80144c4:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80144c8:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80144cc:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80144d0:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80144d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80144d4:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80144d6:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80144da:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80144dc:	19f3      	adds	r3, r6, r7
 80144de:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80144e0:	f241 0271 	movw	r2, #4209	; 0x1071
 80144e4:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80144e8:	4a6d      	ldr	r2, [pc, #436]	; (80146a0 <jpeg_idct_5x10+0x230>)
 80144ea:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 80144ee:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 80144f0:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80144f4:	f9b4 5030 	ldrsh.w	r5, [r4, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 80144f8:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 80144fc:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8014500:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8014502:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014504:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8014508:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801450a:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801450e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014510:	6e03      	ldr	r3, [r0, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014512:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014516:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014518:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 801451c:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014520:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 8014524:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014526:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 801452a:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 801452e:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014530:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014534:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014538:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801453c:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801453e:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014542:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 8014546:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801454a:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801454c:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014550:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014552:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014556:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801455a:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801455c:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801455e:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014562:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014566:	f642 0353 	movw	r3, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801456a:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801456e:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014572:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014574:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014578:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801457a:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801457e:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014582:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014586:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801458a:	1b5b      	subs	r3, r3, r5
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801458c:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801458e:	444d      	add	r5, r9
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014590:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014594:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8014598:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801459c:	18fa      	adds	r2, r7, r3
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801459e:	1aff      	subs	r7, r7, r3
    wsptr[5*2] = (int) (tmp22 + tmp12);
 80145a0:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80145a2:	12d2      	asrs	r2, r2, #11
    wsptr[5*2] = (int) (tmp22 + tmp12);
 80145a4:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80145a8:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80145aa:	610a      	str	r2, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 80145ac:	624b      	str	r3, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 80145ae:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80145b0:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*7] = (int) (tmp22 - tmp12);
 80145b4:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 80145b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80145bc:	9b02      	ldr	r3, [sp, #8]
 80145be:	442b      	add	r3, r5
 80145c0:	12db      	asrs	r3, r3, #11
 80145c2:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80145c4:	9b02      	ldr	r3, [sp, #8]
 80145c6:	1b5d      	subs	r5, r3, r5
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80145c8:	9b01      	ldr	r3, [sp, #4]
 80145ca:	4453      	add	r3, sl
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80145cc:	12ed      	asrs	r5, r5, #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80145ce:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80145d0:	674d      	str	r5, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80145d2:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80145d4:	9b01      	ldr	r3, [sp, #4]
 80145d6:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80145da:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80145dc:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80145e0:	42a3      	cmp	r3, r4
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80145e2:	660e      	str	r6, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80145e4:	f47f af53 	bne.w	801448e <jpeg_idct_5x10+0x1e>
 80145e8:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 80145ea:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80145ec:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80145f0:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 80145f4:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80145f8:	f641 289a 	movw	r8, #6810	; 0x1a9a
 80145fc:	3324      	adds	r3, #36	; 0x24
 80145fe:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8014600:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8014604:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8014606:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8014608:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 801460c:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8014610:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014614:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014618:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801461a:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801461c:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 801461e:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014622:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8014626:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801462a:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 801462e:	eb03 3047 	add.w	r0, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014632:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014634:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8014638:	1814      	adds	r4, r2, r0
    tmp11 = z3 - z1;
 801463a:	1a82      	subs	r2, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801463c:	eb05 000b 	add.w	r0, r5, fp
 8014640:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014644:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8014648:	4b15      	ldr	r3, [pc, #84]	; (80146a0 <jpeg_idct_5x10+0x230>)
 801464a:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801464e:	eb04 0b05 	add.w	fp, r4, r5
 8014652:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014654:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 8014656:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 801465a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801465e:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8014662:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8014664:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014668:	9b00      	ldr	r3, [sp, #0]
 801466a:	5d1c      	ldrb	r4, [r3, r4]
 801466c:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801466e:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014670:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 8014672:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8014676:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801467a:	5d1c      	ldrb	r4, [r3, r4]
 801467c:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801467e:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8014680:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014682:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8014684:	009b      	lsls	r3, r3, #2
 8014686:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801468a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 801468c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014690:	5ddb      	ldrb	r3, [r3, r7]
 8014692:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8014694:	9b02      	ldr	r3, [sp, #8]
 8014696:	4563      	cmp	r3, ip
 8014698:	d1b2      	bne.n	8014600 <jpeg_idct_5x10+0x190>
  }
}
 801469a:	b039      	add	sp, #228	; 0xe4
 801469c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146a0:	ffffba5c 	.word	0xffffba5c

080146a4 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80146a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146a8:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80146aa:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80146ac:	3a02      	subs	r2, #2
{
 80146ae:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 80146b0:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80146b2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80146b6:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  for (ctr = 4; ctr > 0; ctr--) {
 80146ba:	f105 0310 	add.w	r3, r5, #16
 80146be:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80146c0:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80146c4:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80146c6:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80146ca:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 80146ce:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80146d2:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 80146d6:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80146da:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80146de:	f855 3b04 	ldr.w	r3, [r5], #4
 80146e2:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 80146e6:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80146e8:	ea4a 030b 	orr.w	r3, sl, fp
 80146ec:	ea4e 0303 	orr.w	r3, lr, r3
 80146f0:	433b      	orrs	r3, r7
 80146f2:	ea48 0303 	orr.w	r3, r8, r3
 80146f6:	4333      	orrs	r3, r6
 80146f8:	ea59 0303 	orrs.w	r3, r9, r3
 80146fc:	d154      	bne.n	80147a8 <jpeg_idct_4x8+0x104>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80146fe:	00a4      	lsls	r4, r4, #2
      wsptr[4*0] = dcval;
 8014700:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[4*1] = dcval;
 8014704:	60cc      	str	r4, [r1, #12]
      wsptr[4*2] = dcval;
 8014706:	61cc      	str	r4, [r1, #28]
      wsptr[4*3] = dcval;
 8014708:	62cc      	str	r4, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 801470a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 801470c:	64cc      	str	r4, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 801470e:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8014710:	66cc      	str	r4, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8014712:	9b05      	ldr	r3, [sp, #20]
 8014714:	42ab      	cmp	r3, r5
 8014716:	d1d3      	bne.n	80146c0 <jpeg_idct_4x8+0x1c>
 8014718:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 801471a:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801471c:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014720:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8014724:	1f1d      	subs	r5, r3, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014726:	f8df b184 	ldr.w	fp, [pc, #388]	; 80148ac <jpeg_idct_4x8+0x208>
 801472a:	331c      	adds	r3, #28
 801472c:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 801472e:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8014732:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8014734:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014736:	f854 0c10 	ldr.w	r0, [r4, #-16]
    outptr = output_buf[ctr] + output_col;
 801473a:	18be      	adds	r6, r7, r2
    z3 = (INT32) wsptr[3];
 801473c:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8014740:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014744:	3010      	adds	r0, #16
    z2 = (INT32) wsptr[1];
 8014746:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801474a:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801474e:	1a80      	subs	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014750:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014754:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014756:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801475a:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801475e:	fb0b 220a 	mla	r2, fp, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014762:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014766:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 801476a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 801476e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014772:	f81c a00a 	ldrb.w	sl, [ip, sl]
 8014776:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801477a:	f81c 1001 	ldrb.w	r1, [ip, r1]
  for (ctr = 0; ctr < 8; ctr++) {
 801477e:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014780:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014782:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014786:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
  for (ctr = 0; ctr < 8; ctr++) {
 801478a:	42ab      	cmp	r3, r5
			    & RANGE_MASK];
 801478c:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8014790:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014794:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8014798:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801479a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801479e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 80147a0:	d1c5      	bne.n	801472e <jpeg_idct_4x8+0x8a>
  }
}
 80147a2:	b027      	add	sp, #156	; 0x9c
 80147a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80147a8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80147aa:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80147ae:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 80147b2:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80147b4:	f241 1651 	movw	r6, #4433	; 0x1151
 80147b8:	eb0b 0300 	add.w	r3, fp, r0
 80147bc:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80147be:	f641 067e 	movw	r6, #6270	; 0x187e
 80147c2:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80147c6:	4e39      	ldr	r6, [pc, #228]	; (80148ac <jpeg_idct_4x8+0x208>)
 80147c8:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 80147cc:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80147ce:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80147d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80147d4:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 80147d6:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 80147da:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp10 = tmp0 + tmp2;
 80147de:	eb0b 0004 	add.w	r0, fp, r4
    tmp11 = tmp1 + tmp3;
 80147e2:	18f7      	adds	r7, r6, r3
    tmp12 = tmp1 - tmp3;
 80147e4:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 80147e6:	9001      	str	r0, [sp, #4]
    tmp13 = tmp0 - tmp2;
 80147e8:	eba4 000b 	sub.w	r0, r4, fp
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80147ec:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 80147ee:	9002      	str	r0, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80147f0:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80147f4:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 80147f8:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80147fa:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80147fe:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014802:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8014806:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801480a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 801480c:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8014810:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8014814:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014818:	1930      	adds	r0, r6, r4
 801481a:	4358      	muls	r0, r3
    z2 += z1;
 801481c:	4b24      	ldr	r3, [pc, #144]	; (80148b0 <jpeg_idct_4x8+0x20c>)
 801481e:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8014822:	4b24      	ldr	r3, [pc, #144]	; (80148b4 <jpeg_idct_4x8+0x210>)
 8014824:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014828:	eb09 040a 	add.w	r4, r9, sl
 801482c:	4b22      	ldr	r3, [pc, #136]	; (80148b8 <jpeg_idct_4x8+0x214>)
 801482e:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8014830:	f640 138e 	movw	r3, #2446	; 0x98e
 8014834:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 8014838:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801483a:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 801483e:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014842:	4b1e      	ldr	r3, [pc, #120]	; (80148bc <jpeg_idct_4x8+0x218>)
    tmp3 += z1 + z3;
 8014844:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014848:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 801484c:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014850:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014854:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 8014856:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 8014858:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 801485a:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 801485e:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8014862:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014866:	191e      	adds	r6, r3, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014868:	1b1c      	subs	r4, r3, r4
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801486a:	9b03      	ldr	r3, [sp, #12]
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801486c:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801486e:	12e4      	asrs	r4, r4, #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014870:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014874:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014876:	eb07 040a 	add.w	r4, r7, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801487a:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801487e:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014880:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014884:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014886:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014888:	1a18      	subs	r0, r3, r0
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801488a:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801488c:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801488e:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014890:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014892:	12c0      	asrs	r0, r0, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014894:	61cc      	str	r4, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014896:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014898:	64c8      	str	r0, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801489a:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801489c:	9b02      	ldr	r3, [sp, #8]
 801489e:	eba3 0909 	sub.w	r9, r3, r9
 80148a2:	ea4f 23e9 	mov.w	r3, r9, asr #11
 80148a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 80148a8:	e733      	b.n	8014712 <jpeg_idct_4x8+0x6e>
 80148aa:	bf00      	nop
 80148ac:	ffffc4df 	.word	0xffffc4df
 80148b0:	ffffc13b 	.word	0xffffc13b
 80148b4:	fffff384 	.word	0xfffff384
 80148b8:	ffffe333 	.word	0xffffe333
 80148bc:	ffffadfd 	.word	0xffffadfd

080148c0 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80148c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80148c4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80148c8:	b095      	sub	sp, #84	; 0x54
 80148ca:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80148cc:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80148ce:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80148d2:	3204      	adds	r2, #4
 80148d4:	3c04      	subs	r4, #4
  wsptr = workspace;
 80148d6:	ae02      	add	r6, sp, #8
{
 80148d8:	9300      	str	r3, [sp, #0]
 80148da:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80148dc:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80148e0:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80148e4:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80148e8:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80148ea:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80148ee:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80148f0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80148f4:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80148f8:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 80148fa:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80148fc:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014900:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014904:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014908:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801490c:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 801490e:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8014910:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014914:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014916:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014918:	f242 7731 	movw	r7, #10033	; 0x2731
 801491c:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801491e:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 8014922:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8014926:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014928:	6a22      	ldr	r2, [r4, #32]
 801492a:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801492c:	6e27      	ldr	r7, [r4, #96]	; 0x60
 801492e:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014932:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8014936:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801493a:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801493e:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014942:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014946:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014948:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801494a:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801494e:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014950:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014954:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014958:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801495c:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014960:	eba7 0708 	sub.w	r7, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014964:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014968:	ea4f 0887 	mov.w	r8, r7, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801496c:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014970:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8014974:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014976:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 801497a:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 801497e:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014980:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014984:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014988:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801498a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801498e:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014992:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014994:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014996:	d1a1      	bne.n	80148dc <jpeg_idct_3x6+0x1c>
 8014998:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 801499a:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801499c:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80149a0:	f242 7b31 	movw	fp, #10033	; 0x2731
 80149a4:	1f1d      	subs	r5, r3, #4
 80149a6:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 80149a8:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 80149ac:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 80149ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80149b0:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 80149b4:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 80149b6:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80149ba:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80149be:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80149c2:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80149c6:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80149ca:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80149cc:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 80149d0:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 80149d4:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80149d8:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80149dc:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 80149e0:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 80149e4:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 80149e8:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 80149ec:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80149f0:	f81e a00a 	ldrb.w	sl, [lr, sl]
 80149f4:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80149f8:	f81e 4008 	ldrb.w	r4, [lr, r8]
 80149fc:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 80149fe:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014a02:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8014a04:	d1d0      	bne.n	80149a8 <jpeg_idct_3x6+0xe8>
  }
}
 8014a06:	b015      	add	sp, #84	; 0x54
 8014a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a0c <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a10:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8014a14:	b08b      	sub	sp, #44	; 0x2c
 8014a16:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014a18:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a1a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014a1e:	ad02      	add	r5, sp, #8
 8014a20:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014a22:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014a26:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014a2a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a2c:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8014a30:	46b4      	mov	ip, r6
 8014a32:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014a36:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014a38:	4f29      	ldr	r7, [pc, #164]	; (8014ae0 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014a3a:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014a3c:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a40:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 8014a44:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a46:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014a4a:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a4e:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014a52:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014a56:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014a5a:	6a21      	ldr	r1, [r4, #32]
 8014a5c:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014a60:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8014a62:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014a66:	eb0a 010b 	add.w	r1, sl, fp
 8014a6a:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014a6e:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014a72:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8014a76:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8014a7a:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 8014a7e:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 8014a82:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 8014a86:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 8014a8a:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 8014a8e:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8014a92:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014a94:	d1ca      	bne.n	8014a2c <jpeg_idct_2x4+0x20>
 8014a96:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8014a98:	a902      	add	r1, sp, #8
 8014a9a:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014a9c:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8014aa0:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8014aa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 8014aa4:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8014aa8:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 8014aaa:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8014aae:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014ab2:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8014ab4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014ab8:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8014abc:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8014ac0:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8014ac4:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014ac8:	5d3c      	ldrb	r4, [r7, r4]
 8014aca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014acc:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8014ace:	9c01      	ldr	r4, [sp, #4]
 8014ad0:	5ca2      	ldrb	r2, [r4, r2]
 8014ad2:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8014ad6:	d1e1      	bne.n	8014a9c <jpeg_idct_2x4+0x90>
  }
}
 8014ad8:	b00b      	add	sp, #44	; 0x2c
 8014ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ade:	bf00      	nop
 8014ae0:	ffffc4df 	.word	0xffffc4df

08014ae4 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014ae4:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014ae6:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014ae8:	f9b2 1000 	ldrsh.w	r1, [r2]
 8014aec:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014aee:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8014af2:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014af4:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014af6:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014afa:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 8014afc:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014afe:	3080      	adds	r0, #128	; 0x80
{
 8014b00:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014b02:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014b04:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8014b06:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 8014b0a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014b0e:	5d06      	ldrb	r6, [r0, r4]
 8014b10:	681c      	ldr	r4, [r3, #0]
 8014b12:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014b14:	5c42      	ldrb	r2, [r0, r1]
 8014b16:	685b      	ldr	r3, [r3, #4]
 8014b18:	555a      	strb	r2, [r3, r5]
}
 8014b1a:	bd70      	pop	{r4, r5, r6, pc}

08014b1c <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 8014b1c:	6803      	ldr	r3, [r0, #0]
 8014b1e:	2238      	movs	r2, #56	; 0x38
 8014b20:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	4718      	bx	r3

08014b28 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014b28:	688b      	ldr	r3, [r1, #8]
{
 8014b2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014b2e:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8014b32:	698b      	ldr	r3, [r1, #24]
{
 8014b34:	b085      	sub	sp, #20
 8014b36:	4681      	mov	r9, r0
 8014b38:	460c      	mov	r4, r1
 8014b3a:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 8014b3c:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014b40:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014b42:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014b46:	6922      	ldr	r2, [r4, #16]
 8014b48:	42b2      	cmp	r2, r6
 8014b4a:	dc02      	bgt.n	8014b52 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 8014b4c:	b005      	add	sp, #20
 8014b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014b52:	1b92      	subs	r2, r2, r6
 8014b54:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8014b56:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014b58:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014b5a:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 8014b5c:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8014b60:	bfa8      	it	ge
 8014b62:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014b64:	69e1      	ldr	r1, [r4, #28]
 8014b66:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014b68:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8014b6a:	428a      	cmp	r2, r1
 8014b6c:	bfa8      	it	ge
 8014b6e:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8014b70:	42aa      	cmp	r2, r5
 8014b72:	bfa8      	it	ge
 8014b74:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 8014b76:	2a00      	cmp	r2, #0
 8014b78:	dde8      	ble.n	8014b4c <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 8014b7a:	fb02 f308 	mul.w	r3, r2, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014b7e:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8014b80:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014b82:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 8014b86:	f1ba 0f00 	cmp.w	sl, #0
 8014b8a:	d00a      	beq.n	8014ba2 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8014b8c:	9300      	str	r3, [sp, #0]
 8014b8e:	4659      	mov	r1, fp
 8014b90:	463b      	mov	r3, r7
 8014b92:	4648      	mov	r0, r9
 8014b94:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014b96:	47a8      	blx	r5
    file_offset += byte_count;
 8014b98:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014b9a:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8014b9c:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8014b9e:	4416      	add	r6, r2
 8014ba0:	e7d1      	b.n	8014b46 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8014ba2:	9b03      	ldr	r3, [sp, #12]
 8014ba4:	4659      	mov	r1, fp
 8014ba6:	4648      	mov	r0, r9
 8014ba8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014baa:	9300      	str	r3, [sp, #0]
 8014bac:	463b      	mov	r3, r7
 8014bae:	e7f2      	b.n	8014b96 <do_barray_io+0x6e>

08014bb0 <alloc_small>:
{
 8014bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014bb4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8014bb8:	4606      	mov	r6, r0
 8014bba:	460d      	mov	r5, r1
 8014bbc:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014bbe:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014bc0:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8014bc2:	d902      	bls.n	8014bca <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8014bc4:	2101      	movs	r1, #1
 8014bc6:	f7ff ffa9 	bl	8014b1c <out_of_memory>
  if (odd_bytes > 0)
 8014bca:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8014bce:	bf1c      	itt	ne
 8014bd0:	3408      	addne	r4, #8
 8014bd2:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014bd4:	2d01      	cmp	r5, #1
 8014bd6:	d906      	bls.n	8014be6 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014bd8:	6833      	ldr	r3, [r6, #0]
 8014bda:	220f      	movs	r2, #15
 8014bdc:	4630      	mov	r0, r6
 8014bde:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 8014be6:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 8014bea:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 8014bee:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 8014bf2:	b9e8      	cbnz	r0, 8014c30 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8014bf4:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8014bf8:	f1ba 0f00 	cmp.w	sl, #0
 8014bfc:	d11e      	bne.n	8014c3c <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 8014bfe:	4b1d      	ldr	r3, [pc, #116]	; (8014c74 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8014c00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8014c04:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 8014c08:	429d      	cmp	r5, r3
 8014c0a:	bf28      	it	cs
 8014c0c:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 8014c0e:	eb05 0b09 	add.w	fp, r5, r9
 8014c12:	4630      	mov	r0, r6
 8014c14:	4659      	mov	r1, fp
 8014c16:	f000 fbcf 	bl	80153b8 <jpeg_get_small>
      if (hdr_ptr != NULL)
 8014c1a:	b988      	cbnz	r0, 8014c40 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014c1c:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 8014c1e:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 8014c22:	d803      	bhi.n	8014c2c <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 8014c24:	2102      	movs	r1, #2
 8014c26:	4630      	mov	r0, r6
 8014c28:	f7ff ff78 	bl	8014b1c <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8014c2c:	465d      	mov	r5, fp
 8014c2e:	e7ee      	b.n	8014c0e <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8014c30:	6883      	ldr	r3, [r0, #8]
 8014c32:	42a3      	cmp	r3, r4
 8014c34:	d211      	bcs.n	8014c5a <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 8014c36:	4682      	mov	sl, r0
 8014c38:	6800      	ldr	r0, [r0, #0]
 8014c3a:	e7da      	b.n	8014bf2 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8014c3c:	4b0e      	ldr	r3, [pc, #56]	; (8014c78 <alloc_small+0xc8>)
 8014c3e:	e7df      	b.n	8014c00 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8014c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8014c42:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8014c44:	445b      	add	r3, fp
 8014c46:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 8014c48:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8014c4a:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8014c4c:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8014c50:	f1ba 0f00 	cmp.w	sl, #0
 8014c54:	d10b      	bne.n	8014c6e <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 8014c56:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014c5a:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014c5c:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014c5e:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8014c60:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8014c62:	6882      	ldr	r2, [r0, #8]
 8014c64:	1b12      	subs	r2, r2, r4
 8014c66:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8014c68:	4418      	add	r0, r3
}
 8014c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8014c6e:	f8ca 0000 	str.w	r0, [sl]
 8014c72:	e7f2      	b.n	8014c5a <alloc_small+0xaa>
 8014c74:	0802d71c 	.word	0x0802d71c
 8014c78:	0802d714 	.word	0x0802d714

08014c7c <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8014c7c:	2901      	cmp	r1, #1
{
 8014c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c82:	4604      	mov	r4, r0
 8014c84:	460d      	mov	r5, r1
 8014c86:	4616      	mov	r6, r2
 8014c88:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014c8a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8014c8e:	d005      	beq.n	8014c9c <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014c90:	6803      	ldr	r3, [r0, #0]
 8014c92:	220f      	movs	r2, #15
 8014c94:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8014c9c:	223c      	movs	r2, #60	; 0x3c
 8014c9e:	4629      	mov	r1, r5
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	f7ff ff85 	bl	8014bb0 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014ca6:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8014ca8:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014caa:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8014cac:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8014cae:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 8014cb2:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8014cb4:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 8014cb6:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8014cba:	9a07      	ldr	r2, [sp, #28]
 8014cbc:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 8014cbe:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 8014cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014cc6 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8014cc6:	2901      	cmp	r1, #1
{
 8014cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ccc:	4604      	mov	r4, r0
 8014cce:	460d      	mov	r5, r1
 8014cd0:	4616      	mov	r6, r2
 8014cd2:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014cd4:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8014cd8:	d005      	beq.n	8014ce6 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014cda:	6803      	ldr	r3, [r0, #0]
 8014cdc:	220f      	movs	r2, #15
 8014cde:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8014ce6:	223c      	movs	r2, #60	; 0x3c
 8014ce8:	4629      	mov	r1, r5
 8014cea:	4620      	mov	r0, r4
 8014cec:	f7ff ff60 	bl	8014bb0 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014cf0:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8014cf2:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8014cf4:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8014cf6:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8014cf8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 8014cfc:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8014cfe:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8014d00:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8014d04:	9a07      	ldr	r2, [sp, #28]
 8014d06:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8014d08:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 8014d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d10 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014d10:	2901      	cmp	r1, #1
{
 8014d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d16:	4606      	mov	r6, r0
 8014d18:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014d1a:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014d1c:	d910      	bls.n	8014d40 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014d1e:	6803      	ldr	r3, [r0, #0]
 8014d20:	220f      	movs	r2, #15
 8014d22:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 8014d2a:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 8014d2e:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 8014d30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 8014d32:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 8014d34:	bb0b      	cbnz	r3, 8014d7a <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 8014d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 8014d38:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 8014d3a:	bb69      	cbnz	r1, 8014d98 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 8014d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 8014d40:	d1f3      	bne.n	8014d2a <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014d42:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014d44:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014d46:	b924      	cbnz	r4, 8014d52 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014d48:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 8014d4a:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014d4c:	b95f      	cbnz	r7, 8014d66 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 8014d4e:	64af      	str	r7, [r5, #72]	; 0x48
 8014d50:	e7eb      	b.n	8014d2a <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8014d52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014d54:	b12b      	cbz	r3, 8014d62 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8014d56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014d58:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014d5c:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014d5e:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8014d60:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8014d62:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8014d64:	e7ef      	b.n	8014d46 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 8014d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d68:	b12b      	cbz	r3, 8014d76 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8014d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d6c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014d70:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8014d72:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8014d74:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8014d76:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 8014d78:	e7e8      	b.n	8014d4c <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 8014d7a:	e9d3 8700 	ldrd	r8, r7, [r3]
 8014d7e:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8014d80:	4619      	mov	r1, r3
 8014d82:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8014d84:	4417      	add	r7, r2
 8014d86:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8014d88:	463a      	mov	r2, r7
 8014d8a:	f000 fb1e 	bl	80153ca <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8014d8e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014d90:	1bdb      	subs	r3, r3, r7
 8014d92:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8014d94:	4643      	mov	r3, r8
 8014d96:	e7cd      	b.n	8014d34 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8014d98:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8014d9a:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 8014d9c:	e9d1 7400 	ldrd	r7, r4, [r1]
 8014da0:	4414      	add	r4, r2
 8014da2:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8014da4:	4622      	mov	r2, r4
 8014da6:	f000 fb0a 	bl	80153be <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 8014daa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8014dac:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 8014dae:	1b1b      	subs	r3, r3, r4
 8014db0:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8014db2:	e7c2      	b.n	8014d3a <free_pool+0x2a>

08014db4 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8014db4:	b510      	push	{r4, lr}
 8014db6:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8014db8:	2101      	movs	r1, #1
 8014dba:	f7ff ffa9 	bl	8014d10 <free_pool>
 8014dbe:	2100      	movs	r1, #0
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f7ff ffa5 	bl	8014d10 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8014dc6:	4620      	mov	r0, r4
 8014dc8:	6861      	ldr	r1, [r4, #4]
 8014dca:	2254      	movs	r2, #84	; 0x54
 8014dcc:	f000 faf7 	bl	80153be <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8014dd0:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8014dd2:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8014dd4:	6063      	str	r3, [r4, #4]
}
 8014dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8014dda:	f000 bb02 	b.w	80153e2 <jpeg_mem_term>

08014dde <access_virt_barray>:
{
 8014dde:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 8014de2:	18d7      	adds	r7, r2, r3
{
 8014de4:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014de6:	684a      	ldr	r2, [r1, #4]
{
 8014de8:	460c      	mov	r4, r1
 8014dea:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8014dee:	42ba      	cmp	r2, r7
 8014df0:	d304      	bcc.n	8014dfc <access_virt_barray+0x1e>
 8014df2:	68ca      	ldr	r2, [r1, #12]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d301      	bcc.n	8014dfc <access_virt_barray+0x1e>
 8014df8:	680b      	ldr	r3, [r1, #0]
 8014dfa:	b933      	cbnz	r3, 8014e0a <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014dfc:	6803      	ldr	r3, [r0, #0]
 8014dfe:	2217      	movs	r2, #23
 8014e00:	9001      	str	r0, [sp, #4]
 8014e02:	615a      	str	r2, [r3, #20]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	4798      	blx	r3
 8014e08:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 8014e0a:	69a3      	ldr	r3, [r4, #24]
 8014e0c:	42ab      	cmp	r3, r5
 8014e0e:	d803      	bhi.n	8014e18 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8014e10:	6922      	ldr	r2, [r4, #16]
 8014e12:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8014e14:	42bb      	cmp	r3, r7
 8014e16:	d221      	bcs.n	8014e5c <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 8014e18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014e1a:	b933      	cbnz	r3, 8014e2a <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8014e1c:	6803      	ldr	r3, [r0, #0]
 8014e1e:	2247      	movs	r2, #71	; 0x47
 8014e20:	9001      	str	r0, [sp, #4]
 8014e22:	615a      	str	r2, [r3, #20]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	4798      	blx	r3
 8014e28:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 8014e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e2c:	b13b      	cbz	r3, 8014e3e <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 8014e2e:	2201      	movs	r2, #1
 8014e30:	4621      	mov	r1, r4
 8014e32:	9001      	str	r0, [sp, #4]
 8014e34:	f7ff fe78 	bl	8014b28 <do_barray_io>
      ptr->dirty = FALSE;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	9801      	ldr	r0, [sp, #4]
 8014e3c:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8014e3e:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8014e40:	2200      	movs	r2, #0
 8014e42:	4621      	mov	r1, r4
 8014e44:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 8014e46:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8014e48:	bf29      	itett	cs
 8014e4a:	6923      	ldrcs	r3, [r4, #16]
 8014e4c:	462b      	movcc	r3, r5
 8014e4e:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8014e50:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8014e54:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8014e56:	f7ff fe67 	bl	8014b28 <do_barray_io>
 8014e5a:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 8014e5c:	69e6      	ldr	r6, [r4, #28]
 8014e5e:	42be      	cmp	r6, r7
 8014e60:	d21c      	bcs.n	8014e9c <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 8014e62:	42ae      	cmp	r6, r5
 8014e64:	d20c      	bcs.n	8014e80 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 8014e66:	f1b8 0f00 	cmp.w	r8, #0
 8014e6a:	d01b      	beq.n	8014ea4 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014e6c:	6803      	ldr	r3, [r0, #0]
 8014e6e:	2217      	movs	r2, #23
 8014e70:	9001      	str	r0, [sp, #4]
 8014e72:	462e      	mov	r6, r5
 8014e74:	615a      	str	r2, [r3, #20]
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	4798      	blx	r3
    if (writable)
 8014e7a:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 8014e7c:	61e7      	str	r7, [r4, #28]
 8014e7e:	e002      	b.n	8014e86 <access_virt_barray+0xa8>
    if (writable)
 8014e80:	f1b8 0f00 	cmp.w	r8, #0
 8014e84:	d1fa      	bne.n	8014e7c <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 8014e86:	6a22      	ldr	r2, [r4, #32]
 8014e88:	b1b2      	cbz	r2, 8014eb8 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014e8a:	68a2      	ldr	r2, [r4, #8]
 8014e8c:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8014e90:	69a2      	ldr	r2, [r4, #24]
 8014e92:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8014e94:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8014e96:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014e98:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8014e9a:	d305      	bcc.n	8014ea8 <access_virt_barray+0xca>
  if (writable)
 8014e9c:	f1b8 0f00 	cmp.w	r8, #0
 8014ea0:	d10d      	bne.n	8014ebe <access_virt_barray+0xe0>
 8014ea2:	e00e      	b.n	8014ec2 <access_virt_barray+0xe4>
 8014ea4:	462e      	mov	r6, r5
 8014ea6:	e7ee      	b.n	8014e86 <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014ea8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014eac:	464a      	mov	r2, r9
 8014eae:	2100      	movs	r1, #0
	undef_row++;
 8014eb0:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8014eb2:	f013 fbab 	bl	802860c <memset>
	undef_row++;
 8014eb6:	e7ee      	b.n	8014e96 <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 8014eb8:	f1b8 0f00 	cmp.w	r8, #0
 8014ebc:	d009      	beq.n	8014ed2 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8014ec2:	69a0      	ldr	r0, [r4, #24]
 8014ec4:	1a2d      	subs	r5, r5, r0
 8014ec6:	6820      	ldr	r0, [r4, #0]
}
 8014ec8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8014ecc:	b003      	add	sp, #12
 8014ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8014ed2:	6803      	ldr	r3, [r0, #0]
 8014ed4:	2217      	movs	r2, #23
 8014ed6:	615a      	str	r2, [r3, #20]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	4798      	blx	r3
  if (writable)
 8014edc:	e7f1      	b.n	8014ec2 <access_virt_barray+0xe4>

08014ede <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8014ede:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8014ee2:	429a      	cmp	r2, r3
{
 8014ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ee8:	4606      	mov	r6, r0
 8014eea:	4688      	mov	r8, r1
 8014eec:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014eee:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8014ef0:	d902      	bls.n	8014ef8 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8014ef2:	2103      	movs	r1, #3
 8014ef4:	f7ff fe12 	bl	8014b1c <out_of_memory>
  if (odd_bytes > 0)
 8014ef8:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 8014efc:	bf1c      	itt	ne
 8014efe:	3408      	addne	r4, #8
 8014f00:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8014f02:	f1b8 0f01 	cmp.w	r8, #1
 8014f06:	d906      	bls.n	8014f16 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8014f08:	6833      	ldr	r3, [r6, #0]
 8014f0a:	220f      	movs	r2, #15
 8014f0c:	4630      	mov	r0, r6
 8014f0e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 8014f16:	f104 0110 	add.w	r1, r4, #16
 8014f1a:	4630      	mov	r0, r6
 8014f1c:	f000 fa52 	bl	80153c4 <jpeg_get_large>
  if (hdr_ptr == NULL)
 8014f20:	4605      	mov	r5, r0
 8014f22:	b918      	cbnz	r0, 8014f2c <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 8014f24:	2104      	movs	r1, #4
 8014f26:	4630      	mov	r0, r6
 8014f28:	f7ff fdf8 	bl	8014b1c <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8014f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014f2e:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8014f32:	3310      	adds	r3, #16
 8014f34:	4423      	add	r3, r4
 8014f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 8014f38:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 8014f3e:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 8014f42:	2300      	movs	r3, #0
 8014f44:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 8014f46:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 8014f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f4c <alloc_barray>:
{
 8014f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8014f50:	01d7      	lsls	r7, r2, #7
{
 8014f52:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014f54:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8014f58:	4680      	mov	r8, r0
 8014f5a:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014f5c:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 8014f5e:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014f60:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8014f64:	d904      	bls.n	8014f70 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8014f66:	6803      	ldr	r3, [r0, #0]
 8014f68:	2248      	movs	r2, #72	; 0x48
 8014f6a:	615a      	str	r2, [r3, #20]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8014f70:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8014f72:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8014f76:	4651      	mov	r1, sl
 8014f78:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 8014f7a:	bfa8      	it	ge
 8014f7c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8014f7e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8014f80:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8014f82:	f7ff fe15 	bl	8014bb0 <alloc_small>
 8014f86:	4681      	mov	r9, r0
  while (currow < numrows) {
 8014f88:	42ae      	cmp	r6, r5
 8014f8a:	d302      	bcc.n	8014f92 <alloc_barray+0x46>
}
 8014f8c:	4648      	mov	r0, r9
 8014f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014f92:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8014f94:	4651      	mov	r1, sl
 8014f96:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8014f98:	429c      	cmp	r4, r3
 8014f9a:	bf28      	it	cs
 8014f9c:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8014f9e:	fb04 f207 	mul.w	r2, r4, r7
 8014fa2:	f7ff ff9c 	bl	8014ede <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8014fa6:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8014faa:	4426      	add	r6, r4
 8014fac:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8014fb0:	4293      	cmp	r3, r2
 8014fb2:	d0e9      	beq.n	8014f88 <alloc_barray+0x3c>
      result[currow++] = workspace;
 8014fb4:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8014fb8:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 8014fba:	e7f9      	b.n	8014fb0 <alloc_barray+0x64>

08014fbc <alloc_sarray>:
{
 8014fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fc0:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014fc2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8014fc6:	4607      	mov	r7, r0
 8014fc8:	468a      	mov	sl, r1
  if (ltemp <= 0)
 8014fca:	429a      	cmp	r2, r3
{
 8014fcc:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8014fce:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8014fd0:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 8014fd4:	d904      	bls.n	8014fe0 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8014fd6:	6803      	ldr	r3, [r0, #0]
 8014fd8:	2248      	movs	r2, #72	; 0x48
 8014fda:	615a      	str	r2, [r3, #20]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8014fe0:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8014fe2:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8014fe6:	4651      	mov	r1, sl
 8014fe8:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 8014fea:	bfa8      	it	ge
 8014fec:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8014fee:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8014ff0:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8014ff2:	f7ff fddd 	bl	8014bb0 <alloc_small>
 8014ff6:	4681      	mov	r9, r0
  while (currow < numrows) {
 8014ff8:	42ae      	cmp	r6, r5
 8014ffa:	d302      	bcc.n	8015002 <alloc_sarray+0x46>
}
 8014ffc:	4648      	mov	r0, r9
 8014ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015002:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8015004:	4651      	mov	r1, sl
 8015006:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015008:	429c      	cmp	r4, r3
 801500a:	bf28      	it	cs
 801500c:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 801500e:	fb04 f208 	mul.w	r2, r4, r8
 8015012:	f7ff ff64 	bl	8014ede <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8015016:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 801501a:	4426      	add	r6, r4
 801501c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8015020:	4293      	cmp	r3, r2
 8015022:	d0e9      	beq.n	8014ff8 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8015024:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8015028:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 801502a:	e7f9      	b.n	8015020 <alloc_sarray+0x64>

0801502c <realize_virt_arrays>:
{
 801502c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015030:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8015034:	2500      	movs	r5, #0
{
 8015036:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015038:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 801503c:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801503e:	bb03      	cbnz	r3, 8015082 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015040:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8015044:	bb43      	cbnz	r3, 8015098 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 8015046:	2e00      	cmp	r6, #0
 8015048:	dd19      	ble.n	801507e <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 801504a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 801504e:	462a      	mov	r2, r5
 8015050:	4631      	mov	r1, r6
 8015052:	4638      	mov	r0, r7
 8015054:	f000 f9bc 	bl	80153d0 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8015058:	4285      	cmp	r5, r0
 801505a:	dd2a      	ble.n	80150b2 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 801505c:	fb90 f6f6 	sdiv	r6, r0, r6
 8015060:	2e01      	cmp	r6, #1
 8015062:	bfb8      	it	lt
 8015064:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015066:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801506a:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 801506e:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015070:	bb0c      	cbnz	r4, 80150b6 <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015072:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8015076:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801507a:	2d00      	cmp	r5, #0
 801507c:	d141      	bne.n	8015102 <realize_virt_arrays+0xd6>
}
 801507e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	b932      	cbnz	r2, 8015094 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8015086:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 801508a:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 801508e:	6859      	ldr	r1, [r3, #4]
 8015090:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015096:	e7d2      	b.n	801503e <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8015098:	681a      	ldr	r2, [r3, #0]
 801509a:	b942      	cbnz	r2, 80150ae <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 801509c:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 80150a0:	4351      	muls	r1, r2
 80150a2:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 80150a6:	6859      	ldr	r1, [r3, #4]
 80150a8:	434a      	muls	r2, r1
 80150aa:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80150ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150b0:	e7c8      	b.n	8015044 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 80150b2:	4e27      	ldr	r6, [pc, #156]	; (8015150 <realize_virt_arrays+0x124>)
 80150b4:	e7d7      	b.n	8015066 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 80150b6:	6823      	ldr	r3, [r4, #0]
 80150b8:	b9ab      	cbnz	r3, 80150e6 <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 80150ba:	6862      	ldr	r2, [r4, #4]
 80150bc:	68e1      	ldr	r1, [r4, #12]
 80150be:	1e53      	subs	r3, r2, #1
 80150c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80150c4:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 80150c6:	429e      	cmp	r6, r3
 80150c8:	db0f      	blt.n	80150ea <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 80150ca:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80150cc:	6923      	ldr	r3, [r4, #16]
 80150ce:	2101      	movs	r1, #1
 80150d0:	68a2      	ldr	r2, [r4, #8]
 80150d2:	4638      	mov	r0, r7
 80150d4:	f7ff ff72 	bl	8014fbc <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 80150d8:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80150dc:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 80150de:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 80150e0:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 80150e2:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80150e6:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80150e8:	e7c2      	b.n	8015070 <realize_virt_arrays+0x44>
				(long) sptr->samplesperrow *
 80150ea:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 80150ec:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 80150ee:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 80150f0:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 80150f2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80150f6:	435a      	muls	r2, r3
 80150f8:	f000 f96c 	bl	80153d4 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 80150fc:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8015100:	e7e4      	b.n	80150cc <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8015102:	682b      	ldr	r3, [r5, #0]
 8015104:	b9ab      	cbnz	r3, 8015132 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8015106:	6868      	ldr	r0, [r5, #4]
 8015108:	68e9      	ldr	r1, [r5, #12]
 801510a:	1e43      	subs	r3, r0, #1
 801510c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015110:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8015112:	429e      	cmp	r6, r3
 8015114:	db0f      	blt.n	8015136 <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 8015116:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8015118:	692b      	ldr	r3, [r5, #16]
 801511a:	2101      	movs	r1, #1
 801511c:	68aa      	ldr	r2, [r5, #8]
 801511e:	4638      	mov	r0, r7
 8015120:	f7ff ff14 	bl	8014f4c <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8015124:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8015128:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 801512a:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 801512c:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 801512e:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015132:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8015134:	e7a1      	b.n	801507a <realize_virt_arrays+0x4e>
				(long) bptr->blocksperrow *
 8015136:	68aa      	ldr	r2, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8015138:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 801513a:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 801513c:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 801513e:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8015140:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8015144:	01d2      	lsls	r2, r2, #7
 8015146:	f000 f945 	bl	80153d4 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 801514a:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 801514e:	e7e3      	b.n	8015118 <realize_virt_arrays+0xec>
 8015150:	3b9aca00 	.word	0x3b9aca00

08015154 <access_virt_sarray>:
{
 8015154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8015158:	eb02 0803 	add.w	r8, r2, r3
{
 801515c:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801515e:	684a      	ldr	r2, [r1, #4]
{
 8015160:	b087      	sub	sp, #28
 8015162:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015164:	4542      	cmp	r2, r8
{
 8015166:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801516a:	d304      	bcc.n	8015176 <access_virt_sarray+0x22>
 801516c:	68ca      	ldr	r2, [r1, #12]
 801516e:	429a      	cmp	r2, r3
 8015170:	d301      	bcc.n	8015176 <access_virt_sarray+0x22>
 8015172:	680b      	ldr	r3, [r1, #0]
 8015174:	b933      	cbnz	r3, 8015184 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015176:	6803      	ldr	r3, [r0, #0]
 8015178:	2217      	movs	r2, #23
 801517a:	9003      	str	r0, [sp, #12]
 801517c:	615a      	str	r2, [r3, #20]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	4798      	blx	r3
 8015182:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8015184:	69a3      	ldr	r3, [r4, #24]
 8015186:	42ab      	cmp	r3, r5
 8015188:	d80c      	bhi.n	80151a4 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 801518a:	6922      	ldr	r2, [r4, #16]
 801518c:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801518e:	4543      	cmp	r3, r8
 8015190:	d308      	bcc.n	80151a4 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8015192:	69e6      	ldr	r6, [r4, #28]
 8015194:	4546      	cmp	r6, r8
 8015196:	f0c0 8081 	bcc.w	801529c <access_virt_sarray+0x148>
  if (writable)
 801519a:	f1ba 0f00 	cmp.w	sl, #0
 801519e:	f040 80a8 	bne.w	80152f2 <access_virt_sarray+0x19e>
 80151a2:	e0a8      	b.n	80152f6 <access_virt_sarray+0x1a2>
    if (! ptr->b_s_open)
 80151a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80151a6:	b933      	cbnz	r3, 80151b6 <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 80151a8:	6803      	ldr	r3, [r0, #0]
 80151aa:	2247      	movs	r2, #71	; 0x47
 80151ac:	9003      	str	r0, [sp, #12]
 80151ae:	615a      	str	r2, [r3, #20]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	4798      	blx	r3
 80151b4:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 80151b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80151b8:	b17b      	cbz	r3, 80151da <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80151ba:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80151be:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 80151c2:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80151c4:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 80151c8:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80151cc:	6922      	ldr	r2, [r4, #16]
 80151ce:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80151d0:	e9d4 c706 	ldrd	ip, r7, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80151d4:	dc3c      	bgt.n	8015250 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 80151d6:	2300      	movs	r3, #0
 80151d8:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 80151da:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80151dc:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80151e0:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80151e2:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 80151e6:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80151e8:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80151ec:	bf2a      	itet	cs
 80151ee:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 80151f2:	462b      	movcc	r3, r5
 80151f4:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 80151f8:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 80151fa:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80151fe:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015200:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015202:	454a      	cmp	r2, r9
 8015204:	ddc5      	ble.n	8015192 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015206:	eba2 0209 	sub.w	r2, r2, r9
 801520a:	6967      	ldr	r7, [r4, #20]
 801520c:	42ba      	cmp	r2, r7
 801520e:	bfa8      	it	ge
 8015210:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8015212:	69a7      	ldr	r7, [r4, #24]
 8015214:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015216:	1bf6      	subs	r6, r6, r7
 8015218:	42b2      	cmp	r2, r6
 801521a:	bfa8      	it	ge
 801521c:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801521e:	6866      	ldr	r6, [r4, #4]
 8015220:	1bf6      	subs	r6, r6, r7
 8015222:	42b2      	cmp	r2, r6
 8015224:	bfa8      	it	ge
 8015226:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 8015228:	2a00      	cmp	r2, #0
 801522a:	ddb2      	ble.n	8015192 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 801522c:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015230:	6822      	ldr	r2, [r4, #0]
 8015232:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8015234:	9600      	str	r6, [sp, #0]
 8015236:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 801523a:	9305      	str	r3, [sp, #20]
 801523c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8015240:	47b8      	blx	r7
    file_offset += byte_count;
 8015242:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015244:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015246:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015248:	4491      	add	r9, r2
 801524a:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801524e:	e7d6      	b.n	80151fe <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015250:	eba2 0209 	sub.w	r2, r2, r9
 8015254:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8015256:	44cc      	add	ip, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015258:	42b2      	cmp	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801525a:	eba7 070c 	sub.w	r7, r7, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801525e:	bfa8      	it	ge
 8015260:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015262:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015264:	42ba      	cmp	r2, r7
 8015266:	bfa8      	it	ge
 8015268:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801526a:	eba6 070c 	sub.w	r7, r6, ip
 801526e:	42ba      	cmp	r2, r7
 8015270:	bfa8      	it	ge
 8015272:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 8015274:	2a00      	cmp	r2, #0
 8015276:	ddae      	ble.n	80151d6 <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 8015278:	fb02 f70b 	mul.w	r7, r2, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801527c:	6822      	ldr	r2, [r4, #0]
 801527e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8015280:	9700      	str	r7, [sp, #0]
 8015282:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8015286:	9305      	str	r3, [sp, #20]
 8015288:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801528c:	47b0      	blx	r6
    file_offset += byte_count;
 801528e:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015290:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015292:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015294:	4491      	add	r9, r2
 8015296:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 801529a:	e797      	b.n	80151cc <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 801529c:	42ae      	cmp	r6, r5
 801529e:	d20d      	bcs.n	80152bc <access_virt_sarray+0x168>
      if (writable)		/* writer skipped over a section of array */
 80152a0:	f1ba 0f00 	cmp.w	sl, #0
 80152a4:	d020      	beq.n	80152e8 <access_virt_sarray+0x194>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80152a6:	6803      	ldr	r3, [r0, #0]
 80152a8:	2217      	movs	r2, #23
 80152aa:	9003      	str	r0, [sp, #12]
 80152ac:	462e      	mov	r6, r5
 80152ae:	615a      	str	r2, [r3, #20]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	4798      	blx	r3
    if (writable)
 80152b4:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 80152b6:	f8c4 801c 	str.w	r8, [r4, #28]
 80152ba:	e002      	b.n	80152c2 <access_virt_sarray+0x16e>
    if (writable)
 80152bc:	f1ba 0f00 	cmp.w	sl, #0
 80152c0:	d1f9      	bne.n	80152b6 <access_virt_sarray+0x162>
    if (ptr->pre_zero) {
 80152c2:	6a22      	ldr	r2, [r4, #32]
 80152c4:	b192      	cbz	r2, 80152ec <access_virt_sarray+0x198>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80152c6:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80152c8:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80152ca:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 80152cc:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 80152d0:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80152d2:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 80152d4:	f4bf af61 	bcs.w	801519a <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80152d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80152dc:	463a      	mov	r2, r7
 80152de:	2100      	movs	r1, #0
	undef_row++;
 80152e0:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80152e2:	f013 f993 	bl	802860c <memset>
	undef_row++;
 80152e6:	e7f3      	b.n	80152d0 <access_virt_sarray+0x17c>
 80152e8:	462e      	mov	r6, r5
 80152ea:	e7ea      	b.n	80152c2 <access_virt_sarray+0x16e>
      if (! writable)		/* reader looking at undefined data */
 80152ec:	f1ba 0f00 	cmp.w	sl, #0
 80152f0:	d009      	beq.n	8015306 <access_virt_sarray+0x1b2>
    ptr->dirty = TRUE;
 80152f2:	2301      	movs	r3, #1
 80152f4:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 80152f6:	69a0      	ldr	r0, [r4, #24]
 80152f8:	1a2d      	subs	r5, r5, r0
 80152fa:	6820      	ldr	r0, [r4, #0]
}
 80152fc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8015300:	b007      	add	sp, #28
 8015302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015306:	6803      	ldr	r3, [r0, #0]
 8015308:	2217      	movs	r2, #23
 801530a:	615a      	str	r2, [r3, #20]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	4798      	blx	r3
  if (writable)
 8015310:	e7f1      	b.n	80152f6 <access_virt_sarray+0x1a2>
	...

08015314 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8015314:	2300      	movs	r3, #0
{
 8015316:	b570      	push	{r4, r5, r6, lr}
 8015318:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 801531a:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801531c:	f000 f85f 	bl	80153de <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8015320:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8015322:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8015324:	4628      	mov	r0, r5
 8015326:	f000 f847 	bl	80153b8 <jpeg_get_small>

  if (mem == NULL) {
 801532a:	4604      	mov	r4, r0
 801532c:	b948      	cbnz	r0, 8015342 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 801532e:	4628      	mov	r0, r5
 8015330:	f000 f857 	bl	80153e2 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8015334:	682b      	ldr	r3, [r5, #0]
 8015336:	2238      	movs	r2, #56	; 0x38
 8015338:	4628      	mov	r0, r5
 801533a:	e9c3 2405 	strd	r2, r4, [r3, #20]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 8015342:	4b12      	ldr	r3, [pc, #72]	; (801538c <jinit_memory_mgr+0x78>)
 8015344:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 8015346:	4b12      	ldr	r3, [pc, #72]	; (8015390 <jinit_memory_mgr+0x7c>)
 8015348:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 801534a:	4b12      	ldr	r3, [pc, #72]	; (8015394 <jinit_memory_mgr+0x80>)
 801534c:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 801534e:	4b12      	ldr	r3, [pc, #72]	; (8015398 <jinit_memory_mgr+0x84>)
 8015350:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8015352:	4b12      	ldr	r3, [pc, #72]	; (801539c <jinit_memory_mgr+0x88>)
 8015354:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 8015356:	4b12      	ldr	r3, [pc, #72]	; (80153a0 <jinit_memory_mgr+0x8c>)
 8015358:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 801535a:	4b12      	ldr	r3, [pc, #72]	; (80153a4 <jinit_memory_mgr+0x90>)
 801535c:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 801535e:	4b12      	ldr	r3, [pc, #72]	; (80153a8 <jinit_memory_mgr+0x94>)
 8015360:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 8015362:	4b12      	ldr	r3, [pc, #72]	; (80153ac <jinit_memory_mgr+0x98>)
 8015364:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 8015366:	4b12      	ldr	r3, [pc, #72]	; (80153b0 <jinit_memory_mgr+0x9c>)
 8015368:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 801536a:	4b12      	ldr	r3, [pc, #72]	; (80153b4 <jinit_memory_mgr+0xa0>)
 801536c:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 801536e:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8015372:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 8015376:	2300      	movs	r3, #0
 8015378:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 801537a:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 801537c:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 801537e:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 8015380:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8015384:	2354      	movs	r3, #84	; 0x54
 8015386:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 8015388:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 801538a:	bd70      	pop	{r4, r5, r6, pc}
 801538c:	08014bb1 	.word	0x08014bb1
 8015390:	08014edf 	.word	0x08014edf
 8015394:	08014fbd 	.word	0x08014fbd
 8015398:	08014f4d 	.word	0x08014f4d
 801539c:	08014cc7 	.word	0x08014cc7
 80153a0:	08014c7d 	.word	0x08014c7d
 80153a4:	0801502d 	.word	0x0801502d
 80153a8:	08015155 	.word	0x08015155
 80153ac:	08014ddf 	.word	0x08014ddf
 80153b0:	08014d11 	.word	0x08014d11
 80153b4:	08014db5 	.word	0x08014db5

080153b8 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 80153b8:	4608      	mov	r0, r1
 80153ba:	f7f2 b8a7 	b.w	800750c <pvPortMalloc>

080153be <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 80153be:	4608      	mov	r0, r1
 80153c0:	f7f2 b93a 	b.w	8007638 <vPortFree>

080153c4 <jpeg_get_large>:
 80153c4:	4608      	mov	r0, r1
 80153c6:	f7f2 b8a1 	b.w	800750c <pvPortMalloc>

080153ca <jpeg_free_large>:
 80153ca:	4608      	mov	r0, r1
 80153cc:	f7f2 b934 	b.w	8007638 <vPortFree>

080153d0 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 80153d0:	4610      	mov	r0, r2
 80153d2:	4770      	bx	lr

080153d4 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 80153d4:	6803      	ldr	r3, [r0, #0]
 80153d6:	2233      	movs	r2, #51	; 0x33
 80153d8:	615a      	str	r2, [r3, #20]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	4718      	bx	r3

080153de <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 80153de:	2000      	movs	r0, #0
 80153e0:	4770      	bx	lr

080153e2 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 80153e2:	4770      	bx	lr

080153e4 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 80153e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 80153e8:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 80153ec:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80153ee:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80153f2:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 80153f4:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 80153f6:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 80153fa:	bf16      	itet	ne
 80153fc:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 80153fe:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 8015402:	461e      	movne	r6, r3
 8015404:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015406:	6843      	ldr	r3, [r0, #4]
 8015408:	f506 7280 	add.w	r2, r6, #256	; 0x100
 801540c:	689f      	ldr	r7, [r3, #8]
 801540e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015410:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8015412:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8015416:	f105 0e20 	add.w	lr, r5, #32

  for (i = 0; i < cinfo->out_color_components; i++) {
 801541a:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801541c:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801541e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8015420:	429a      	cmp	r2, r3
 8015422:	dc01      	bgt.n	8015428 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8015424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015428:	f85e 1b04 	ldr.w	r1, [lr], #4
      cquantize->colorindex[i] += MAXJSAMPLE;
 801542c:	009f      	lsls	r7, r3, #2
 801542e:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 8015430:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8015434:	b126      	cbz	r6, 8015440 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8015436:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801543a:	32ff      	adds	r2, #255	; 0xff
 801543c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 8015440:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015444:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 8015448:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 801544a:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 801544c:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8015450:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015452:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 8015456:	428f      	cmp	r7, r1
 8015458:	db0a      	blt.n	8015470 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 801545a:	fb10 fb0c 	smulbb	fp, r0, ip
 801545e:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8015462:	3101      	adds	r1, #1
 8015464:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8015468:	d1f5      	bne.n	8015456 <create_colorindex+0x72>
    if (pad)
 801546a:	b93e      	cbnz	r6, 801547c <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 801546c:	3301      	adds	r3, #1
 801546e:	e7d6      	b.n	801541e <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8015470:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015472:	fb08 a700 	mla	r7, r8, r0, sl
 8015476:	fb97 f7f9 	sdiv	r7, r7, r9
 801547a:	e7ec      	b.n	8015456 <create_colorindex+0x72>
 801547c:	4611      	mov	r1, r2
 801547e:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 8015482:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 8015486:	f892 9000 	ldrb.w	r9, [r2]
 801548a:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 801548e:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8015490:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8015494:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015498:	d1f5      	bne.n	8015486 <create_colorindex+0xa2>
 801549a:	e7e7      	b.n	801546c <create_colorindex+0x88>

0801549c <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 801549c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 80154a0:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 80154a4:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 80154a6:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 80154aa:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 80154ae:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 80154b2:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 80154b4:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 80154b6:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80154b8:	4540      	cmp	r0, r8
 80154ba:	db02      	blt.n	80154c2 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 80154bc:	b003      	add	sp, #12
 80154be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 80154c2:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 80154c6:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 80154c8:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 80154cc:	eb04 0a03 	add.w	sl, r4, r3
 80154d0:	4554      	cmp	r4, sl
 80154d2:	d10f      	bne.n	80154f4 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 80154d4:	3001      	adds	r0, #1
 80154d6:	e7ef      	b.n	80154b8 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 80154d8:	f815 b003 	ldrb.w	fp, [r5, r3]
 80154dc:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 80154e0:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 80154e2:	f817 700b 	ldrb.w	r7, [r7, fp]
 80154e6:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 80154e8:	4563      	cmp	r3, ip
 80154ea:	dbf5      	blt.n	80154d8 <color_quantize+0x3c>
 80154ec:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 80154ee:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 80154f2:	e7ed      	b.n	80154d0 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 80154f4:	2300      	movs	r3, #0
      pixcode = 0;
 80154f6:	461e      	mov	r6, r3
 80154f8:	e7f6      	b.n	80154e8 <color_quantize+0x4c>

080154fa <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 80154fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 80154fe:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8015502:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015506:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015508:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801550a:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801550e:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8015512:	4298      	cmp	r0, r3
 8015514:	db01      	blt.n	801551a <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 801551a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801551e:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8015522:	eb05 0a09 	add.w	sl, r5, r9
 8015526:	4555      	cmp	r5, sl
 8015528:	f104 0403 	add.w	r4, r4, #3
 801552c:	d101      	bne.n	8015532 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 801552e:	3001      	adds	r0, #1
 8015530:	e7ef      	b.n	8015512 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8015532:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8015536:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 801553a:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 801553e:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8015542:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8015544:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8015548:	f818 6006 	ldrb.w	r6, [r8, r6]
 801554c:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 801554e:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8015552:	e7e8      	b.n	8015526 <color_quantize3+0x2c>

08015554 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8015554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015558:	469a      	mov	sl, r3
 801555a:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801555c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015560:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015564:	699a      	ldr	r2, [r3, #24]
 8015566:	6811      	ldr	r1, [r2, #0]
 8015568:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801556a:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801556c:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801556e:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015570:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015572:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8015574:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8015576:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8015578:	4551      	cmp	r1, sl
 801557a:	db02      	blt.n	8015582 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 801557c:	b00b      	add	sp, #44	; 0x2c
 801557e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8015582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 8015584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015586:	9c07      	ldr	r4, [sp, #28]
 8015588:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 801558c:	0190      	lsls	r0, r2, #6
 801558e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8015592:	9002      	str	r0, [sp, #8]
 8015594:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8015598:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 801559a:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 801559c:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 80155a0:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 80155a2:	9808      	ldr	r0, [sp, #32]
 80155a4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80155a8:	4575      	cmp	r5, lr
 80155aa:	f100 0003 	add.w	r0, r0, #3
 80155ae:	d106      	bne.n	80155be <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 80155b0:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80155b2:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 80155b4:	3201      	adds	r2, #1
 80155b6:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 80155ba:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 80155bc:	e7dc      	b.n	8015578 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80155be:	9e02      	ldr	r6, [sp, #8]
 80155c0:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80155c4:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80155c8:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 80155ca:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80155cc:	f858 7006 	ldr.w	r7, [r8, r6]
 80155d0:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80155d2:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 80155d4:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80155d8:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80155dc:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 80155e0:	f859 7006 	ldr.w	r7, [r9, r6]
 80155e4:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80155e6:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80155e8:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80155ec:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80155ee:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 80155f0:	9a06      	ldr	r2, [sp, #24]
 80155f2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80155f6:	4417      	add	r7, r2
 80155f8:	5dbe      	ldrb	r6, [r7, r6]
 80155fa:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 80155fc:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 8015600:	e7d2      	b.n	80155a8 <quantize3_ord_dither+0x54>

08015602 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015602:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8015604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015606:	3202      	adds	r2, #2
 8015608:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 801560c:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 801560e:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015610:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015612:	3644      	adds	r6, #68	; 0x44
 8015614:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015616:	42bb      	cmp	r3, r7
 8015618:	dc00      	bgt.n	801561c <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 801561a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 801561c:	6863      	ldr	r3, [r4, #4]
 801561e:	462a      	mov	r2, r5
 8015620:	2101      	movs	r1, #1
 8015622:	4620      	mov	r0, r4
 8015624:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015626:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8015628:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 801562a:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 801562e:	e7f1      	b.n	8015614 <alloc_fs_workspace+0x12>

08015630 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8015630:	4770      	bx	lr

08015632 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8015632:	6803      	ldr	r3, [r0, #0]
 8015634:	222f      	movs	r2, #47	; 0x2f
 8015636:	615a      	str	r2, [r3, #20]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	4718      	bx	r3

0801563c <start_pass_1_quant>:
{
 801563c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015640:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015644:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 8015646:	692b      	ldr	r3, [r5, #16]
 8015648:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 801564c:	696b      	ldr	r3, [r5, #20]
 801564e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8015652:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8015656:	2b01      	cmp	r3, #1
 8015658:	d00b      	beq.n	8015672 <start_pass_1_quant+0x36>
 801565a:	2b02      	cmp	r3, #2
 801565c:	d05e      	beq.n	801571c <start_pass_1_quant+0xe0>
 801565e:	2b00      	cmp	r3, #0
 8015660:	d174      	bne.n	801574c <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 8015662:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015664:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 8015666:	bf0c      	ite	eq
 8015668:	4b3c      	ldreq	r3, [pc, #240]	; (801575c <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 801566a:	4b3d      	ldrne	r3, [pc, #244]	; (8015760 <start_pass_1_quant+0x124>)
 801566c:	606b      	str	r3, [r5, #4]
}
 801566e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8015672:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 8015674:	4b3b      	ldr	r3, [pc, #236]	; (8015764 <start_pass_1_quant+0x128>)
 8015676:	4a3c      	ldr	r2, [pc, #240]	; (8015768 <start_pass_1_quant+0x12c>)
 8015678:	2903      	cmp	r1, #3
 801567a:	bf18      	it	ne
 801567c:	4613      	movne	r3, r2
 801567e:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8015680:	2300      	movs	r3, #0
 8015682:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8015684:	69eb      	ldr	r3, [r5, #28]
 8015686:	b90b      	cbnz	r3, 801568c <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8015688:	f7ff feac 	bl	80153e4 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 801568c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 801568e:	2d00      	cmp	r5, #0
 8015690:	d1ed      	bne.n	801566e <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015692:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015696:	f107 0820 	add.w	r8, r7, #32
 801569a:	4646      	mov	r6, r8
 801569c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801569e:	429d      	cmp	r5, r3
 80156a0:	dae5      	bge.n	801566e <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 80156a2:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 80156a6:	4642      	mov	r2, r8
 80156a8:	2300      	movs	r3, #0
 80156aa:	429d      	cmp	r5, r3
 80156ac:	d007      	beq.n	80156be <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 80156ae:	f852 1b04 	ldr.w	r1, [r2], #4
 80156b2:	4589      	cmp	r9, r1
 80156b4:	d130      	bne.n	8015718 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 80156b6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80156ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 80156bc:	bb48      	cbnz	r0, 8015712 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80156be:	6863      	ldr	r3, [r4, #4]
 80156c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80156c4:	2101      	movs	r1, #1
 80156c6:	4620      	mov	r0, r4
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 80156cc:	f109 32ff 	add.w	r2, r9, #4294967295
 80156d0:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 80156d4:	f8df c098 	ldr.w	ip, [pc, #152]	; 8015770 <start_pass_1_quant+0x134>
 80156d8:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 80156da:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 80156de:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 80156e2:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 80156e4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80156e8:	005b      	lsls	r3, r3, #1
 80156ea:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 80156ee:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 80156f2:	bf45      	ittet	mi
 80156f4:	425b      	negmi	r3, r3
 80156f6:	fb93 f3f2 	sdivmi	r3, r3, r2
 80156fa:	fb93 f3f2 	sdivpl	r3, r3, r2
 80156fe:	425b      	negmi	r3, r3
 8015700:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8015704:	458e      	cmp	lr, r1
 8015706:	d1ed      	bne.n	80156e4 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8015708:	3140      	adds	r1, #64	; 0x40
 801570a:	f10c 0c10 	add.w	ip, ip, #16
 801570e:	458a      	cmp	sl, r1
 8015710:	d1e5      	bne.n	80156de <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015712:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8015714:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015716:	e7c1      	b.n	801569c <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8015718:	3301      	adds	r3, #1
 801571a:	e7c6      	b.n	80156aa <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 801571c:	4b13      	ldr	r3, [pc, #76]	; (801576c <start_pass_1_quant+0x130>)
 801571e:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8015720:	2300      	movs	r3, #0
 8015722:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8015724:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8015726:	b90b      	cbnz	r3, 801572c <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8015728:	f7ff ff6b 	bl	8015602 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801572c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801572e:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 8015730:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015732:	3202      	adds	r2, #2
 8015734:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8015736:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015738:	42bb      	cmp	r3, r7
 801573a:	dd98      	ble.n	801566e <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 801573c:	4632      	mov	r2, r6
 801573e:	2100      	movs	r1, #0
 8015740:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 8015744:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015746:	f012 ff61 	bl	802860c <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 801574a:	e7f4      	b.n	8015736 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 801574c:	6803      	ldr	r3, [r0, #0]
 801574e:	2231      	movs	r2, #49	; 0x31
}
 8015750:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015754:	615a      	str	r2, [r3, #20]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	4718      	bx	r3
 801575a:	bf00      	nop
 801575c:	080154fb 	.word	0x080154fb
 8015760:	0801549d 	.word	0x0801549d
 8015764:	08015555 	.word	0x08015555
 8015768:	080158ad 	.word	0x080158ad
 801576c:	08015775 	.word	0x08015775
 8015770:	0802d730 	.word	0x0802d730

08015774 <quantize_fs_dither>:
{
 8015774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015778:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 801577a:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 801577c:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 8015780:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015784:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 8015788:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 801578c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015790:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015792:	1e6b      	subs	r3, r5, #1
 8015794:	9304      	str	r3, [sp, #16]
 8015796:	fb03 f309 	mul.w	r3, r3, r9
 801579a:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 801579c:	1c6b      	adds	r3, r5, #1
 801579e:	005b      	lsls	r3, r3, #1
 80157a0:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 80157a2:	2300      	movs	r3, #0
 80157a4:	9300      	str	r3, [sp, #0]
 80157a6:	9a00      	ldr	r2, [sp, #0]
 80157a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157aa:	429a      	cmp	r2, r3
 80157ac:	db02      	blt.n	80157b4 <quantize_fs_dither+0x40>
}
 80157ae:	b011      	add	sp, #68	; 0x44
 80157b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 80157b4:	2100      	movs	r1, #0
 80157b6:	462a      	mov	r2, r5
 80157b8:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 80157bc:	f012 ff26 	bl	802860c <memset>
    for (ci = 0; ci < nc; ci++) {
 80157c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157c4:	2100      	movs	r1, #0
 80157c6:	9305      	str	r3, [sp, #20]
	dirnc = -nc;
 80157c8:	f1c9 0300 	rsb	r3, r9, #0
 80157cc:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 80157ce:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 80157d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 80157d2:	db06      	blt.n	80157e2 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80157d4:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 80157d8:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80157da:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 80157dc:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 80157de:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 80157e0:	e7e0      	b.n	80157a4 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 80157e2:	9800      	ldr	r0, [sp, #0]
 80157e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 80157ea:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 80157ee:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 80157f2:	9b05      	ldr	r3, [sp, #20]
 80157f4:	f853 cb04 	ldr.w	ip, [r3], #4
 80157f8:	9305      	str	r3, [sp, #20]
      if (cquantize->on_odd_row) {
 80157fa:	b312      	cbz	r2, 8015842 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 80157fc:	9b08      	ldr	r3, [sp, #32]
 80157fe:	449e      	add	lr, r3
	output_ptr += width-1;
 8015800:	9b04      	ldr	r3, [sp, #16]
 8015802:	4418      	add	r0, r3
	dirnc = -nc;
 8015804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015806:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801580a:	449c      	add	ip, r3
	dir = -1;
 801580c:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 8015810:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 8015812:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 8015814:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 8015816:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 8015818:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801581c:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 801581e:	6923      	ldr	r3, [r4, #16]
 8015820:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015824:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015826:	9b02      	ldr	r3, [sp, #8]
 8015828:	005b      	lsls	r3, r3, #1
 801582a:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 801582c:	2300      	movs	r3, #0
      cur = 0;
 801582e:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8015830:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 8015832:	9a03      	ldr	r2, [sp, #12]
 8015834:	b94a      	cbnz	r2, 801584a <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015836:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 8015838:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 801583a:	436a      	muls	r2, r5
 801583c:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8015840:	e7c5      	b.n	80157ce <quantize_fs_dither+0x5a>
	dir = 1;
 8015842:	2301      	movs	r3, #1
 8015844:	f8cd 901c 	str.w	r9, [sp, #28]
 8015848:	e7e2      	b.n	8015810 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 801584a:	9a01      	ldr	r2, [sp, #4]
 801584c:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8015850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015852:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8015854:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015858:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 801585c:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 8015862:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015866:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 801586a:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 801586e:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015870:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8015874:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015878:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 801587c:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 801587e:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015882:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8015884:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8015886:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 801588a:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 801588c:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 801588e:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8015890:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015894:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015896:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8015898:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 801589a:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 801589c:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 801589e:	4443      	add	r3, r8
	belowerr = bnexterr;
 80158a0:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 80158a4:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 80158a8:	4417      	add	r7, r2
 80158aa:	e7c2      	b.n	8015832 <quantize_fs_dither+0xbe>

080158ac <quantize_ord_dither>:
{
 80158ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b0:	b089      	sub	sp, #36	; 0x24
 80158b2:	4689      	mov	r9, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80158b4:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 80158b8:	1f14      	subs	r4, r2, #4
{
 80158ba:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 80158bc:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 80158be:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 80158c0:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 80158c4:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80158c6:	9b07      	ldr	r3, [sp, #28]
 80158c8:	429f      	cmp	r7, r3
 80158ca:	db02      	blt.n	80158d2 <quantize_ord_dither+0x26>
}
 80158cc:	b009      	add	sp, #36	; 0x24
 80158ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 80158d2:	4652      	mov	r2, sl
 80158d4:	2100      	movs	r1, #0
 80158d6:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80158da:	f012 fe97 	bl	802860c <memset>
    row_index = cquantize->row_index;
 80158de:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 80158e2:	f108 0c34 	add.w	ip, r8, #52	; 0x34
 80158e6:	2000      	movs	r0, #0
      dither = cquantize->odither[ci][row_index];
 80158e8:	019a      	lsls	r2, r3, #6
 80158ea:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 80158ec:	9a01      	ldr	r2, [sp, #4]
 80158ee:	4290      	cmp	r0, r2
 80158f0:	db06      	blt.n	8015900 <quantize_ord_dither+0x54>
    row_index = (row_index + 1) & ODITHER_MASK;
 80158f2:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 80158f4:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 80158f6:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 80158fa:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 80158fe:	e7e2      	b.n	80158c6 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 8015900:	f8d8 2018 	ldr.w	r2, [r8, #24]
      col_index = 0;
 8015904:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 8015906:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 801590a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801590e:	6825      	ldr	r5, [r4, #0]
      input_ptr = input_buf[row] + ci;
 8015910:	4401      	add	r1, r0
      colorindex_ci = cquantize->colorindex[ci];
 8015912:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8015914:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015918:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 801591a:	eb0a 0205 	add.w	r2, sl, r5
 801591e:	9206      	str	r2, [sp, #24]
 8015920:	9a06      	ldr	r2, [sp, #24]
 8015922:	4295      	cmp	r5, r2
 8015924:	d101      	bne.n	801592a <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8015926:	3001      	adds	r0, #1
 8015928:	e7e0      	b.n	80158ec <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801592a:	782a      	ldrb	r2, [r5, #0]
 801592c:	f891 e000 	ldrb.w	lr, [r1]
 8015930:	9204      	str	r2, [sp, #16]
 8015932:	9a02      	ldr	r2, [sp, #8]
 8015934:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8015938:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 801593a:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801593c:	f85b b002 	ldr.w	fp, [fp, r2]
 8015940:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015942:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015946:	4496      	add	lr, r2
 8015948:	9a04      	ldr	r2, [sp, #16]
 801594a:	f81e e00b 	ldrb.w	lr, [lr, fp]
 801594e:	4472      	add	r2, lr
 8015950:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 8015954:	9a01      	ldr	r2, [sp, #4]
 8015956:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 8015958:	e7e2      	b.n	8015920 <quantize_ord_dither+0x74>
	...

0801595c <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801595c:	6843      	ldr	r3, [r0, #4]
 801595e:	2258      	movs	r2, #88	; 0x58
 8015960:	2101      	movs	r1, #1
 8015962:	681b      	ldr	r3, [r3, #0]
{
 8015964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015968:	b085      	sub	sp, #20
 801596a:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801596c:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 801596e:	4b67      	ldr	r3, [pc, #412]	; (8015b0c <jinit_1pass_quantizer+0x1b0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8015970:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8015974:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8015976:	4b66      	ldr	r3, [pc, #408]	; (8015b10 <jinit_1pass_quantizer+0x1b4>)
 8015978:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 801597a:	4b66      	ldr	r3, [pc, #408]	; (8015b14 <jinit_1pass_quantizer+0x1b8>)
 801597c:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 801597e:	2300      	movs	r3, #0
 8015980:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8015982:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8015984:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015986:	2b04      	cmp	r3, #4
 8015988:	dd07      	ble.n	801599a <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 801598a:	6823      	ldr	r3, [r4, #0]
 801598c:	2039      	movs	r0, #57	; 0x39
 801598e:	2204      	movs	r2, #4
 8015990:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	4620      	mov	r0, r4
 8015998:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 801599a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801599c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80159a0:	dd08      	ble.n	80159b4 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 80159a2:	6823      	ldr	r3, [r4, #0]
 80159a4:	213b      	movs	r1, #59	; 0x3b
 80159a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80159aa:	4620      	mov	r0, r4
 80159ac:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80159b4:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 80159b8:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 80159ba:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 80159be:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 80159c2:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 80159c6:	469a      	mov	sl, r3
 80159c8:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 80159ca:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 80159cc:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 80159ce:	4588      	cmp	r8, r1
 80159d0:	dc47      	bgt.n	8015a62 <jinit_1pass_quantizer+0x106>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 80159d2:	4591      	cmp	r9, r2
 80159d4:	daf7      	bge.n	80159c6 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 80159d6:	f1ba 0f01 	cmp.w	sl, #1
 80159da:	d106      	bne.n	80159ea <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 80159dc:	6823      	ldr	r3, [r4, #0]
 80159de:	213a      	movs	r1, #58	; 0x3a
 80159e0:	4620      	mov	r0, r4
 80159e2:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	4798      	blx	r3
    for (i = 1; i < nc; i++)
 80159ea:	463a      	mov	r2, r7
 80159ec:	2300      	movs	r3, #0
 80159ee:	2501      	movs	r5, #1
 80159f0:	9701      	str	r7, [sp, #4]
  for (i = 0; i < nc; i++) {
 80159f2:	4598      	cmp	r8, r3
 80159f4:	dc38      	bgt.n	8015a68 <jinit_1pass_quantizer+0x10c>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 80159f6:	f8df c120 	ldr.w	ip, [pc, #288]	; 8015b18 <jinit_1pass_quantizer+0x1bc>
    changed = FALSE;
 80159fa:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 80159fc:	460b      	mov	r3, r1
 80159fe:	4598      	cmp	r8, r3
 8015a00:	dc38      	bgt.n	8015a74 <jinit_1pass_quantizer+0x118>
  } while (changed);
 8015a02:	2900      	cmp	r1, #0
 8015a04:	d1f9      	bne.n	80159fa <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 8015a06:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015a08:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 8015a0a:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015a0c:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 8015a0e:	d148      	bne.n	8015aa2 <jinit_1pass_quantizer+0x146>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015a10:	619d      	str	r5, [r3, #24]
 8015a12:	6a31      	ldr	r1, [r6, #32]
 8015a14:	61d9      	str	r1, [r3, #28]
 8015a16:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8015a18:	6219      	str	r1, [r3, #32]
 8015a1a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8015a1c:	6259      	str	r1, [r3, #36]	; 0x24
 8015a1e:	2160      	movs	r1, #96	; 0x60
 8015a20:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015a22:	2101      	movs	r1, #1
 8015a24:	4620      	mov	r0, r4
 8015a26:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8015a28:	6863      	ldr	r3, [r4, #4]
 8015a2a:	462a      	mov	r2, r5
 8015a2c:	2101      	movs	r1, #1
 8015a2e:	689f      	ldr	r7, [r3, #8]
 8015a30:	4620      	mov	r0, r4
 8015a32:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015a34:	47b8      	blx	r7
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015a36:	46ae      	mov	lr, r5
 8015a38:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 8015a3a:	9002      	str	r0, [sp, #8]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015a3c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	db33      	blt.n	8015aaa <jinit_1pass_quantizer+0x14e>
  cquantize->sv_colormap = colormap;
 8015a42:	9b02      	ldr	r3, [sp, #8]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8015a44:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8015a46:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 8015a4a:	f7ff fccb 	bl	80153e4 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8015a4e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8015a52:	2b02      	cmp	r3, #2
 8015a54:	d156      	bne.n	8015b04 <jinit_1pass_quantizer+0x1a8>
    alloc_fs_workspace(cinfo);
 8015a56:	4620      	mov	r0, r4
}
 8015a58:	b005      	add	sp, #20
 8015a5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 8015a5e:	f7ff bdd0 	b.w	8015602 <alloc_fs_workspace>
      temp *= iroot;
 8015a62:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 8015a64:	3101      	adds	r1, #1
 8015a66:	e7b2      	b.n	80159ce <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8015a68:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 8015a6c:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 8015a6e:	f842 ab04 	str.w	sl, [r2], #4
  for (i = 0; i < nc; i++) {
 8015a72:	e7be      	b.n	80159f2 <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015a74:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8015a78:	2a02      	cmp	r2, #2
 8015a7a:	bf0c      	ite	eq
 8015a7c:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 8015a80:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 8015a82:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
 8015a86:	fb95 f2fa 	sdiv	r2, r5, sl
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 8015a8a:	fb0a 2202 	mla	r2, sl, r2, r2
 8015a8e:	f10a 0e01 	add.w	lr, sl, #1
      if (temp > (long) max_colors)
 8015a92:	4591      	cmp	r9, r2
 8015a94:	dbb5      	blt.n	8015a02 <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 8015a96:	3301      	adds	r3, #1
 8015a98:	4615      	mov	r5, r2
      changed = TRUE;
 8015a9a:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 8015a9c:	f847 e020 	str.w	lr, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8015aa0:	e7ad      	b.n	80159fe <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015aa2:	2161      	movs	r1, #97	; 0x61
 8015aa4:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8015aa8:	e7bb      	b.n	8015a22 <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015aaa:	9b01      	ldr	r3, [sp, #4]
 8015aac:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 8015ab0:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015ab4:	9301      	str	r3, [sp, #4]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015ab6:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 8015aba:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015abe:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	469a      	mov	sl, r3
 8015ac4:	4599      	cmp	r9, r3
 8015ac6:	dc02      	bgt.n	8015ace <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015ac8:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 8015aca:	46c6      	mov	lr, r8
 8015acc:	e7b6      	b.n	8015a3c <jinit_1pass_quantizer+0xe0>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015ace:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8015ad2:	9f03      	ldr	r7, [sp, #12]
 8015ad4:	4439      	add	r1, r7
 8015ad6:	fb91 f1fb 	sdiv	r1, r1, fp
 8015ada:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8015adc:	4651      	mov	r1, sl
 8015ade:	42a9      	cmp	r1, r5
 8015ae0:	db0d      	blt.n	8015afe <jinit_1pass_quantizer+0x1a2>
    for (j = 0; j < nci; j++) {
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	44c2      	add	sl, r8
 8015ae6:	e7ed      	b.n	8015ac4 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015ae8:	9f02      	ldr	r7, [sp, #8]
 8015aea:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8015aee:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 8015af0:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015af4:	5478      	strb	r0, [r7, r1]
	for (k = 0; k < blksize; k++)
 8015af6:	45e0      	cmp	r8, ip
 8015af8:	dcf6      	bgt.n	8015ae8 <jinit_1pass_quantizer+0x18c>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8015afa:	4471      	add	r1, lr
 8015afc:	e7ef      	b.n	8015ade <jinit_1pass_quantizer+0x182>
	for (k = 0; k < blksize; k++)
 8015afe:	f04f 0c00 	mov.w	ip, #0
 8015b02:	e7f8      	b.n	8015af6 <jinit_1pass_quantizer+0x19a>
}
 8015b04:	b005      	add	sp, #20
 8015b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b0a:	bf00      	nop
 8015b0c:	0801563d 	.word	0x0801563d
 8015b10:	08015631 	.word	0x08015631
 8015b14:	08015633 	.word	0x08015633
 8015b18:	0802d724 	.word	0x0802d724

08015b1c <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 8015b1c:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
{
 8015b20:	b5f0      	push	{r4, r5, r6, r7, lr}
  register hist3d histogram = cquantize->histogram;
 8015b22:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015b26:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 8015b28:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  for (row = 0; row < num_rows; row++) {
 8015b2c:	429c      	cmp	r4, r3
 8015b2e:	db00      	blt.n	8015b32 <prescan_quantize+0x16>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 8015b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (col = width; col > 0; col--) {
 8015b32:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 8015b36:	4677      	mov	r7, lr
 8015b38:	3203      	adds	r2, #3
 8015b3a:	b90f      	cbnz	r7, 8015b40 <prescan_quantize+0x24>
  for (row = 0; row < num_rows; row++) {
 8015b3c:	3401      	adds	r4, #1
 8015b3e:	e7f5      	b.n	8015b2c <prescan_quantize+0x10>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8015b40:	f812 6c03 	ldrb.w	r6, [r2, #-3]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015b44:	f812 5c02 	ldrb.w	r5, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8015b48:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015b4a:	08a8      	lsrs	r0, r5, #2
 8015b4c:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8015b50:	f812 6c01 	ldrb.w	r6, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8015b54:	eb05 1580 	add.w	r5, r5, r0, lsl #6
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 8015b58:	08f6      	lsrs	r6, r6, #3
      if (++(*histp) <= 0)
 8015b5a:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
 8015b5e:	3001      	adds	r0, #1
 8015b60:	b280      	uxth	r0, r0
 8015b62:	b108      	cbz	r0, 8015b68 <prescan_quantize+0x4c>
 8015b64:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 8015b68:	3f01      	subs	r7, #1
 8015b6a:	3203      	adds	r2, #3
 8015b6c:	e7e5      	b.n	8015b3a <prescan_quantize+0x1e>

08015b6e <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 8015b6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b72:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 8015b76:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 8015b7a:	2500      	movs	r5, #0
{
 8015b7c:	930a      	str	r3, [sp, #40]	; 0x28
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8015b7e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015b82:	9000      	str	r0, [sp, #0]
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 8015b84:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 8015b86:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8015b88:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 8015b8a:	9305      	str	r3, [sp, #20]
  c2 >>= BOX_C2_LOG;
 8015b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8015b8e:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8015b92:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 8015b94:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8015b96:	9b00      	ldr	r3, [sp, #0]
  centerc1 = (minc1 + maxc1) >> 1;
 8015b98:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 8015b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8015ba0:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 8015ba2:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 8015ba6:	9301      	str	r3, [sp, #4]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8015ba8:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8015bac:	341c      	adds	r4, #28
{
 8015bae:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 8015bb2:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8015bb4:	0149      	lsls	r1, r1, #5
 8015bb6:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8015bba:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 8015bbc:	eb09 0301 	add.w	r3, r9, r1
 8015bc0:	105b      	asrs	r3, r3, #1
 8015bc2:	9302      	str	r3, [sp, #8]
  centerc2 = (minc2 + maxc2) >> 1;
 8015bc4:	eb08 0304 	add.w	r3, r8, r4
 8015bc8:	105b      	asrs	r3, r3, #1
 8015bca:	9303      	str	r3, [sp, #12]
  for (i = 0; i < numcolors; i++) {
 8015bcc:	9b01      	ldr	r3, [sp, #4]
 8015bce:	42ab      	cmp	r3, r5
 8015bd0:	dc43      	bgt.n	8015c5a <fill_inverse_cmap+0xec>
  ncolors = 0;
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 8015bd6:	a830      	add	r0, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8015bd8:	4613      	mov	r3, r2
 8015bda:	9c01      	ldr	r4, [sp, #4]
 8015bdc:	429c      	cmp	r4, r3
 8015bde:	f300 809c 	bgt.w	8015d1a <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015be2:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 8015be4:	a970      	add	r1, sp, #448	; 0x1c0
    *bptr++ = 0x7FFFFFFFL;
 8015be6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015bea:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8015bec:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8015bf0:	d1fb      	bne.n	8015bea <fill_inverse_cmap+0x7c>
 8015bf2:	a930      	add	r1, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8015bf4:	469b      	mov	fp, r3
 8015bf6:	9107      	str	r1, [sp, #28]
 8015bf8:	4593      	cmp	fp, r2
 8015bfa:	f040 8096 	bne.w	8015d2a <fill_inverse_cmap+0x1bc>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 8015bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  cptr = bestcolor;
 8015c00:	aa10      	add	r2, sp, #64	; 0x40
  c2 <<= BOX_C2_LOG;
 8015c02:	f023 0003 	bic.w	r0, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8015c06:	9b08      	ldr	r3, [sp, #32]
 8015c08:	f023 0103 	bic.w	r1, r3, #3
 8015c0c:	9b05      	ldr	r3, [sp, #20]
 8015c0e:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 8015c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c14:	f023 0307 	bic.w	r3, r3, #7
 8015c18:	4629      	mov	r1, r5
 8015c1a:	019b      	lsls	r3, r3, #6
 8015c1c:	3110      	adds	r1, #16
 8015c1e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8015c22:	f855 4b04 	ldr.w	r4, [r5], #4
 8015c26:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015c28:	f102 0720 	add.w	r7, r2, #32
 8015c2c:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8015c2e:	4626      	mov	r6, r4
 8015c30:	4602      	mov	r2, r0
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015c32:	f100 0c04 	add.w	ip, r0, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015c36:	f812 0b01 	ldrb.w	r0, [r2], #1
 8015c3a:	3001      	adds	r0, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015c3c:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015c3e:	f826 0b02 	strh.w	r0, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 8015c42:	d1f8      	bne.n	8015c36 <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015c44:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 8015c46:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 8015c48:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8015c4c:	d1ef      	bne.n	8015c2e <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 8015c4e:	428d      	cmp	r5, r1
 8015c50:	d1e7      	bne.n	8015c22 <fill_inverse_cmap+0xb4>
      }
    }
  }
}
 8015c52:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 8015c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 8015c5a:	9b00      	ldr	r3, [sp, #0]
 8015c5c:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 8015c64:	4591      	cmp	r9, r2
 8015c66:	dd2a      	ble.n	8015cbe <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 8015c68:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 8015c6c:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 8015c6e:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8015c72:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8015c78:	459a      	cmp	sl, r3
 8015c7a:	dd33      	ble.n	8015ce4 <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 8015c7c:	eba3 0e0a 	sub.w	lr, r3, sl
 8015c80:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8015c84:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8015c88:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 8015c8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 8015c8e:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8015c92:	68bb      	ldr	r3, [r7, #8]
 8015c94:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8015c96:	4598      	cmp	r8, r3
 8015c98:	dd32      	ble.n	8015d00 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 8015c9a:	eba3 0708 	sub.w	r7, r3, r8
 8015c9e:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8015ca0:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8015ca4:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8015ca6:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8015ca8:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 8015cac:	aa70      	add	r2, sp, #448	; 0x1c0
 8015cae:	429e      	cmp	r6, r3
 8015cb0:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8015cb4:	f105 0501 	add.w	r5, r5, #1
 8015cb8:	bfa8      	it	ge
 8015cba:	461e      	movge	r6, r3
 8015cbc:	e786      	b.n	8015bcc <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 8015cbe:	4291      	cmp	r1, r2
 8015cc0:	da06      	bge.n	8015cd0 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 8015cc2:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8015cc6:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8015cca:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 8015cce:	e7d0      	b.n	8015c72 <fill_inverse_cmap+0x104>
      if (x <= centerc0) {
 8015cd0:	9b02      	ldr	r3, [sp, #8]
      min_dist = 0;
 8015cd2:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8015cd6:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8015cd8:	bfac      	ite	ge
 8015cda:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8015cdc:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8015ce0:	4352      	muls	r2, r2
 8015ce2:	e7c7      	b.n	8015c74 <fill_inverse_cmap+0x106>
    } else if (x > maxc1) {
 8015ce4:	4298      	cmp	r0, r3
 8015ce6:	da08      	bge.n	8015cfa <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 8015ce8:	eba3 0e00 	sub.w	lr, r3, r0
 8015cec:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8015cf0:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8015cf4:	eba3 030a 	sub.w	r3, r3, sl
 8015cf8:	e7c7      	b.n	8015c8a <fill_inverse_cmap+0x11c>
      if (x <= centerc1) {
 8015cfa:	459b      	cmp	fp, r3
 8015cfc:	dbfa      	blt.n	8015cf4 <fill_inverse_cmap+0x186>
 8015cfe:	e7c3      	b.n	8015c88 <fill_inverse_cmap+0x11a>
    } else if (x > maxc2) {
 8015d00:	429c      	cmp	r4, r3
 8015d02:	da06      	bge.n	8015d12 <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 8015d04:	1b1f      	subs	r7, r3, r4
 8015d06:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8015d08:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8015d0c:	eba3 0308 	sub.w	r3, r3, r8
 8015d10:	e7c9      	b.n	8015ca6 <fill_inverse_cmap+0x138>
      if (x <= centerc2) {
 8015d12:	9f03      	ldr	r7, [sp, #12]
 8015d14:	429f      	cmp	r7, r3
 8015d16:	dbf9      	blt.n	8015d0c <fill_inverse_cmap+0x19e>
 8015d18:	e7c4      	b.n	8015ca4 <fill_inverse_cmap+0x136>
    if (mindist[i] <= minmaxdist)
 8015d1a:	f851 4b04 	ldr.w	r4, [r1], #4
 8015d1e:	42a6      	cmp	r6, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 8015d20:	bfa4      	itt	ge
 8015d22:	5483      	strbge	r3, [r0, r2]
 8015d24:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8015d26:	3301      	adds	r3, #1
 8015d28:	e757      	b.n	8015bda <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8015d2a:	9b07      	ldr	r3, [sp, #28]
 8015d2c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8015d30:	9307      	str	r3, [sp, #28]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8015d32:	9b00      	ldr	r3, [sp, #0]
 8015d34:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8015d38:	680b      	ldr	r3, [r1, #0]
 8015d3a:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015d3c:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015d3e:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 8015d40:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015d44:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015d46:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015d48:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015d4c:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 8015d50:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 8015d54:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 8015d56:	4364      	muls	r4, r4
 8015d58:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8015d5c:	3004      	adds	r0, #4
 8015d5e:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 8015d60:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015d64:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 8015d66:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015d68:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015d6a:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 8015d6c:	9402      	str	r4, [sp, #8]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015d6e:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8015d70:	9106      	str	r1, [sp, #24]
 8015d72:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8015d74:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8015d78:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 8015d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8015d7e:	9b06      	ldr	r3, [sp, #24]
 8015d80:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 8015d82:	a810      	add	r0, sp, #64	; 0x40
 8015d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015d88:	9003      	str	r0, [sp, #12]
 8015d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8015d8c:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 8015d8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015d90:	eb03 0c01 	add.w	ip, r3, r1
 8015d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d96:	440b      	add	r3, r1
 8015d98:	930f      	str	r3, [sp, #60]	; 0x3c
	xx2 = inc2;
 8015d9a:	9b03      	ldr	r3, [sp, #12]
 8015d9c:	9304      	str	r3, [sp, #16]
      xx1 = inc1;
 8015d9e:	9b02      	ldr	r3, [sp, #8]
 8015da0:	9301      	str	r3, [sp, #4]
 8015da2:	e01c      	b.n	8015dde <fill_inverse_cmap+0x270>
	  if (dist2 < *bptr) {
 8015da4:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8015da8:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 8015dac:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015dae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	    *bptr = dist2;
 8015db0:	bfc8      	it	gt
 8015db2:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 8015db4:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8015db6:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 8015dba:	bfc8      	it	gt
 8015dbc:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015dc0:	42af      	cmp	r7, r5
 8015dc2:	d1ef      	bne.n	8015da4 <fill_inverse_cmap+0x236>
	  cptr++;
 8015dc4:	9b04      	ldr	r3, [sp, #16]
	  bptr++;
 8015dc6:	f10c 0c10 	add.w	ip, ip, #16
	  cptr++;
 8015dca:	3304      	adds	r3, #4
 8015dcc:	9304      	str	r3, [sp, #16]
	dist1 += xx1;
 8015dce:	9b01      	ldr	r3, [sp, #4]
 8015dd0:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8015dd2:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8015dd6:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8015dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015dda:	4298      	cmp	r0, r3
 8015ddc:	d006      	beq.n	8015dec <fill_inverse_cmap+0x27e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8015dde:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 8015de2:	9d06      	ldr	r5, [sp, #24]
 8015de4:	f8dd e010 	ldr.w	lr, [sp, #16]
 8015de8:	9c01      	ldr	r4, [sp, #4]
 8015dea:	e7db      	b.n	8015da4 <fill_inverse_cmap+0x236>
	  cptr++;
 8015dec:	9b03      	ldr	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015dee:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 8015df0:	980f      	ldr	r0, [sp, #60]	; 0x3c
	  cptr++;
 8015df2:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015df4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	  cptr++;
 8015df8:	9303      	str	r3, [sp, #12]
      dist0 += xx0;
 8015dfa:	9b02      	ldr	r3, [sp, #8]
 8015dfc:	4403      	add	r3, r0
 8015dfe:	9302      	str	r3, [sp, #8]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8015e00:	d1c4      	bne.n	8015d8c <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 8015e02:	f10b 0b01 	add.w	fp, fp, #1
 8015e06:	e6f7      	b.n	8015bf8 <fill_inverse_cmap+0x8a>

08015e08 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8015e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e0c:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 8015e0e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015e12:	b085      	sub	sp, #20
 8015e14:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 8015e16:	699b      	ldr	r3, [r3, #24]
{
 8015e18:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8015e1a:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 8015e1c:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 8015e1e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8015e20:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015e22:	4555      	cmp	r5, sl
 8015e24:	db02      	blt.n	8015e2c <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 8015e26:	b005      	add	sp, #20
 8015e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 8015e2c:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 8015e30:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 8015e34:	9b01      	ldr	r3, [sp, #4]
 8015e36:	3403      	adds	r4, #3
 8015e38:	eb06 0b03 	add.w	fp, r6, r3
 8015e3c:	455e      	cmp	r6, fp
 8015e3e:	d101      	bne.n	8015e44 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 8015e40:	3501      	adds	r5, #1
 8015e42:	e7ee      	b.n	8015e22 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8015e44:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8015e48:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 8015e4c:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 8015e50:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 8015e52:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8015e56:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 8015e5a:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 8015e5e:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 8015e60:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 8015e64:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8015e68:	f1bc 0f00 	cmp.w	ip, #0
 8015e6c:	d106      	bne.n	8015e7c <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 8015e6e:	4672      	mov	r2, lr
 8015e70:	9303      	str	r3, [sp, #12]
 8015e72:	9002      	str	r0, [sp, #8]
 8015e74:	f7ff fe7b 	bl	8015b6e <fill_inverse_cmap>
 8015e78:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 8015e7c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8015e80:	3403      	adds	r4, #3
 8015e82:	3b01      	subs	r3, #1
 8015e84:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 8015e88:	e7d8      	b.n	8015e3c <pass2_no_dither+0x34>

08015e8a <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 8015e8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015e8e:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
{
 8015e92:	b09f      	sub	sp, #124	; 0x7c
 8015e94:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8015e96:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8015e9a:	9315      	str	r3, [sp, #84]	; 0x54
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8015e9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8015e9e:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8015ea0:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015ea4:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8015ea6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8015eaa:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 8015eac:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8015eb0:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 8015eb4:	681a      	ldr	r2, [r3, #0]
 8015eb6:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8015eb8:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 8015eba:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 8015ebc:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 8015ebe:	9318      	str	r3, [sp, #96]	; 0x60
  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015ec0:	9b05      	ldr	r3, [sp, #20]
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015ec2:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015ec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015ec8:	3b03      	subs	r3, #3
 8015eca:	9310      	str	r3, [sp, #64]	; 0x40
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015ecc:	2306      	movs	r3, #6
 8015ece:	fb02 3303 	mla	r3, r2, r3, r3
 8015ed2:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	9304      	str	r3, [sp, #16]
 8015ed8:	9b04      	ldr	r3, [sp, #16]
 8015eda:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015edc:	4293      	cmp	r3, r2
 8015ede:	db02      	blt.n	8015ee6 <pass2_fs_dither+0x5c>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 8015ee0:	b01f      	add	sp, #124	; 0x7c
 8015ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8015ee6:	9a04      	ldr	r2, [sp, #16]
 8015ee8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015eee:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 8015ef0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ef6:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015ef8:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8015efc:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 8015efe:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d036      	beq.n	8015f74 <pass2_fs_dither+0xea>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015f06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f08:	9a01      	ldr	r2, [sp, #4]
 8015f0a:	441a      	add	r2, r3
      outptr += width-1;
 8015f0c:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8015f0e:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 8015f10:	3b01      	subs	r3, #1
 8015f12:	9a03      	ldr	r2, [sp, #12]
 8015f14:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015f16:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 8015f18:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015f1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f1c:	4413      	add	r3, r2
      dir3 = -3;
 8015f1e:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8015f22:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8015f24:	2300      	movs	r3, #0
      dir3 = -3;
 8015f26:	9208      	str	r2, [sp, #32]
      dir = -1;
 8015f28:	f04f 32ff 	mov.w	r2, #4294967295
 8015f2c:	920f      	str	r2, [sp, #60]	; 0x3c
 8015f2e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8015f32:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015f34:	9b08      	ldr	r3, [sp, #32]
 8015f36:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 8015f38:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015f3a:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 8015f3c:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 8015f3e:	940c      	str	r4, [sp, #48]	; 0x30
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015f40:	1cab      	adds	r3, r5, #2
 8015f42:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015f44:	1d2b      	adds	r3, r5, #4
 8015f46:	9314      	str	r3, [sp, #80]	; 0x50
    for (col = width; col > 0; col--) {
 8015f48:	9b05      	ldr	r3, [sp, #20]
 8015f4a:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 8015f4c:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 8015f4e:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 8015f52:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8015f56:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015f58:	b98f      	cbnz	r7, 8015f7e <pass2_fs_dither+0xf4>
 8015f5a:	9b05      	ldr	r3, [sp, #20]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 8015f5c:	9a02      	ldr	r2, [sp, #8]
 8015f5e:	435d      	muls	r5, r3
 8015f60:	9906      	ldr	r1, [sp, #24]
 8015f62:	9b02      	ldr	r3, [sp, #8]
 8015f64:	5351      	strh	r1, [r2, r5]
 8015f66:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 8015f68:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 8015f6a:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 8015f6c:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 8015f6e:	9b04      	ldr	r3, [sp, #16]
 8015f70:	3301      	adds	r3, #1
 8015f72:	e7b0      	b.n	8015ed6 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8015f74:	2301      	movs	r3, #1
      dir3 = 3;
 8015f76:	2203      	movs	r2, #3
      dir = 1;
 8015f78:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 8015f7a:	9208      	str	r2, [sp, #32]
 8015f7c:	e7d7      	b.n	8015f2e <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015f7e:	f936 c005 	ldrsh.w	ip, [r6, r5]
 8015f82:	1977      	adds	r7, r6, r5
 8015f84:	4463      	add	r3, ip
 8015f86:	9711      	str	r7, [sp, #68]	; 0x44
      cur0 = error_limit[cur0];
 8015f88:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015f8a:	f103 0c08 	add.w	ip, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015f8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f90:	5ef3      	ldrsh	r3, [r6, r3]
 8015f92:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015f94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f96:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015f98:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015f9a:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8015f9c:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8015f9e:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015fa2:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8015fa4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8015fa8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8015fac:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 8015fae:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8015fb2:	9f01      	ldr	r7, [sp, #4]
 8015fb4:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8015fb8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015fba:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8015fbc:	443a      	add	r2, r7
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8015fbe:	443b      	add	r3, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8015fc0:	f811 b00c 	ldrb.w	fp, [r1, ip]
      cur1 += GETJSAMPLE(inptr[1]);
 8015fc4:	9901      	ldr	r1, [sp, #4]
 8015fc6:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8015fc8:	f812 a001 	ldrb.w	sl, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8015fcc:	ea4f 01eb 	mov.w	r1, fp, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 8015fd0:	9a01      	ldr	r2, [sp, #4]
 8015fd2:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8015fd4:	f813 9002 	ldrb.w	r9, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8015fd8:	ea4f 02aa 	mov.w	r2, sl, asr #2
 8015fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015fe2:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8015fe6:	461f      	mov	r7, r3
 8015fe8:	ea4f 03e9 	mov.w	r3, r9, asr #3
      if (*cachep == 0)
 8015fec:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8015ff0:	f1bc 0f00 	cmp.w	ip, #0
 8015ff4:	d105      	bne.n	8016002 <pass2_fs_dither+0x178>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8015ff6:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 8015ffa:	f7ff fdb8 	bl	8015b6e <fill_inverse_cmap>
 8015ffe:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 8016002:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 8016006:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8016008:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 801600a:	9907      	ldr	r1, [sp, #28]
      inptr += dir3;		/* Advance pixel pointers to next column */
 801600c:	9f01      	ldr	r7, [sp, #4]
	*outptr = (JSAMPLE) pixcode;
 801600e:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8016010:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016012:	5cd2      	ldrb	r2, [r2, r3]
 8016014:	ebab 0b02 	sub.w	fp, fp, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8016018:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801601a:	5cd2      	ldrb	r2, [r2, r3]
 801601c:	ebaa 0a02 	sub.w	sl, sl, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8016020:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016022:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8016024:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8016026:	eba9 0903 	sub.w	r9, r9, r3
	cur0 += delta;		/* form error * 3 */
 801602a:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 801602e:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 8016030:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8016034:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 8016036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 8016038:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 801603c:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 801603e:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	bpreverr0 = belowerr0 + cur0;
 8016042:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 8016044:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8016048:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 801604a:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 801604e:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8016050:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016052:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8016054:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8016058:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 801605a:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 801605e:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8016060:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8016064:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016066:	9e08      	ldr	r6, [sp, #32]
	bpreverr2 = belowerr2 + cur2;
 8016068:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 801606a:	4437      	add	r7, r6
      outptr += dir;
 801606c:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 801606e:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8016070:	eb01 0149 	add.w	r1, r1, r9, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016074:	9701      	str	r7, [sp, #4]
      outptr += dir;
 8016076:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016078:	443e      	add	r6, r7
 801607a:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 801607c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801607e:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8016080:	e9cd a90d 	strd	sl, r9, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8016084:	9609      	str	r6, [sp, #36]	; 0x24
 8016086:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016088:	e765      	b.n	8015f56 <pass2_fs_dither+0xcc>

0801608a <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 801608a:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 801608c:	6843      	ldr	r3, [r0, #4]
 801608e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8016092:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016094:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 801609c:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 80160a0:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 80160a4:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 80160a8:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 80160aa:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 80160ac:	425c      	negs	r4, r3
 80160ae:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 80160b2:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 80160b4:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 80160b8:	2b10      	cmp	r3, #16
 80160ba:	d1f7      	bne.n	80160ac <init_error_limit+0x22>
 80160bc:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 80160c0:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 80160c4:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 80160c8:	425d      	negs	r5, r3
 80160ca:	f844 3f04 	str.w	r3, [r4, #4]!
 80160ce:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 80160d2:	f002 0501 	and.w	r5, r2, #1
 80160d6:	3a01      	subs	r2, #1
 80160d8:	442b      	add	r3, r5
 80160da:	f112 0f32 	cmn.w	r2, #50	; 0x32
 80160de:	d1f3      	bne.n	80160c8 <init_error_limit+0x3e>
 80160e0:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 80160e4:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 80160e8:	425c      	negs	r4, r3
 80160ea:	f841 3f04 	str.w	r3, [r1, #4]!
 80160ee:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 80160f2:	4282      	cmp	r2, r0
 80160f4:	d1f9      	bne.n	80160ea <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 80160f6:	bd38      	pop	{r3, r4, r5, pc}

080160f8 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 80160f8:	4770      	bx	lr

080160fa <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 80160fa:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 80160fe:	2201      	movs	r2, #1
 8016100:	61da      	str	r2, [r3, #28]
}
 8016102:	4770      	bx	lr

08016104 <start_pass_2_quant>:
{
 8016104:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016106:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 801610a:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 801610c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8016110:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8016112:	2b00      	cmp	r3, #0
 8016114:	d050      	beq.n	80161b8 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 8016116:	2302      	movs	r3, #2
 8016118:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 801611c:	b189      	cbz	r1, 8016142 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 801611e:	4b28      	ldr	r3, [pc, #160]	; (80161c0 <start_pass_2_quant+0xbc>)
 8016120:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8016122:	4b28      	ldr	r3, [pc, #160]	; (80161c4 <start_pass_2_quant+0xc0>)
 8016124:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 8016126:	1f34      	subs	r4, r6, #4
 8016128:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 801612a:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801612e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016132:	2100      	movs	r1, #0
 8016134:	f012 fa6a 	bl	802860c <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8016138:	42a6      	cmp	r6, r4
 801613a:	d1f6      	bne.n	801612a <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 801613c:	2300      	movs	r3, #0
 801613e:	61eb      	str	r3, [r5, #28]
}
 8016140:	e02f      	b.n	80161a2 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8016142:	4b21      	ldr	r3, [pc, #132]	; (80161c8 <start_pass_2_quant+0xc4>)
 8016144:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8016146:	4b21      	ldr	r3, [pc, #132]	; (80161cc <start_pass_2_quant+0xc8>)
 8016148:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 801614a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 801614e:	2b00      	cmp	r3, #0
 8016150:	dc29      	bgt.n	80161a6 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8016152:	223a      	movs	r2, #58	; 0x3a
 8016154:	6823      	ldr	r3, [r4, #0]
 8016156:	615a      	str	r2, [r3, #20]
 8016158:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801615a:	619a      	str	r2, [r3, #24]
 801615c:	4620      	mov	r0, r4
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8016162:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016166:	2b02      	cmp	r3, #2
 8016168:	d118      	bne.n	801619c <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 801616a:	2306      	movs	r3, #6
 801616c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801616e:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8016170:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8016172:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 8016174:	b93b      	cbnz	r3, 8016186 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016176:	6863      	ldr	r3, [r4, #4]
 8016178:	2101      	movs	r1, #1
 801617a:	4620      	mov	r0, r4
 801617c:	9201      	str	r2, [sp, #4]
 801617e:	685b      	ldr	r3, [r3, #4]
 8016180:	4798      	blx	r3
 8016182:	9a01      	ldr	r2, [sp, #4]
 8016184:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8016186:	2100      	movs	r1, #0
 8016188:	6a28      	ldr	r0, [r5, #32]
 801618a:	f012 fa3f 	bl	802860c <memset>
      if (cquantize->error_limiter == NULL)
 801618e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016190:	b913      	cbnz	r3, 8016198 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8016192:	4620      	mov	r0, r4
 8016194:	f7ff ff79 	bl	801608a <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8016198:	2300      	movs	r3, #0
 801619a:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 801619c:	69eb      	ldr	r3, [r5, #28]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d1c1      	bne.n	8016126 <start_pass_2_quant+0x22>
}
 80161a2:	b002      	add	sp, #8
 80161a4:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 80161a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80161aa:	ddda      	ble.n	8016162 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80161ac:	223b      	movs	r2, #59	; 0x3b
 80161ae:	6823      	ldr	r3, [r4, #0]
 80161b0:	615a      	str	r2, [r3, #20]
 80161b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80161b6:	e7d0      	b.n	801615a <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 80161b8:	2900      	cmp	r1, #0
 80161ba:	d1b0      	bne.n	801611e <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 80161bc:	4b04      	ldr	r3, [pc, #16]	; (80161d0 <start_pass_2_quant+0xcc>)
 80161be:	e7c1      	b.n	8016144 <start_pass_2_quant+0x40>
 80161c0:	08015b1d 	.word	0x08015b1d
 80161c4:	08016413 	.word	0x08016413
 80161c8:	08015e8b 	.word	0x08015e8b
 80161cc:	080160f9 	.word	0x080160f9
 80161d0:	08015e09 	.word	0x08015e09

080161d4 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 80161d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80161d8:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 80161dc:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 80161de:	b085      	sub	sp, #20
  if (c0max > c0min)
 80161e0:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 80161e2:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80161e4:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80161e6:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80161ea:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 80161ee:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 80161f2:	db24      	blt.n	801623e <update_box.isra.0+0x6a>
  if (c1max > c1min)
 80161f4:	4584      	cmp	ip, r0
 80161f6:	4662      	mov	r2, ip
 80161f8:	db5d      	blt.n	80162b6 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 80161fa:	42a5      	cmp	r5, r4
 80161fc:	f280 80eb 	bge.w	80163d6 <update_box.isra.0+0x202>
	histp = & histogram[c0][c1min][c2];
 8016200:	0196      	lsls	r6, r2, #6
 8016202:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 8016206:	46ac      	mov	ip, r5
 8016208:	9602      	str	r6, [sp, #8]
 801620a:	fb07 f602 	mul.w	r6, r7, r2
 801620e:	9603      	str	r6, [sp, #12]
 8016210:	9e02      	ldr	r6, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016212:	469e      	mov	lr, r3
 8016214:	eb06 094c 	add.w	r9, r6, ip, lsl #1
 8016218:	9e03      	ldr	r6, [sp, #12]
 801621a:	44b1      	add	r9, r6
 801621c:	e083      	b.n	8016326 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 801621e:	9a01      	ldr	r2, [sp, #4]
 8016220:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8016224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016228:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801622a:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 801622c:	454c      	cmp	r4, r9
 801622e:	da08      	bge.n	8016242 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8016230:	f108 0801 	add.w	r8, r8, #1
 8016234:	4540      	cmp	r0, r8
 8016236:	daf2      	bge.n	801621e <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 8016238:	3301      	adds	r3, #1
 801623a:	459b      	cmp	fp, r3
 801623c:	db0f      	blt.n	801625e <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801623e:	46e0      	mov	r8, ip
 8016240:	e7f8      	b.n	8016234 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 8016242:	f832 ab02 	ldrh.w	sl, [r2], #2
 8016246:	f1ba 0f00 	cmp.w	sl, #0
 801624a:	d005      	beq.n	8016258 <update_box.isra.0+0x84>
  if (c0max > c0min)
 801624c:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 801624e:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8016250:	ddd0      	ble.n	80161f4 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016252:	465f      	mov	r7, fp
 8016254:	46e0      	mov	r8, ip
 8016256:	e00f      	b.n	8016278 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016258:	f109 0901 	add.w	r9, r9, #1
 801625c:	e7e6      	b.n	801622c <update_box.isra.0+0x58>
 have_c0min:
 801625e:	463b      	mov	r3, r7
 8016260:	e7f7      	b.n	8016252 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 8016262:	9a01      	ldr	r2, [sp, #4]
 8016264:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8016268:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801626c:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801626e:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 8016270:	454c      	cmp	r4, r9
 8016272:	da07      	bge.n	8016284 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8016274:	f108 0801 	add.w	r8, r8, #1
 8016278:	4540      	cmp	r0, r8
 801627a:	daf2      	bge.n	8016262 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 801627c:	3f01      	subs	r7, #1
 801627e:	429f      	cmp	r7, r3
 8016280:	dbb8      	blt.n	80161f4 <update_box.isra.0+0x20>
 8016282:	e7e7      	b.n	8016254 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 8016284:	f832 ab02 	ldrh.w	sl, [r2], #2
 8016288:	f1ba 0f00 	cmp.w	sl, #0
 801628c:	d002      	beq.n	8016294 <update_box.isra.0+0xc0>
	    goto have_c0max;
 801628e:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 8016290:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 8016292:	e7af      	b.n	80161f4 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016294:	f109 0901 	add.w	r9, r9, #1
 8016298:	e7ea      	b.n	8016270 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 801629a:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801629c:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 801629e:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 80162a2:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 80162a4:	454c      	cmp	r4, r9
 80162a6:	da0a      	bge.n	80162be <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80162a8:	f108 0801 	add.w	r8, r8, #1
 80162ac:	45d8      	cmp	r8, fp
 80162ae:	ddf4      	ble.n	801629a <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 80162b0:	3201      	adds	r2, #1
 80162b2:	4290      	cmp	r0, r2
 80162b4:	db11      	blt.n	80162da <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80162b6:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 80162b8:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 80162bc:	e7f6      	b.n	80162ac <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 80162be:	f837 6b02 	ldrh.w	r6, [r7], #2
 80162c2:	b13e      	cbz	r6, 80162d4 <update_box.isra.0+0x100>
  if (c1max > c1min)
 80162c4:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 80162c6:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 80162c8:	dd97      	ble.n	80161fa <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80162ca:	4684      	mov	ip, r0
 80162cc:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 80162ce:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 80162d2:	e00d      	b.n	80162f0 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 80162d4:	f109 0901 	add.w	r9, r9, #1
 80162d8:	e7e4      	b.n	80162a4 <update_box.isra.0+0xd0>
 have_c1min:
 80162da:	4662      	mov	r2, ip
 80162dc:	e7f5      	b.n	80162ca <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 80162de:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80162e0:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 80162e2:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 80162e6:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 80162e8:	454c      	cmp	r4, r9
 80162ea:	da09      	bge.n	8016300 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80162ec:	f108 0801 	add.w	r8, r8, #1
 80162f0:	45c3      	cmp	fp, r8
 80162f2:	daf4      	bge.n	80162de <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 80162f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80162f8:	4594      	cmp	ip, r2
 80162fa:	f6ff af7e 	blt.w	80161fa <update_box.isra.0+0x26>
 80162fe:	e7e5      	b.n	80162cc <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 8016300:	f837 6b02 	ldrh.w	r6, [r7], #2
 8016304:	b11e      	cbz	r6, 801630e <update_box.isra.0+0x13a>
	    goto have_c1max;
 8016306:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 8016308:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 801630c:	e775      	b.n	80161fa <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 801630e:	f109 0901 	add.w	r9, r9, #1
 8016312:	e7e9      	b.n	80162e8 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016314:	9e01      	ldr	r6, [sp, #4]
 8016316:	4690      	mov	r8, r2
 8016318:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
 801631c:	444f      	add	r7, r9
 801631e:	4580      	cmp	r8, r0
 8016320:	dd11      	ble.n	8016346 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016322:	f10e 0e01 	add.w	lr, lr, #1
 8016326:	45f3      	cmp	fp, lr
 8016328:	daf4      	bge.n	8016314 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 801632a:	f10c 0c01 	add.w	ip, ip, #1
 801632e:	4564      	cmp	r4, ip
 8016330:	f6bf af6e 	bge.w	8016210 <update_box.isra.0+0x3c>
 have_c2min:
 8016334:	46ac      	mov	ip, r5
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016336:	4627      	mov	r7, r4
 8016338:	9d02      	ldr	r5, [sp, #8]
 801633a:	469e      	mov	lr, r3
 801633c:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 8016340:	9d03      	ldr	r5, [sp, #12]
 8016342:	44a9      	add	r9, r5
 8016344:	e034      	b.n	80163b0 <update_box.isra.0+0x1dc>
	  if (*histp != 0) {
 8016346:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 801634a:	f837 a00a 	ldrh.w	sl, [r7, sl]
 801634e:	f1ba 0f00 	cmp.w	sl, #0
 8016352:	d021      	beq.n	8016398 <update_box.isra.0+0x1c4>
  if (c2max > c2min)
 8016354:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 8016356:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 801635a:	dcec      	bgt.n	8016336 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801635c:	1a85      	subs	r5, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801635e:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8016362:	eba4 070c 	sub.w	r7, r4, ip
 8016366:	ea4f 094c 	mov.w	r9, ip, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801636a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801636e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8016372:	eb08 0885 	add.w	r8, r8, r5, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8016376:	013d      	lsls	r5, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8016378:	fb08 f808 	mul.w	r8, r8, r8
 801637c:	fb0e 880e 	mla	r8, lr, lr, r8
  ccount = 0;
 8016380:	f04f 0e00 	mov.w	lr, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8016384:	fb05 8505 	mla	r5, r5, r5, r8
 8016388:	618d      	str	r5, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 801638a:	459b      	cmp	fp, r3
 801638c:	da3f      	bge.n	801640e <update_box.isra.0+0x23a>
  boxp->colorcount = ccount;
 801638e:	f8c1 e01c 	str.w	lr, [r1, #28]
}
 8016392:	b005      	add	sp, #20
 8016394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016398:	f108 0801 	add.w	r8, r8, #1
 801639c:	e7bf      	b.n	801631e <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801639e:	9d01      	ldr	r5, [sp, #4]
 80163a0:	4690      	mov	r8, r2
 80163a2:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
 80163a6:	444d      	add	r5, r9
 80163a8:	4540      	cmp	r0, r8
 80163aa:	da07      	bge.n	80163bc <update_box.isra.0+0x1e8>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80163ac:	f10e 0e01 	add.w	lr, lr, #1
 80163b0:	45f3      	cmp	fp, lr
 80163b2:	daf4      	bge.n	801639e <update_box.isra.0+0x1ca>
    for (c2 = c2max; c2 >= c2min; c2--)
 80163b4:	3f01      	subs	r7, #1
 80163b6:	4567      	cmp	r7, ip
 80163b8:	dbd0      	blt.n	801635c <update_box.isra.0+0x188>
 80163ba:	e7bd      	b.n	8016338 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 80163bc:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80163c0:	f835 a00a 	ldrh.w	sl, [r5, sl]
 80163c4:	f1ba 0f00 	cmp.w	sl, #0
 80163c8:	d002      	beq.n	80163d0 <update_box.isra.0+0x1fc>
	    goto have_c2max;
 80163ca:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 80163cc:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 80163ce:	e7c5      	b.n	801635c <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80163d0:	f108 0801 	add.w	r8, r8, #1
 80163d4:	e7e8      	b.n	80163a8 <update_box.isra.0+0x1d4>
 have_c2min:
 80163d6:	46ac      	mov	ip, r5
 80163d8:	e7c0      	b.n	801635c <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80163da:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 80163de:	f1a5 0802 	sub.w	r8, r5, #2
 80163e2:	9d01      	ldr	r5, [sp, #4]
 80163e4:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 80163e8:	4445      	add	r5, r8
 80163ea:	46e0      	mov	r8, ip
 80163ec:	4544      	cmp	r4, r8
 80163ee:	da04      	bge.n	80163fa <update_box.isra.0+0x226>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80163f0:	3701      	adds	r7, #1
 80163f2:	42b8      	cmp	r0, r7
 80163f4:	daf1      	bge.n	80163da <update_box.isra.0+0x206>
  for (c0 = c0min; c0 <= c0max; c0++)
 80163f6:	3301      	adds	r3, #1
 80163f8:	e7c7      	b.n	801638a <update_box.isra.0+0x1b6>
	if (*histp != 0) {
 80163fa:	f835 af02 	ldrh.w	sl, [r5, #2]!
 80163fe:	f1ba 0f00 	cmp.w	sl, #0
 8016402:	d001      	beq.n	8016408 <update_box.isra.0+0x234>
	  ccount++;
 8016404:	f10e 0e01 	add.w	lr, lr, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8016408:	f108 0801 	add.w	r8, r8, #1
 801640c:	e7ee      	b.n	80163ec <update_box.isra.0+0x218>
 801640e:	4617      	mov	r7, r2
 8016410:	e7ef      	b.n	80163f2 <update_box.isra.0+0x21e>

08016412 <finish_pass1>:
{
 8016412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016416:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801641a:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801641c:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 801641e:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016422:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8016424:	691b      	ldr	r3, [r3, #16]
{
 8016426:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 8016428:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 801642c:	9b02      	ldr	r3, [sp, #8]
 801642e:	695b      	ldr	r3, [r3, #20]
 8016430:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8016432:	9a01      	ldr	r2, [sp, #4]
 8016434:	6843      	ldr	r3, [r0, #4]
 8016436:	0152      	lsls	r2, r2, #5
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801643c:	2300      	movs	r3, #0
 801643e:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8016440:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8016442:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 8016444:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8016446:	6142      	str	r2, [r0, #20]
 8016448:	46a8      	mov	r8, r5
  boxlist[0].c2min = 0;
 801644a:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801644e:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8016452:	9b00      	ldr	r3, [sp, #0]
 8016454:	4601      	mov	r1, r0
 8016456:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 801645a:	f7ff febb 	bl	80161d4 <update_box.isra.0>
  while (numboxes < desired_colors) {
 801645e:	9b01      	ldr	r3, [sp, #4]
 8016460:	455b      	cmp	r3, fp
 8016462:	dc24      	bgt.n	80164ae <finish_pass1+0x9c>
 8016464:	2300      	movs	r3, #0
  hist3d histogram = cquantize->histogram;
 8016466:	9a00      	ldr	r2, [sp, #0]
 8016468:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 801646c:	6992      	ldr	r2, [r2, #24]
 801646e:	9203      	str	r2, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8016470:	e9d8 7200 	ldrd	r7, r2, [r8]
 8016474:	9204      	str	r2, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016476:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801647a:	9205      	str	r2, [sp, #20]
 801647c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8016480:	9206      	str	r2, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016482:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016486:	9201      	str	r2, [sp, #4]
 8016488:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801648c:	9207      	str	r2, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 801648e:	9a01      	ldr	r2, [sp, #4]
 8016490:	0052      	lsls	r2, r2, #1
 8016492:	9209      	str	r2, [sp, #36]	; 0x24
  long c2total = 0;
 8016494:	2200      	movs	r2, #0
  long c1total = 0;
 8016496:	4692      	mov	sl, r2
  long c0total = 0;
 8016498:	4691      	mov	r9, r2
  long total = 0;
 801649a:	4611      	mov	r1, r2
  for (c0 = c0min; c0 <= c0max; c0++)
 801649c:	9804      	ldr	r0, [sp, #16]
 801649e:	42b8      	cmp	r0, r7
 80164a0:	f2c0 8098 	blt.w	80165d4 <finish_pass1+0x1c2>
 80164a4:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 80164a6:	9e05      	ldr	r6, [sp, #20]
 80164a8:	3004      	adds	r0, #4
 80164aa:	9008      	str	r0, [sp, #32]
 80164ac:	e07c      	b.n	80165a8 <finish_pass1+0x196>
    if (numboxes*2 <= desired_colors) {
 80164ae:	9b01      	ldr	r3, [sp, #4]
 80164b0:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 80164b4:	db4f      	blt.n	8016556 <finish_pass1+0x144>
  boxptr which = NULL;
 80164b6:	2300      	movs	r3, #0
 80164b8:	4628      	mov	r0, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80164ba:	461e      	mov	r6, r3
  register long maxc = 0;
 80164bc:	461f      	mov	r7, r3
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 80164be:	69c2      	ldr	r2, [r0, #28]
 80164c0:	42ba      	cmp	r2, r7
 80164c2:	dd04      	ble.n	80164ce <finish_pass1+0xbc>
 80164c4:	6984      	ldr	r4, [r0, #24]
 80164c6:	2c00      	cmp	r4, #0
 80164c8:	bfc4      	itt	gt
 80164ca:	4603      	movgt	r3, r0
 80164cc:	4617      	movgt	r7, r2
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80164ce:	3601      	adds	r6, #1
 80164d0:	3020      	adds	r0, #32
 80164d2:	45b3      	cmp	fp, r6
 80164d4:	d1f3      	bne.n	80164be <finish_pass1+0xac>
    if (b1 == NULL)		/* no splittable boxes left! */
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d0c5      	beq.n	8016466 <finish_pass1+0x54>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 80164da:	685a      	ldr	r2, [r3, #4]
 80164dc:	f101 0920 	add.w	r9, r1, #32
 80164e0:	624a      	str	r2, [r1, #36]	; 0x24
 80164e2:	68d8      	ldr	r0, [r3, #12]
 80164e4:	62c8      	str	r0, [r1, #44]	; 0x2c
 80164e6:	6958      	ldr	r0, [r3, #20]
 80164e8:	6348      	str	r0, [r1, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 80164ea:	6818      	ldr	r0, [r3, #0]
 80164ec:	6208      	str	r0, [r1, #32]
 80164ee:	6898      	ldr	r0, [r3, #8]
 80164f0:	6288      	str	r0, [r1, #40]	; 0x28
 80164f2:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80164f6:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 80164fa:	6818      	ldr	r0, [r3, #0]
 80164fc:	9003      	str	r0, [sp, #12]
 80164fe:	1a10      	subs	r0, r2, r0
 8016500:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8016504:	e9d3 0602 	ldrd	r0, r6, [r3, #8]
 8016508:	9004      	str	r0, [sp, #16]
 801650a:	1a30      	subs	r0, r6, r0
 801650c:	00c7      	lsls	r7, r0, #3
 801650e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016512:	6958      	ldr	r0, [r3, #20]
 8016514:	eba0 0a0c 	sub.w	sl, r0, ip
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016518:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 801651c:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016520:	f2c0 808c 	blt.w	801663c <finish_pass1+0x22a>
    if (c0 > cmax) { n = 0; }
 8016524:	45be      	cmp	lr, r7
 8016526:	dd25      	ble.n	8016574 <finish_pass1+0x162>
      lb = (b1->c0max + b1->c0min) / 2;
 8016528:	9803      	ldr	r0, [sp, #12]
 801652a:	4402      	add	r2, r0
 801652c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8016530:	1052      	asrs	r2, r2, #1
      b1->c0max = lb;
 8016532:	605a      	str	r2, [r3, #4]
      b2->c0min = lb+1;
 8016534:	3201      	adds	r2, #1
 8016536:	620a      	str	r2, [r1, #32]
    update_box(cinfo, b1);
 8016538:	4619      	mov	r1, r3
 801653a:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 801653c:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 8016540:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016544:	f7ff fe46 	bl	80161d4 <update_box.isra.0>
    update_box(cinfo, b2);
 8016548:	9b00      	ldr	r3, [sp, #0]
 801654a:	4649      	mov	r1, r9
 801654c:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016550:	f7ff fe40 	bl	80161d4 <update_box.isra.0>
    numboxes++;
 8016554:	e783      	b.n	801645e <finish_pass1+0x4c>
  boxptr which = NULL;
 8016556:	2300      	movs	r3, #0
 8016558:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801655a:	4618      	mov	r0, r3
  register INT32 maxv = 0;
 801655c:	461e      	mov	r6, r3
    if (boxp->volume > maxv) {
 801655e:	6997      	ldr	r7, [r2, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016560:	3001      	adds	r0, #1
    if (boxp->volume > maxv) {
 8016562:	42b7      	cmp	r7, r6
 8016564:	bfc4      	itt	gt
 8016566:	4613      	movgt	r3, r2
 8016568:	463e      	movgt	r6, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801656a:	4583      	cmp	fp, r0
 801656c:	f102 0220 	add.w	r2, r2, #32
 8016570:	d1f5      	bne.n	801655e <finish_pass1+0x14c>
 8016572:	e7b0      	b.n	80164d6 <finish_pass1+0xc4>
      lb = (b1->c1max + b1->c1min) / 2;
 8016574:	9a04      	ldr	r2, [sp, #16]
 8016576:	4416      	add	r6, r2
 8016578:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801657c:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 801657e:	60de      	str	r6, [r3, #12]
      b2->c1min = lb+1;
 8016580:	3601      	adds	r6, #1
 8016582:	628e      	str	r6, [r1, #40]	; 0x28
      break;
 8016584:	e7d8      	b.n	8016538 <finish_pass1+0x126>
      histp = & histogram[c0][c1][c2min];
 8016586:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016588:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 801658c:	9c03      	ldr	r4, [sp, #12]
 801658e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8016592:	f10e 0e02 	add.w	lr, lr, #2
 8016596:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 801659a:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 801659e:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 80165a0:	9c07      	ldr	r4, [sp, #28]
 80165a2:	4564      	cmp	r4, ip
 80165a4:	da05      	bge.n	80165b2 <finish_pass1+0x1a0>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80165a6:	3601      	adds	r6, #1
 80165a8:	9806      	ldr	r0, [sp, #24]
 80165aa:	42b0      	cmp	r0, r6
 80165ac:	daeb      	bge.n	8016586 <finish_pass1+0x174>
  for (c0 = c0min; c0 <= c0max; c0++)
 80165ae:	3701      	adds	r7, #1
 80165b0:	e774      	b.n	801649c <finish_pass1+0x8a>
	if ((count = *histp++) != 0) {
 80165b2:	f830 5b02 	ldrh.w	r5, [r0], #2
 80165b6:	b155      	cbz	r5, 80165ce <finish_pass1+0x1bc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 80165b8:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 80165ba:	4429      	add	r1, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 80165bc:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 80165c0:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 80165c4:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 80165c8:	3404      	adds	r4, #4
 80165ca:	fb05 2204 	mla	r2, r5, r4, r2
      for (c2 = c2min; c2 <= c2max; c2++) {
 80165ce:	f10c 0c01 	add.w	ip, ip, #1
 80165d2:	e7e5      	b.n	80165a0 <finish_pass1+0x18e>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 80165d4:	eb09 0961 	add.w	r9, r9, r1, asr #1
 80165d8:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 80165da:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
  for (i = 0; i < numboxes; i++)
 80165de:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 80165e2:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 80165e6:	eb02 0261 	add.w	r2, r2, r1, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 80165ea:	fb99 f9f1 	sdiv	r9, r9, r1
 80165ee:	6800      	ldr	r0, [r0, #0]
 80165f0:	f800 9003 	strb.w	r9, [r0, r3]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 80165f4:	9800      	ldr	r0, [sp, #0]
 80165f6:	fb9a faf1 	sdiv	sl, sl, r1
 80165fa:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 80165fe:	6840      	ldr	r0, [r0, #4]
 8016600:	f800 a003 	strb.w	sl, [r0, r3]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016604:	9800      	ldr	r0, [sp, #0]
 8016606:	fb92 f1f1 	sdiv	r1, r2, r1
 801660a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801660e:	6880      	ldr	r0, [r0, #8]
 8016610:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < numboxes; i++)
 8016612:	3301      	adds	r3, #1
 8016614:	455b      	cmp	r3, fp
 8016616:	f47f af26 	bne.w	8016466 <finish_pass1+0x54>
  cinfo->actual_number_of_colors = numboxes;
 801661a:	9a00      	ldr	r2, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 801661c:	2162      	movs	r1, #98	; 0x62
 801661e:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 8016620:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8016624:	6812      	ldr	r2, [r2, #0]
 8016626:	e9c2 1305 	strd	r1, r3, [r2, #20]
 801662a:	6853      	ldr	r3, [r2, #4]
 801662c:	2101      	movs	r1, #1
 801662e:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8016630:	2301      	movs	r3, #1
 8016632:	9a02      	ldr	r2, [sp, #8]
 8016634:	61d3      	str	r3, [r2, #28]
}
 8016636:	b00b      	add	sp, #44	; 0x2c
 8016638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 801663c:	45a6      	cmp	lr, r4
 801663e:	f73f af73 	bgt.w	8016528 <finish_pass1+0x116>
      lb = (b1->c2max + b1->c2min) / 2;
 8016642:	4460      	add	r0, ip
 8016644:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8016648:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 801664a:	6158      	str	r0, [r3, #20]
      b2->c2min = lb+1;
 801664c:	3001      	adds	r0, #1
 801664e:	6308      	str	r0, [r1, #48]	; 0x30
      break;
 8016650:	e772      	b.n	8016538 <finish_pass1+0x126>
	...

08016654 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8016654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016656:	6843      	ldr	r3, [r0, #4]
 8016658:	222c      	movs	r2, #44	; 0x2c
 801665a:	2101      	movs	r1, #1
{
 801665c:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 8016662:	4b30      	ldr	r3, [pc, #192]	; (8016724 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8016664:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016668:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 801666a:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 801666c:	4b2e      	ldr	r3, [pc, #184]	; (8016728 <jinit_2pass_quantizer+0xd4>)
 801666e:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8016670:	2300      	movs	r3, #0
 8016672:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 8016674:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8016676:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016678:	2b03      	cmp	r3, #3
 801667a:	d005      	beq.n	8016688 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 801667c:	6823      	ldr	r3, [r4, #0]
 801667e:	2230      	movs	r2, #48	; 0x30
 8016680:	4620      	mov	r0, r4
 8016682:	615a      	str	r2, [r3, #20]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8016688:	6863      	ldr	r3, [r4, #4]
 801668a:	2600      	movs	r6, #0
 801668c:	2280      	movs	r2, #128	; 0x80
 801668e:	2101      	movs	r1, #1
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	4620      	mov	r0, r4
 8016694:	4798      	blx	r3
 8016696:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8016698:	6863      	ldr	r3, [r4, #4]
 801669a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801669e:	69af      	ldr	r7, [r5, #24]
 80166a0:	2101      	movs	r1, #1
 80166a2:	685b      	ldr	r3, [r3, #4]
 80166a4:	4620      	mov	r0, r4
 80166a6:	4798      	blx	r3
 80166a8:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 80166aa:	3604      	adds	r6, #4
 80166ac:	2e80      	cmp	r6, #128	; 0x80
 80166ae:	d1f3      	bne.n	8016698 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 80166b0:	2301      	movs	r3, #1
 80166b2:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 80166b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d031      	beq.n	801671e <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 80166ba:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 80166bc:	2e07      	cmp	r6, #7
 80166be:	dc25      	bgt.n	801670c <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 80166c0:	223a      	movs	r2, #58	; 0x3a
 80166c2:	6823      	ldr	r3, [r4, #0]
 80166c4:	615a      	str	r2, [r3, #20]
 80166c6:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80166c8:	619a      	str	r2, [r3, #24]
 80166ca:	4620      	mov	r0, r4
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 80166d0:	6863      	ldr	r3, [r4, #4]
 80166d2:	4632      	mov	r2, r6
 80166d4:	2101      	movs	r1, #1
 80166d6:	4620      	mov	r0, r4
 80166d8:	689f      	ldr	r7, [r3, #8]
 80166da:	2303      	movs	r3, #3
 80166dc:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 80166de:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 80166e2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80166e6:	b1e3      	cbz	r3, 8016722 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 80166e8:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80166ea:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80166ec:	4620      	mov	r0, r4
 80166ee:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 80166f0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 80166f4:	2306      	movs	r3, #6
 80166f6:	435a      	muls	r2, r3
 80166f8:	6863      	ldr	r3, [r4, #4]
 80166fa:	320c      	adds	r2, #12
 80166fc:	685b      	ldr	r3, [r3, #4]
 80166fe:	4798      	blx	r3
 8016700:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8016702:	4620      	mov	r0, r4
  }
}
 8016704:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8016708:	f7ff bcbf 	b.w	801608a <init_error_limit>
    if (desired > MAXNUMCOLORS)
 801670c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8016710:	ddde      	ble.n	80166d0 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016712:	223b      	movs	r2, #59	; 0x3b
 8016714:	6823      	ldr	r3, [r4, #0]
 8016716:	615a      	str	r2, [r3, #20]
 8016718:	f44f 7280 	mov.w	r2, #256	; 0x100
 801671c:	e7d4      	b.n	80166c8 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 801671e:	612b      	str	r3, [r5, #16]
 8016720:	e7df      	b.n	80166e2 <jinit_2pass_quantizer+0x8e>
}
 8016722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016724:	08016105 	.word	0x08016105
 8016728:	080160fb 	.word	0x080160fb

0801672c <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 801672c:	4408      	add	r0, r1
 801672e:	3801      	subs	r0, #1
}
 8016730:	fb90 f0f1 	sdiv	r0, r0, r1
 8016734:	4770      	bx	lr

08016736 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8016736:	1e4b      	subs	r3, r1, #1
 8016738:	4418      	add	r0, r3
  return a - (a % b);
 801673a:	fb90 f3f1 	sdiv	r3, r0, r1
 801673e:	fb01 0113 	mls	r1, r1, r3, r0
}
 8016742:	1a40      	subs	r0, r0, r1
 8016744:	4770      	bx	lr

08016746 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8016746:	b570      	push	{r4, r5, r6, lr}
 8016748:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 801674a:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 801674e:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8016752:	2e00      	cmp	r6, #0
 8016754:	dc00      	bgt.n	8016758 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8016756:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8016758:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 801675a:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 801675c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016760:	f855 0b04 	ldr.w	r0, [r5], #4
 8016764:	f011 ff44 	bl	80285f0 <memcpy>
  for (row = num_rows; row > 0; row--) {
 8016768:	e7f3      	b.n	8016752 <jcopy_sample_rows+0xc>

0801676a <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 801676a:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 801676c:	01d2      	lsls	r2, r2, #7
 801676e:	4601      	mov	r1, r0
 8016770:	4618      	mov	r0, r3
 8016772:	f011 bf3d 	b.w	80285f0 <memcpy>

08016776 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016776:	8880      	ldrh	r0, [r0, #4]
 8016778:	4770      	bx	lr

0801677a <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801677a:	b570      	push	{r4, r5, r6, lr}
 801677c:	6803      	ldr	r3, [r0, #0]
 801677e:	460c      	mov	r4, r1
 8016780:	2100      	movs	r1, #0
 8016782:	4605      	mov	r5, r0
 8016784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016786:	4798      	blx	r3
 8016788:	4606      	mov	r6, r0
 801678a:	682b      	ldr	r3, [r5, #0]
 801678c:	4628      	mov	r0, r5
 801678e:	1ba4      	subs	r4, r4, r6
 8016790:	6a1b      	ldr	r3, [r3, #32]
 8016792:	b2a4      	uxth	r4, r4
 8016794:	4798      	blx	r3
 8016796:	fbb4 f0f0 	udiv	r0, r4, r0
 801679a:	bd70      	pop	{r4, r5, r6, pc}

0801679c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801679c:	2300      	movs	r3, #0
 801679e:	8083      	strh	r3, [r0, #4]
 80167a0:	4770      	bx	lr

080167a2 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80167a2:	b510      	push	{r4, lr}
 80167a4:	6803      	ldr	r3, [r0, #0]
 80167a6:	4604      	mov	r4, r0
 80167a8:	8881      	ldrh	r1, [r0, #4]
 80167aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167ac:	4798      	blx	r3
 80167ae:	88a3      	ldrh	r3, [r4, #4]
 80167b0:	3301      	adds	r3, #1
 80167b2:	80a3      	strh	r3, [r4, #4]
 80167b4:	bd10      	pop	{r4, pc}

080167b6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80167b6:	6803      	ldr	r3, [r0, #0]
 80167b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167ba:	4718      	bx	r3

080167bc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80167bc:	4770      	bx	lr
	...

080167c0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80167c0:	4a02      	ldr	r2, [pc, #8]	; (80167cc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80167c2:	6002      	str	r2, [r0, #0]
 80167c4:	2200      	movs	r2, #0
 80167c6:	8082      	strh	r2, [r0, #4]
 80167c8:	4770      	bx	lr
 80167ca:	bf00      	nop
 80167cc:	0802dd24 	.word	0x0802dd24

080167d0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80167d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80167d2:	4770      	bx	lr

080167d4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80167d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80167d6:	2000      	movs	r0, #0
 80167d8:	b12b      	cbz	r3, 80167e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80167da:	b920      	cbnz	r0, 80167e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80167dc:	1a5a      	subs	r2, r3, r1
 80167de:	699b      	ldr	r3, [r3, #24]
 80167e0:	4250      	negs	r0, r2
 80167e2:	4150      	adcs	r0, r2
 80167e4:	e7f8      	b.n	80167d8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80167e6:	4770      	bx	lr

080167e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80167e8:	2300      	movs	r3, #0
 80167ea:	6148      	str	r0, [r1, #20]
 80167ec:	618b      	str	r3, [r1, #24]
 80167ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80167f0:	b913      	cbnz	r3, 80167f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80167f2:	6281      	str	r1, [r0, #40]	; 0x28
 80167f4:	4770      	bx	lr
 80167f6:	4613      	mov	r3, r2
 80167f8:	699a      	ldr	r2, [r3, #24]
 80167fa:	2a00      	cmp	r2, #0
 80167fc:	d1fb      	bne.n	80167f6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80167fe:	6199      	str	r1, [r3, #24]
 8016800:	4770      	bx	lr

08016802 <_ZN8touchgfx9Container9removeAllEv>:
 8016802:	2200      	movs	r2, #0
 8016804:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016806:	b123      	cbz	r3, 8016812 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016808:	6999      	ldr	r1, [r3, #24]
 801680a:	6281      	str	r1, [r0, #40]	; 0x28
 801680c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016810:	e7f8      	b.n	8016804 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016812:	4770      	bx	lr

08016814 <_ZN8touchgfx9Container6unlinkEv>:
 8016814:	2300      	movs	r3, #0
 8016816:	6283      	str	r3, [r0, #40]	; 0x28
 8016818:	4770      	bx	lr

0801681a <_ZNK8touchgfx9Container12getSolidRectEv>:
 801681a:	2200      	movs	r2, #0
 801681c:	8002      	strh	r2, [r0, #0]
 801681e:	8042      	strh	r2, [r0, #2]
 8016820:	8082      	strh	r2, [r0, #4]
 8016822:	80c2      	strh	r2, [r0, #6]
 8016824:	4770      	bx	lr

08016826 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016826:	b570      	push	{r4, r5, r6, lr}
 8016828:	460d      	mov	r5, r1
 801682a:	4616      	mov	r6, r2
 801682c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801682e:	b13c      	cbz	r4, 8016840 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016830:	6823      	ldr	r3, [r4, #0]
 8016832:	4620      	mov	r0, r4
 8016834:	4632      	mov	r2, r6
 8016836:	4629      	mov	r1, r5
 8016838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801683a:	4798      	blx	r3
 801683c:	69a4      	ldr	r4, [r4, #24]
 801683e:	e7f6      	b.n	801682e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016840:	bd70      	pop	{r4, r5, r6, pc}

08016842 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016842:	b538      	push	{r3, r4, r5, lr}
 8016844:	460d      	mov	r5, r1
 8016846:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016848:	b134      	cbz	r4, 8016858 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801684a:	682b      	ldr	r3, [r5, #0]
 801684c:	4621      	mov	r1, r4
 801684e:	4628      	mov	r0, r5
 8016850:	689b      	ldr	r3, [r3, #8]
 8016852:	4798      	blx	r3
 8016854:	69a4      	ldr	r4, [r4, #24]
 8016856:	e7f7      	b.n	8016848 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016858:	bd38      	pop	{r3, r4, r5, pc}

0801685a <_ZNK8touchgfx9Container17invalidateContentEv>:
 801685a:	b510      	push	{r4, lr}
 801685c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801685e:	b12c      	cbz	r4, 801686c <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8016860:	6823      	ldr	r3, [r4, #0]
 8016862:	4620      	mov	r0, r4
 8016864:	699b      	ldr	r3, [r3, #24]
 8016866:	4798      	blx	r3
 8016868:	69a4      	ldr	r4, [r4, #24]
 801686a:	e7f8      	b.n	801685e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 801686c:	bd10      	pop	{r4, pc}

0801686e <_ZN8touchgfx9ContainerD1Ev>:
 801686e:	4770      	bx	lr

08016870 <_ZN8touchgfx9ContainerD0Ev>:
 8016870:	b510      	push	{r4, lr}
 8016872:	4604      	mov	r4, r0
 8016874:	212c      	movs	r1, #44	; 0x2c
 8016876:	f011 fe0b 	bl	8028490 <_ZdlPvj>
 801687a:	4620      	mov	r0, r4
 801687c:	bd10      	pop	{r4, pc}

0801687e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801687e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016880:	b19b      	cbz	r3, 80168aa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016882:	428b      	cmp	r3, r1
 8016884:	d109      	bne.n	801689a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016886:	699a      	ldr	r2, [r3, #24]
 8016888:	2100      	movs	r1, #0
 801688a:	6159      	str	r1, [r3, #20]
 801688c:	6282      	str	r2, [r0, #40]	; 0x28
 801688e:	b902      	cbnz	r2, 8016892 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016890:	4770      	bx	lr
 8016892:	6199      	str	r1, [r3, #24]
 8016894:	4770      	bx	lr
 8016896:	4613      	mov	r3, r2
 8016898:	b13a      	cbz	r2, 80168aa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801689a:	699a      	ldr	r2, [r3, #24]
 801689c:	428a      	cmp	r2, r1
 801689e:	d1fa      	bne.n	8016896 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 80168a0:	698a      	ldr	r2, [r1, #24]
 80168a2:	619a      	str	r2, [r3, #24]
 80168a4:	2300      	movs	r3, #0
 80168a6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80168aa:	4770      	bx	lr

080168ac <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80168ac:	b410      	push	{r4}
 80168ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80168b0:	4604      	mov	r4, r0
 80168b2:	b92b      	cbnz	r3, 80168c0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80168b4:	6803      	ldr	r3, [r0, #0]
 80168b6:	4611      	mov	r1, r2
 80168b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80168be:	4718      	bx	r3
 80168c0:	b941      	cbnz	r1, 80168d4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80168c2:	6193      	str	r3, [r2, #24]
 80168c4:	6282      	str	r2, [r0, #40]	; 0x28
 80168c6:	6154      	str	r4, [r2, #20]
 80168c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168cc:	4770      	bx	lr
 80168ce:	4603      	mov	r3, r0
 80168d0:	2800      	cmp	r0, #0
 80168d2:	d0f9      	beq.n	80168c8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80168d4:	4299      	cmp	r1, r3
 80168d6:	6998      	ldr	r0, [r3, #24]
 80168d8:	d1f9      	bne.n	80168ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80168da:	6190      	str	r0, [r2, #24]
 80168dc:	618a      	str	r2, [r1, #24]
 80168de:	e7f2      	b.n	80168c6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080168e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80168e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168e4:	461f      	mov	r7, r3
 80168e6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80168ea:	460d      	mov	r5, r1
 80168ec:	4616      	mov	r6, r2
 80168ee:	b103      	cbz	r3, 80168f2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80168f0:	6038      	str	r0, [r7, #0]
 80168f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80168f4:	b314      	cbz	r4, 801693c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80168f6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80168fa:	b1eb      	cbz	r3, 8016938 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80168fc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8016900:	428d      	cmp	r5, r1
 8016902:	db19      	blt.n	8016938 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016904:	b289      	uxth	r1, r1
 8016906:	8923      	ldrh	r3, [r4, #8]
 8016908:	440b      	add	r3, r1
 801690a:	b21b      	sxth	r3, r3
 801690c:	429d      	cmp	r5, r3
 801690e:	da13      	bge.n	8016938 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016910:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016914:	4296      	cmp	r6, r2
 8016916:	db0f      	blt.n	8016938 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016918:	b292      	uxth	r2, r2
 801691a:	8963      	ldrh	r3, [r4, #10]
 801691c:	4413      	add	r3, r2
 801691e:	b21b      	sxth	r3, r3
 8016920:	429e      	cmp	r6, r3
 8016922:	da09      	bge.n	8016938 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016924:	6823      	ldr	r3, [r4, #0]
 8016926:	1ab2      	subs	r2, r6, r2
 8016928:	1a69      	subs	r1, r5, r1
 801692a:	4620      	mov	r0, r4
 801692c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8016930:	b212      	sxth	r2, r2
 8016932:	463b      	mov	r3, r7
 8016934:	b209      	sxth	r1, r1
 8016936:	47c0      	blx	r8
 8016938:	69a4      	ldr	r4, [r4, #24]
 801693a:	e7db      	b.n	80168f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016940 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016944:	4c6d      	ldr	r4, [pc, #436]	; (8016afc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8016946:	b0a1      	sub	sp, #132	; 0x84
 8016948:	4606      	mov	r6, r0
 801694a:	6824      	ldr	r4, [r4, #0]
 801694c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801694e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016952:	2400      	movs	r4, #0
 8016954:	9303      	str	r3, [sp, #12]
 8016956:	802c      	strh	r4, [r5, #0]
 8016958:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801695a:	802c      	strh	r4, [r5, #0]
 801695c:	601c      	str	r4, [r3, #0]
 801695e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016962:	f7ff ffbd 	bl	80168e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016966:	f1b9 0f03 	cmp.w	r9, #3
 801696a:	f340 80c1 	ble.w	8016af0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801696e:	4631      	mov	r1, r6
 8016970:	a80c      	add	r0, sp, #48	; 0x30
 8016972:	f004 fb91 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016976:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801697a:	9306      	str	r3, [sp, #24]
 801697c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016980:	9307      	str	r3, [sp, #28]
 8016982:	9b03      	ldr	r3, [sp, #12]
 8016984:	f8d3 a000 	ldr.w	sl, [r3]
 8016988:	f1ba 0f00 	cmp.w	sl, #0
 801698c:	f000 80b3 	beq.w	8016af6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8016990:	4651      	mov	r1, sl
 8016992:	a810      	add	r0, sp, #64	; 0x40
 8016994:	f004 fb80 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016998:	2002      	movs	r0, #2
 801699a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801699e:	9b01      	ldr	r3, [sp, #4]
 80169a0:	9a06      	ldr	r2, [sp, #24]
 80169a2:	fb91 f1f0 	sdiv	r1, r1, r0
 80169a6:	189d      	adds	r5, r3, r2
 80169a8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80169ac:	9a07      	ldr	r2, [sp, #28]
 80169ae:	4419      	add	r1, r3
 80169b0:	9b02      	ldr	r3, [sp, #8]
 80169b2:	4413      	add	r3, r2
 80169b4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80169b8:	1a6d      	subs	r5, r5, r1
 80169ba:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80169be:	fb92 f2f0 	sdiv	r2, r2, r0
 80169c2:	440a      	add	r2, r1
 80169c4:	1a9b      	subs	r3, r3, r2
 80169c6:	435b      	muls	r3, r3
 80169c8:	fb05 3505 	mla	r5, r5, r5, r3
 80169cc:	4f4c      	ldr	r7, [pc, #304]	; (8016b00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80169ce:	ac10      	add	r4, sp, #64	; 0x40
 80169d0:	f1b9 0f0c 	cmp.w	r9, #12
 80169d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80169d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80169d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80169da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80169dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80169de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80169e0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80169e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80169e8:	f04f 0303 	mov.w	r3, #3
 80169ec:	bfd8      	it	le
 80169ee:	f109 32ff 	addle.w	r2, r9, #4294967295
 80169f2:	f04f 0400 	mov.w	r4, #0
 80169f6:	f8cd 9000 	str.w	r9, [sp]
 80169fa:	bfcc      	ite	gt
 80169fc:	4698      	movgt	r8, r3
 80169fe:	fb92 f8f3 	sdivle	r8, r2, r3
 8016a02:	1c63      	adds	r3, r4, #1
 8016a04:	aa10      	add	r2, sp, #64	; 0x40
 8016a06:	f004 0401 	and.w	r4, r4, #1
 8016a0a:	f04f 0b00 	mov.w	fp, #0
 8016a0e:	9308      	str	r3, [sp, #32]
 8016a10:	9b00      	ldr	r3, [sp, #0]
 8016a12:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8016a16:	fb93 f3f8 	sdiv	r3, r3, r8
 8016a1a:	3404      	adds	r4, #4
 8016a1c:	b29b      	uxth	r3, r3
 8016a1e:	9304      	str	r3, [sp, #16]
 8016a20:	9a04      	ldr	r2, [sp, #16]
 8016a22:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016a26:	fb13 f302 	smulbb	r3, r3, r2
 8016a2a:	9a01      	ldr	r2, [sp, #4]
 8016a2c:	b29b      	uxth	r3, r3
 8016a2e:	1899      	adds	r1, r3, r2
 8016a30:	9305      	str	r3, [sp, #20]
 8016a32:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016a36:	b209      	sxth	r1, r1
 8016a38:	4299      	cmp	r1, r3
 8016a3a:	db4d      	blt.n	8016ad8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016a3c:	8932      	ldrh	r2, [r6, #8]
 8016a3e:	4413      	add	r3, r2
 8016a40:	b21b      	sxth	r3, r3
 8016a42:	4299      	cmp	r1, r3
 8016a44:	da48      	bge.n	8016ad8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016a46:	9b04      	ldr	r3, [sp, #16]
 8016a48:	6827      	ldr	r7, [r4, #0]
 8016a4a:	fb17 f703 	smulbb	r7, r7, r3
 8016a4e:	9b02      	ldr	r3, [sp, #8]
 8016a50:	b2bf      	uxth	r7, r7
 8016a52:	18fa      	adds	r2, r7, r3
 8016a54:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016a58:	b212      	sxth	r2, r2
 8016a5a:	429a      	cmp	r2, r3
 8016a5c:	db3c      	blt.n	8016ad8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016a5e:	8970      	ldrh	r0, [r6, #10]
 8016a60:	4403      	add	r3, r0
 8016a62:	b21b      	sxth	r3, r3
 8016a64:	429a      	cmp	r2, r3
 8016a66:	da37      	bge.n	8016ad8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016a68:	2300      	movs	r3, #0
 8016a6a:	4630      	mov	r0, r6
 8016a6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a6e:	ab0b      	add	r3, sp, #44	; 0x2c
 8016a70:	f7ff ff36 	bl	80168e0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016a74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016a76:	b37a      	cbz	r2, 8016ad8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016a78:	4552      	cmp	r2, sl
 8016a7a:	d02d      	beq.n	8016ad8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016a7c:	4611      	mov	r1, r2
 8016a7e:	a80e      	add	r0, sp, #56	; 0x38
 8016a80:	9209      	str	r2, [sp, #36]	; 0x24
 8016a82:	f004 fb09 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016a86:	f04f 0e02 	mov.w	lr, #2
 8016a8a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8016a8e:	9a06      	ldr	r2, [sp, #24]
 8016a90:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8016a94:	9b01      	ldr	r3, [sp, #4]
 8016a96:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8016a9a:	4413      	add	r3, r2
 8016a9c:	9a07      	ldr	r2, [sp, #28]
 8016a9e:	fb91 f1fe 	sdiv	r1, r1, lr
 8016aa2:	fb9c fcfe 	sdiv	ip, ip, lr
 8016aa6:	4401      	add	r1, r0
 8016aa8:	1a58      	subs	r0, r3, r1
 8016aaa:	9b02      	ldr	r3, [sp, #8]
 8016aac:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8016ab0:	4413      	add	r3, r2
 8016ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ab4:	448c      	add	ip, r1
 8016ab6:	eba3 030c 	sub.w	r3, r3, ip
 8016aba:	435b      	muls	r3, r3
 8016abc:	fb00 3300 	mla	r3, r0, r0, r3
 8016ac0:	42ab      	cmp	r3, r5
 8016ac2:	d208      	bcs.n	8016ad6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8016ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ac6:	461d      	mov	r5, r3
 8016ac8:	9803      	ldr	r0, [sp, #12]
 8016aca:	6001      	str	r1, [r0, #0]
 8016acc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8016ace:	9805      	ldr	r0, [sp, #20]
 8016ad0:	8008      	strh	r0, [r1, #0]
 8016ad2:	992b      	ldr	r1, [sp, #172]	; 0xac
 8016ad4:	800f      	strh	r7, [r1, #0]
 8016ad6:	4692      	mov	sl, r2
 8016ad8:	f10b 0b01 	add.w	fp, fp, #1
 8016adc:	3408      	adds	r4, #8
 8016ade:	f1bb 0f04 	cmp.w	fp, #4
 8016ae2:	d19d      	bne.n	8016a20 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8016ae4:	9b00      	ldr	r3, [sp, #0]
 8016ae6:	9c08      	ldr	r4, [sp, #32]
 8016ae8:	444b      	add	r3, r9
 8016aea:	4544      	cmp	r4, r8
 8016aec:	9300      	str	r3, [sp, #0]
 8016aee:	d188      	bne.n	8016a02 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8016af0:	b021      	add	sp, #132	; 0x84
 8016af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016af6:	f04f 35ff 	mov.w	r5, #4294967295
 8016afa:	e767      	b.n	80169cc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8016afc:	200150f4 	.word	0x200150f4
 8016b00:	08029a28 	.word	0x08029a28

08016b04 <_ZN8touchgfx4RectaNERKS0_>:
 8016b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b08:	f9b1 7000 	ldrsh.w	r7, [r1]
 8016b0c:	888c      	ldrh	r4, [r1, #4]
 8016b0e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016b12:	443c      	add	r4, r7
 8016b14:	b2a4      	uxth	r4, r4
 8016b16:	fa0f f884 	sxth.w	r8, r4
 8016b1a:	45c1      	cmp	r9, r8
 8016b1c:	da2f      	bge.n	8016b7e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016b1e:	8882      	ldrh	r2, [r0, #4]
 8016b20:	444a      	add	r2, r9
 8016b22:	b292      	uxth	r2, r2
 8016b24:	fa0f fe82 	sxth.w	lr, r2
 8016b28:	4577      	cmp	r7, lr
 8016b2a:	da28      	bge.n	8016b7e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016b2c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016b30:	88cb      	ldrh	r3, [r1, #6]
 8016b32:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016b36:	442b      	add	r3, r5
 8016b38:	b21b      	sxth	r3, r3
 8016b3a:	429e      	cmp	r6, r3
 8016b3c:	da1f      	bge.n	8016b7e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016b3e:	88c3      	ldrh	r3, [r0, #6]
 8016b40:	4433      	add	r3, r6
 8016b42:	b29b      	uxth	r3, r3
 8016b44:	fa0f fc83 	sxth.w	ip, r3
 8016b48:	4565      	cmp	r5, ip
 8016b4a:	da18      	bge.n	8016b7e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8016b4c:	454f      	cmp	r7, r9
 8016b4e:	bfb8      	it	lt
 8016b50:	464f      	movlt	r7, r9
 8016b52:	42b5      	cmp	r5, r6
 8016b54:	bfb8      	it	lt
 8016b56:	4635      	movlt	r5, r6
 8016b58:	45f0      	cmp	r8, lr
 8016b5a:	bfd8      	it	le
 8016b5c:	4622      	movle	r2, r4
 8016b5e:	1bd2      	subs	r2, r2, r7
 8016b60:	8082      	strh	r2, [r0, #4]
 8016b62:	884a      	ldrh	r2, [r1, #2]
 8016b64:	88c9      	ldrh	r1, [r1, #6]
 8016b66:	8007      	strh	r7, [r0, #0]
 8016b68:	440a      	add	r2, r1
 8016b6a:	8045      	strh	r5, [r0, #2]
 8016b6c:	b292      	uxth	r2, r2
 8016b6e:	b211      	sxth	r1, r2
 8016b70:	458c      	cmp	ip, r1
 8016b72:	bfa8      	it	ge
 8016b74:	4613      	movge	r3, r2
 8016b76:	1b5b      	subs	r3, r3, r5
 8016b78:	80c3      	strh	r3, [r0, #6]
 8016b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b7e:	2300      	movs	r3, #0
 8016b80:	8003      	strh	r3, [r0, #0]
 8016b82:	8043      	strh	r3, [r0, #2]
 8016b84:	8083      	strh	r3, [r0, #4]
 8016b86:	80c3      	strh	r3, [r0, #6]
 8016b88:	e7f7      	b.n	8016b7a <_ZN8touchgfx4RectaNERKS0_+0x76>

08016b8a <_ZNK8touchgfx4Rect7isEmptyEv>:
 8016b8a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	dd06      	ble.n	8016ba0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016b92:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016b96:	2800      	cmp	r0, #0
 8016b98:	bfcc      	ite	gt
 8016b9a:	2000      	movgt	r0, #0
 8016b9c:	2001      	movle	r0, #1
 8016b9e:	4770      	bx	lr
 8016ba0:	2001      	movs	r0, #1
 8016ba2:	4770      	bx	lr

08016ba4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ba8:	2300      	movs	r3, #0
 8016baa:	4604      	mov	r4, r0
 8016bac:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8016bae:	8003      	strh	r3, [r0, #0]
 8016bb0:	8043      	strh	r3, [r0, #2]
 8016bb2:	8083      	strh	r3, [r0, #4]
 8016bb4:	80c3      	strh	r3, [r0, #6]
 8016bb6:	2d00      	cmp	r5, #0
 8016bb8:	d040      	beq.n	8016c3c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8016bba:	1d28      	adds	r0, r5, #4
 8016bbc:	f7ff ffe5 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016bc0:	b988      	cbnz	r0, 8016be6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016bc2:	4620      	mov	r0, r4
 8016bc4:	f7ff ffe1 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016bc8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016bcc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016bd0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8016bd4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8016bd8:	b138      	cbz	r0, 8016bea <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8016bda:	8022      	strh	r2, [r4, #0]
 8016bdc:	8063      	strh	r3, [r4, #2]
 8016bde:	f8a4 e004 	strh.w	lr, [r4, #4]
 8016be2:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016be6:	69ad      	ldr	r5, [r5, #24]
 8016be8:	e7e5      	b.n	8016bb6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8016bea:	f9b4 0000 	ldrsh.w	r0, [r4]
 8016bee:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016bf2:	4290      	cmp	r0, r2
 8016bf4:	4607      	mov	r7, r0
 8016bf6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8016bfa:	460e      	mov	r6, r1
 8016bfc:	bfa8      	it	ge
 8016bfe:	4617      	movge	r7, r2
 8016c00:	4299      	cmp	r1, r3
 8016c02:	4472      	add	r2, lr
 8016c04:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8016c08:	bfa8      	it	ge
 8016c0a:	461e      	movge	r6, r3
 8016c0c:	4440      	add	r0, r8
 8016c0e:	4471      	add	r1, lr
 8016c10:	4463      	add	r3, ip
 8016c12:	b200      	sxth	r0, r0
 8016c14:	8027      	strh	r7, [r4, #0]
 8016c16:	b212      	sxth	r2, r2
 8016c18:	8066      	strh	r6, [r4, #2]
 8016c1a:	b209      	sxth	r1, r1
 8016c1c:	b21b      	sxth	r3, r3
 8016c1e:	4290      	cmp	r0, r2
 8016c20:	bfac      	ite	ge
 8016c22:	ebc7 0200 	rsbge	r2, r7, r0
 8016c26:	ebc7 0202 	rsblt	r2, r7, r2
 8016c2a:	4299      	cmp	r1, r3
 8016c2c:	bfac      	ite	ge
 8016c2e:	ebc6 0301 	rsbge	r3, r6, r1
 8016c32:	ebc6 0303 	rsblt	r3, r6, r3
 8016c36:	80a2      	strh	r2, [r4, #4]
 8016c38:	80e3      	strh	r3, [r4, #6]
 8016c3a:	e7d4      	b.n	8016be6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016c42 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016c42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016c46:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016c4a:	b383      	cbz	r3, 8016cae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016c4c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016c4e:	b374      	cbz	r4, 8016cae <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016c50:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016c54:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016c58:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8016c5c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016c60:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016c64:	b303      	cbz	r3, 8016ca8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016c66:	4668      	mov	r0, sp
 8016c68:	1d21      	adds	r1, r4, #4
 8016c6a:	f8ad 5000 	strh.w	r5, [sp]
 8016c6e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016c72:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016c76:	f8ad 8006 	strh.w	r8, [sp, #6]
 8016c7a:	f7ff ff43 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 8016c7e:	4668      	mov	r0, sp
 8016c80:	f7ff ff83 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016c84:	b980      	cbnz	r0, 8016ca8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016c86:	f8bd 3000 	ldrh.w	r3, [sp]
 8016c8a:	4669      	mov	r1, sp
 8016c8c:	88a2      	ldrh	r2, [r4, #4]
 8016c8e:	4620      	mov	r0, r4
 8016c90:	1a9b      	subs	r3, r3, r2
 8016c92:	88e2      	ldrh	r2, [r4, #6]
 8016c94:	f8ad 3000 	strh.w	r3, [sp]
 8016c98:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016c9c:	1a9b      	subs	r3, r3, r2
 8016c9e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016ca2:	6823      	ldr	r3, [r4, #0]
 8016ca4:	689b      	ldr	r3, [r3, #8]
 8016ca6:	4798      	blx	r3
 8016ca8:	69a4      	ldr	r4, [r4, #24]
 8016caa:	2c00      	cmp	r4, #0
 8016cac:	d1d8      	bne.n	8016c60 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8016cae:	b002      	add	sp, #8
 8016cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016cb4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8016cb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016cb6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8016cba:	460d      	mov	r5, r1
 8016cbc:	4616      	mov	r6, r2
 8016cbe:	b323      	cbz	r3, 8016d0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016cc0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016cc2:	b314      	cbz	r4, 8016d0a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8016cc4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016cc8:	b1eb      	cbz	r3, 8016d06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016cca:	6828      	ldr	r0, [r5, #0]
 8016ccc:	466b      	mov	r3, sp
 8016cce:	6869      	ldr	r1, [r5, #4]
 8016cd0:	c303      	stmia	r3!, {r0, r1}
 8016cd2:	4668      	mov	r0, sp
 8016cd4:	1d21      	adds	r1, r4, #4
 8016cd6:	f7ff ff15 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 8016cda:	4668      	mov	r0, sp
 8016cdc:	f7ff ff55 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ce0:	b988      	cbnz	r0, 8016d06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8016ce2:	f8bd 3000 	ldrh.w	r3, [sp]
 8016ce6:	4669      	mov	r1, sp
 8016ce8:	88a2      	ldrh	r2, [r4, #4]
 8016cea:	4620      	mov	r0, r4
 8016cec:	1a9b      	subs	r3, r3, r2
 8016cee:	88e2      	ldrh	r2, [r4, #6]
 8016cf0:	f8ad 3000 	strh.w	r3, [sp]
 8016cf4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016cf8:	1a9b      	subs	r3, r3, r2
 8016cfa:	4632      	mov	r2, r6
 8016cfc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016d00:	6823      	ldr	r3, [r4, #0]
 8016d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016d04:	4798      	blx	r3
 8016d06:	69a4      	ldr	r4, [r4, #24]
 8016d08:	e7db      	b.n	8016cc2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8016d0a:	b002      	add	sp, #8
 8016d0c:	bd70      	pop	{r4, r5, r6, pc}

08016d0e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8016d0e:	6803      	ldr	r3, [r0, #0]
 8016d10:	b513      	push	{r0, r1, r4, lr}
 8016d12:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8016d16:	2300      	movs	r3, #0
 8016d18:	e9cd 3300 	strd	r3, r3, [sp]
 8016d1c:	466b      	mov	r3, sp
 8016d1e:	47a0      	blx	r4
 8016d20:	b002      	add	sp, #8
 8016d22:	bd10      	pop	{r4, pc}

08016d24 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8016d24:	2301      	movs	r3, #1
 8016d26:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016d2a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016d2e:	4770      	bx	lr

08016d30 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8016d30:	2301      	movs	r3, #1
 8016d32:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016d36:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016d3a:	4770      	bx	lr

08016d3c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016d3c:	6843      	ldr	r3, [r0, #4]
 8016d3e:	2201      	movs	r2, #1
 8016d40:	725a      	strb	r2, [r3, #9]
 8016d42:	6840      	ldr	r0, [r0, #4]
 8016d44:	6803      	ldr	r3, [r0, #0]
 8016d46:	691b      	ldr	r3, [r3, #16]
 8016d48:	4718      	bx	r3

08016d4a <_ZN8touchgfx3HAL8flushDMAEv>:
 8016d4a:	6840      	ldr	r0, [r0, #4]
 8016d4c:	6803      	ldr	r3, [r0, #0]
 8016d4e:	689b      	ldr	r3, [r3, #8]
 8016d50:	4718      	bx	r3

08016d52 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8016d52:	b530      	push	{r4, r5, lr}
 8016d54:	b08b      	sub	sp, #44	; 0x2c
 8016d56:	6804      	ldr	r4, [r0, #0]
 8016d58:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8016d5c:	9509      	str	r5, [sp, #36]	; 0x24
 8016d5e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8016d62:	9508      	str	r5, [sp, #32]
 8016d64:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8016d68:	9507      	str	r5, [sp, #28]
 8016d6a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016d6e:	9506      	str	r5, [sp, #24]
 8016d70:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8016d74:	9505      	str	r5, [sp, #20]
 8016d76:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8016d7a:	9504      	str	r5, [sp, #16]
 8016d7c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8016d80:	9503      	str	r5, [sp, #12]
 8016d82:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016d86:	9502      	str	r5, [sp, #8]
 8016d88:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016d8c:	e9cd 3500 	strd	r3, r5, [sp]
 8016d90:	4613      	mov	r3, r2
 8016d92:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8016d94:	2200      	movs	r2, #0
 8016d96:	47a0      	blx	r4
 8016d98:	b00b      	add	sp, #44	; 0x2c
 8016d9a:	bd30      	pop	{r4, r5, pc}

08016d9c <_ZN8touchgfx3HAL10beginFrameEv>:
 8016d9c:	4b04      	ldr	r3, [pc, #16]	; (8016db0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	b123      	cbz	r3, 8016dac <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8016da2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016da6:	f080 0001 	eor.w	r0, r0, #1
 8016daa:	4770      	bx	lr
 8016dac:	2001      	movs	r0, #1
 8016dae:	4770      	bx	lr
 8016db0:	200150f2 	.word	0x200150f2

08016db4 <_ZN8touchgfx3HAL8endFrameEv>:
 8016db4:	b510      	push	{r4, lr}
 8016db6:	4604      	mov	r4, r0
 8016db8:	6840      	ldr	r0, [r0, #4]
 8016dba:	6803      	ldr	r3, [r0, #0]
 8016dbc:	689b      	ldr	r3, [r3, #8]
 8016dbe:	4798      	blx	r3
 8016dc0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8016dc4:	b113      	cbz	r3, 8016dcc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8016dcc:	bd10      	pop	{r4, pc}

08016dce <_ZN8touchgfx3HAL10initializeEv>:
 8016dce:	b510      	push	{r4, lr}
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	f7eb f831 	bl	8001e38 <_ZN8touchgfx10OSWrappers10initializeEv>
 8016dd6:	6860      	ldr	r0, [r4, #4]
 8016dd8:	6803      	ldr	r3, [r0, #0]
 8016dda:	68db      	ldr	r3, [r3, #12]
 8016ddc:	4798      	blx	r3
 8016dde:	68e0      	ldr	r0, [r4, #12]
 8016de0:	6803      	ldr	r3, [r0, #0]
 8016de2:	689b      	ldr	r3, [r3, #8]
 8016de4:	4798      	blx	r3
 8016de6:	6823      	ldr	r3, [r4, #0]
 8016de8:	4620      	mov	r0, r4
 8016dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016df0:	4718      	bx	r3

08016df2 <_ZN8touchgfx3HAL9taskEntryEv>:
 8016df2:	b508      	push	{r3, lr}
 8016df4:	6803      	ldr	r3, [r0, #0]
 8016df6:	4604      	mov	r4, r0
 8016df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016dfc:	4798      	blx	r3
 8016dfe:	6823      	ldr	r3, [r4, #0]
 8016e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016e02:	4620      	mov	r0, r4
 8016e04:	4798      	blx	r3
 8016e06:	f7eb f863 	bl	8001ed0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016e0a:	6823      	ldr	r3, [r4, #0]
 8016e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e0e:	e7f8      	b.n	8016e02 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08016e10 <_ZN8touchgfx3HAL4tickEv>:
 8016e10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8016e12:	6803      	ldr	r3, [r0, #0]
 8016e14:	4604      	mov	r4, r0
 8016e16:	4d5b      	ldr	r5, [pc, #364]	; (8016f84 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8016e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016e1c:	4798      	blx	r3
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	f000 8095 	beq.w	8016f4e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8016e24:	2001      	movs	r0, #1
 8016e26:	2600      	movs	r6, #0
 8016e28:	f7ea fe7e 	bl	8001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016e2c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8016e30:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016e34:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016e38:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8016e3c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8016e40:	b133      	cbz	r3, 8016e50 <_ZN8touchgfx3HAL4tickEv+0x40>
 8016e42:	6823      	ldr	r3, [r4, #0]
 8016e44:	4620      	mov	r0, r4
 8016e46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016e4a:	4798      	blx	r3
 8016e4c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8016e50:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016e54:	2601      	movs	r6, #1
 8016e56:	6862      	ldr	r2, [r4, #4]
 8016e58:	f083 0301 	eor.w	r3, r3, #1
 8016e5c:	702e      	strb	r6, [r5, #0]
 8016e5e:	7253      	strb	r3, [r2, #9]
 8016e60:	f003 f8aa 	bl	8019fb8 <_ZN8touchgfx11Application11getInstanceEv>
 8016e64:	6803      	ldr	r3, [r0, #0]
 8016e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e68:	4798      	blx	r3
 8016e6a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016e6e:	b90b      	cbnz	r3, 8016e74 <_ZN8touchgfx3HAL4tickEv+0x64>
 8016e70:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8016e74:	f003 f8a0 	bl	8019fb8 <_ZN8touchgfx11Application11getInstanceEv>
 8016e78:	6803      	ldr	r3, [r0, #0]
 8016e7a:	695b      	ldr	r3, [r3, #20]
 8016e7c:	4798      	blx	r3
 8016e7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e80:	6803      	ldr	r3, [r0, #0]
 8016e82:	691b      	ldr	r3, [r3, #16]
 8016e84:	4798      	blx	r3
 8016e86:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016e8a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8016e8e:	3b01      	subs	r3, #1
 8016e90:	b2db      	uxtb	r3, r3
 8016e92:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016e96:	b10a      	cbz	r2, 8016e9c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d1eb      	bne.n	8016e74 <_ZN8touchgfx3HAL4tickEv+0x64>
 8016e9c:	4a3a      	ldr	r2, [pc, #232]	; (8016f88 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8016e9e:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8016ea2:	7813      	ldrb	r3, [r2, #0]
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	b25b      	sxtb	r3, r3
 8016ea8:	4299      	cmp	r1, r3
 8016eaa:	7013      	strb	r3, [r2, #0]
 8016eac:	dc10      	bgt.n	8016ed0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8016eae:	2300      	movs	r3, #0
 8016eb0:	68e0      	ldr	r0, [r4, #12]
 8016eb2:	a902      	add	r1, sp, #8
 8016eb4:	7013      	strb	r3, [r2, #0]
 8016eb6:	aa03      	add	r2, sp, #12
 8016eb8:	6803      	ldr	r3, [r0, #0]
 8016eba:	68db      	ldr	r3, [r3, #12]
 8016ebc:	4798      	blx	r3
 8016ebe:	6823      	ldr	r3, [r4, #0]
 8016ec0:	2800      	cmp	r0, #0
 8016ec2:	d050      	beq.n	8016f66 <_ZN8touchgfx3HAL4tickEv+0x156>
 8016ec4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016ec8:	4620      	mov	r0, r4
 8016eca:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016ece:	4798      	blx	r3
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	6960      	ldr	r0, [r4, #20]
 8016ed4:	f88d 3007 	strb.w	r3, [sp, #7]
 8016ed8:	b158      	cbz	r0, 8016ef2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016eda:	6803      	ldr	r3, [r0, #0]
 8016edc:	f10d 0107 	add.w	r1, sp, #7
 8016ee0:	68db      	ldr	r3, [r3, #12]
 8016ee2:	4798      	blx	r3
 8016ee4:	b128      	cbz	r0, 8016ef2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8016ee6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ee8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8016eec:	6803      	ldr	r3, [r0, #0]
 8016eee:	68db      	ldr	r3, [r3, #12]
 8016ef0:	4798      	blx	r3
 8016ef2:	f104 001c 	add.w	r0, r4, #28
 8016ef6:	f011 f9f7 	bl	80282e8 <_ZN8touchgfx8Gestures4tickEv>
 8016efa:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8016efe:	b30b      	cbz	r3, 8016f44 <_ZN8touchgfx3HAL4tickEv+0x134>
 8016f00:	6920      	ldr	r0, [r4, #16]
 8016f02:	6803      	ldr	r3, [r0, #0]
 8016f04:	691b      	ldr	r3, [r3, #16]
 8016f06:	4798      	blx	r3
 8016f08:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016f0a:	4606      	mov	r6, r0
 8016f0c:	b903      	cbnz	r3, 8016f10 <_ZN8touchgfx3HAL4tickEv+0x100>
 8016f0e:	6720      	str	r0, [r4, #112]	; 0x70
 8016f10:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016f12:	4a1e      	ldr	r2, [pc, #120]	; (8016f8c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016f14:	1af3      	subs	r3, r6, r3
 8016f16:	4293      	cmp	r3, r2
 8016f18:	d914      	bls.n	8016f44 <_ZN8touchgfx3HAL4tickEv+0x134>
 8016f1a:	6920      	ldr	r0, [r4, #16]
 8016f1c:	6803      	ldr	r3, [r0, #0]
 8016f1e:	699b      	ldr	r3, [r3, #24]
 8016f20:	4798      	blx	r3
 8016f22:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016f24:	2264      	movs	r2, #100	; 0x64
 8016f26:	1af3      	subs	r3, r6, r3
 8016f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8016f2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8016f30:	2800      	cmp	r0, #0
 8016f32:	dc1d      	bgt.n	8016f70 <_ZN8touchgfx3HAL4tickEv+0x160>
 8016f34:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016f38:	6920      	ldr	r0, [r4, #16]
 8016f3a:	2100      	movs	r1, #0
 8016f3c:	6803      	ldr	r3, [r0, #0]
 8016f3e:	69db      	ldr	r3, [r3, #28]
 8016f40:	4798      	blx	r3
 8016f42:	6726      	str	r6, [r4, #112]	; 0x70
 8016f44:	f003 f838 	bl	8019fb8 <_ZN8touchgfx11Application11getInstanceEv>
 8016f48:	6803      	ldr	r3, [r0, #0]
 8016f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f4c:	4798      	blx	r3
 8016f4e:	6823      	ldr	r3, [r4, #0]
 8016f50:	4620      	mov	r0, r4
 8016f52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016f56:	4798      	blx	r3
 8016f58:	2001      	movs	r0, #1
 8016f5a:	f7ea fe15 	bl	8001b88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016f5e:	2300      	movs	r3, #0
 8016f60:	702b      	strb	r3, [r5, #0]
 8016f62:	b004      	add	sp, #16
 8016f64:	bd70      	pop	{r4, r5, r6, pc}
 8016f66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	4798      	blx	r3
 8016f6e:	e7af      	b.n	8016ed0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8016f70:	2863      	cmp	r0, #99	; 0x63
 8016f72:	bfcb      	itete	gt
 8016f74:	2300      	movgt	r3, #0
 8016f76:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016f7a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8016f7e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8016f82:	e7d9      	b.n	8016f38 <_ZN8touchgfx3HAL4tickEv+0x128>
 8016f84:	200150f8 	.word	0x200150f8
 8016f88:	200150f9 	.word	0x200150f9
 8016f8c:	05f5e100 	.word	0x05f5e100

08016f90 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8016f90:	f7ea bf82 	b.w	8001e98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016f94 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016f94:	6581      	str	r1, [r0, #88]	; 0x58
 8016f96:	301c      	adds	r0, #28
 8016f98:	f011 b9a4 	b.w	80282e4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016f9c <_ZN8touchgfx3HAL5touchEll>:
 8016f9c:	b530      	push	{r4, r5, lr}
 8016f9e:	b087      	sub	sp, #28
 8016fa0:	4604      	mov	r4, r0
 8016fa2:	a804      	add	r0, sp, #16
 8016fa4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8016fa8:	f002 fd82 	bl	8019ab0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8016fac:	9b04      	ldr	r3, [sp, #16]
 8016fae:	a906      	add	r1, sp, #24
 8016fb0:	a803      	add	r0, sp, #12
 8016fb2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016fb6:	9b05      	ldr	r3, [sp, #20]
 8016fb8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8016fbc:	f002 fdca 	bl	8019b54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8016fc0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8016fc4:	f104 001c 	add.w	r0, r4, #28
 8016fc8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8016fcc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016fd0:	b189      	cbz	r1, 8016ff6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8016fd2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8016fd6:	9300      	str	r3, [sp, #0]
 8016fd8:	4613      	mov	r3, r2
 8016fda:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8016fde:	462a      	mov	r2, r5
 8016fe0:	f011 f990 	bl	8028304 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8016fe4:	b128      	cbz	r0, 8016ff2 <_ZN8touchgfx3HAL5touchEll+0x56>
 8016fe6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8016fea:	65e3      	str	r3, [r4, #92]	; 0x5c
 8016fec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8016ff0:	6623      	str	r3, [r4, #96]	; 0x60
 8016ff2:	b007      	add	sp, #28
 8016ff4:	bd30      	pop	{r4, r5, pc}
 8016ff6:	f011 f9c5 	bl	8028384 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016ffa:	2301      	movs	r3, #1
 8016ffc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017000:	e7f1      	b.n	8016fe6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08017002 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017002:	b510      	push	{r4, lr}
 8017004:	2b00      	cmp	r3, #0
 8017006:	d046      	beq.n	8017096 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017008:	ea81 0002 	eor.w	r0, r1, r2
 801700c:	07c4      	lsls	r4, r0, #31
 801700e:	d508      	bpl.n	8017022 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017010:	440b      	add	r3, r1
 8017012:	3a01      	subs	r2, #1
 8017014:	428b      	cmp	r3, r1
 8017016:	d93e      	bls.n	8017096 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017018:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801701c:	f801 0b01 	strb.w	r0, [r1], #1
 8017020:	e7f8      	b.n	8017014 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017022:	07d0      	lsls	r0, r2, #31
 8017024:	bf42      	ittt	mi
 8017026:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801702a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801702e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017032:	2b01      	cmp	r3, #1
 8017034:	d911      	bls.n	801705a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017036:	ea81 0402 	eor.w	r4, r1, r2
 801703a:	4610      	mov	r0, r2
 801703c:	07a4      	lsls	r4, r4, #30
 801703e:	d022      	beq.n	8017086 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8017040:	f023 0401 	bic.w	r4, r3, #1
 8017044:	440c      	add	r4, r1
 8017046:	428c      	cmp	r4, r1
 8017048:	4602      	mov	r2, r0
 801704a:	d904      	bls.n	8017056 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 801704c:	8812      	ldrh	r2, [r2, #0]
 801704e:	3002      	adds	r0, #2
 8017050:	f821 2b02 	strh.w	r2, [r1], #2
 8017054:	e7f7      	b.n	8017046 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017056:	f003 0301 	and.w	r3, r3, #1
 801705a:	f023 0003 	bic.w	r0, r3, #3
 801705e:	4408      	add	r0, r1
 8017060:	4288      	cmp	r0, r1
 8017062:	4614      	mov	r4, r2
 8017064:	d904      	bls.n	8017070 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017066:	6824      	ldr	r4, [r4, #0]
 8017068:	3204      	adds	r2, #4
 801706a:	f841 4b04 	str.w	r4, [r1], #4
 801706e:	e7f7      	b.n	8017060 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017070:	f003 0303 	and.w	r3, r3, #3
 8017074:	3a01      	subs	r2, #1
 8017076:	440b      	add	r3, r1
 8017078:	428b      	cmp	r3, r1
 801707a:	d90c      	bls.n	8017096 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801707c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017080:	f801 0b01 	strb.w	r0, [r1], #1
 8017084:	e7f8      	b.n	8017078 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017086:	0790      	lsls	r0, r2, #30
 8017088:	d0e7      	beq.n	801705a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801708a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801708e:	3b02      	subs	r3, #2
 8017090:	f821 0b02 	strh.w	r0, [r1], #2
 8017094:	e7e1      	b.n	801705a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017096:	2001      	movs	r0, #1
 8017098:	bd10      	pop	{r4, pc}

0801709a <_ZN8touchgfx3HAL7noTouchEv>:
 801709a:	b510      	push	{r4, lr}
 801709c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80170a0:	4604      	mov	r4, r0
 80170a2:	b153      	cbz	r3, 80170ba <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80170a4:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80170a8:	2101      	movs	r1, #1
 80170aa:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80170ae:	301c      	adds	r0, #28
 80170b0:	f011 f968 	bl	8028384 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80170b4:	2300      	movs	r3, #0
 80170b6:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80170ba:	bd10      	pop	{r4, pc}

080170bc <_ZN8touchgfx3HAL3lcdEv>:
 80170bc:	4b04      	ldr	r3, [pc, #16]	; (80170d0 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80170c4:	b10a      	cbz	r2, 80170ca <_ZN8touchgfx3HAL3lcdEv+0xe>
 80170c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80170c8:	b900      	cbnz	r0, 80170cc <_ZN8touchgfx3HAL3lcdEv+0x10>
 80170ca:	6898      	ldr	r0, [r3, #8]
 80170cc:	4770      	bx	lr
 80170ce:	bf00      	nop
 80170d0:	200150f4 	.word	0x200150f4

080170d4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80170d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80170d8:	b085      	sub	sp, #20
 80170da:	4604      	mov	r4, r0
 80170dc:	2000      	movs	r0, #0
 80170de:	4699      	mov	r9, r3
 80170e0:	ad04      	add	r5, sp, #16
 80170e2:	460f      	mov	r7, r1
 80170e4:	4690      	mov	r8, r2
 80170e6:	f845 0d04 	str.w	r0, [r5, #-4]!
 80170ea:	69a0      	ldr	r0, [r4, #24]
 80170ec:	6806      	ldr	r6, [r0, #0]
 80170ee:	9501      	str	r5, [sp, #4]
 80170f0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80170f4:	9500      	str	r5, [sp, #0]
 80170f6:	6835      	ldr	r5, [r6, #0]
 80170f8:	47a8      	blx	r5
 80170fa:	4d10      	ldr	r5, [pc, #64]	; (801713c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80170fc:	4606      	mov	r6, r0
 80170fe:	f8a5 9000 	strh.w	r9, [r5]
 8017102:	f7ff ffdb 	bl	80170bc <_ZN8touchgfx3HAL3lcdEv>
 8017106:	6803      	ldr	r3, [r0, #0]
 8017108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801710a:	4798      	blx	r3
 801710c:	b128      	cbz	r0, 801711a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 801710e:	2801      	cmp	r0, #1
 8017110:	d00b      	beq.n	801712a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8017112:	4630      	mov	r0, r6
 8017114:	b005      	add	sp, #20
 8017116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801711a:	882b      	ldrh	r3, [r5, #0]
 801711c:	fb08 7203 	mla	r2, r8, r3, r7
 8017120:	9b03      	ldr	r3, [sp, #12]
 8017122:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017126:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017128:	e7f3      	b.n	8017112 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801712a:	882a      	ldrh	r2, [r5, #0]
 801712c:	9b03      	ldr	r3, [sp, #12]
 801712e:	fb08 7202 	mla	r2, r8, r2, r7
 8017132:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017136:	1a9a      	subs	r2, r3, r2
 8017138:	63e2      	str	r2, [r4, #60]	; 0x3c
 801713a:	e7ea      	b.n	8017112 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801713c:	200150ee 	.word	0x200150ee

08017140 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017142:	b08b      	sub	sp, #44	; 0x2c
 8017144:	4617      	mov	r7, r2
 8017146:	4604      	mov	r4, r0
 8017148:	460e      	mov	r6, r1
 801714a:	461d      	mov	r5, r3
 801714c:	f7ff ffb6 	bl	80170bc <_ZN8touchgfx3HAL3lcdEv>
 8017150:	6803      	ldr	r3, [r0, #0]
 8017152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017154:	4798      	blx	r3
 8017156:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801715a:	9007      	str	r0, [sp, #28]
 801715c:	4631      	mov	r1, r6
 801715e:	6822      	ldr	r2, [r4, #0]
 8017160:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017164:	4b0c      	ldr	r3, [pc, #48]	; (8017198 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017166:	4620      	mov	r0, r4
 8017168:	881b      	ldrh	r3, [r3, #0]
 801716a:	9306      	str	r3, [sp, #24]
 801716c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017170:	9305      	str	r3, [sp, #20]
 8017172:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017176:	9304      	str	r3, [sp, #16]
 8017178:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801717c:	9303      	str	r3, [sp, #12]
 801717e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017182:	9302      	str	r3, [sp, #8]
 8017184:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017188:	e9cd 5300 	strd	r5, r3, [sp]
 801718c:	463b      	mov	r3, r7
 801718e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017190:	2200      	movs	r2, #0
 8017192:	47a8      	blx	r5
 8017194:	b00b      	add	sp, #44	; 0x2c
 8017196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017198:	200150ee 	.word	0x200150ee

0801719c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 801719c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80171a0:	4698      	mov	r8, r3
 80171a2:	6803      	ldr	r3, [r0, #0]
 80171a4:	b08b      	sub	sp, #44	; 0x2c
 80171a6:	4617      	mov	r7, r2
 80171a8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80171aa:	460e      	mov	r6, r1
 80171ac:	4b13      	ldr	r3, [pc, #76]	; (80171fc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80171ae:	4604      	mov	r4, r0
 80171b0:	f8b3 9000 	ldrh.w	r9, [r3]
 80171b4:	f7ff ff82 	bl	80170bc <_ZN8touchgfx3HAL3lcdEv>
 80171b8:	6803      	ldr	r3, [r0, #0]
 80171ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171bc:	4798      	blx	r3
 80171be:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80171c2:	2200      	movs	r2, #0
 80171c4:	4631      	mov	r1, r6
 80171c6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80171ca:	2302      	movs	r3, #2
 80171cc:	4620      	mov	r0, r4
 80171ce:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80171d2:	2301      	movs	r3, #1
 80171d4:	9305      	str	r3, [sp, #20]
 80171d6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80171da:	9304      	str	r3, [sp, #16]
 80171dc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80171e0:	9303      	str	r3, [sp, #12]
 80171e2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80171e6:	9302      	str	r3, [sp, #8]
 80171e8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80171ec:	e9cd 8300 	strd	r8, r3, [sp]
 80171f0:	463b      	mov	r3, r7
 80171f2:	47a8      	blx	r5
 80171f4:	b00b      	add	sp, #44	; 0x2c
 80171f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171fa:	bf00      	nop
 80171fc:	200150ee 	.word	0x200150ee

08017200 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017204:	4698      	mov	r8, r3
 8017206:	6803      	ldr	r3, [r0, #0]
 8017208:	b087      	sub	sp, #28
 801720a:	460e      	mov	r6, r1
 801720c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 801720e:	4617      	mov	r7, r2
 8017210:	4b0f      	ldr	r3, [pc, #60]	; (8017250 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8017212:	4604      	mov	r4, r0
 8017214:	f8b3 9000 	ldrh.w	r9, [r3]
 8017218:	f7ff ff50 	bl	80170bc <_ZN8touchgfx3HAL3lcdEv>
 801721c:	6803      	ldr	r3, [r0, #0]
 801721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017220:	4798      	blx	r3
 8017222:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017226:	463a      	mov	r2, r7
 8017228:	4631      	mov	r1, r6
 801722a:	f8cd 900c 	str.w	r9, [sp, #12]
 801722e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017232:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017236:	4620      	mov	r0, r4
 8017238:	9302      	str	r3, [sp, #8]
 801723a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801723e:	9301      	str	r3, [sp, #4]
 8017240:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017244:	9300      	str	r3, [sp, #0]
 8017246:	4643      	mov	r3, r8
 8017248:	47a8      	blx	r5
 801724a:	b007      	add	sp, #28
 801724c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017250:	200150ee 	.word	0x200150ee

08017254 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017258:	4604      	mov	r4, r0
 801725a:	b08f      	sub	sp, #60	; 0x3c
 801725c:	4610      	mov	r0, r2
 801725e:	460d      	mov	r5, r1
 8017260:	4691      	mov	r9, r2
 8017262:	461e      	mov	r6, r3
 8017264:	f005 fa7e 	bl	801c764 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017268:	2800      	cmp	r0, #0
 801726a:	f000 809d 	beq.w	80173a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801726e:	6823      	ldr	r3, [r4, #0]
 8017270:	4620      	mov	r0, r4
 8017272:	f8df b198 	ldr.w	fp, [pc, #408]	; 801740c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017276:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801727c:	4798      	blx	r3
 801727e:	6823      	ldr	r3, [r4, #0]
 8017280:	4620      	mov	r0, r4
 8017282:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8017410 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8017286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017288:	4798      	blx	r3
 801728a:	f8bb 3000 	ldrh.w	r3, [fp]
 801728e:	4f5c      	ldr	r7, [pc, #368]	; (8017400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017290:	9301      	str	r3, [sp, #4]
 8017292:	f8ba 3000 	ldrh.w	r3, [sl]
 8017296:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801729a:	4640      	mov	r0, r8
 801729c:	9302      	str	r3, [sp, #8]
 801729e:	883b      	ldrh	r3, [r7, #0]
 80172a0:	9303      	str	r3, [sp, #12]
 80172a2:	4b58      	ldr	r3, [pc, #352]	; (8017404 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80172a4:	881a      	ldrh	r2, [r3, #0]
 80172a6:	9305      	str	r3, [sp, #20]
 80172a8:	9204      	str	r2, [sp, #16]
 80172aa:	f005 faef 	bl	801c88c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80172ae:	8038      	strh	r0, [r7, #0]
 80172b0:	4640      	mov	r0, r8
 80172b2:	f005 fb1f 	bl	801c8f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80172b6:	9b05      	ldr	r3, [sp, #20]
 80172b8:	b280      	uxth	r0, r0
 80172ba:	8018      	strh	r0, [r3, #0]
 80172bc:	4b52      	ldr	r3, [pc, #328]	; (8017408 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80172be:	781b      	ldrb	r3, [r3, #0]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d174      	bne.n	80173ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80172c4:	883b      	ldrh	r3, [r7, #0]
 80172c6:	f8aa 0000 	strh.w	r0, [sl]
 80172ca:	f8ab 3000 	strh.w	r3, [fp]
 80172ce:	4648      	mov	r0, r9
 80172d0:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80172d4:	f005 fa46 	bl	801c764 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80172d8:	2200      	movs	r2, #0
 80172da:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80172de:	4611      	mov	r1, r2
 80172e0:	4628      	mov	r0, r5
 80172e2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80172e6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80172ea:	f7ec fb25 	bl	8003938 <_ZN8touchgfx8Drawable5setXYEss>
 80172ee:	2301      	movs	r3, #1
 80172f0:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80172f4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80172f8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	dd5c      	ble.n	80173ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017300:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017304:	2b00      	cmp	r3, #0
 8017306:	dd58      	ble.n	80173ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017308:	462a      	mov	r2, r5
 801730a:	ab0a      	add	r3, sp, #40	; 0x28
 801730c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017310:	6851      	ldr	r1, [r2, #4]
 8017312:	c303      	stmia	r3!, {r0, r1}
 8017314:	4631      	mov	r1, r6
 8017316:	a80a      	add	r0, sp, #40	; 0x28
 8017318:	f7ff fbf4 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 801731c:	4b38      	ldr	r3, [pc, #224]	; (8017400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801731e:	2100      	movs	r1, #0
 8017320:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017324:	4b37      	ldr	r3, [pc, #220]	; (8017404 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017326:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801732a:	aa0a      	add	r2, sp, #40	; 0x28
 801732c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017330:	910c      	str	r1, [sp, #48]	; 0x30
 8017332:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017336:	ab08      	add	r3, sp, #32
 8017338:	e892 0003 	ldmia.w	r2, {r0, r1}
 801733c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017340:	4618      	mov	r0, r3
 8017342:	a90c      	add	r1, sp, #48	; 0x30
 8017344:	f7ff fbde 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 8017348:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801734a:	2b00      	cmp	r3, #0
 801734c:	d13c      	bne.n	80173c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801734e:	2000      	movs	r0, #0
 8017350:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017354:	2600      	movs	r6, #0
 8017356:	696b      	ldr	r3, [r5, #20]
 8017358:	a908      	add	r1, sp, #32
 801735a:	682a      	ldr	r2, [r5, #0]
 801735c:	4628      	mov	r0, r5
 801735e:	9305      	str	r3, [sp, #20]
 8017360:	616e      	str	r6, [r5, #20]
 8017362:	6892      	ldr	r2, [r2, #8]
 8017364:	4790      	blx	r2
 8017366:	9b05      	ldr	r3, [sp, #20]
 8017368:	4652      	mov	r2, sl
 801736a:	4649      	mov	r1, r9
 801736c:	616b      	str	r3, [r5, #20]
 801736e:	4628      	mov	r0, r5
 8017370:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017374:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017378:	f7ec fade 	bl	8003938 <_ZN8touchgfx8Drawable5setXYEss>
 801737c:	9a01      	ldr	r2, [sp, #4]
 801737e:	4b23      	ldr	r3, [pc, #140]	; (801740c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017380:	4620      	mov	r0, r4
 8017382:	801a      	strh	r2, [r3, #0]
 8017384:	9a02      	ldr	r2, [sp, #8]
 8017386:	4b22      	ldr	r3, [pc, #136]	; (8017410 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8017388:	801a      	strh	r2, [r3, #0]
 801738a:	9a03      	ldr	r2, [sp, #12]
 801738c:	4b1c      	ldr	r3, [pc, #112]	; (8017400 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801738e:	801a      	strh	r2, [r3, #0]
 8017390:	4b1c      	ldr	r3, [pc, #112]	; (8017404 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017392:	9a04      	ldr	r2, [sp, #16]
 8017394:	801a      	strh	r2, [r3, #0]
 8017396:	6823      	ldr	r3, [r4, #0]
 8017398:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801739c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801739e:	4798      	blx	r3
 80173a0:	6823      	ldr	r3, [r4, #0]
 80173a2:	4620      	mov	r0, r4
 80173a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173a6:	4798      	blx	r3
 80173a8:	b00f      	add	sp, #60	; 0x3c
 80173aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173ae:	883b      	ldrh	r3, [r7, #0]
 80173b0:	f8ab 0000 	strh.w	r0, [fp]
 80173b4:	f8aa 3000 	strh.w	r3, [sl]
 80173b8:	e789      	b.n	80172ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80173ba:	462a      	mov	r2, r5
 80173bc:	ab0a      	add	r3, sp, #40	; 0x28
 80173be:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80173c2:	6851      	ldr	r1, [r2, #4]
 80173c4:	c303      	stmia	r3!, {r0, r1}
 80173c6:	e7a9      	b.n	801731c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80173c8:	a807      	add	r0, sp, #28
 80173ca:	f005 fbcf 	bl	801cb6c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80173ce:	4606      	mov	r6, r0
 80173d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80173d2:	6803      	ldr	r3, [r0, #0]
 80173d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173d6:	4798      	blx	r3
 80173d8:	4286      	cmp	r6, r0
 80173da:	d1b8      	bne.n	801734e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80173dc:	f7ff fe6e 	bl	80170bc <_ZN8touchgfx3HAL3lcdEv>
 80173e0:	6803      	ldr	r3, [r0, #0]
 80173e2:	4606      	mov	r6, r0
 80173e4:	a807      	add	r0, sp, #28
 80173e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173e8:	9305      	str	r3, [sp, #20]
 80173ea:	f005 fbbf 	bl	801cb6c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80173ee:	9b05      	ldr	r3, [sp, #20]
 80173f0:	4601      	mov	r1, r0
 80173f2:	4630      	mov	r0, r6
 80173f4:	4798      	blx	r3
 80173f6:	f080 0001 	eor.w	r0, r0, #1
 80173fa:	b2c0      	uxtb	r0, r0
 80173fc:	e7a8      	b.n	8017350 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80173fe:	bf00      	nop
 8017400:	200150e8 	.word	0x200150e8
 8017404:	200150ea 	.word	0x200150ea
 8017408:	200150ec 	.word	0x200150ec
 801740c:	200150ee 	.word	0x200150ee
 8017410:	200150f0 	.word	0x200150f0

08017414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017414:	4b07      	ldr	r3, [pc, #28]	; (8017434 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017416:	b510      	push	{r4, lr}
 8017418:	781b      	ldrb	r3, [r3, #0]
 801741a:	4604      	mov	r4, r0
 801741c:	b13b      	cbz	r3, 801742e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801741e:	6803      	ldr	r3, [r0, #0]
 8017420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017422:	4798      	blx	r3
 8017424:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017426:	4283      	cmp	r3, r0
 8017428:	d101      	bne.n	801742e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801742a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801742c:	bd10      	pop	{r4, pc}
 801742e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017430:	e7fc      	b.n	801742c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017432:	bf00      	nop
 8017434:	200150f2 	.word	0x200150f2

08017438 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801743c:	461d      	mov	r5, r3
 801743e:	b08a      	sub	sp, #40	; 0x28
 8017440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017444:	4690      	mov	r8, r2
 8017446:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801744a:	2400      	movs	r4, #0
 801744c:	4607      	mov	r7, r0
 801744e:	fb06 8505 	mla	r5, r6, r5, r8
 8017452:	9404      	str	r4, [sp, #16]
 8017454:	f88d 4020 	strb.w	r4, [sp, #32]
 8017458:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801745c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017460:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017464:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017468:	f8ad 301a 	strh.w	r3, [sp, #26]
 801746c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017470:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017474:	f7ff ffce 	bl	8017414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017478:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801747c:	6878      	ldr	r0, [r7, #4]
 801747e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017482:	a901      	add	r1, sp, #4
 8017484:	9505      	str	r5, [sp, #20]
 8017486:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801748a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801748e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017492:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017496:	6803      	ldr	r3, [r0, #0]
 8017498:	685b      	ldr	r3, [r3, #4]
 801749a:	4798      	blx	r3
 801749c:	b00a      	add	sp, #40	; 0x28
 801749e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174a2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80174a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174a6:	b08b      	sub	sp, #44	; 0x2c
 80174a8:	2400      	movs	r4, #0
 80174aa:	4691      	mov	r9, r2
 80174ac:	461d      	mov	r5, r3
 80174ae:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80174b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80174b6:	4688      	mov	r8, r1
 80174b8:	4607      	mov	r7, r0
 80174ba:	9404      	str	r4, [sp, #16]
 80174bc:	fb06 9505 	mla	r5, r6, r5, r9
 80174c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80174c4:	f7ff ffa6 	bl	8017414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80174c8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80174cc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80174d6:	a901      	add	r1, sp, #4
 80174d8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80174dc:	9505      	str	r5, [sp, #20]
 80174de:	f8ad 301a 	strh.w	r3, [sp, #26]
 80174e2:	f8ad 401c 	strh.w	r4, [sp, #28]
 80174e6:	f8ad 601e 	strh.w	r6, [sp, #30]
 80174ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80174ee:	f8ad 4020 	strh.w	r4, [sp, #32]
 80174f2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80174f6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80174fa:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80174fe:	6803      	ldr	r3, [r0, #0]
 8017500:	685b      	ldr	r3, [r3, #4]
 8017502:	4798      	blx	r3
 8017504:	b00b      	add	sp, #44	; 0x2c
 8017506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801750c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017510:	b08a      	sub	sp, #40	; 0x28
 8017512:	4698      	mov	r8, r3
 8017514:	2300      	movs	r3, #0
 8017516:	4606      	mov	r6, r0
 8017518:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801751c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8017520:	2d0b      	cmp	r5, #11
 8017522:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8017526:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801752a:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801752e:	9304      	str	r3, [sp, #16]
 8017530:	d137      	bne.n	80175a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8017532:	2380      	movs	r3, #128	; 0x80
 8017534:	f88d 0020 	strb.w	r0, [sp, #32]
 8017538:	4630      	mov	r0, r6
 801753a:	9203      	str	r2, [sp, #12]
 801753c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017540:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017544:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017548:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801754c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017550:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017554:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017558:	f7ff ff5c 	bl	8017414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801755c:	2c0b      	cmp	r4, #11
 801755e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017562:	f8ad 701e 	strh.w	r7, [sp, #30]
 8017566:	bf94      	ite	ls
 8017568:	4b19      	ldrls	r3, [pc, #100]	; (80175d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801756a:	2100      	movhi	r1, #0
 801756c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8017570:	bf98      	it	ls
 8017572:	5d19      	ldrbls	r1, [r3, r4]
 8017574:	fb02 8307 	mla	r3, r2, r7, r8
 8017578:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801757c:	10c9      	asrs	r1, r1, #3
 801757e:	fb01 0003 	mla	r0, r1, r3, r0
 8017582:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8017586:	a901      	add	r1, sp, #4
 8017588:	9005      	str	r0, [sp, #20]
 801758a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801758e:	2300      	movs	r3, #0
 8017590:	6870      	ldr	r0, [r6, #4]
 8017592:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017596:	6803      	ldr	r3, [r0, #0]
 8017598:	685b      	ldr	r3, [r3, #4]
 801759a:	4798      	blx	r3
 801759c:	b00a      	add	sp, #40	; 0x28
 801759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175a2:	2d02      	cmp	r5, #2
 80175a4:	d109      	bne.n	80175ba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80175a6:	28ff      	cmp	r0, #255	; 0xff
 80175a8:	d105      	bne.n	80175b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80175aa:	f1bc 0f00 	cmp.w	ip, #0
 80175ae:	bf14      	ite	ne
 80175b0:	2340      	movne	r3, #64	; 0x40
 80175b2:	2320      	moveq	r3, #32
 80175b4:	e7be      	b.n	8017534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80175b6:	2340      	movs	r3, #64	; 0x40
 80175b8:	e7bc      	b.n	8017534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80175ba:	28ff      	cmp	r0, #255	; 0xff
 80175bc:	d105      	bne.n	80175ca <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80175be:	f1bc 0f00 	cmp.w	ip, #0
 80175c2:	bf14      	ite	ne
 80175c4:	2304      	movne	r3, #4
 80175c6:	2301      	moveq	r3, #1
 80175c8:	e7b4      	b.n	8017534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80175ca:	2304      	movs	r3, #4
 80175cc:	e7b2      	b.n	8017534 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80175ce:	bf00      	nop
 80175d0:	0802dde0 	.word	0x0802dde0

080175d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80175d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175d8:	b08b      	sub	sp, #44	; 0x2c
 80175da:	461d      	mov	r5, r3
 80175dc:	2400      	movs	r4, #0
 80175de:	4688      	mov	r8, r1
 80175e0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80175e4:	4693      	mov	fp, r2
 80175e6:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80175ea:	4607      	mov	r7, r0
 80175ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80175f0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80175f4:	9404      	str	r4, [sp, #16]
 80175f6:	bf14      	ite	ne
 80175f8:	2308      	movne	r3, #8
 80175fa:	2302      	moveq	r3, #2
 80175fc:	fb05 b50a 	mla	r5, r5, sl, fp
 8017600:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017604:	f7ff ff06 	bl	8017414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017608:	2e0b      	cmp	r6, #11
 801760a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801760e:	a901      	add	r1, sp, #4
 8017610:	bf98      	it	ls
 8017612:	4b13      	ldrls	r3, [pc, #76]	; (8017660 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8017614:	f8ad a01e 	strh.w	sl, [sp, #30]
 8017618:	bf98      	it	ls
 801761a:	5d9c      	ldrbls	r4, [r3, r6]
 801761c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017620:	10e4      	asrs	r4, r4, #3
 8017622:	f8cd 8010 	str.w	r8, [sp, #16]
 8017626:	f8ad 3018 	strh.w	r3, [sp, #24]
 801762a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801762e:	fb04 0405 	mla	r4, r4, r5, r0
 8017632:	6878      	ldr	r0, [r7, #4]
 8017634:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017638:	2300      	movs	r3, #0
 801763a:	9405      	str	r4, [sp, #20]
 801763c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017640:	f88d 9020 	strb.w	r9, [sp, #32]
 8017644:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8017648:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801764c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8017650:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8017654:	6803      	ldr	r3, [r0, #0]
 8017656:	685b      	ldr	r3, [r3, #4]
 8017658:	4798      	blx	r3
 801765a:	b00b      	add	sp, #44	; 0x2c
 801765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017660:	0802dde0 	.word	0x0802dde0

08017664 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017668:	461e      	mov	r6, r3
 801766a:	4b0a      	ldr	r3, [pc, #40]	; (8017694 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801766c:	460f      	mov	r7, r1
 801766e:	4690      	mov	r8, r2
 8017670:	881d      	ldrh	r5, [r3, #0]
 8017672:	f7ff fd23 	bl	80170bc <_ZN8touchgfx3HAL3lcdEv>
 8017676:	6803      	ldr	r3, [r0, #0]
 8017678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801767a:	4798      	blx	r3
 801767c:	280b      	cmp	r0, #11
 801767e:	bf96      	itet	ls
 8017680:	4b05      	ldrls	r3, [pc, #20]	; (8017698 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017682:	2400      	movhi	r4, #0
 8017684:	5c1c      	ldrbls	r4, [r3, r0]
 8017686:	fb08 7005 	mla	r0, r8, r5, r7
 801768a:	10e4      	asrs	r4, r4, #3
 801768c:	fb04 6000 	mla	r0, r4, r0, r6
 8017690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017694:	200150ee 	.word	0x200150ee
 8017698:	0802dde0 	.word	0x0802dde0

0801769c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801769c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801769e:	b08b      	sub	sp, #44	; 0x2c
 80176a0:	461f      	mov	r7, r3
 80176a2:	4604      	mov	r4, r0
 80176a4:	4616      	mov	r6, r2
 80176a6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80176aa:	2500      	movs	r5, #0
 80176ac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80176b0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80176b4:	9504      	str	r5, [sp, #16]
 80176b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80176ba:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80176be:	f8ad 301a 	strh.w	r3, [sp, #26]
 80176c2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80176c6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80176ca:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80176ce:	f88d 3020 	strb.w	r3, [sp, #32]
 80176d2:	f7ff fe9f 	bl	8017414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80176d6:	463a      	mov	r2, r7
 80176d8:	4631      	mov	r1, r6
 80176da:	4603      	mov	r3, r0
 80176dc:	4620      	mov	r0, r4
 80176de:	f7ff ffc1 	bl	8017664 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80176e2:	4b0e      	ldr	r3, [pc, #56]	; (801771c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80176e4:	9005      	str	r0, [sp, #20]
 80176e6:	881b      	ldrh	r3, [r3, #0]
 80176e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80176ec:	f7ff fce6 	bl	80170bc <_ZN8touchgfx3HAL3lcdEv>
 80176f0:	6803      	ldr	r3, [r0, #0]
 80176f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176f4:	4798      	blx	r3
 80176f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80176f8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80176fc:	a901      	add	r1, sp, #4
 80176fe:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8017702:	9304      	str	r3, [sp, #16]
 8017704:	6860      	ldr	r0, [r4, #4]
 8017706:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801770a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801770e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8017712:	6803      	ldr	r3, [r0, #0]
 8017714:	685b      	ldr	r3, [r3, #4]
 8017716:	4798      	blx	r3
 8017718:	b00b      	add	sp, #44	; 0x2c
 801771a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801771c:	200150ee 	.word	0x200150ee

08017720 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8017720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017722:	b08d      	sub	sp, #52	; 0x34
 8017724:	2501      	movs	r5, #1
 8017726:	4604      	mov	r4, r0
 8017728:	466b      	mov	r3, sp
 801772a:	9503      	str	r5, [sp, #12]
 801772c:	e883 0006 	stmia.w	r3, {r1, r2}
 8017730:	2300      	movs	r3, #0
 8017732:	f8bd 6000 	ldrh.w	r6, [sp]
 8017736:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801773a:	9306      	str	r3, [sp, #24]
 801773c:	6803      	ldr	r3, [r0, #0]
 801773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017740:	4798      	blx	r3
 8017742:	463a      	mov	r2, r7
 8017744:	4631      	mov	r1, r6
 8017746:	4603      	mov	r3, r0
 8017748:	4620      	mov	r0, r4
 801774a:	f7ff ff8b 	bl	8017664 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801774e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017750:	9004      	str	r0, [sp, #16]
 8017752:	9307      	str	r3, [sp, #28]
 8017754:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017758:	f8ad 3020 	strh.w	r3, [sp, #32]
 801775c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017760:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017764:	4b0e      	ldr	r3, [pc, #56]	; (80177a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8017766:	881b      	ldrh	r3, [r3, #0]
 8017768:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801776c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017770:	f7ff fca4 	bl	80170bc <_ZN8touchgfx3HAL3lcdEv>
 8017774:	6803      	ldr	r3, [r0, #0]
 8017776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017778:	4798      	blx	r3
 801777a:	23ff      	movs	r3, #255	; 0xff
 801777c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017780:	a903      	add	r1, sp, #12
 8017782:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8017786:	6860      	ldr	r0, [r4, #4]
 8017788:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801778c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017790:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017794:	6803      	ldr	r3, [r0, #0]
 8017796:	685b      	ldr	r3, [r3, #4]
 8017798:	4798      	blx	r3
 801779a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801779c:	b00d      	add	sp, #52	; 0x34
 801779e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177a0:	200150ee 	.word	0x200150ee

080177a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80177a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177a8:	b08c      	sub	sp, #48	; 0x30
 80177aa:	461e      	mov	r6, r3
 80177ac:	2300      	movs	r3, #0
 80177ae:	4604      	mov	r4, r0
 80177b0:	466d      	mov	r5, sp
 80177b2:	9306      	str	r3, [sp, #24]
 80177b4:	6803      	ldr	r3, [r0, #0]
 80177b6:	e885 0006 	stmia.w	r5, {r1, r2}
 80177ba:	2501      	movs	r5, #1
 80177bc:	f8bd 7000 	ldrh.w	r7, [sp]
 80177c0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80177c4:	9503      	str	r5, [sp, #12]
 80177c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177c8:	4798      	blx	r3
 80177ca:	4642      	mov	r2, r8
 80177cc:	4639      	mov	r1, r7
 80177ce:	4603      	mov	r3, r0
 80177d0:	4620      	mov	r0, r4
 80177d2:	f7ff ff47 	bl	8017664 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80177d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80177da:	9004      	str	r0, [sp, #16]
 80177dc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80177e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80177e4:	9607      	str	r6, [sp, #28]
 80177e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80177ea:	4b10      	ldr	r3, [pc, #64]	; (801782c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80177ec:	881b      	ldrh	r3, [r3, #0]
 80177ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80177f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80177f4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80177f8:	f7ff fc60 	bl	80170bc <_ZN8touchgfx3HAL3lcdEv>
 80177fc:	6803      	ldr	r3, [r0, #0]
 80177fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017800:	4798      	blx	r3
 8017802:	23ff      	movs	r3, #255	; 0xff
 8017804:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017808:	a903      	add	r1, sp, #12
 801780a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801780e:	6860      	ldr	r0, [r4, #4]
 8017810:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017814:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017818:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801781c:	6803      	ldr	r3, [r0, #0]
 801781e:	685b      	ldr	r3, [r3, #4]
 8017820:	4798      	blx	r3
 8017822:	4630      	mov	r0, r6
 8017824:	b00c      	add	sp, #48	; 0x30
 8017826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801782a:	bf00      	nop
 801782c:	200150ee 	.word	0x200150ee

08017830 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8017830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017832:	b085      	sub	sp, #20
 8017834:	4605      	mov	r5, r0
 8017836:	ac02      	add	r4, sp, #8
 8017838:	e884 0006 	stmia.w	r4, {r1, r2}
 801783c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8017840:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8017844:	f7ff fde6 	bl	8017414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017848:	4631      	mov	r1, r6
 801784a:	4603      	mov	r3, r0
 801784c:	463a      	mov	r2, r7
 801784e:	4628      	mov	r0, r5
 8017850:	f7ff ff08 	bl	8017664 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017854:	4a05      	ldr	r2, [pc, #20]	; (801786c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8017856:	682b      	ldr	r3, [r5, #0]
 8017858:	8812      	ldrh	r2, [r2, #0]
 801785a:	9200      	str	r2, [sp, #0]
 801785c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801785e:	4603      	mov	r3, r0
 8017860:	4628      	mov	r0, r5
 8017862:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017866:	47b0      	blx	r6
 8017868:	b005      	add	sp, #20
 801786a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801786c:	200150ee 	.word	0x200150ee

08017870 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017870:	b570      	push	{r4, r5, r6, lr}
 8017872:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8017876:	4604      	mov	r4, r0
 8017878:	b19b      	cbz	r3, 80178a2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801787a:	2002      	movs	r0, #2
 801787c:	f7ea f9b4 	bl	8001be8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017880:	2300      	movs	r3, #0
 8017882:	4620      	mov	r0, r4
 8017884:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017888:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801788c:	6823      	ldr	r3, [r4, #0]
 801788e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8017892:	f7ff fdbf 	bl	8017414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017896:	4601      	mov	r1, r0
 8017898:	4620      	mov	r0, r4
 801789a:	462b      	mov	r3, r5
 801789c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178a0:	4718      	bx	r3
 80178a2:	bd70      	pop	{r4, r5, r6, pc}

080178a4 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80178a4:	b570      	push	{r4, r5, r6, lr}
 80178a6:	4605      	mov	r5, r0
 80178a8:	460c      	mov	r4, r1
 80178aa:	2003      	movs	r0, #3
 80178ac:	b149      	cbz	r1, 80178c2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80178ae:	f7ea f93b 	bl	8001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80178b2:	6928      	ldr	r0, [r5, #16]
 80178b4:	b168      	cbz	r0, 80178d2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80178b6:	6803      	ldr	r3, [r0, #0]
 80178b8:	2101      	movs	r1, #1
 80178ba:	695b      	ldr	r3, [r3, #20]
 80178bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178c0:	4718      	bx	r3
 80178c2:	f7ea f961 	bl	8001b88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80178c6:	6928      	ldr	r0, [r5, #16]
 80178c8:	b118      	cbz	r0, 80178d2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80178ca:	6803      	ldr	r3, [r0, #0]
 80178cc:	4621      	mov	r1, r4
 80178ce:	695b      	ldr	r3, [r3, #20]
 80178d0:	e7f4      	b.n	80178bc <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80178d2:	bd70      	pop	{r4, r5, r6, pc}

080178d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80178d4:	b538      	push	{r3, r4, r5, lr}
 80178d6:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 80178da:	4604      	mov	r4, r0
 80178dc:	460d      	mov	r5, r1
 80178de:	428b      	cmp	r3, r1
 80178e0:	d006      	beq.n	80178f0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 80178e2:	6803      	ldr	r3, [r0, #0]
 80178e4:	b929      	cbnz	r1, 80178f2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 80178e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80178ea:	4798      	blx	r3
 80178ec:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80178f0:	bd38      	pop	{r3, r4, r5, pc}
 80178f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80178f6:	e7f8      	b.n	80178ea <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080178f8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80178f8:	4b0d      	ldr	r3, [pc, #52]	; (8017930 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80178fa:	b510      	push	{r4, lr}
 80178fc:	781b      	ldrb	r3, [r3, #0]
 80178fe:	4604      	mov	r4, r0
 8017900:	b95b      	cbnz	r3, 801791a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017902:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8017906:	2b02      	cmp	r3, #2
 8017908:	d007      	beq.n	801791a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801790a:	6840      	ldr	r0, [r0, #4]
 801790c:	f000 f912 	bl	8017b34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8017910:	b118      	cbz	r0, 801791a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8017912:	6862      	ldr	r2, [r4, #4]
 8017914:	7a53      	ldrb	r3, [r2, #9]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d0fc      	beq.n	8017914 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801791a:	f7ea fab5 	bl	8001e88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801791e:	4620      	mov	r0, r4
 8017920:	2100      	movs	r1, #0
 8017922:	f7ff ffd7 	bl	80178d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017926:	4620      	mov	r0, r4
 8017928:	f7ff fd74 	bl	8017414 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801792c:	bd10      	pop	{r4, pc}
 801792e:	bf00      	nop
 8017930:	200150f2 	.word	0x200150f2

08017934 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8017934:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017938:	1a13      	subs	r3, r2, r0
 801793a:	4258      	negs	r0, r3
 801793c:	4158      	adcs	r0, r3
 801793e:	4770      	bx	lr

08017940 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8017940:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8017944:	1a9b      	subs	r3, r3, r2
 8017946:	2b00      	cmp	r3, #0
 8017948:	bfdc      	itt	le
 801794a:	6882      	ldrle	r2, [r0, #8]
 801794c:	189b      	addle	r3, r3, r2
 801794e:	2b01      	cmp	r3, #1
 8017950:	bfcc      	ite	gt
 8017952:	2000      	movgt	r0, #0
 8017954:	2001      	movle	r0, #1
 8017956:	4770      	bx	lr

08017958 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017958:	6902      	ldr	r2, [r0, #16]
 801795a:	6843      	ldr	r3, [r0, #4]
 801795c:	2024      	movs	r0, #36	; 0x24
 801795e:	fb00 3002 	mla	r0, r0, r2, r3
 8017962:	4770      	bx	lr

08017964 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8017964:	6803      	ldr	r3, [r0, #0]
 8017966:	691b      	ldr	r3, [r3, #16]
 8017968:	4718      	bx	r3

0801796a <_ZN8touchgfx13DMA_Interface7executeEv>:
 801796a:	2301      	movs	r3, #1
 801796c:	b570      	push	{r4, r5, r6, lr}
 801796e:	7203      	strb	r3, [r0, #8]
 8017970:	4604      	mov	r4, r0
 8017972:	6840      	ldr	r0, [r0, #4]
 8017974:	6803      	ldr	r3, [r0, #0]
 8017976:	699b      	ldr	r3, [r3, #24]
 8017978:	4798      	blx	r3
 801797a:	6803      	ldr	r3, [r0, #0]
 801797c:	4605      	mov	r5, r0
 801797e:	2b40      	cmp	r3, #64	; 0x40
 8017980:	d00c      	beq.n	801799c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017982:	d810      	bhi.n	80179a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8017984:	2b04      	cmp	r3, #4
 8017986:	d01d      	beq.n	80179c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8017988:	d804      	bhi.n	8017994 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801798a:	2b01      	cmp	r3, #1
 801798c:	d006      	beq.n	801799c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801798e:	2b02      	cmp	r3, #2
 8017990:	d02c      	beq.n	80179ec <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8017992:	bd70      	pop	{r4, r5, r6, pc}
 8017994:	2b08      	cmp	r3, #8
 8017996:	d01d      	beq.n	80179d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8017998:	2b20      	cmp	r3, #32
 801799a:	d1fa      	bne.n	8017992 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801799c:	6823      	ldr	r3, [r4, #0]
 801799e:	4620      	mov	r0, r4
 80179a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179a2:	4798      	blx	r3
 80179a4:	e013      	b.n	80179ce <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80179a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179aa:	d0f7      	beq.n	801799c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80179ac:	d804      	bhi.n	80179b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80179ae:	2b80      	cmp	r3, #128	; 0x80
 80179b0:	d0f4      	beq.n	801799c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80179b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80179b6:	e7f0      	b.n	801799a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80179b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80179bc:	d0ee      	beq.n	801799c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80179be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80179c2:	e7e5      	b.n	8017990 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80179c4:	6823      	ldr	r3, [r4, #0]
 80179c6:	7f01      	ldrb	r1, [r0, #28]
 80179c8:	4620      	mov	r0, r4
 80179ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179cc:	4798      	blx	r3
 80179ce:	6823      	ldr	r3, [r4, #0]
 80179d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179d2:	e006      	b.n	80179e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80179d4:	6823      	ldr	r3, [r4, #0]
 80179d6:	7f01      	ldrb	r1, [r0, #28]
 80179d8:	4620      	mov	r0, r4
 80179da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179dc:	4798      	blx	r3
 80179de:	6823      	ldr	r3, [r4, #0]
 80179e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179e2:	4629      	mov	r1, r5
 80179e4:	4620      	mov	r0, r4
 80179e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179ea:	4718      	bx	r3
 80179ec:	6823      	ldr	r3, [r4, #0]
 80179ee:	4620      	mov	r0, r4
 80179f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179f2:	4798      	blx	r3
 80179f4:	e7f3      	b.n	80179de <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080179f6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80179f6:	4770      	bx	lr

080179f8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80179f8:	4770      	bx	lr

080179fa <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80179fa:	4770      	bx	lr

080179fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80179fc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8017a00:	b510      	push	{r4, lr}
 8017a02:	1ad2      	subs	r2, r2, r3
 8017a04:	2a00      	cmp	r2, #0
 8017a06:	bfdc      	itt	le
 8017a08:	6884      	ldrle	r4, [r0, #8]
 8017a0a:	1912      	addle	r2, r2, r4
 8017a0c:	2a01      	cmp	r2, #1
 8017a0e:	dd16      	ble.n	8017a3e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8017a10:	6842      	ldr	r2, [r0, #4]
 8017a12:	2424      	movs	r4, #36	; 0x24
 8017a14:	fb04 2303 	mla	r3, r4, r3, r2
 8017a18:	f101 0220 	add.w	r2, r1, #32
 8017a1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8017a20:	4291      	cmp	r1, r2
 8017a22:	f843 4b04 	str.w	r4, [r3], #4
 8017a26:	d1f9      	bne.n	8017a1c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8017a28:	780a      	ldrb	r2, [r1, #0]
 8017a2a:	701a      	strb	r2, [r3, #0]
 8017a2c:	68c3      	ldr	r3, [r0, #12]
 8017a2e:	6882      	ldr	r2, [r0, #8]
 8017a30:	f3bf 8f5b 	dmb	ish
 8017a34:	3301      	adds	r3, #1
 8017a36:	429a      	cmp	r2, r3
 8017a38:	bfd8      	it	le
 8017a3a:	1a9b      	suble	r3, r3, r2
 8017a3c:	60c3      	str	r3, [r0, #12]
 8017a3e:	bd10      	pop	{r4, pc}

08017a40 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017a40:	6903      	ldr	r3, [r0, #16]
 8017a42:	6882      	ldr	r2, [r0, #8]
 8017a44:	f3bf 8f5b 	dmb	ish
 8017a48:	3301      	adds	r3, #1
 8017a4a:	429a      	cmp	r2, r3
 8017a4c:	bfd8      	it	le
 8017a4e:	1a9b      	suble	r3, r3, r2
 8017a50:	6103      	str	r3, [r0, #16]
 8017a52:	4770      	bx	lr

08017a54 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8017a54:	b570      	push	{r4, r5, r6, lr}
 8017a56:	4604      	mov	r4, r0
 8017a58:	460e      	mov	r6, r1
 8017a5a:	6860      	ldr	r0, [r4, #4]
 8017a5c:	6803      	ldr	r3, [r0, #0]
 8017a5e:	685b      	ldr	r3, [r3, #4]
 8017a60:	4798      	blx	r3
 8017a62:	2800      	cmp	r0, #0
 8017a64:	d1f9      	bne.n	8017a5a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8017a66:	4d0d      	ldr	r5, [pc, #52]	; (8017a9c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8017a68:	6828      	ldr	r0, [r5, #0]
 8017a6a:	6803      	ldr	r3, [r0, #0]
 8017a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017a6e:	4798      	blx	r3
 8017a70:	f7ea fa18 	bl	8001ea4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8017a74:	6828      	ldr	r0, [r5, #0]
 8017a76:	2101      	movs	r1, #1
 8017a78:	f7ff ff2c 	bl	80178d4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017a7c:	6860      	ldr	r0, [r4, #4]
 8017a7e:	4631      	mov	r1, r6
 8017a80:	6803      	ldr	r3, [r0, #0]
 8017a82:	689b      	ldr	r3, [r3, #8]
 8017a84:	4798      	blx	r3
 8017a86:	6823      	ldr	r3, [r4, #0]
 8017a88:	4620      	mov	r0, r4
 8017a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a8c:	4798      	blx	r3
 8017a8e:	6828      	ldr	r0, [r5, #0]
 8017a90:	6803      	ldr	r3, [r0, #0]
 8017a92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017a98:	4718      	bx	r3
 8017a9a:	bf00      	nop
 8017a9c:	200150f4 	.word	0x200150f4

08017aa0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8017aa0:	b508      	push	{r3, lr}
 8017aa2:	f7ea f9f1 	bl	8001e88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8017aa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017aaa:	f7ea b9f5 	b.w	8001e98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017aae <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8017aae:	b510      	push	{r4, lr}
 8017ab0:	4604      	mov	r4, r0
 8017ab2:	2114      	movs	r1, #20
 8017ab4:	f010 fcec 	bl	8028490 <_ZdlPvj>
 8017ab8:	4620      	mov	r0, r4
 8017aba:	bd10      	pop	{r4, pc}

08017abc <_ZN8touchgfx13DMA_Interface5startEv>:
 8017abc:	b510      	push	{r4, lr}
 8017abe:	4604      	mov	r4, r0
 8017ac0:	6840      	ldr	r0, [r0, #4]
 8017ac2:	6803      	ldr	r3, [r0, #0]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	4798      	blx	r3
 8017ac8:	b948      	cbnz	r0, 8017ade <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017aca:	7a63      	ldrb	r3, [r4, #9]
 8017acc:	b13b      	cbz	r3, 8017ade <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017ace:	7a23      	ldrb	r3, [r4, #8]
 8017ad0:	b92b      	cbnz	r3, 8017ade <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8017ad2:	6823      	ldr	r3, [r4, #0]
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017adc:	4718      	bx	r3
 8017ade:	bd10      	pop	{r4, pc}

08017ae0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8017ae0:	b570      	push	{r4, r5, r6, lr}
 8017ae2:	4604      	mov	r4, r0
 8017ae4:	6840      	ldr	r0, [r0, #4]
 8017ae6:	6803      	ldr	r3, [r0, #0]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	4798      	blx	r3
 8017aec:	4605      	mov	r5, r0
 8017aee:	b930      	cbnz	r0, 8017afe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017af0:	7a23      	ldrb	r3, [r4, #8]
 8017af2:	b123      	cbz	r3, 8017afe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8017af4:	6860      	ldr	r0, [r4, #4]
 8017af6:	6803      	ldr	r3, [r0, #0]
 8017af8:	695b      	ldr	r3, [r3, #20]
 8017afa:	4798      	blx	r3
 8017afc:	7225      	strb	r5, [r4, #8]
 8017afe:	6860      	ldr	r0, [r4, #4]
 8017b00:	6803      	ldr	r3, [r0, #0]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	4798      	blx	r3
 8017b06:	b928      	cbnz	r0, 8017b14 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8017b08:	6823      	ldr	r3, [r4, #0]
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b12:	4718      	bx	r3
 8017b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b18:	f7ea b9cc 	b.w	8001eb4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08017b1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8017b1c:	b510      	push	{r4, lr}
 8017b1e:	6082      	str	r2, [r0, #8]
 8017b20:	2200      	movs	r2, #0
 8017b22:	4c03      	ldr	r4, [pc, #12]	; (8017b30 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017b24:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017b28:	e9c0 4100 	strd	r4, r1, [r0]
 8017b2c:	bd10      	pop	{r4, pc}
 8017b2e:	bf00      	nop
 8017b30:	0802ddf4 	.word	0x0802ddf4

08017b34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017b34:	6840      	ldr	r0, [r0, #4]
 8017b36:	6803      	ldr	r3, [r0, #0]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	4718      	bx	r3

08017b3c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8017b3c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8017b40:	b133      	cbz	r3, 8017b50 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8017b42:	790b      	ldrb	r3, [r1, #4]
 8017b44:	2b01      	cmp	r3, #1
 8017b46:	bf01      	itttt	eq
 8017b48:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8017b4a:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8017b4c:	8603      	strheq	r3, [r0, #48]	; 0x30
 8017b4e:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 8017b50:	f010 bc7a 	b.w	8028448 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08017b54 <_ZN8touchgfx8TextArea8setWidthEs>:
 8017b54:	b530      	push	{r4, r5, lr}
 8017b56:	b085      	sub	sp, #20
 8017b58:	6803      	ldr	r3, [r0, #0]
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	8101      	strh	r1, [r0, #8]
 8017b5e:	466d      	mov	r5, sp
 8017b60:	4601      	mov	r1, r0
 8017b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017b66:	343c      	adds	r4, #60	; 0x3c
 8017b68:	4628      	mov	r0, r5
 8017b6a:	4798      	blx	r3
 8017b6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017b70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017b74:	b005      	add	sp, #20
 8017b76:	bd30      	pop	{r4, r5, pc}

08017b78 <_ZN8touchgfx8TextArea9setHeightEs>:
 8017b78:	b530      	push	{r4, r5, lr}
 8017b7a:	b085      	sub	sp, #20
 8017b7c:	6803      	ldr	r3, [r0, #0]
 8017b7e:	4604      	mov	r4, r0
 8017b80:	8141      	strh	r1, [r0, #10]
 8017b82:	466d      	mov	r5, sp
 8017b84:	4601      	mov	r1, r0
 8017b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017b8a:	343c      	adds	r4, #60	; 0x3c
 8017b8c:	4628      	mov	r0, r5
 8017b8e:	4798      	blx	r3
 8017b90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017b98:	b005      	add	sp, #20
 8017b9a:	bd30      	pop	{r4, r5, pc}

08017b9c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8017b9c:	2200      	movs	r2, #0
 8017b9e:	8002      	strh	r2, [r0, #0]
 8017ba0:	8042      	strh	r2, [r0, #2]
 8017ba2:	8082      	strh	r2, [r0, #4]
 8017ba4:	80c2      	strh	r2, [r0, #6]
 8017ba6:	4770      	bx	lr

08017ba8 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8017ba8:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 8017bac:	4770      	bx	lr
	...

08017bb0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8017bb0:	b570      	push	{r4, r5, r6, lr}
 8017bb2:	6803      	ldr	r3, [r0, #0]
 8017bb4:	4604      	mov	r4, r0
 8017bb6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017bb8:	460d      	mov	r5, r1
 8017bba:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8017bbc:	4b08      	ldr	r3, [pc, #32]	; (8017be0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017bc4:	4b07      	ldr	r3, [pc, #28]	; (8017be4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8017bcc:	6803      	ldr	r3, [r0, #0]
 8017bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bd0:	4798      	blx	r3
 8017bd2:	1a29      	subs	r1, r5, r0
 8017bd4:	4633      	mov	r3, r6
 8017bd6:	4620      	mov	r0, r4
 8017bd8:	b209      	sxth	r1, r1
 8017bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bde:	4718      	bx	r3
 8017be0:	20015144 	.word	0x20015144
 8017be4:	2001514c 	.word	0x2001514c

08017be8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8017be8:	b570      	push	{r4, r5, r6, lr}
 8017bea:	6803      	ldr	r3, [r0, #0]
 8017bec:	4604      	mov	r4, r0
 8017bee:	4615      	mov	r5, r2
 8017bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bf2:	4798      	blx	r3
 8017bf4:	6823      	ldr	r3, [r4, #0]
 8017bf6:	4629      	mov	r1, r5
 8017bf8:	4620      	mov	r0, r4
 8017bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c00:	4718      	bx	r3

08017c02 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8017c02:	2000      	movs	r0, #0
 8017c04:	4770      	bx	lr

08017c06 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8017c06:	2000      	movs	r0, #0
 8017c08:	4770      	bx	lr
	...

08017c0c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8017c0c:	4b07      	ldr	r3, [pc, #28]	; (8017c2c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8017c0e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017c10:	881b      	ldrh	r3, [r3, #0]
 8017c12:	4293      	cmp	r3, r2
 8017c14:	bf81      	itttt	hi
 8017c16:	4b06      	ldrhi	r3, [pc, #24]	; (8017c30 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8017c18:	681b      	ldrhi	r3, [r3, #0]
 8017c1a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8017c1e:	7858      	ldrbhi	r0, [r3, #1]
 8017c20:	bf8c      	ite	hi
 8017c22:	f000 0003 	andhi.w	r0, r0, #3
 8017c26:	2000      	movls	r0, #0
 8017c28:	4770      	bx	lr
 8017c2a:	bf00      	nop
 8017c2c:	20015148 	.word	0x20015148
 8017c30:	20015144 	.word	0x20015144

08017c34 <_ZN8touchgfx8TextAreaD1Ev>:
 8017c34:	4770      	bx	lr
	...

08017c38 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8017c38:	4b11      	ldr	r3, [pc, #68]	; (8017c80 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8017c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c3e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017c40:	4604      	mov	r4, r0
 8017c42:	881b      	ldrh	r3, [r3, #0]
 8017c44:	428b      	cmp	r3, r1
 8017c46:	d918      	bls.n	8017c7a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8017c48:	6803      	ldr	r3, [r0, #0]
 8017c4a:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8017c4c:	4b0d      	ldr	r3, [pc, #52]	; (8017c84 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8017c4e:	6818      	ldr	r0, [r3, #0]
 8017c50:	f7ec f9c8 	bl	8003fe4 <_ZNK8touchgfx5Texts7getTextEt>
 8017c54:	6823      	ldr	r3, [r4, #0]
 8017c56:	4606      	mov	r6, r0
 8017c58:	4620      	mov	r0, r4
 8017c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017c5c:	4798      	blx	r3
 8017c5e:	6823      	ldr	r3, [r4, #0]
 8017c60:	4607      	mov	r7, r0
 8017c62:	4620      	mov	r0, r4
 8017c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017c68:	4798      	blx	r3
 8017c6a:	463a      	mov	r2, r7
 8017c6c:	4603      	mov	r3, r0
 8017c6e:	4631      	mov	r1, r6
 8017c70:	4620      	mov	r0, r4
 8017c72:	46ac      	mov	ip, r5
 8017c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c78:	4760      	bx	ip
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c80:	20015148 	.word	0x20015148
 8017c84:	20015150 	.word	0x20015150

08017c88 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017c88:	4b18      	ldr	r3, [pc, #96]	; (8017cec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017c8a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017c8e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017c90:	4604      	mov	r4, r0
 8017c92:	881b      	ldrh	r3, [r3, #0]
 8017c94:	428b      	cmp	r3, r1
 8017c96:	d926      	bls.n	8017ce6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8017c98:	4b15      	ldr	r3, [pc, #84]	; (8017cf0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017ca0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017ca4:	4b13      	ldr	r3, [pc, #76]	; (8017cf4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017ca6:	7855      	ldrb	r5, [r2, #1]
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8017cae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017cb2:	6833      	ldr	r3, [r6, #0]
 8017cb4:	69df      	ldr	r7, [r3, #28]
 8017cb6:	4b10      	ldr	r3, [pc, #64]	; (8017cf8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017cb8:	6818      	ldr	r0, [r3, #0]
 8017cba:	f7ec f993 	bl	8003fe4 <_ZNK8touchgfx5Texts7getTextEt>
 8017cbe:	6823      	ldr	r3, [r4, #0]
 8017cc0:	4680      	mov	r8, r0
 8017cc2:	4620      	mov	r0, r4
 8017cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017cc6:	4798      	blx	r3
 8017cc8:	6823      	ldr	r3, [r4, #0]
 8017cca:	4681      	mov	r9, r0
 8017ccc:	4620      	mov	r0, r4
 8017cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017cd2:	4798      	blx	r3
 8017cd4:	464b      	mov	r3, r9
 8017cd6:	9000      	str	r0, [sp, #0]
 8017cd8:	4642      	mov	r2, r8
 8017cda:	4629      	mov	r1, r5
 8017cdc:	4630      	mov	r0, r6
 8017cde:	47b8      	blx	r7
 8017ce0:	b003      	add	sp, #12
 8017ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ce6:	2000      	movs	r0, #0
 8017ce8:	e7fa      	b.n	8017ce0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017cea:	bf00      	nop
 8017cec:	20015148 	.word	0x20015148
 8017cf0:	20015144 	.word	0x20015144
 8017cf4:	2001514c 	.word	0x2001514c
 8017cf8:	20015150 	.word	0x20015150

08017cfc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017cfc:	b40e      	push	{r1, r2, r3}
 8017cfe:	4b30      	ldr	r3, [pc, #192]	; (8017dc0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8017d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d04:	881a      	ldrh	r2, [r3, #0]
 8017d06:	b09d      	sub	sp, #116	; 0x74
 8017d08:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017d0a:	4604      	mov	r4, r0
 8017d0c:	429a      	cmp	r2, r3
 8017d0e:	d954      	bls.n	8017dba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8017d10:	aa26      	add	r2, sp, #152	; 0x98
 8017d12:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8017dc4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017d16:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8017dc8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017d1a:	9202      	str	r2, [sp, #8]
 8017d1c:	f8d9 2000 	ldr.w	r2, [r9]
 8017d20:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017d24:	f8d8 3000 	ldr.w	r3, [r8]
 8017d28:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017d2c:	682b      	ldr	r3, [r5, #0]
 8017d2e:	4628      	mov	r0, r5
 8017d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d32:	4798      	blx	r3
 8017d34:	4606      	mov	r6, r0
 8017d36:	b207      	sxth	r7, r0
 8017d38:	a803      	add	r0, sp, #12
 8017d3a:	f003 fd94 	bl	801b866 <_ZN8touchgfx12TextProviderC1Ev>
 8017d3e:	682b      	ldr	r3, [r5, #0]
 8017d40:	4628      	mov	r0, r5
 8017d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d44:	4798      	blx	r3
 8017d46:	682b      	ldr	r3, [r5, #0]
 8017d48:	4682      	mov	sl, r0
 8017d4a:	4628      	mov	r0, r5
 8017d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017d4e:	4798      	blx	r3
 8017d50:	4653      	mov	r3, sl
 8017d52:	9000      	str	r0, [sp, #0]
 8017d54:	a803      	add	r0, sp, #12
 8017d56:	9a02      	ldr	r2, [sp, #8]
 8017d58:	9925      	ldr	r1, [sp, #148]	; 0x94
 8017d5a:	f003 fddf 	bl	801b91c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017d5e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017d60:	f8d9 3000 	ldr.w	r3, [r9]
 8017d64:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8017d68:	8925      	ldrh	r5, [r4, #8]
 8017d6a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8017d6e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017d72:	eba5 050c 	sub.w	r5, r5, ip
 8017d76:	784a      	ldrb	r2, [r1, #1]
 8017d78:	f8d8 3000 	ldr.w	r3, [r8]
 8017d7c:	b22d      	sxth	r5, r5
 8017d7e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8017d82:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017d86:	9500      	str	r5, [sp, #0]
 8017d88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017d8c:	a803      	add	r0, sp, #12
 8017d8e:	f001 fc24 	bl	80195da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017d92:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8017d96:	b203      	sxth	r3, r0
 8017d98:	18b9      	adds	r1, r7, r2
 8017d9a:	2900      	cmp	r1, #0
 8017d9c:	dd0b      	ble.n	8017db6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8017d9e:	3b01      	subs	r3, #1
 8017da0:	fb13 f302 	smulbb	r3, r3, r2
 8017da4:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017da8:	b21f      	sxth	r7, r3
 8017daa:	4638      	mov	r0, r7
 8017dac:	b01d      	add	sp, #116	; 0x74
 8017dae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017db2:	b003      	add	sp, #12
 8017db4:	4770      	bx	lr
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	dcf7      	bgt.n	8017daa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017dba:	2700      	movs	r7, #0
 8017dbc:	e7f5      	b.n	8017daa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017dbe:	bf00      	nop
 8017dc0:	20015148 	.word	0x20015148
 8017dc4:	20015144 	.word	0x20015144
 8017dc8:	2001514c 	.word	0x2001514c

08017dcc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8017dcc:	4bbc      	ldr	r3, [pc, #752]	; (80180c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8017dce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dd2:	460c      	mov	r4, r1
 8017dd4:	881b      	ldrh	r3, [r3, #0]
 8017dd6:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8017dd8:	b0a9      	sub	sp, #164	; 0xa4
 8017dda:	4681      	mov	r9, r0
 8017ddc:	428b      	cmp	r3, r1
 8017dde:	d809      	bhi.n	8017df4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8017de0:	2300      	movs	r3, #0
 8017de2:	f04f 32ff 	mov.w	r2, #4294967295
 8017de6:	6083      	str	r3, [r0, #8]
 8017de8:	e9c0 3200 	strd	r3, r2, [r0]
 8017dec:	4648      	mov	r0, r9
 8017dee:	b029      	add	sp, #164	; 0xa4
 8017df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df4:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 80180c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8017df8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8017dfc:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 80180cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8017e00:	f8db 3000 	ldr.w	r3, [fp]
 8017e04:	f8d8 0000 	ldr.w	r0, [r8]
 8017e08:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8017e0c:	4bad      	ldr	r3, [pc, #692]	; (80180c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017e14:	f7ec f8e6 	bl	8003fe4 <_ZNK8touchgfx5Texts7getTextEt>
 8017e18:	4607      	mov	r7, r0
 8017e1a:	682b      	ldr	r3, [r5, #0]
 8017e1c:	4628      	mov	r0, r5
 8017e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e20:	4798      	blx	r3
 8017e22:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8017e24:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e28:	4430      	add	r0, r6
 8017e2a:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 8017e2e:	b283      	uxth	r3, r0
 8017e30:	4650      	mov	r0, sl
 8017e32:	9302      	str	r3, [sp, #8]
 8017e34:	2e00      	cmp	r6, #0
 8017e36:	f040 8090 	bne.w	8017f5a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8017e3a:	f003 fd14 	bl	801b866 <_ZN8touchgfx12TextProviderC1Ev>
 8017e3e:	682b      	ldr	r3, [r5, #0]
 8017e40:	4628      	mov	r0, r5
 8017e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017e44:	4798      	blx	r3
 8017e46:	682b      	ldr	r3, [r5, #0]
 8017e48:	9005      	str	r0, [sp, #20]
 8017e4a:	4628      	mov	r0, r5
 8017e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017e4e:	4798      	blx	r3
 8017e50:	6823      	ldr	r3, [r4, #0]
 8017e52:	4680      	mov	r8, r0
 8017e54:	4620      	mov	r0, r4
 8017e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017e58:	4798      	blx	r3
 8017e5a:	6822      	ldr	r2, [r4, #0]
 8017e5c:	9004      	str	r0, [sp, #16]
 8017e5e:	4620      	mov	r0, r4
 8017e60:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8017e64:	4790      	blx	r2
 8017e66:	9905      	ldr	r1, [sp, #20]
 8017e68:	9b04      	ldr	r3, [sp, #16]
 8017e6a:	460a      	mov	r2, r1
 8017e6c:	4639      	mov	r1, r7
 8017e6e:	4637      	mov	r7, r6
 8017e70:	9001      	str	r0, [sp, #4]
 8017e72:	9300      	str	r3, [sp, #0]
 8017e74:	4650      	mov	r0, sl
 8017e76:	4643      	mov	r3, r8
 8017e78:	f003 fd65 	bl	801b946 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017e7c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017e7e:	4629      	mov	r1, r5
 8017e80:	f8db 3000 	ldr.w	r3, [fp]
 8017e84:	4650      	mov	r0, sl
 8017e86:	3601      	adds	r6, #1
 8017e88:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017e8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8017e90:	b2b6      	uxth	r6, r6
 8017e92:	785b      	ldrb	r3, [r3, #1]
 8017e94:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017e98:	f001 f8f0 	bl	801907c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017e9c:	4287      	cmp	r7, r0
 8017e9e:	bfb8      	it	lt
 8017ea0:	b207      	sxthlt	r7, r0
 8017ea2:	4650      	mov	r0, sl
 8017ea4:	f003 fd06 	bl	801b8b4 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8017ea8:	2800      	cmp	r0, #0
 8017eaa:	d0e7      	beq.n	8017e7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 8017eac:	9b02      	ldr	r3, [sp, #8]
 8017eae:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 8017eb2:	fb13 f606 	smulbb	r6, r3, r6
 8017eb6:	eba6 0608 	sub.w	r6, r6, r8
 8017eba:	b2b6      	uxth	r6, r6
 8017ebc:	fa0f f886 	sxth.w	r8, r6
 8017ec0:	f1b8 0f00 	cmp.w	r8, #0
 8017ec4:	dd06      	ble.n	8017ed4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 8017ec6:	682b      	ldr	r3, [r5, #0]
 8017ec8:	4628      	mov	r0, r5
 8017eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ecc:	4798      	blx	r3
 8017ece:	4430      	add	r0, r6
 8017ed0:	fa0f f880 	sxth.w	r8, r0
 8017ed4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017ed8:	4620      	mov	r0, r4
 8017eda:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017ede:	6823      	ldr	r3, [r4, #0]
 8017ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ee2:	bf0c      	ite	eq
 8017ee4:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8017ee8:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 8017eec:	4798      	blx	r3
 8017eee:	2801      	cmp	r0, #1
 8017ef0:	b2ba      	uxth	r2, r7
 8017ef2:	f000 80d2 	beq.w	801809a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 8017ef6:	2802      	cmp	r0, #2
 8017ef8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8017efc:	f000 80d3 	beq.w	80180a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8017f00:	b21e      	sxth	r6, r3
 8017f02:	7a29      	ldrb	r1, [r5, #8]
 8017f04:	7a6d      	ldrb	r5, [r5, #9]
 8017f06:	1a76      	subs	r6, r6, r1
 8017f08:	4429      	add	r1, r5
 8017f0a:	b2b3      	uxth	r3, r6
 8017f0c:	440a      	add	r2, r1
 8017f0e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8017f12:	b21f      	sxth	r7, r3
 8017f14:	b292      	uxth	r2, r2
 8017f16:	2902      	cmp	r1, #2
 8017f18:	b216      	sxth	r6, r2
 8017f1a:	f000 80c7 	beq.w	80180ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 8017f1e:	2903      	cmp	r1, #3
 8017f20:	f000 80d6 	beq.w	80180d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8017f24:	2901      	cmp	r1, #1
 8017f26:	f040 80dc 	bne.w	80180e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 8017f2a:	8923      	ldrh	r3, [r4, #8]
 8017f2c:	4632      	mov	r2, r6
 8017f2e:	463d      	mov	r5, r7
 8017f30:	4646      	mov	r6, r8
 8017f32:	eba3 0308 	sub.w	r3, r3, r8
 8017f36:	4690      	mov	r8, r2
 8017f38:	b21f      	sxth	r7, r3
 8017f3a:	9b03      	ldr	r3, [sp, #12]
 8017f3c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017f3e:	6818      	ldr	r0, [r3, #0]
 8017f40:	f7ec f850 	bl	8003fe4 <_ZNK8touchgfx5Texts7getTextEt>
 8017f44:	f8a9 7000 	strh.w	r7, [r9]
 8017f48:	f8a9 5002 	strh.w	r5, [r9, #2]
 8017f4c:	f8a9 6004 	strh.w	r6, [r9, #4]
 8017f50:	f8a9 8006 	strh.w	r8, [r9, #6]
 8017f54:	f8c9 0008 	str.w	r0, [r9, #8]
 8017f58:	e748      	b.n	8017dec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8017f5a:	f003 fc84 	bl	801b866 <_ZN8touchgfx12TextProviderC1Ev>
 8017f5e:	682b      	ldr	r3, [r5, #0]
 8017f60:	4628      	mov	r0, r5
 8017f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f64:	4798      	blx	r3
 8017f66:	682b      	ldr	r3, [r5, #0]
 8017f68:	4606      	mov	r6, r0
 8017f6a:	4628      	mov	r0, r5
 8017f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017f6e:	4798      	blx	r3
 8017f70:	6823      	ldr	r3, [r4, #0]
 8017f72:	4680      	mov	r8, r0
 8017f74:	4620      	mov	r0, r4
 8017f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017f78:	4798      	blx	r3
 8017f7a:	6822      	ldr	r2, [r4, #0]
 8017f7c:	9004      	str	r0, [sp, #16]
 8017f7e:	4620      	mov	r0, r4
 8017f80:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8017f84:	4790      	blx	r2
 8017f86:	9b04      	ldr	r3, [sp, #16]
 8017f88:	4632      	mov	r2, r6
 8017f8a:	9001      	str	r0, [sp, #4]
 8017f8c:	9300      	str	r3, [sp, #0]
 8017f8e:	4639      	mov	r1, r7
 8017f90:	4643      	mov	r3, r8
 8017f92:	4650      	mov	r0, sl
 8017f94:	f003 fcd7 	bl	801b946 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017f98:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017f9c:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8017fa0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017fa4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017fa8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017faa:	bf0a      	itet	eq
 8017fac:	4642      	moveq	r2, r8
 8017fae:	461a      	movne	r2, r3
 8017fb0:	4698      	moveq	r8, r3
 8017fb2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8017fb6:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8017fba:	1ad2      	subs	r2, r2, r3
 8017fbc:	f8db 3000 	ldr.w	r3, [fp]
 8017fc0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017fc4:	7859      	ldrb	r1, [r3, #1]
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	f8cd a020 	str.w	sl, [sp, #32]
 8017fcc:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8017fd0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017fd4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8017fd8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017fdc:	950a      	str	r5, [sp, #40]	; 0x28
 8017fde:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8017fe2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017fe6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8017fea:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017fee:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8017ff2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017ff6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8017ffa:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017ffe:	b350      	cbz	r0, 8018056 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8018000:	682b      	ldr	r3, [r5, #0]
 8018002:	4628      	mov	r0, r5
 8018004:	695b      	ldr	r3, [r3, #20]
 8018006:	4798      	blx	r3
 8018008:	4607      	mov	r7, r0
 801800a:	b320      	cbz	r0, 8018056 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801800c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801800e:	4639      	mov	r1, r7
 8018010:	6803      	ldr	r3, [r0, #0]
 8018012:	68db      	ldr	r3, [r3, #12]
 8018014:	4798      	blx	r3
 8018016:	4606      	mov	r6, r0
 8018018:	b1e8      	cbz	r0, 8018056 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801801a:	7b43      	ldrb	r3, [r0, #13]
 801801c:	7a82      	ldrb	r2, [r0, #10]
 801801e:	005b      	lsls	r3, r3, #1
 8018020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018024:	4313      	orrs	r3, r2
 8018026:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801802a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801802e:	2b04      	cmp	r3, #4
 8018030:	d111      	bne.n	8018056 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8018032:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018034:	4632      	mov	r2, r6
 8018036:	4639      	mov	r1, r7
 8018038:	6803      	ldr	r3, [r0, #0]
 801803a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801803c:	4798      	blx	r3
 801803e:	7b73      	ldrb	r3, [r6, #13]
 8018040:	005b      	lsls	r3, r3, #1
 8018042:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018046:	7ab3      	ldrb	r3, [r6, #10]
 8018048:	4313      	orrs	r3, r2
 801804a:	4418      	add	r0, r3
 801804c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018050:	4418      	add	r0, r3
 8018052:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8018056:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801805a:	2600      	movs	r6, #0
 801805c:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8018060:	4637      	mov	r7, r6
 8018062:	45c3      	cmp	fp, r8
 8018064:	a807      	add	r0, sp, #28
 8018066:	f106 0601 	add.w	r6, r6, #1
 801806a:	bfd4      	ite	le
 801806c:	2100      	movle	r1, #0
 801806e:	2101      	movgt	r1, #1
 8018070:	f001 f9e4 	bl	801943c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8018074:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8018078:	b2b6      	uxth	r6, r6
 801807a:	429f      	cmp	r7, r3
 801807c:	bfb8      	it	lt
 801807e:	b21f      	sxthlt	r7, r3
 8018080:	9b02      	ldr	r3, [sp, #8]
 8018082:	eba8 0803 	sub.w	r8, r8, r3
 8018086:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801808a:	fa0f f888 	sxth.w	r8, r8
 801808e:	2b00      	cmp	r3, #0
 8018090:	f43f af0c 	beq.w	8017eac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8018094:	45c2      	cmp	sl, r8
 8018096:	dbe4      	blt.n	8018062 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 8018098:	e708      	b.n	8017eac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801809a:	1bf6      	subs	r6, r6, r7
 801809c:	2702      	movs	r7, #2
 801809e:	fb96 f6f7 	sdiv	r6, r6, r7
 80180a2:	b236      	sxth	r6, r6
 80180a4:	e72d      	b.n	8017f02 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 80180a6:	4413      	add	r3, r2
 80180a8:	1af6      	subs	r6, r6, r3
 80180aa:	e7fa      	b.n	80180a2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 80180ac:	8925      	ldrh	r5, [r4, #8]
 80180ae:	1aad      	subs	r5, r5, r2
 80180b0:	1aed      	subs	r5, r5, r3
 80180b2:	b22f      	sxth	r7, r5
 80180b4:	8965      	ldrh	r5, [r4, #10]
 80180b6:	eba5 0508 	sub.w	r5, r5, r8
 80180ba:	b22d      	sxth	r5, r5
 80180bc:	e73d      	b.n	8017f3a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80180be:	bf00      	nop
 80180c0:	20015148 	.word	0x20015148
 80180c4:	2001514c 	.word	0x2001514c
 80180c8:	20015144 	.word	0x20015144
 80180cc:	20015150 	.word	0x20015150
 80180d0:	8965      	ldrh	r5, [r4, #10]
 80180d2:	2700      	movs	r7, #0
 80180d4:	1aad      	subs	r5, r5, r2
 80180d6:	1aed      	subs	r5, r5, r3
 80180d8:	4633      	mov	r3, r6
 80180da:	4646      	mov	r6, r8
 80180dc:	b22d      	sxth	r5, r5
 80180de:	4698      	mov	r8, r3
 80180e0:	e72b      	b.n	8017f3a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80180e2:	2500      	movs	r5, #0
 80180e4:	e729      	b.n	8017f3a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 80180e6:	bf00      	nop

080180e8 <_ZN8touchgfx8TextAreaD0Ev>:
 80180e8:	b510      	push	{r4, lr}
 80180ea:	4604      	mov	r4, r0
 80180ec:	2148      	movs	r1, #72	; 0x48
 80180ee:	f010 f9cf 	bl	8028490 <_ZdlPvj>
 80180f2:	4620      	mov	r0, r4
 80180f4:	bd10      	pop	{r4, pc}
	...

080180f8 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80180f8:	b513      	push	{r0, r1, r4, lr}
 80180fa:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80180fe:	4604      	mov	r4, r0
 8018100:	b1fb      	cbz	r3, 8018142 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018102:	4b16      	ldr	r3, [pc, #88]	; (801815c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8018104:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018106:	881b      	ldrh	r3, [r3, #0]
 8018108:	428b      	cmp	r3, r1
 801810a:	d91a      	bls.n	8018142 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801810c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018110:	2b00      	cmp	r3, #0
 8018112:	dd16      	ble.n	8018142 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018114:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018118:	2b00      	cmp	r3, #0
 801811a:	dd12      	ble.n	8018142 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801811c:	4b10      	ldr	r3, [pc, #64]	; (8018160 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801811e:	6818      	ldr	r0, [r3, #0]
 8018120:	f7eb ff60 	bl	8003fe4 <_ZNK8touchgfx5Texts7getTextEt>
 8018124:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8018128:	6822      	ldr	r2, [r4, #0]
 801812a:	2b00      	cmp	r3, #0
 801812c:	db06      	blt.n	801813c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801812e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8018132:	2b00      	cmp	r3, #0
 8018134:	db02      	blt.n	801813c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8018136:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018138:	4298      	cmp	r0, r3
 801813a:	d004      	beq.n	8018146 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801813c:	6953      	ldr	r3, [r2, #20]
 801813e:	4620      	mov	r0, r4
 8018140:	4798      	blx	r3
 8018142:	b002      	add	sp, #8
 8018144:	bd10      	pop	{r4, pc}
 8018146:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801814a:	466b      	mov	r3, sp
 801814c:	6912      	ldr	r2, [r2, #16]
 801814e:	c903      	ldmia	r1, {r0, r1}
 8018150:	e883 0003 	stmia.w	r3, {r0, r1}
 8018154:	4619      	mov	r1, r3
 8018156:	4620      	mov	r0, r4
 8018158:	4790      	blx	r2
 801815a:	e7f2      	b.n	8018142 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801815c:	20015148 	.word	0x20015148
 8018160:	20015150 	.word	0x20015150

08018164 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018164:	4b45      	ldr	r3, [pc, #276]	; (801827c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8018166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801816a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801816c:	b08e      	sub	sp, #56	; 0x38
 801816e:	881b      	ldrh	r3, [r3, #0]
 8018170:	4604      	mov	r4, r0
 8018172:	4293      	cmp	r3, r2
 8018174:	d97e      	bls.n	8018274 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018176:	6808      	ldr	r0, [r1, #0]
 8018178:	ab05      	add	r3, sp, #20
 801817a:	6849      	ldr	r1, [r1, #4]
 801817c:	4d40      	ldr	r5, [pc, #256]	; (8018280 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801817e:	c303      	stmia	r3!, {r0, r1}
 8018180:	4611      	mov	r1, r2
 8018182:	6828      	ldr	r0, [r5, #0]
 8018184:	f7eb ff2e 	bl	8003fe4 <_ZNK8touchgfx5Texts7getTextEt>
 8018188:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801818c:	2b00      	cmp	r3, #0
 801818e:	db11      	blt.n	80181b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018190:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8018194:	2b00      	cmp	r3, #0
 8018196:	db0d      	blt.n	80181b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018198:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801819a:	4298      	cmp	r0, r3
 801819c:	d10a      	bne.n	80181b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801819e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80181a2:	ab09      	add	r3, sp, #36	; 0x24
 80181a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80181a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80181ac:	4619      	mov	r1, r3
 80181ae:	a805      	add	r0, sp, #20
 80181b0:	f7fe fca8 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 80181b4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	dd5b      	ble.n	8018274 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80181bc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	dd57      	ble.n	8018274 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80181c4:	4f2f      	ldr	r7, [pc, #188]	; (8018284 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 80181c6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80181c8:	683b      	ldr	r3, [r7, #0]
 80181ca:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80181ce:	4b2e      	ldr	r3, [pc, #184]	; (8018288 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80181d6:	2e00      	cmp	r6, #0
 80181d8:	d04c      	beq.n	8018274 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80181da:	6823      	ldr	r3, [r4, #0]
 80181dc:	4620      	mov	r0, r4
 80181de:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 80181e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181e4:	4798      	blx	r3
 80181e6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 80181ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80181f2:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 80181f6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80181fa:	785b      	ldrb	r3, [r3, #1]
 80181fc:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8018200:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018204:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018206:	9609      	str	r6, [sp, #36]	; 0x24
 8018208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801820c:	4b1f      	ldr	r3, [pc, #124]	; (801828c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801820e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8018218:	910b      	str	r1, [sp, #44]	; 0x2c
 801821a:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801821e:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8018222:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8018226:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801822a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801822e:	b10a      	cbz	r2, 8018234 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8018230:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8018232:	b906      	cbnz	r6, 8018236 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8018234:	689e      	ldr	r6, [r3, #8]
 8018236:	af07      	add	r7, sp, #28
 8018238:	4621      	mov	r1, r4
 801823a:	4638      	mov	r0, r7
 801823c:	f002 ff2c 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018240:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018242:	6828      	ldr	r0, [r5, #0]
 8018244:	f7eb fece 	bl	8003fe4 <_ZNK8touchgfx5Texts7getTextEt>
 8018248:	6823      	ldr	r3, [r4, #0]
 801824a:	4605      	mov	r5, r0
 801824c:	4620      	mov	r0, r4
 801824e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018250:	4798      	blx	r3
 8018252:	6823      	ldr	r3, [r4, #0]
 8018254:	4680      	mov	r8, r0
 8018256:	4620      	mov	r0, r4
 8018258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801825c:	4798      	blx	r3
 801825e:	ab09      	add	r3, sp, #36	; 0x24
 8018260:	9501      	str	r5, [sp, #4]
 8018262:	9300      	str	r3, [sp, #0]
 8018264:	ab05      	add	r3, sp, #20
 8018266:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801826a:	4630      	mov	r0, r6
 801826c:	e897 0006 	ldmia.w	r7, {r1, r2}
 8018270:	f7eb fe6a 	bl	8003f48 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018274:	b00e      	add	sp, #56	; 0x38
 8018276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801827a:	bf00      	nop
 801827c:	20015148 	.word	0x20015148
 8018280:	20015150 	.word	0x20015150
 8018284:	20015144 	.word	0x20015144
 8018288:	2001514c 	.word	0x2001514c
 801828c:	200150f4 	.word	0x200150f4

08018290 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8018290:	b570      	push	{r4, r5, r6, lr}
 8018292:	6803      	ldr	r3, [r0, #0]
 8018294:	4604      	mov	r4, r0
 8018296:	4615      	mov	r5, r2
 8018298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801829a:	4798      	blx	r3
 801829c:	6823      	ldr	r3, [r4, #0]
 801829e:	4629      	mov	r1, r5
 80182a0:	4620      	mov	r0, r4
 80182a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182a8:	4718      	bx	r3
	...

080182ac <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80182ac:	b538      	push	{r3, r4, r5, lr}
 80182ae:	4b0e      	ldr	r3, [pc, #56]	; (80182e8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80182b0:	4604      	mov	r4, r0
 80182b2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80182b4:	881b      	ldrh	r3, [r3, #0]
 80182b6:	429a      	cmp	r2, r3
 80182b8:	d214      	bcs.n	80182e4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80182ba:	6803      	ldr	r3, [r0, #0]
 80182bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80182be:	4798      	blx	r3
 80182c0:	6823      	ldr	r3, [r4, #0]
 80182c2:	4605      	mov	r5, r0
 80182c4:	4620      	mov	r0, r4
 80182c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182c8:	4798      	blx	r3
 80182ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80182ce:	b22d      	sxth	r5, r5
 80182d0:	4601      	mov	r1, r0
 80182d2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80182d6:	bf06      	itte	eq
 80182d8:	4602      	moveq	r2, r0
 80182da:	4629      	moveq	r1, r5
 80182dc:	462a      	movne	r2, r5
 80182de:	4620      	mov	r0, r4
 80182e0:	f7ff ffd6 	bl	8018290 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80182e4:	bd38      	pop	{r3, r4, r5, pc}
 80182e6:	bf00      	nop
 80182e8:	20015148 	.word	0x20015148

080182ec <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80182ec:	b530      	push	{r4, r5, lr}
 80182ee:	888b      	ldrh	r3, [r1, #4]
 80182f0:	b085      	sub	sp, #20
 80182f2:	4604      	mov	r4, r0
 80182f4:	8583      	strh	r3, [r0, #44]	; 0x2c
 80182f6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80182fa:	b923      	cbnz	r3, 8018306 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80182fc:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018300:	b90b      	cbnz	r3, 8018306 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8018302:	f7ff ffd3 	bl	80182ac <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018306:	6823      	ldr	r3, [r4, #0]
 8018308:	466d      	mov	r5, sp
 801830a:	4621      	mov	r1, r4
 801830c:	343c      	adds	r4, #60	; 0x3c
 801830e:	4628      	mov	r0, r5
 8018310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018314:	4798      	blx	r3
 8018316:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801831a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801831e:	b005      	add	sp, #20
 8018320:	bd30      	pop	{r4, r5, pc}

08018322 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018322:	2300      	movs	r3, #0
 8018324:	8083      	strh	r3, [r0, #4]
 8018326:	80c3      	strh	r3, [r0, #6]
 8018328:	8003      	strh	r3, [r0, #0]
 801832a:	8043      	strh	r3, [r0, #2]
 801832c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018330:	2bff      	cmp	r3, #255	; 0xff
 8018332:	bf01      	itttt	eq
 8018334:	890b      	ldrheq	r3, [r1, #8]
 8018336:	8083      	strheq	r3, [r0, #4]
 8018338:	894b      	ldrheq	r3, [r1, #10]
 801833a:	80c3      	strheq	r3, [r0, #6]
 801833c:	4770      	bx	lr
	...

08018340 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018342:	4604      	mov	r4, r0
 8018344:	466b      	mov	r3, sp
 8018346:	6808      	ldr	r0, [r1, #0]
 8018348:	6849      	ldr	r1, [r1, #4]
 801834a:	c303      	stmia	r3!, {r0, r1}
 801834c:	6823      	ldr	r3, [r4, #0]
 801834e:	4669      	mov	r1, sp
 8018350:	4620      	mov	r0, r4
 8018352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018354:	4798      	blx	r3
 8018356:	4b08      	ldr	r3, [pc, #32]	; (8018378 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801835e:	b10a      	cbz	r2, 8018364 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018360:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018362:	b900      	cbnz	r0, 8018366 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018364:	6898      	ldr	r0, [r3, #8]
 8018366:	6803      	ldr	r3, [r0, #0]
 8018368:	4669      	mov	r1, sp
 801836a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801836c:	6a1d      	ldr	r5, [r3, #32]
 801836e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018372:	47a8      	blx	r5
 8018374:	b003      	add	sp, #12
 8018376:	bd30      	pop	{r4, r5, pc}
 8018378:	200150f4 	.word	0x200150f4

0801837c <_ZN8touchgfx3BoxD1Ev>:
 801837c:	4770      	bx	lr

0801837e <_ZN8touchgfx3BoxD0Ev>:
 801837e:	b510      	push	{r4, lr}
 8018380:	4604      	mov	r4, r0
 8018382:	212c      	movs	r1, #44	; 0x2c
 8018384:	f010 f884 	bl	8028490 <_ZdlPvj>
 8018388:	4620      	mov	r0, r4
 801838a:	bd10      	pop	{r4, pc}

0801838c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801838c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8018390:	b12a      	cbz	r2, 801839e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018392:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8018396:	b112      	cbz	r2, 801839e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018398:	6803      	ldr	r3, [r0, #0]
 801839a:	695b      	ldr	r3, [r3, #20]
 801839c:	4718      	bx	r3
 801839e:	4770      	bx	lr

080183a0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80183a0:	b570      	push	{r4, r5, r6, lr}
 80183a2:	880b      	ldrh	r3, [r1, #0]
 80183a4:	4605      	mov	r5, r0
 80183a6:	4604      	mov	r4, r0
 80183a8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80183aa:	8813      	ldrh	r3, [r2, #0]
 80183ac:	f825 3f30 	strh.w	r3, [r5, #48]!
 80183b0:	4628      	mov	r0, r5
 80183b2:	f004 fa6b 	bl	801c88c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80183b6:	4606      	mov	r6, r0
 80183b8:	4628      	mov	r0, r5
 80183ba:	f004 fa9b 	bl	801c8f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80183be:	6823      	ldr	r3, [r4, #0]
 80183c0:	4605      	mov	r5, r0
 80183c2:	4631      	mov	r1, r6
 80183c4:	4620      	mov	r0, r4
 80183c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183c8:	4798      	blx	r3
 80183ca:	6823      	ldr	r3, [r4, #0]
 80183cc:	4629      	mov	r1, r5
 80183ce:	4620      	mov	r0, r4
 80183d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80183d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183d6:	4718      	bx	r3

080183d8 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80183d8:	b510      	push	{r4, lr}
 80183da:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80183de:	4604      	mov	r4, r0
 80183e0:	2bff      	cmp	r3, #255	; 0xff
 80183e2:	d006      	beq.n	80183f2 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80183e4:	2300      	movs	r3, #0
 80183e6:	8003      	strh	r3, [r0, #0]
 80183e8:	8043      	strh	r3, [r0, #2]
 80183ea:	8083      	strh	r3, [r0, #4]
 80183ec:	80c3      	strh	r3, [r0, #6]
 80183ee:	4620      	mov	r0, r4
 80183f0:	bd10      	pop	{r4, pc}
 80183f2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80183f6:	b11b      	cbz	r3, 8018400 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80183f8:	3130      	adds	r1, #48	; 0x30
 80183fa:	f004 faaf 	bl	801c95c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80183fe:	e7f6      	b.n	80183ee <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8018400:	312e      	adds	r1, #46	; 0x2e
 8018402:	e7fa      	b.n	80183fa <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08018404 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8018404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018408:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801840c:	b08a      	sub	sp, #40	; 0x28
 801840e:	4604      	mov	r4, r0
 8018410:	4688      	mov	r8, r1
 8018412:	2b00      	cmp	r3, #0
 8018414:	d066      	beq.n	80184e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8018416:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018418:	a805      	add	r0, sp, #20
 801841a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801841e:	f004 fa35 	bl	801c88c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018422:	4607      	mov	r7, r0
 8018424:	a805      	add	r0, sp, #20
 8018426:	f004 fa65 	bl	801c8f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801842a:	f9b8 6000 	ldrsh.w	r6, [r8]
 801842e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8018432:	2300      	movs	r3, #0
 8018434:	4432      	add	r2, r6
 8018436:	9306      	str	r3, [sp, #24]
 8018438:	b292      	uxth	r2, r2
 801843a:	fa0f fc82 	sxth.w	ip, r2
 801843e:	459c      	cmp	ip, r3
 8018440:	dd52      	ble.n	80184e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8018442:	42b7      	cmp	r7, r6
 8018444:	dd50      	ble.n	80184e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8018446:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801844a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801844e:	442b      	add	r3, r5
 8018450:	b29b      	uxth	r3, r3
 8018452:	b219      	sxth	r1, r3
 8018454:	2900      	cmp	r1, #0
 8018456:	dd47      	ble.n	80184e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8018458:	42a8      	cmp	r0, r5
 801845a:	dd45      	ble.n	80184e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801845c:	4567      	cmp	r7, ip
 801845e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8018462:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8018466:	bfb8      	it	lt
 8018468:	b2ba      	uxthlt	r2, r7
 801846a:	4288      	cmp	r0, r1
 801846c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8018470:	bfb8      	it	lt
 8018472:	b283      	uxthlt	r3, r0
 8018474:	1b92      	subs	r2, r2, r6
 8018476:	f8ad 501a 	strh.w	r5, [sp, #26]
 801847a:	1b5b      	subs	r3, r3, r5
 801847c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8018480:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018484:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801848c:	429a      	cmp	r2, r3
 801848e:	d026      	beq.n	80184de <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018490:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018494:	2b00      	cmp	r3, #0
 8018496:	dd22      	ble.n	80184de <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8018498:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801849c:	2b00      	cmp	r3, #0
 801849e:	dd1e      	ble.n	80184de <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80184a0:	2300      	movs	r3, #0
 80184a2:	a908      	add	r1, sp, #32
 80184a4:	4620      	mov	r0, r4
 80184a6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80184aa:	6823      	ldr	r3, [r4, #0]
 80184ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184ae:	4798      	blx	r3
 80184b0:	4b0f      	ldr	r3, [pc, #60]	; (80184f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80184b8:	b10a      	cbz	r2, 80184be <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80184ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80184bc:	b900      	cbnz	r0, 80184c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80184be:	6898      	ldr	r0, [r3, #8]
 80184c0:	2501      	movs	r5, #1
 80184c2:	6801      	ldr	r1, [r0, #0]
 80184c4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80184c8:	9502      	str	r5, [sp, #8]
 80184ca:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80184ce:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80184d2:	9401      	str	r4, [sp, #4]
 80184d4:	ac06      	add	r4, sp, #24
 80184d6:	9400      	str	r4, [sp, #0]
 80184d8:	688c      	ldr	r4, [r1, #8]
 80184da:	a905      	add	r1, sp, #20
 80184dc:	47a0      	blx	r4
 80184de:	b00a      	add	sp, #40	; 0x28
 80184e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184e4:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80184e6:	e797      	b.n	8018418 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80184e8:	2300      	movs	r3, #0
 80184ea:	9307      	str	r3, [sp, #28]
 80184ec:	e7ca      	b.n	8018484 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 80184ee:	bf00      	nop
 80184f0:	200150f4 	.word	0x200150f4

080184f4 <_ZN8touchgfx5ImageD1Ev>:
 80184f4:	4770      	bx	lr

080184f6 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80184f6:	b570      	push	{r4, r5, r6, lr}
 80184f8:	880b      	ldrh	r3, [r1, #0]
 80184fa:	460d      	mov	r5, r1
 80184fc:	4604      	mov	r4, r0
 80184fe:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018500:	4608      	mov	r0, r1
 8018502:	f004 f9c3 	bl	801c88c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018506:	4606      	mov	r6, r0
 8018508:	4628      	mov	r0, r5
 801850a:	f004 f9f3 	bl	801c8f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801850e:	6823      	ldr	r3, [r4, #0]
 8018510:	4605      	mov	r5, r0
 8018512:	4631      	mov	r1, r6
 8018514:	4620      	mov	r0, r4
 8018516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018518:	4798      	blx	r3
 801851a:	6823      	ldr	r3, [r4, #0]
 801851c:	4629      	mov	r1, r5
 801851e:	4620      	mov	r0, r4
 8018520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018526:	4718      	bx	r3

08018528 <_ZN8touchgfx5ImageD0Ev>:
 8018528:	b510      	push	{r4, lr}
 801852a:	4604      	mov	r4, r0
 801852c:	212c      	movs	r1, #44	; 0x2c
 801852e:	f00f ffaf 	bl	8028490 <_ZdlPvj>
 8018532:	4620      	mov	r0, r4
 8018534:	bd10      	pop	{r4, pc}

08018536 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8018536:	b510      	push	{r4, lr}
 8018538:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801853c:	4604      	mov	r4, r0
 801853e:	2bff      	cmp	r3, #255	; 0xff
 8018540:	d006      	beq.n	8018550 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8018542:	2300      	movs	r3, #0
 8018544:	8003      	strh	r3, [r0, #0]
 8018546:	8043      	strh	r3, [r0, #2]
 8018548:	8083      	strh	r3, [r0, #4]
 801854a:	80c3      	strh	r3, [r0, #6]
 801854c:	4620      	mov	r0, r4
 801854e:	bd10      	pop	{r4, pc}
 8018550:	3126      	adds	r1, #38	; 0x26
 8018552:	f004 fa03 	bl	801c95c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018556:	e7f9      	b.n	801854c <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08018558 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8018558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801855c:	4604      	mov	r4, r0
 801855e:	b088      	sub	sp, #32
 8018560:	2500      	movs	r5, #0
 8018562:	460f      	mov	r7, r1
 8018564:	f854 3b26 	ldr.w	r3, [r4], #38
 8018568:	a904      	add	r1, sp, #16
 801856a:	4606      	mov	r6, r0
 801856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801856e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8018572:	4798      	blx	r3
 8018574:	4620      	mov	r0, r4
 8018576:	f004 f989 	bl	801c88c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801857a:	4680      	mov	r8, r0
 801857c:	4620      	mov	r0, r4
 801857e:	f004 f9b9 	bl	801c8f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018582:	9506      	str	r5, [sp, #24]
 8018584:	ad06      	add	r5, sp, #24
 8018586:	f8ad 001e 	strh.w	r0, [sp, #30]
 801858a:	4639      	mov	r1, r7
 801858c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018590:	4628      	mov	r0, r5
 8018592:	f7fe fab7 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 8018596:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801859a:	2b00      	cmp	r3, #0
 801859c:	dd19      	ble.n	80185d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801859e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	dd15      	ble.n	80185d2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80185a6:	4b0c      	ldr	r3, [pc, #48]	; (80185d8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80185ae:	b10a      	cbz	r2, 80185b4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80185b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80185b2:	b900      	cbnz	r0, 80185b6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80185b4:	6898      	ldr	r0, [r3, #8]
 80185b6:	2701      	movs	r7, #1
 80185b8:	6801      	ldr	r1, [r0, #0]
 80185ba:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80185be:	9702      	str	r7, [sp, #8]
 80185c0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80185c4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80185c8:	e9cd 5600 	strd	r5, r6, [sp]
 80185cc:	688d      	ldr	r5, [r1, #8]
 80185ce:	4621      	mov	r1, r4
 80185d0:	47a8      	blx	r5
 80185d2:	b008      	add	sp, #32
 80185d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185d8:	200150f4 	.word	0x200150f4

080185dc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80185dc:	b510      	push	{r4, lr}
 80185de:	6803      	ldr	r3, [r0, #0]
 80185e0:	460c      	mov	r4, r1
 80185e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185e4:	4798      	blx	r3
 80185e6:	1b03      	subs	r3, r0, r4
 80185e8:	4258      	negs	r0, r3
 80185ea:	4158      	adcs	r0, r3
 80185ec:	bd10      	pop	{r4, pc}
	...

080185f0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80185f0:	4b01      	ldr	r3, [pc, #4]	; (80185f8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80185f2:	6019      	str	r1, [r3, #0]
 80185f4:	4770      	bx	lr
 80185f6:	bf00      	nop
 80185f8:	200150fc 	.word	0x200150fc

080185fc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80185fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018600:	4696      	mov	lr, r2
 8018602:	b097      	sub	sp, #92	; 0x5c
 8018604:	4605      	mov	r5, r0
 8018606:	4614      	mov	r4, r2
 8018608:	460e      	mov	r6, r1
 801860a:	461f      	mov	r7, r3
 801860c:	f10d 0c1c 	add.w	ip, sp, #28
 8018610:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8018614:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8018618:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801861c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018624:	f8de 3000 	ldr.w	r3, [lr]
 8018628:	f104 0e14 	add.w	lr, r4, #20
 801862c:	f8cc 3000 	str.w	r3, [ip]
 8018630:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018634:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018638:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801863c:	f8de 3000 	ldr.w	r3, [lr]
 8018640:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018644:	f8cc 3000 	str.w	r3, [ip]
 8018648:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801864c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018650:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018654:	f8de 3000 	ldr.w	r3, [lr]
 8018658:	4631      	mov	r1, r6
 801865a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801865c:	4628      	mov	r0, r5
 801865e:	f8cc 3000 	str.w	r3, [ip]
 8018662:	682b      	ldr	r3, [r5, #0]
 8018664:	9201      	str	r2, [sp, #4]
 8018666:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018668:	f8cd 8008 	str.w	r8, [sp, #8]
 801866c:	9200      	str	r2, [sp, #0]
 801866e:	aa07      	add	r2, sp, #28
 8018670:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8018674:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8018678:	463b      	mov	r3, r7
 801867a:	47d8      	blx	fp
 801867c:	46a6      	mov	lr, r4
 801867e:	f10d 0c1c 	add.w	ip, sp, #28
 8018682:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801868a:	f8de 3000 	ldr.w	r3, [lr]
 801868e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8018692:	343c      	adds	r4, #60	; 0x3c
 8018694:	f8cc 3000 	str.w	r3, [ip]
 8018698:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801869c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80186a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186a4:	f8de 3000 	ldr.w	r3, [lr]
 80186a8:	f8cc 3000 	str.w	r3, [ip]
 80186ac:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80186b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186b6:	6823      	ldr	r3, [r4, #0]
 80186b8:	4631      	mov	r1, r6
 80186ba:	4628      	mov	r0, r5
 80186bc:	f8cc 3000 	str.w	r3, [ip]
 80186c0:	682b      	ldr	r3, [r5, #0]
 80186c2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80186c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80186c8:	f8cd 8008 	str.w	r8, [sp, #8]
 80186cc:	9201      	str	r2, [sp, #4]
 80186ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80186d0:	9200      	str	r2, [sp, #0]
 80186d2:	aa07      	add	r2, sp, #28
 80186d4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80186d6:	463b      	mov	r3, r7
 80186d8:	47a0      	blx	r4
 80186da:	b017      	add	sp, #92	; 0x5c
 80186dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80186e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186e4:	b08d      	sub	sp, #52	; 0x34
 80186e6:	4688      	mov	r8, r1
 80186e8:	f8d3 c000 	ldr.w	ip, [r3]
 80186ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80186ee:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80186f2:	680f      	ldr	r7, [r1, #0]
 80186f4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80186f8:	eba7 070c 	sub.w	r7, r7, ip
 80186fc:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8018700:	edd3 6a07 	vldr	s13, [r3, #28]
 8018704:	42bc      	cmp	r4, r7
 8018706:	9918      	ldr	r1, [sp, #96]	; 0x60
 8018708:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801870c:	bfa8      	it	ge
 801870e:	463c      	movge	r4, r7
 8018710:	f9b1 9000 	ldrsh.w	r9, [r1]
 8018714:	f9ba 1000 	ldrsh.w	r1, [sl]
 8018718:	ee07 4a90 	vmov	s15, r4
 801871c:	eb09 0e0c 	add.w	lr, r9, ip
 8018720:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8018724:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8018728:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801872c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8018730:	4571      	cmp	r1, lr
 8018732:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018736:	ee65 4a24 	vmul.f32	s9, s10, s9
 801873a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801873e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018742:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018746:	ee32 1a05 	vadd.f32	s2, s4, s10
 801874a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801874e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8018752:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018756:	ee22 2a07 	vmul.f32	s4, s4, s14
 801875a:	f340 808c 	ble.w	8018876 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801875e:	eba1 060e 	sub.w	r6, r1, lr
 8018762:	fb96 f5f4 	sdiv	r5, r6, r4
 8018766:	ee07 5a10 	vmov	s14, r5
 801876a:	2d00      	cmp	r5, #0
 801876c:	fb04 6615 	mls	r6, r4, r5, r6
 8018770:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018774:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018778:	eee7 0a24 	vfma.f32	s1, s14, s9
 801877c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8018780:	dd12      	ble.n	80187a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8018782:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018786:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801878a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801878e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018796:	bf14      	ite	ne
 8018798:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801879c:	eeb0 7a67 	vmoveq.f32	s14, s15
 80187a0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80187a4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80187a8:	fb05 f204 	mul.w	r2, r5, r4
 80187ac:	1abf      	subs	r7, r7, r2
 80187ae:	4494      	add	ip, r2
 80187b0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80187b4:	4411      	add	r1, r2
 80187b6:	eb09 020c 	add.w	r2, r9, ip
 80187ba:	b209      	sxth	r1, r1
 80187bc:	443a      	add	r2, r7
 80187be:	428a      	cmp	r2, r1
 80187c0:	bfc4      	itt	gt
 80187c2:	eba1 0209 	subgt.w	r2, r1, r9
 80187c6:	eba2 070c 	subgt.w	r7, r2, ip
 80187ca:	2f00      	cmp	r7, #0
 80187cc:	dd50      	ble.n	8018870 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80187ce:	fb97 f1f4 	sdiv	r1, r7, r4
 80187d2:	fb04 7211 	mls	r2, r4, r1, r7
 80187d6:	b90a      	cbnz	r2, 80187dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80187d8:	3901      	subs	r1, #1
 80187da:	4622      	mov	r2, r4
 80187dc:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80187e0:	6840      	ldr	r0, [r0, #4]
 80187e2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80187e6:	44b6      	add	lr, r6
 80187e8:	f8d0 a000 	ldr.w	sl, [r0]
 80187ec:	2900      	cmp	r1, #0
 80187ee:	bfcc      	ite	gt
 80187f0:	46a1      	movgt	r9, r4
 80187f2:	4691      	movle	r9, r2
 80187f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80187f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80187f8:	fb04 e505 	mla	r5, r4, r5, lr
 80187fc:	eef0 6a42 	vmov.f32	s13, s4
 8018800:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8018804:	9008      	str	r0, [sp, #32]
 8018806:	eeb0 7a61 	vmov.f32	s14, s3
 801880a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801880c:	695b      	ldr	r3, [r3, #20]
 801880e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018812:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8018816:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801881a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801881c:	445b      	add	r3, fp
 801881e:	9307      	str	r3, [sp, #28]
 8018820:	ee16 3a90 	vmov	r3, s13
 8018824:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8018828:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801882c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8018830:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018834:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018838:	ee17 7a90 	vmov	r7, s15
 801883c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8018840:	fb97 f7f4 	sdiv	r7, r7, r4
 8018844:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018848:	ee17 ca90 	vmov	ip, s15
 801884c:	fb9c fcf4 	sdiv	ip, ip, r4
 8018850:	fb0c 3306 	mla	r3, ip, r6, r3
 8018854:	9302      	str	r3, [sp, #8]
 8018856:	ee17 3a10 	vmov	r3, s14
 801885a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801885e:	fb07 3706 	mla	r7, r7, r6, r3
 8018862:	eba9 0306 	sub.w	r3, r9, r6
 8018866:	e9cd 4700 	strd	r4, r7, [sp]
 801886a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801886e:	47a0      	blx	r4
 8018870:	b00d      	add	sp, #52	; 0x34
 8018872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018876:	2500      	movs	r5, #0
 8018878:	462e      	mov	r6, r5
 801887a:	e799      	b.n	80187b0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801887c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018880:	b0db      	sub	sp, #364	; 0x16c
 8018882:	461d      	mov	r5, r3
 8018884:	4614      	mov	r4, r2
 8018886:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801888a:	910f      	str	r1, [sp, #60]	; 0x3c
 801888c:	4629      	mov	r1, r5
 801888e:	930a      	str	r3, [sp, #40]	; 0x28
 8018890:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8018894:	9009      	str	r0, [sp, #36]	; 0x24
 8018896:	930b      	str	r3, [sp, #44]	; 0x2c
 8018898:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801889c:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80188a0:	9310      	str	r3, [sp, #64]	; 0x40
 80188a2:	6803      	ldr	r3, [r0, #0]
 80188a4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80188a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80188aa:	47b8      	blx	r7
 80188ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188ae:	6058      	str	r0, [r3, #4]
 80188b0:	2800      	cmp	r0, #0
 80188b2:	f000 83a1 	beq.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188b6:	682b      	ldr	r3, [r5, #0]
 80188b8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80188bc:	ed94 7a02 	vldr	s14, [r4, #8]
 80188c0:	9314      	str	r3, [sp, #80]	; 0x50
 80188c2:	686b      	ldr	r3, [r5, #4]
 80188c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188c8:	9315      	str	r3, [sp, #84]	; 0x54
 80188ca:	4bc1      	ldr	r3, [pc, #772]	; (8018bd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80188cc:	7819      	ldrb	r1, [r3, #0]
 80188ce:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80188d2:	2900      	cmp	r1, #0
 80188d4:	bf16      	itet	ne
 80188d6:	4619      	movne	r1, r3
 80188d8:	4611      	moveq	r1, r2
 80188da:	4613      	movne	r3, r2
 80188dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e0:	9116      	str	r1, [sp, #88]	; 0x58
 80188e2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80188e6:	f240 8387 	bls.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188ea:	ed94 7a07 	vldr	s14, [r4, #28]
 80188ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188f6:	f240 837f 	bls.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80188fa:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80188fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018906:	f240 8377 	bls.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801890a:	6822      	ldr	r2, [r4, #0]
 801890c:	4bb1      	ldr	r3, [pc, #708]	; (8018bd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801890e:	429a      	cmp	r2, r3
 8018910:	f2c0 8372 	blt.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018914:	49b0      	ldr	r1, [pc, #704]	; (8018bd8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8018916:	6963      	ldr	r3, [r4, #20]
 8018918:	428a      	cmp	r2, r1
 801891a:	f300 836d 	bgt.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801891e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018922:	48ae      	ldr	r0, [pc, #696]	; (8018bdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8018924:	33ff      	adds	r3, #255	; 0xff
 8018926:	4283      	cmp	r3, r0
 8018928:	f200 8366 	bhi.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801892c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801892e:	4dac      	ldr	r5, [pc, #688]	; (8018be0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8018930:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018934:	33ff      	adds	r3, #255	; 0xff
 8018936:	42ab      	cmp	r3, r5
 8018938:	f200 835e 	bhi.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801893c:	6862      	ldr	r2, [r4, #4]
 801893e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8018942:	33ff      	adds	r3, #255	; 0xff
 8018944:	4283      	cmp	r3, r0
 8018946:	f200 8357 	bhi.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801894a:	69a1      	ldr	r1, [r4, #24]
 801894c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8018950:	33ff      	adds	r3, #255	; 0xff
 8018952:	4283      	cmp	r3, r0
 8018954:	f200 8350 	bhi.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018958:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801895a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801895e:	30ff      	adds	r0, #255	; 0xff
 8018960:	42a8      	cmp	r0, r5
 8018962:	f200 8349 	bhi.w	8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018966:	428a      	cmp	r2, r1
 8018968:	f280 8110 	bge.w	8018b8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801896c:	429a      	cmp	r2, r3
 801896e:	f300 8119 	bgt.w	8018ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8018972:	4299      	cmp	r1, r3
 8018974:	f280 811d 	bge.w	8018bb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018978:	2502      	movs	r5, #2
 801897a:	2701      	movs	r7, #1
 801897c:	46a9      	mov	r9, r5
 801897e:	46b8      	mov	r8, r7
 8018980:	f04f 0a00 	mov.w	sl, #0
 8018984:	4621      	mov	r1, r4
 8018986:	a849      	add	r0, sp, #292	; 0x124
 8018988:	f003 fcb8 	bl	801c2fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801898c:	4622      	mov	r2, r4
 801898e:	4653      	mov	r3, sl
 8018990:	a949      	add	r1, sp, #292	; 0x124
 8018992:	f8cd 9000 	str.w	r9, [sp]
 8018996:	a819      	add	r0, sp, #100	; 0x64
 8018998:	f003 fde0 	bl	801c55c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801899c:	4622      	mov	r2, r4
 801899e:	4653      	mov	r3, sl
 80189a0:	a949      	add	r1, sp, #292	; 0x124
 80189a2:	f8cd 8000 	str.w	r8, [sp]
 80189a6:	a829      	add	r0, sp, #164	; 0xa4
 80189a8:	f003 fdd8 	bl	801c55c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80189ac:	4643      	mov	r3, r8
 80189ae:	4622      	mov	r2, r4
 80189b0:	a949      	add	r1, sp, #292	; 0x124
 80189b2:	f8cd 9000 	str.w	r9, [sp]
 80189b6:	a839      	add	r0, sp, #228	; 0xe4
 80189b8:	f003 fdd0 	bl	801c55c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80189bc:	42af      	cmp	r7, r5
 80189be:	af12      	add	r7, sp, #72	; 0x48
 80189c0:	bfb7      	itett	lt
 80189c2:	2300      	movlt	r3, #0
 80189c4:	2301      	movge	r3, #1
 80189c6:	ad29      	addlt	r5, sp, #164	; 0xa4
 80189c8:	ac19      	addlt	r4, sp, #100	; 0x64
 80189ca:	bfb1      	iteee	lt
 80189cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80189ce:	ad19      	addge	r5, sp, #100	; 0x64
 80189d0:	930e      	strge	r3, [sp, #56]	; 0x38
 80189d2:	ac29      	addge	r4, sp, #164	; 0xa4
 80189d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80189da:	e887 0003 	stmia.w	r7, {r0, r1}
 80189de:	b928      	cbnz	r0, 80189ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80189e0:	4b80      	ldr	r3, [pc, #512]	; (8018be4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80189e2:	6818      	ldr	r0, [r3, #0]
 80189e4:	6803      	ldr	r3, [r0, #0]
 80189e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189e8:	4798      	blx	r3
 80189ea:	6038      	str	r0, [r7, #0]
 80189ec:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80189ee:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80189f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80189f6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80189f8:	930c      	str	r3, [sp, #48]	; 0x30
 80189fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80189fc:	6963      	ldr	r3, [r4, #20]
 80189fe:	440b      	add	r3, r1
 8018a00:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018a04:	4408      	add	r0, r1
 8018a06:	b200      	sxth	r0, r0
 8018a08:	4283      	cmp	r3, r0
 8018a0a:	900d      	str	r0, [sp, #52]	; 0x34
 8018a0c:	f280 80dd 	bge.w	8018bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8018a10:	428b      	cmp	r3, r1
 8018a12:	da08      	bge.n	8018a26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018a14:	2a00      	cmp	r2, #0
 8018a16:	dd06      	ble.n	8018a26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018a18:	1acb      	subs	r3, r1, r3
 8018a1a:	429a      	cmp	r2, r3
 8018a1c:	f2c0 80e4 	blt.w	8018be8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	f300 80e2 	bgt.w	8018bea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018a26:	6967      	ldr	r7, [r4, #20]
 8018a28:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a2e:	443b      	add	r3, r7
 8018a30:	461f      	mov	r7, r3
 8018a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a34:	1bdf      	subs	r7, r3, r7
 8018a36:	4297      	cmp	r7, r2
 8018a38:	bfa8      	it	ge
 8018a3a:	4617      	movge	r7, r2
 8018a3c:	2f00      	cmp	r7, #0
 8018a3e:	f340 8166 	ble.w	8018d0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018a42:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018a44:	6829      	ldr	r1, [r5, #0]
 8018a46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a4a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018a4e:	4411      	add	r1, r2
 8018a50:	6820      	ldr	r0, [r4, #0]
 8018a52:	4299      	cmp	r1, r3
 8018a54:	dd1a      	ble.n	8018a8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018a56:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018a5a:	4402      	add	r2, r0
 8018a5c:	440b      	add	r3, r1
 8018a5e:	b21b      	sxth	r3, r3
 8018a60:	429a      	cmp	r2, r3
 8018a62:	dc13      	bgt.n	8018a8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a66:	a912      	add	r1, sp, #72	; 0x48
 8018a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	9206      	str	r2, [sp, #24]
 8018a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018a72:	9500      	str	r5, [sp, #0]
 8018a74:	9205      	str	r2, [sp, #20]
 8018a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018a78:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018a7c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018a7e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018a82:	aa49      	add	r2, sp, #292	; 0x124
 8018a84:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8018a88:	4623      	mov	r3, r4
 8018a8a:	47c8      	blx	r9
 8018a8c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018a90:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018a94:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018a98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018a9c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018aa0:	68a1      	ldr	r1, [r4, #8]
 8018aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018aa6:	ed94 6a08 	vldr	s12, [r4, #32]
 8018aaa:	edd4 6a07 	vldr	s13, [r4, #28]
 8018aae:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018ab2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018ab6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018aba:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018abe:	edc4 6a07 	vstr	s13, [r4, #28]
 8018ac2:	441a      	add	r2, r3
 8018ac4:	6963      	ldr	r3, [r4, #20]
 8018ac6:	3301      	adds	r3, #1
 8018ac8:	6022      	str	r2, [r4, #0]
 8018aca:	6163      	str	r3, [r4, #20]
 8018acc:	69a3      	ldr	r3, [r4, #24]
 8018ace:	3b01      	subs	r3, #1
 8018ad0:	61a3      	str	r3, [r4, #24]
 8018ad2:	6923      	ldr	r3, [r4, #16]
 8018ad4:	440b      	add	r3, r1
 8018ad6:	68e1      	ldr	r1, [r4, #12]
 8018ad8:	428b      	cmp	r3, r1
 8018ada:	6123      	str	r3, [r4, #16]
 8018adc:	db15      	blt.n	8018b0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018ade:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018ae2:	3201      	adds	r2, #1
 8018ae4:	1a5b      	subs	r3, r3, r1
 8018ae6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018aea:	6022      	str	r2, [r4, #0]
 8018aec:	6123      	str	r3, [r4, #16]
 8018aee:	edc4 6a07 	vstr	s13, [r4, #28]
 8018af2:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018af6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018afa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018afe:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b06:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018b0a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018b0e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018b12:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018b16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b1a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018b1e:	68a9      	ldr	r1, [r5, #8]
 8018b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b24:	ed95 6a08 	vldr	s12, [r5, #32]
 8018b28:	edd5 6a07 	vldr	s13, [r5, #28]
 8018b2c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018b30:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018b34:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018b38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018b3c:	edc5 6a07 	vstr	s13, [r5, #28]
 8018b40:	441a      	add	r2, r3
 8018b42:	696b      	ldr	r3, [r5, #20]
 8018b44:	3301      	adds	r3, #1
 8018b46:	602a      	str	r2, [r5, #0]
 8018b48:	616b      	str	r3, [r5, #20]
 8018b4a:	69ab      	ldr	r3, [r5, #24]
 8018b4c:	3b01      	subs	r3, #1
 8018b4e:	61ab      	str	r3, [r5, #24]
 8018b50:	692b      	ldr	r3, [r5, #16]
 8018b52:	440b      	add	r3, r1
 8018b54:	68e9      	ldr	r1, [r5, #12]
 8018b56:	428b      	cmp	r3, r1
 8018b58:	612b      	str	r3, [r5, #16]
 8018b5a:	db15      	blt.n	8018b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018b5c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018b60:	3201      	adds	r2, #1
 8018b62:	1a5b      	subs	r3, r3, r1
 8018b64:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018b68:	602a      	str	r2, [r5, #0]
 8018b6a:	612b      	str	r3, [r5, #16]
 8018b6c:	edc5 6a07 	vstr	s13, [r5, #28]
 8018b70:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018b74:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018b78:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018b7c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018b84:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018b88:	3f01      	subs	r7, #1
 8018b8a:	e757      	b.n	8018a3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018b8c:	4299      	cmp	r1, r3
 8018b8e:	dc13      	bgt.n	8018bb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018b90:	429a      	cmp	r2, r3
 8018b92:	da14      	bge.n	8018bbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018b94:	2502      	movs	r5, #2
 8018b96:	2703      	movs	r7, #3
 8018b98:	f04f 0800 	mov.w	r8, #0
 8018b9c:	46a9      	mov	r9, r5
 8018b9e:	f04f 0a01 	mov.w	sl, #1
 8018ba2:	e6ef      	b.n	8018984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018ba4:	2501      	movs	r5, #1
 8018ba6:	2700      	movs	r7, #0
 8018ba8:	46a9      	mov	r9, r5
 8018baa:	46b8      	mov	r8, r7
 8018bac:	f04f 0a02 	mov.w	sl, #2
 8018bb0:	e6e8      	b.n	8018984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018bb2:	2501      	movs	r5, #1
 8018bb4:	2702      	movs	r7, #2
 8018bb6:	e6e1      	b.n	801897c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018bb8:	2500      	movs	r5, #0
 8018bba:	2701      	movs	r7, #1
 8018bbc:	e7f4      	b.n	8018ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018bbe:	2702      	movs	r7, #2
 8018bc0:	2503      	movs	r5, #3
 8018bc2:	f04f 0900 	mov.w	r9, #0
 8018bc6:	46b8      	mov	r8, r7
 8018bc8:	e7e9      	b.n	8018b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018bca:	4613      	mov	r3, r2
 8018bcc:	e728      	b.n	8018a20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018bce:	bf00      	nop
 8018bd0:	200150ec 	.word	0x200150ec
 8018bd4:	fffd8f01 	.word	0xfffd8f01
 8018bd8:	00027100 	.word	0x00027100
 8018bdc:	0004e1ff 	.word	0x0004e1ff
 8018be0:	0004e1fe 	.word	0x0004e1fe
 8018be4:	200150f4 	.word	0x200150f4
 8018be8:	4613      	mov	r3, r2
 8018bea:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018bec:	469e      	mov	lr, r3
 8018bee:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8018bf0:	469c      	mov	ip, r3
 8018bf2:	9111      	str	r1, [sp, #68]	; 0x44
 8018bf4:	f04f 0900 	mov.w	r9, #0
 8018bf8:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8018bfc:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8018c00:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018c04:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018c08:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018c0c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8018c10:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018c14:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018c18:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018c1c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8018c20:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018c24:	f1bc 0f00 	cmp.w	ip, #0
 8018c28:	d147      	bne.n	8018cba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018c2a:	eb03 0c07 	add.w	ip, r3, r7
 8018c2e:	1ad7      	subs	r7, r2, r3
 8018c30:	f1b9 0f00 	cmp.w	r9, #0
 8018c34:	d009      	beq.n	8018c4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018c36:	9029      	str	r0, [sp, #164]	; 0xa4
 8018c38:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018c3c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8018c40:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018c44:	912d      	str	r1, [sp, #180]	; 0xb4
 8018c46:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018c4a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018c4c:	f04f 0800 	mov.w	r8, #0
 8018c50:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018c54:	9111      	str	r1, [sp, #68]	; 0x44
 8018c56:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018c5a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018c5e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018c62:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018c66:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018c6a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018c6e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018c72:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018c76:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018c7a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018c7e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018c82:	f1be 0f00 	cmp.w	lr, #0
 8018c86:	d031      	beq.n	8018cec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018c88:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018c8a:	4450      	add	r0, sl
 8018c8c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018c90:	4431      	add	r1, r6
 8018c92:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018c96:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018c9a:	4549      	cmp	r1, r9
 8018c9c:	db08      	blt.n	8018cb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8018c9e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018ca2:	3001      	adds	r0, #1
 8018ca4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018ca8:	eba1 0109 	sub.w	r1, r1, r9
 8018cac:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018cb0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018cb4:	f04f 0801 	mov.w	r8, #1
 8018cb8:	e7e3      	b.n	8018c82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018cba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018cbc:	4450      	add	r0, sl
 8018cbe:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018cc2:	4431      	add	r1, r6
 8018cc4:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018cc8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018ccc:	4541      	cmp	r1, r8
 8018cce:	db08      	blt.n	8018ce2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8018cd0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018cd4:	3001      	adds	r0, #1
 8018cd6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018cda:	eba1 0108 	sub.w	r1, r1, r8
 8018cde:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018ce2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018ce6:	f04f 0901 	mov.w	r9, #1
 8018cea:	e79b      	b.n	8018c24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018cec:	449c      	add	ip, r3
 8018cee:	1aff      	subs	r7, r7, r3
 8018cf0:	f1b8 0f00 	cmp.w	r8, #0
 8018cf4:	d009      	beq.n	8018d0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018cf6:	9019      	str	r0, [sp, #100]	; 0x64
 8018cf8:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018cfc:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018d00:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018d04:	911d      	str	r1, [sp, #116]	; 0x74
 8018d06:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018d0a:	1ad2      	subs	r2, r2, r3
 8018d0c:	e68b      	b.n	8018a26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d10:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	f000 80d1 	beq.w	8018eba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018d18:	ad19      	add	r5, sp, #100	; 0x64
 8018d1a:	ac39      	add	r4, sp, #228	; 0xe4
 8018d1c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018d1e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018d22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d26:	930c      	str	r3, [sp, #48]	; 0x30
 8018d28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018d2a:	6963      	ldr	r3, [r4, #20]
 8018d2c:	440b      	add	r3, r1
 8018d2e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018d32:	4408      	add	r0, r1
 8018d34:	b200      	sxth	r0, r0
 8018d36:	4283      	cmp	r3, r0
 8018d38:	900d      	str	r0, [sp, #52]	; 0x34
 8018d3a:	f280 80c1 	bge.w	8018ec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8018d3e:	428b      	cmp	r3, r1
 8018d40:	da08      	bge.n	8018d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d42:	2a00      	cmp	r2, #0
 8018d44:	dd06      	ble.n	8018d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018d46:	1acb      	subs	r3, r1, r3
 8018d48:	429a      	cmp	r2, r3
 8018d4a:	f2c0 80bb 	blt.w	8018ec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	f300 80b9 	bgt.w	8018ec6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018d54:	6967      	ldr	r7, [r4, #20]
 8018d56:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018d5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d5c:	443b      	add	r3, r7
 8018d5e:	461f      	mov	r7, r3
 8018d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d62:	1bdf      	subs	r7, r3, r7
 8018d64:	4297      	cmp	r7, r2
 8018d66:	bfa8      	it	ge
 8018d68:	4617      	movge	r7, r2
 8018d6a:	2f00      	cmp	r7, #0
 8018d6c:	f340 813c 	ble.w	8018fe8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018d70:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018d72:	6829      	ldr	r1, [r5, #0]
 8018d74:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d78:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018d7c:	4411      	add	r1, r2
 8018d7e:	6820      	ldr	r0, [r4, #0]
 8018d80:	4299      	cmp	r1, r3
 8018d82:	dd1a      	ble.n	8018dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018d84:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018d88:	4402      	add	r2, r0
 8018d8a:	440b      	add	r3, r1
 8018d8c:	b21b      	sxth	r3, r3
 8018d8e:	429a      	cmp	r2, r3
 8018d90:	dc13      	bgt.n	8018dba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018d92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d94:	a912      	add	r1, sp, #72	; 0x48
 8018d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	9206      	str	r2, [sp, #24]
 8018d9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018da0:	9500      	str	r5, [sp, #0]
 8018da2:	9205      	str	r2, [sp, #20]
 8018da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018da6:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018daa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018dac:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018db0:	aa49      	add	r2, sp, #292	; 0x124
 8018db2:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8018db6:	4623      	mov	r3, r4
 8018db8:	47c8      	blx	r9
 8018dba:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018dbe:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018dc2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018dc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018dca:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018dce:	68a1      	ldr	r1, [r4, #8]
 8018dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018dd4:	ed94 6a08 	vldr	s12, [r4, #32]
 8018dd8:	edd4 6a07 	vldr	s13, [r4, #28]
 8018ddc:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018de0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018de4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018de8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018dec:	edc4 6a07 	vstr	s13, [r4, #28]
 8018df0:	441a      	add	r2, r3
 8018df2:	6963      	ldr	r3, [r4, #20]
 8018df4:	3301      	adds	r3, #1
 8018df6:	6022      	str	r2, [r4, #0]
 8018df8:	6163      	str	r3, [r4, #20]
 8018dfa:	69a3      	ldr	r3, [r4, #24]
 8018dfc:	3b01      	subs	r3, #1
 8018dfe:	61a3      	str	r3, [r4, #24]
 8018e00:	6923      	ldr	r3, [r4, #16]
 8018e02:	440b      	add	r3, r1
 8018e04:	68e1      	ldr	r1, [r4, #12]
 8018e06:	428b      	cmp	r3, r1
 8018e08:	6123      	str	r3, [r4, #16]
 8018e0a:	db15      	blt.n	8018e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018e0c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018e10:	3201      	adds	r2, #1
 8018e12:	1a5b      	subs	r3, r3, r1
 8018e14:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018e18:	6022      	str	r2, [r4, #0]
 8018e1a:	6123      	str	r3, [r4, #16]
 8018e1c:	edc4 6a07 	vstr	s13, [r4, #28]
 8018e20:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018e24:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018e28:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018e2c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018e34:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018e38:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018e3c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018e40:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e48:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018e4c:	68a9      	ldr	r1, [r5, #8]
 8018e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e52:	ed95 6a08 	vldr	s12, [r5, #32]
 8018e56:	edd5 6a07 	vldr	s13, [r5, #28]
 8018e5a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018e5e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018e62:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018e66:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018e6a:	edc5 6a07 	vstr	s13, [r5, #28]
 8018e6e:	441a      	add	r2, r3
 8018e70:	696b      	ldr	r3, [r5, #20]
 8018e72:	3301      	adds	r3, #1
 8018e74:	602a      	str	r2, [r5, #0]
 8018e76:	616b      	str	r3, [r5, #20]
 8018e78:	69ab      	ldr	r3, [r5, #24]
 8018e7a:	3b01      	subs	r3, #1
 8018e7c:	61ab      	str	r3, [r5, #24]
 8018e7e:	692b      	ldr	r3, [r5, #16]
 8018e80:	440b      	add	r3, r1
 8018e82:	68e9      	ldr	r1, [r5, #12]
 8018e84:	428b      	cmp	r3, r1
 8018e86:	612b      	str	r3, [r5, #16]
 8018e88:	db15      	blt.n	8018eb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018e8a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018e8e:	3201      	adds	r2, #1
 8018e90:	1a5b      	subs	r3, r3, r1
 8018e92:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018e96:	602a      	str	r2, [r5, #0]
 8018e98:	612b      	str	r3, [r5, #16]
 8018e9a:	edc5 6a07 	vstr	s13, [r5, #28]
 8018e9e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018ea2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018ea6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018eaa:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018eb2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018eb6:	3f01      	subs	r7, #1
 8018eb8:	e757      	b.n	8018d6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018eba:	ad39      	add	r5, sp, #228	; 0xe4
 8018ebc:	ac19      	add	r4, sp, #100	; 0x64
 8018ebe:	e72d      	b.n	8018d1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8018ec0:	4613      	mov	r3, r2
 8018ec2:	e744      	b.n	8018d4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018ec4:	4613      	mov	r3, r2
 8018ec6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8018ec8:	469e      	mov	lr, r3
 8018eca:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8018ece:	461f      	mov	r7, r3
 8018ed0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8018ed4:	f04f 0900 	mov.w	r9, #0
 8018ed8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8018edc:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8018ee0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8018ee4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8018ee8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8018eec:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8018eee:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8018ef2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018ef6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018efa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8018efe:	960e      	str	r6, [sp, #56]	; 0x38
 8018f00:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018f04:	2f00      	cmp	r7, #0
 8018f06:	d146      	bne.n	8018f96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018f08:	449c      	add	ip, r3
 8018f0a:	1ad7      	subs	r7, r2, r3
 8018f0c:	f1b9 0f00 	cmp.w	r9, #0
 8018f10:	d009      	beq.n	8018f26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018f12:	9039      	str	r0, [sp, #228]	; 0xe4
 8018f14:	913d      	str	r1, [sp, #244]	; 0xf4
 8018f16:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018f1a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8018f1e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8018f22:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018f26:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018f28:	f04f 0800 	mov.w	r8, #0
 8018f2c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018f30:	910e      	str	r1, [sp, #56]	; 0x38
 8018f32:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018f36:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018f3a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018f3e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018f42:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018f46:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018f4a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018f4e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018f52:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018f56:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018f5a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018f5e:	f1be 0f00 	cmp.w	lr, #0
 8018f62:	d030      	beq.n	8018fc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8018f64:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018f66:	4450      	add	r0, sl
 8018f68:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018f6c:	4431      	add	r1, r6
 8018f6e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018f72:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018f76:	4549      	cmp	r1, r9
 8018f78:	db08      	blt.n	8018f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8018f7a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018f7e:	3001      	adds	r0, #1
 8018f80:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018f84:	eba1 0109 	sub.w	r1, r1, r9
 8018f88:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018f8c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018f90:	f04f 0801 	mov.w	r8, #1
 8018f94:	e7e3      	b.n	8018f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8018f96:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018f98:	4450      	add	r0, sl
 8018f9a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018f9e:	4431      	add	r1, r6
 8018fa0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018fa4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018fa8:	4541      	cmp	r1, r8
 8018faa:	db08      	blt.n	8018fbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8018fac:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018fb0:	3001      	adds	r0, #1
 8018fb2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018fb6:	eba1 0108 	sub.w	r1, r1, r8
 8018fba:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018fbe:	3f01      	subs	r7, #1
 8018fc0:	f04f 0901 	mov.w	r9, #1
 8018fc4:	e79e      	b.n	8018f04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8018fc6:	449c      	add	ip, r3
 8018fc8:	1aff      	subs	r7, r7, r3
 8018fca:	f1b8 0f00 	cmp.w	r8, #0
 8018fce:	d009      	beq.n	8018fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8018fd0:	9019      	str	r0, [sp, #100]	; 0x64
 8018fd2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018fd6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018fda:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018fde:	911d      	str	r1, [sp, #116]	; 0x74
 8018fe0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018fe4:	1ad2      	subs	r2, r2, r3
 8018fe6:	e6b5      	b.n	8018d54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	b923      	cbnz	r3, 8018ff8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018fee:	4b04      	ldr	r3, [pc, #16]	; (8019000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8018ff0:	6818      	ldr	r0, [r3, #0]
 8018ff2:	6803      	ldr	r3, [r0, #0]
 8018ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ff6:	4798      	blx	r3
 8018ff8:	b05b      	add	sp, #364	; 0x16c
 8018ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ffe:	bf00      	nop
 8019000:	200150f4 	.word	0x200150f4

08019004 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019004:	b570      	push	{r4, r5, r6, lr}
 8019006:	4604      	mov	r4, r0
 8019008:	2500      	movs	r5, #0
 801900a:	9804      	ldr	r0, [sp, #16]
 801900c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8019010:	8025      	strh	r5, [r4, #0]
 8019012:	6061      	str	r1, [r4, #4]
 8019014:	7223      	strb	r3, [r4, #8]
 8019016:	7266      	strb	r6, [r4, #9]
 8019018:	60e0      	str	r0, [r4, #12]
 801901a:	8222      	strh	r2, [r4, #16]
 801901c:	8265      	strh	r5, [r4, #18]
 801901e:	82a5      	strh	r5, [r4, #20]
 8019020:	82e5      	strh	r5, [r4, #22]
 8019022:	8325      	strh	r5, [r4, #24]
 8019024:	8365      	strh	r5, [r4, #26]
 8019026:	83a5      	strh	r5, [r4, #28]
 8019028:	77a5      	strb	r5, [r4, #30]
 801902a:	b32e      	cbz	r6, 8019078 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801902c:	6803      	ldr	r3, [r0, #0]
 801902e:	695b      	ldr	r3, [r3, #20]
 8019030:	4798      	blx	r3
 8019032:	4606      	mov	r6, r0
 8019034:	b300      	cbz	r0, 8019078 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019036:	68e0      	ldr	r0, [r4, #12]
 8019038:	4631      	mov	r1, r6
 801903a:	6803      	ldr	r3, [r0, #0]
 801903c:	68db      	ldr	r3, [r3, #12]
 801903e:	4798      	blx	r3
 8019040:	4605      	mov	r5, r0
 8019042:	b1c8      	cbz	r0, 8019078 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019044:	7b43      	ldrb	r3, [r0, #13]
 8019046:	7a82      	ldrb	r2, [r0, #10]
 8019048:	005b      	lsls	r3, r3, #1
 801904a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801904e:	4313      	orrs	r3, r2
 8019050:	83a3      	strh	r3, [r4, #28]
 8019052:	7a63      	ldrb	r3, [r4, #9]
 8019054:	2b04      	cmp	r3, #4
 8019056:	d10f      	bne.n	8019078 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019058:	68e0      	ldr	r0, [r4, #12]
 801905a:	462a      	mov	r2, r5
 801905c:	4631      	mov	r1, r6
 801905e:	6803      	ldr	r3, [r0, #0]
 8019060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019062:	4798      	blx	r3
 8019064:	7b6b      	ldrb	r3, [r5, #13]
 8019066:	005b      	lsls	r3, r3, #1
 8019068:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801906c:	7aab      	ldrb	r3, [r5, #10]
 801906e:	4313      	orrs	r3, r2
 8019070:	4418      	add	r0, r3
 8019072:	8ba3      	ldrh	r3, [r4, #28]
 8019074:	4418      	add	r0, r3
 8019076:	83a0      	strh	r0, [r4, #28]
 8019078:	4620      	mov	r0, r4
 801907a:	bd70      	pop	{r4, r5, r6, pc}

0801907c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801907c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019080:	2400      	movs	r4, #0
 8019082:	b085      	sub	sp, #20
 8019084:	4681      	mov	r9, r0
 8019086:	4688      	mov	r8, r1
 8019088:	4692      	mov	sl, r2
 801908a:	469b      	mov	fp, r3
 801908c:	4627      	mov	r7, r4
 801908e:	4625      	mov	r5, r4
 8019090:	4626      	mov	r6, r4
 8019092:	4554      	cmp	r4, sl
 8019094:	da2a      	bge.n	80190ec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019096:	2300      	movs	r3, #0
 8019098:	9303      	str	r3, [sp, #12]
 801909a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801909e:	429d      	cmp	r5, r3
 80190a0:	d004      	beq.n	80190ac <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80190a2:	f242 030b 	movw	r3, #8203	; 0x200b
 80190a6:	429d      	cmp	r5, r3
 80190a8:	bf18      	it	ne
 80190aa:	462f      	movne	r7, r5
 80190ac:	ab03      	add	r3, sp, #12
 80190ae:	4642      	mov	r2, r8
 80190b0:	4659      	mov	r1, fp
 80190b2:	4648      	mov	r0, r9
 80190b4:	f002 ff38 	bl	801bf28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80190b8:	4605      	mov	r5, r0
 80190ba:	b1b8      	cbz	r0, 80190ec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80190bc:	280a      	cmp	r0, #10
 80190be:	d015      	beq.n	80190ec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80190c0:	9a03      	ldr	r2, [sp, #12]
 80190c2:	b18a      	cbz	r2, 80190e8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80190c4:	7b50      	ldrb	r0, [r2, #13]
 80190c6:	4639      	mov	r1, r7
 80190c8:	7a93      	ldrb	r3, [r2, #10]
 80190ca:	0040      	lsls	r0, r0, #1
 80190cc:	8895      	ldrh	r5, [r2, #4]
 80190ce:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80190d2:	4303      	orrs	r3, r0
 80190d4:	4640      	mov	r0, r8
 80190d6:	9301      	str	r3, [sp, #4]
 80190d8:	f8d8 3000 	ldr.w	r3, [r8]
 80190dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80190de:	4798      	blx	r3
 80190e0:	9b01      	ldr	r3, [sp, #4]
 80190e2:	4418      	add	r0, r3
 80190e4:	4406      	add	r6, r0
 80190e6:	b2b6      	uxth	r6, r6
 80190e8:	3401      	adds	r4, #1
 80190ea:	e7d2      	b.n	8019092 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80190ec:	4630      	mov	r0, r6
 80190ee:	b005      	add	sp, #20
 80190f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80190f4:	2a02      	cmp	r2, #2
 80190f6:	b530      	push	{r4, r5, lr}
 80190f8:	d011      	beq.n	801911e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80190fa:	2a03      	cmp	r2, #3
 80190fc:	d01c      	beq.n	8019138 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80190fe:	2a01      	cmp	r2, #1
 8019100:	d10c      	bne.n	801911c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019102:	888b      	ldrh	r3, [r1, #4]
 8019104:	8801      	ldrh	r1, [r0, #0]
 8019106:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801910a:	1a5b      	subs	r3, r3, r1
 801910c:	8844      	ldrh	r4, [r0, #2]
 801910e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019112:	1a9b      	subs	r3, r3, r2
 8019114:	8004      	strh	r4, [r0, #0]
 8019116:	8081      	strh	r1, [r0, #4]
 8019118:	8043      	strh	r3, [r0, #2]
 801911a:	80c2      	strh	r2, [r0, #6]
 801911c:	bd30      	pop	{r4, r5, pc}
 801911e:	88cb      	ldrh	r3, [r1, #6]
 8019120:	8842      	ldrh	r2, [r0, #2]
 8019122:	1a9b      	subs	r3, r3, r2
 8019124:	88c2      	ldrh	r2, [r0, #6]
 8019126:	1a9b      	subs	r3, r3, r2
 8019128:	888a      	ldrh	r2, [r1, #4]
 801912a:	8801      	ldrh	r1, [r0, #0]
 801912c:	8043      	strh	r3, [r0, #2]
 801912e:	1a52      	subs	r2, r2, r1
 8019130:	8881      	ldrh	r1, [r0, #4]
 8019132:	1a52      	subs	r2, r2, r1
 8019134:	8002      	strh	r2, [r0, #0]
 8019136:	e7f1      	b.n	801911c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019138:	88cb      	ldrh	r3, [r1, #6]
 801913a:	8841      	ldrh	r1, [r0, #2]
 801913c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019140:	1a5b      	subs	r3, r3, r1
 8019142:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019146:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801914a:	1a9b      	subs	r3, r3, r2
 801914c:	8045      	strh	r5, [r0, #2]
 801914e:	8082      	strh	r2, [r0, #4]
 8019150:	8003      	strh	r3, [r0, #0]
 8019152:	80c4      	strh	r4, [r0, #6]
 8019154:	e7e2      	b.n	801911c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801915a:	b09f      	sub	sp, #124	; 0x7c
 801915c:	9116      	str	r1, [sp, #88]	; 0x58
 801915e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019160:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019162:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019164:	8809      	ldrh	r1, [r1, #0]
 8019166:	889b      	ldrh	r3, [r3, #4]
 8019168:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801916c:	440b      	add	r3, r1
 801916e:	9212      	str	r2, [sp, #72]	; 0x48
 8019170:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019174:	b21b      	sxth	r3, r3
 8019176:	9011      	str	r0, [sp, #68]	; 0x44
 8019178:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801917c:	9310      	str	r3, [sp, #64]	; 0x40
 801917e:	f8d8 3000 	ldr.w	r3, [r8]
 8019182:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8019186:	7a59      	ldrb	r1, [r3, #9]
 8019188:	7a1b      	ldrb	r3, [r3, #8]
 801918a:	9114      	str	r1, [sp, #80]	; 0x50
 801918c:	9315      	str	r3, [sp, #84]	; 0x54
 801918e:	2a00      	cmp	r2, #0
 8019190:	d06a      	beq.n	8019268 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019192:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019196:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019198:	2b04      	cmp	r3, #4
 801919a:	bf14      	ite	ne
 801919c:	2301      	movne	r3, #1
 801919e:	2302      	moveq	r3, #2
 80191a0:	4413      	add	r3, r2
 80191a2:	f04f 0900 	mov.w	r9, #0
 80191a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80191a8:	464c      	mov	r4, r9
 80191aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80191ae:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80191b2:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80191b6:	4293      	cmp	r3, r2
 80191b8:	f280 808f 	bge.w	80192da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80191bc:	2300      	movs	r3, #0
 80191be:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80191c2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80191c6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80191ca:	429c      	cmp	r4, r3
 80191cc:	d006      	beq.n	80191dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80191ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191d0:	f242 020b 	movw	r2, #8203	; 0x200b
 80191d4:	4294      	cmp	r4, r2
 80191d6:	bf18      	it	ne
 80191d8:	4623      	movne	r3, r4
 80191da:	930d      	str	r3, [sp, #52]	; 0x34
 80191dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191de:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80191e0:	f8d8 2000 	ldr.w	r2, [r8]
 80191e4:	428b      	cmp	r3, r1
 80191e6:	db41      	blt.n	801926c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80191e8:	6813      	ldr	r3, [r2, #0]
 80191ea:	4610      	mov	r0, r2
 80191ec:	695b      	ldr	r3, [r3, #20]
 80191ee:	4798      	blx	r3
 80191f0:	4604      	mov	r4, r0
 80191f2:	f8d8 0000 	ldr.w	r0, [r8]
 80191f6:	aa1d      	add	r2, sp, #116	; 0x74
 80191f8:	4621      	mov	r1, r4
 80191fa:	6803      	ldr	r3, [r0, #0]
 80191fc:	689e      	ldr	r6, [r3, #8]
 80191fe:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019202:	47b0      	blx	r6
 8019204:	901c      	str	r0, [sp, #112]	; 0x70
 8019206:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801920a:	429c      	cmp	r4, r3
 801920c:	f000 80ea 	beq.w	80193e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019210:	f242 030b 	movw	r3, #8203	; 0x200b
 8019214:	429c      	cmp	r4, r3
 8019216:	f000 80e5 	beq.w	80193e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801921a:	2c00      	cmp	r4, #0
 801921c:	f000 80f7 	beq.w	801940e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019220:	2c0a      	cmp	r4, #10
 8019222:	d060      	beq.n	80192e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8019224:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019226:	b36a      	cbz	r2, 8019284 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8019228:	8894      	ldrh	r4, [r2, #4]
 801922a:	f1bb 0f00 	cmp.w	fp, #0
 801922e:	d03b      	beq.n	80192a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8019230:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019234:	f1bb 0f01 	cmp.w	fp, #1
 8019238:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801923c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8019240:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019244:	ea49 0903 	orr.w	r9, r9, r3
 8019248:	d134      	bne.n	80192b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801924a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801924c:	eba5 0509 	sub.w	r5, r5, r9
 8019250:	2b00      	cmp	r3, #0
 8019252:	d14f      	bne.n	80192f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8019254:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019256:	eb09 0305 	add.w	r3, r9, r5
 801925a:	4413      	add	r3, r2
 801925c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801925e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019262:	4293      	cmp	r3, r2
 8019264:	da51      	bge.n	801930a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019266:	e038      	b.n	80192da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8019268:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801926a:	e79a      	b.n	80191a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801926c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019270:	4659      	mov	r1, fp
 8019272:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019274:	9301      	str	r3, [sp, #4]
 8019276:	ab1d      	add	r3, sp, #116	; 0x74
 8019278:	9300      	str	r3, [sp, #0]
 801927a:	ab1c      	add	r3, sp, #112	; 0x70
 801927c:	f002 fe9d 	bl	801bfba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019280:	4604      	mov	r4, r0
 8019282:	e7c0      	b.n	8019206 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8019284:	f8d8 0000 	ldr.w	r0, [r8]
 8019288:	6803      	ldr	r3, [r0, #0]
 801928a:	691b      	ldr	r3, [r3, #16]
 801928c:	4798      	blx	r3
 801928e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019292:	4298      	cmp	r0, r3
 8019294:	f000 80a6 	beq.w	80193e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019298:	f242 030b 	movw	r3, #8203	; 0x200b
 801929c:	4298      	cmp	r0, r3
 801929e:	f000 80a1 	beq.w	80193e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80192a2:	f1bb 0f00 	cmp.w	fp, #0
 80192a6:	d100      	bne.n	80192aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80192a8:	444d      	add	r5, r9
 80192aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80192ac:	2a00      	cmp	r2, #0
 80192ae:	d1bf      	bne.n	8019230 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80192b0:	4691      	mov	r9, r2
 80192b2:	e097      	b.n	80193e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80192b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	f000 80ab 	beq.w	8019412 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80192bc:	f1bb 0f00 	cmp.w	fp, #0
 80192c0:	d118      	bne.n	80192f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80192c2:	f8d8 0000 	ldr.w	r0, [r8]
 80192c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80192c8:	6803      	ldr	r3, [r0, #0]
 80192ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192cc:	4798      	blx	r3
 80192ce:	4405      	add	r5, r0
 80192d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80192d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80192d4:	1aeb      	subs	r3, r5, r3
 80192d6:	4293      	cmp	r3, r2
 80192d8:	dd17      	ble.n	801930a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80192da:	2c00      	cmp	r4, #0
 80192dc:	f000 8097 	beq.w	801940e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80192e0:	2c0a      	cmp	r4, #10
 80192e2:	f040 8085 	bne.w	80193f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80192e6:	240a      	movs	r4, #10
 80192e8:	fab4 f084 	clz	r0, r4
 80192ec:	0940      	lsrs	r0, r0, #5
 80192ee:	b01f      	add	sp, #124	; 0x7c
 80192f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192f4:	f8d8 0000 	ldr.w	r0, [r8]
 80192f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80192fa:	6803      	ldr	r3, [r0, #0]
 80192fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192fe:	4798      	blx	r3
 8019300:	f1bb 0f01 	cmp.w	fp, #1
 8019304:	eba5 0500 	sub.w	r5, r5, r0
 8019308:	d0a4      	beq.n	8019254 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801930a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801930c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801930e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019312:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019316:	7b43      	ldrb	r3, [r0, #13]
 8019318:	4429      	add	r1, r5
 801931a:	015b      	lsls	r3, r3, #5
 801931c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019320:	7983      	ldrb	r3, [r0, #6]
 8019322:	4313      	orrs	r3, r2
 8019324:	440b      	add	r3, r1
 8019326:	42b3      	cmp	r3, r6
 8019328:	db5c      	blt.n	80193e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801932a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801932c:	4299      	cmp	r1, r3
 801932e:	da59      	bge.n	80193e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019330:	f8d8 0000 	ldr.w	r0, [r8]
 8019334:	42ae      	cmp	r6, r5
 8019336:	6803      	ldr	r3, [r0, #0]
 8019338:	bfcc      	ite	gt
 801933a:	1b76      	subgt	r6, r6, r5
 801933c:	2600      	movle	r6, #0
 801933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019340:	bfc8      	it	gt
 8019342:	b2b6      	uxthgt	r6, r6
 8019344:	4798      	blx	r3
 8019346:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019348:	7b5a      	ldrb	r2, [r3, #13]
 801934a:	00d1      	lsls	r1, r2, #3
 801934c:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8019350:	7a19      	ldrb	r1, [r3, #8]
 8019352:	4339      	orrs	r1, r7
 8019354:	0657      	lsls	r7, r2, #25
 8019356:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019358:	bf48      	it	mi
 801935a:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801935e:	4407      	add	r7, r0
 8019360:	bf48      	it	mi
 8019362:	b209      	sxthmi	r1, r1
 8019364:	1a7f      	subs	r7, r7, r1
 8019366:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019368:	b2bf      	uxth	r7, r7
 801936a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801936e:	fa0f fa87 	sxth.w	sl, r7
 8019372:	4551      	cmp	r1, sl
 8019374:	dd3a      	ble.n	80193ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019376:	0112      	lsls	r2, r2, #4
 8019378:	79d8      	ldrb	r0, [r3, #7]
 801937a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801937e:	4302      	orrs	r2, r0
 8019380:	4492      	add	sl, r2
 8019382:	4551      	cmp	r1, sl
 8019384:	dc2e      	bgt.n	80193e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019386:	1bcf      	subs	r7, r1, r7
 8019388:	468a      	mov	sl, r1
 801938a:	b2bf      	uxth	r7, r7
 801938c:	9319      	str	r3, [sp, #100]	; 0x64
 801938e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019390:	f8d8 0000 	ldr.w	r0, [r8]
 8019394:	681a      	ldr	r2, [r3, #0]
 8019396:	6801      	ldr	r1, [r0, #0]
 8019398:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801939a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801939c:	9313      	str	r3, [sp, #76]	; 0x4c
 801939e:	9218      	str	r2, [sp, #96]	; 0x60
 80193a0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80193a2:	4788      	blx	r1
 80193a4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80193a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80193aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80193ac:	f898 100e 	ldrb.w	r1, [r8, #14]
 80193b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80193b2:	910a      	str	r1, [sp, #40]	; 0x28
 80193b4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80193b8:	9109      	str	r1, [sp, #36]	; 0x24
 80193ba:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80193be:	9305      	str	r3, [sp, #20]
 80193c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80193c2:	9206      	str	r2, [sp, #24]
 80193c4:	e9cd a601 	strd	sl, r6, [sp, #4]
 80193c8:	442e      	add	r6, r5
 80193ca:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80193ce:	b236      	sxth	r6, r6
 80193d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80193d2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80193d6:	9600      	str	r6, [sp, #0]
 80193d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80193da:	681a      	ldr	r2, [r3, #0]
 80193dc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80193de:	685b      	ldr	r3, [r3, #4]
 80193e0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80193e2:	47b0      	blx	r6
 80193e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193e6:	3301      	adds	r3, #1
 80193e8:	930e      	str	r3, [sp, #56]	; 0x38
 80193ea:	e6e2      	b.n	80191b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 80193ec:	2700      	movs	r7, #0
 80193ee:	e7cd      	b.n	801938c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 80193f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80193f2:	3501      	adds	r5, #1
 80193f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80193f6:	429d      	cmp	r5, r3
 80193f8:	f6bf af76 	bge.w	80192e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80193fc:	4659      	mov	r1, fp
 80193fe:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019400:	f7ea fd5e 	bl	8003ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019404:	4604      	mov	r4, r0
 8019406:	b110      	cbz	r0, 801940e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8019408:	280a      	cmp	r0, #10
 801940a:	d1f2      	bne.n	80193f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801940c:	e76b      	b.n	80192e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801940e:	2400      	movs	r4, #0
 8019410:	e76a      	b.n	80192e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8019412:	f1bb 0f00 	cmp.w	fp, #0
 8019416:	f43f af5b 	beq.w	80192d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801941a:	e776      	b.n	801930a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801941c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801941c:	b530      	push	{r4, r5, lr}
 801941e:	8a44      	ldrh	r4, [r0, #18]
 8019420:	8ac5      	ldrh	r5, [r0, #22]
 8019422:	82c3      	strh	r3, [r0, #22]
 8019424:	442c      	add	r4, r5
 8019426:	1ae4      	subs	r4, r4, r3
 8019428:	8b03      	ldrh	r3, [r0, #24]
 801942a:	8244      	strh	r4, [r0, #18]
 801942c:	8a84      	ldrh	r4, [r0, #20]
 801942e:	4422      	add	r2, r4
 8019430:	440c      	add	r4, r1
 8019432:	1a59      	subs	r1, r3, r1
 8019434:	8342      	strh	r2, [r0, #26]
 8019436:	8284      	strh	r4, [r0, #20]
 8019438:	8301      	strh	r1, [r0, #24]
 801943a:	bd30      	pop	{r4, r5, pc}

0801943c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019440:	7a43      	ldrb	r3, [r0, #9]
 8019442:	b087      	sub	sp, #28
 8019444:	4604      	mov	r4, r0
 8019446:	460f      	mov	r7, r1
 8019448:	1eda      	subs	r2, r3, #3
 801944a:	b2d2      	uxtb	r2, r2
 801944c:	2900      	cmp	r1, #0
 801944e:	d036      	beq.n	80194be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8019450:	2a01      	cmp	r2, #1
 8019452:	d932      	bls.n	80194ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019454:	1e58      	subs	r0, r3, #1
 8019456:	f1d0 0b00 	rsbs	fp, r0, #0
 801945a:	eb4b 0b00 	adc.w	fp, fp, r0
 801945e:	1e99      	subs	r1, r3, #2
 8019460:	424b      	negs	r3, r1
 8019462:	414b      	adcs	r3, r1
 8019464:	9303      	str	r3, [sp, #12]
 8019466:	2300      	movs	r3, #0
 8019468:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801946c:	2500      	movs	r5, #0
 801946e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 8019472:	46a9      	mov	r9, r5
 8019474:	8265      	strh	r5, [r4, #18]
 8019476:	82a5      	strh	r5, [r4, #20]
 8019478:	2300      	movs	r3, #0
 801947a:	9305      	str	r3, [sp, #20]
 801947c:	8823      	ldrh	r3, [r4, #0]
 801947e:	2b20      	cmp	r3, #32
 8019480:	d02b      	beq.n	80194da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 8019482:	eba3 020a 	sub.w	r2, r3, sl
 8019486:	4256      	negs	r6, r2
 8019488:	4156      	adcs	r6, r2
 801948a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801948e:	4293      	cmp	r3, r2
 8019490:	d004      	beq.n	801949c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8019492:	4553      	cmp	r3, sl
 8019494:	bf16      	itet	ne
 8019496:	4699      	movne	r9, r3
 8019498:	2601      	moveq	r6, #1
 801949a:	2600      	movne	r6, #0
 801949c:	ab05      	add	r3, sp, #20
 801949e:	68e2      	ldr	r2, [r4, #12]
 80194a0:	7a21      	ldrb	r1, [r4, #8]
 80194a2:	6860      	ldr	r0, [r4, #4]
 80194a4:	f002 fd40 	bl	801bf28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80194a8:	8020      	strh	r0, [r4, #0]
 80194aa:	b9c8      	cbnz	r0, 80194e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80194ac:	8b22      	ldrh	r2, [r4, #24]
 80194ae:	2300      	movs	r3, #0
 80194b0:	4611      	mov	r1, r2
 80194b2:	4620      	mov	r0, r4
 80194b4:	f7ff ffb2 	bl	801941c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80194b8:	e066      	b.n	8019588 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80194ba:	468b      	mov	fp, r1
 80194bc:	e7cf      	b.n	801945e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80194be:	3b01      	subs	r3, #1
 80194c0:	2a01      	cmp	r2, #1
 80194c2:	9103      	str	r1, [sp, #12]
 80194c4:	468b      	mov	fp, r1
 80194c6:	bf8c      	ite	hi
 80194c8:	2200      	movhi	r2, #0
 80194ca:	2201      	movls	r2, #1
 80194cc:	2b01      	cmp	r3, #1
 80194ce:	9202      	str	r2, [sp, #8]
 80194d0:	bf8c      	ite	hi
 80194d2:	2300      	movhi	r3, #0
 80194d4:	2301      	movls	r3, #1
 80194d6:	9301      	str	r3, [sp, #4]
 80194d8:	e7c8      	b.n	801946c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80194da:	4699      	mov	r9, r3
 80194dc:	2601      	movs	r6, #1
 80194de:	e7dd      	b.n	801949c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80194e0:	8ae3      	ldrh	r3, [r4, #22]
 80194e2:	280a      	cmp	r0, #10
 80194e4:	f103 0301 	add.w	r3, r3, #1
 80194e8:	82e3      	strh	r3, [r4, #22]
 80194ea:	d0df      	beq.n	80194ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80194ec:	9a05      	ldr	r2, [sp, #20]
 80194ee:	bb42      	cbnz	r2, 8019542 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80194f0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80194f4:	4298      	cmp	r0, r3
 80194f6:	d001      	beq.n	80194fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80194f8:	4550      	cmp	r0, sl
 80194fa:	d1bd      	bne.n	8019478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80194fc:	8823      	ldrh	r3, [r4, #0]
 80194fe:	8b21      	ldrh	r1, [r4, #24]
 8019500:	2b20      	cmp	r3, #32
 8019502:	d001      	beq.n	8019508 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8019504:	4553      	cmp	r3, sl
 8019506:	d131      	bne.n	801956c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8019508:	2e00      	cmp	r6, #0
 801950a:	bf0a      	itet	eq
 801950c:	460d      	moveq	r5, r1
 801950e:	4630      	movne	r0, r6
 8019510:	2001      	moveq	r0, #1
 8019512:	440a      	add	r2, r1
 8019514:	8aa3      	ldrh	r3, [r4, #20]
 8019516:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801951a:	b292      	uxth	r2, r2
 801951c:	8322      	strh	r2, [r4, #24]
 801951e:	4413      	add	r3, r2
 8019520:	2f00      	cmp	r7, #0
 8019522:	d03a      	beq.n	801959a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8019524:	f1bb 0f00 	cmp.w	fp, #0
 8019528:	d102      	bne.n	8019530 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801952a:	9903      	ldr	r1, [sp, #12]
 801952c:	b301      	cbz	r1, 8019570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801952e:	b1f8      	cbz	r0, 8019570 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8019530:	8ba1      	ldrh	r1, [r4, #28]
 8019532:	4419      	add	r1, r3
 8019534:	458c      	cmp	ip, r1
 8019536:	da2a      	bge.n	801958e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019538:	8a61      	ldrh	r1, [r4, #18]
 801953a:	b341      	cbz	r1, 801958e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801953c:	4563      	cmp	r3, ip
 801953e:	dd9b      	ble.n	8019478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019540:	e01c      	b.n	801957c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8019542:	8893      	ldrh	r3, [r2, #4]
 8019544:	4649      	mov	r1, r9
 8019546:	8023      	strh	r3, [r4, #0]
 8019548:	f892 800d 	ldrb.w	r8, [r2, #13]
 801954c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8019550:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8019554:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019558:	ea48 0800 	orr.w	r8, r8, r0
 801955c:	68e0      	ldr	r0, [r4, #12]
 801955e:	6803      	ldr	r3, [r0, #0]
 8019560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019562:	4798      	blx	r3
 8019564:	eb08 0200 	add.w	r2, r8, r0
 8019568:	b292      	uxth	r2, r2
 801956a:	e7c7      	b.n	80194fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801956c:	2000      	movs	r0, #0
 801956e:	e7d0      	b.n	8019512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8019570:	4563      	cmp	r3, ip
 8019572:	dd81      	ble.n	8019478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019574:	8a63      	ldrh	r3, [r4, #18]
 8019576:	2b00      	cmp	r3, #0
 8019578:	f43f af7e 	beq.w	8019478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801957c:	2301      	movs	r3, #1
 801957e:	8ba2      	ldrh	r2, [r4, #28]
 8019580:	77a3      	strb	r3, [r4, #30]
 8019582:	8b63      	ldrh	r3, [r4, #26]
 8019584:	4413      	add	r3, r2
 8019586:	8363      	strh	r3, [r4, #26]
 8019588:	b007      	add	sp, #28
 801958a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801958e:	2300      	movs	r3, #0
 8019590:	4611      	mov	r1, r2
 8019592:	4620      	mov	r0, r4
 8019594:	f7ff ff42 	bl	801941c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019598:	e76e      	b.n	8019478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801959a:	4563      	cmp	r3, ip
 801959c:	dd14      	ble.n	80195c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801959e:	9b02      	ldr	r3, [sp, #8]
 80195a0:	b113      	cbz	r3, 80195a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 80195a2:	2301      	movs	r3, #1
 80195a4:	460a      	mov	r2, r1
 80195a6:	e783      	b.n	80194b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80195a8:	9b01      	ldr	r3, [sp, #4]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	f43f af64 	beq.w	8019478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195b0:	2800      	cmp	r0, #0
 80195b2:	f47f af61 	bne.w	8019478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195b6:	b116      	cbz	r6, 80195be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80195b8:	2301      	movs	r3, #1
 80195ba:	462a      	mov	r2, r5
 80195bc:	e779      	b.n	80194b2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80195be:	8a63      	ldrh	r3, [r4, #18]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	f43f af59 	beq.w	8019478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195c6:	e7df      	b.n	8019588 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80195c8:	2800      	cmp	r0, #0
 80195ca:	f47f af55 	bne.w	8019478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195ce:	2e00      	cmp	r6, #0
 80195d0:	f43f af52 	beq.w	8019478 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195d4:	2301      	movs	r3, #1
 80195d6:	462a      	mov	r2, r5
 80195d8:	e7db      	b.n	8019592 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080195da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80195da:	b530      	push	{r4, r5, lr}
 80195dc:	4605      	mov	r5, r0
 80195de:	b08b      	sub	sp, #44	; 0x2c
 80195e0:	b191      	cbz	r1, 8019608 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80195e2:	2401      	movs	r4, #1
 80195e4:	e9cd 3100 	strd	r3, r1, [sp]
 80195e8:	4613      	mov	r3, r2
 80195ea:	4601      	mov	r1, r0
 80195ec:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80195f0:	a802      	add	r0, sp, #8
 80195f2:	f7ff fd07 	bl	8019004 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80195f6:	2100      	movs	r1, #0
 80195f8:	a802      	add	r0, sp, #8
 80195fa:	f7ff ff1f 	bl	801943c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80195fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019602:	b163      	cbz	r3, 801961e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8019604:	3401      	adds	r4, #1
 8019606:	e7f6      	b.n	80195f6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8019608:	2401      	movs	r4, #1
 801960a:	f002 fd59 	bl	801c0c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801960e:	280a      	cmp	r0, #10
 8019610:	4628      	mov	r0, r5
 8019612:	bf08      	it	eq
 8019614:	3401      	addeq	r4, #1
 8019616:	f002 fd53 	bl	801c0c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801961a:	2800      	cmp	r0, #0
 801961c:	d1f7      	bne.n	801960e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801961e:	b2a0      	uxth	r0, r4
 8019620:	b00b      	add	sp, #44	; 0x2c
 8019622:	bd30      	pop	{r4, r5, pc}

08019624 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8019624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019628:	b0e5      	sub	sp, #404	; 0x194
 801962a:	4689      	mov	r9, r1
 801962c:	461c      	mov	r4, r3
 801962e:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8019632:	900a      	str	r0, [sp, #40]	; 0x28
 8019634:	f1ba 0f00 	cmp.w	sl, #0
 8019638:	f000 80b4 	beq.w	80197a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	2b00      	cmp	r3, #0
 8019640:	f000 80b0 	beq.w	80197a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019644:	7ba3      	ldrb	r3, [r4, #14]
 8019646:	2b00      	cmp	r3, #0
 8019648:	f000 80ac 	beq.w	80197a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801964c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8019650:	6810      	ldr	r0, [r2, #0]
 8019652:	6851      	ldr	r1, [r2, #4]
 8019654:	2500      	movs	r5, #0
 8019656:	4643      	mov	r3, r8
 8019658:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801965c:	950f      	str	r5, [sp, #60]	; 0x3c
 801965e:	af19      	add	r7, sp, #100	; 0x64
 8019660:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8019664:	79a2      	ldrb	r2, [r4, #6]
 8019666:	c303      	stmia	r3!, {r0, r1}
 8019668:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801966c:	a90f      	add	r1, sp, #60	; 0x3c
 801966e:	4640      	mov	r0, r8
 8019670:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019674:	f7ff fd3e 	bl	80190f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019678:	a90f      	add	r1, sp, #60	; 0x3c
 801967a:	79a2      	ldrb	r2, [r4, #6]
 801967c:	4608      	mov	r0, r1
 801967e:	f7ff fd39 	bl	80190f4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019682:	4638      	mov	r0, r7
 8019684:	f002 f8ef 	bl	801b866 <_ZN8touchgfx12TextProviderC1Ev>
 8019688:	6820      	ldr	r0, [r4, #0]
 801968a:	6803      	ldr	r3, [r0, #0]
 801968c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801968e:	4798      	blx	r3
 8019690:	4606      	mov	r6, r0
 8019692:	6820      	ldr	r0, [r4, #0]
 8019694:	6803      	ldr	r3, [r0, #0]
 8019696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019698:	4798      	blx	r3
 801969a:	4633      	mov	r3, r6
 801969c:	9000      	str	r0, [sp, #0]
 801969e:	4651      	mov	r1, sl
 80196a0:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80196a2:	4638      	mov	r0, r7
 80196a4:	f002 f93a 	bl	801b91c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80196a8:	7923      	ldrb	r3, [r4, #4]
 80196aa:	6820      	ldr	r0, [r4, #0]
 80196ac:	9308      	str	r3, [sp, #32]
 80196ae:	6803      	ldr	r3, [r0, #0]
 80196b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196b2:	4798      	blx	r3
 80196b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80196b8:	181e      	adds	r6, r3, r0
 80196ba:	42ae      	cmp	r6, r5
 80196bc:	dd06      	ble.n	80196cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 80196be:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 80196c2:	4282      	cmp	r2, r0
 80196c4:	bfa4      	itt	ge
 80196c6:	189d      	addge	r5, r3, r2
 80196c8:	fb95 f5f6 	sdivge	r5, r5, r6
 80196cc:	a832      	add	r0, sp, #200	; 0xc8
 80196ce:	f002 f8ca 	bl	801b866 <_ZN8touchgfx12TextProviderC1Ev>
 80196d2:	7c23      	ldrb	r3, [r4, #16]
 80196d4:	b17b      	cbz	r3, 80196f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 80196d6:	6820      	ldr	r0, [r4, #0]
 80196d8:	6803      	ldr	r3, [r0, #0]
 80196da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80196dc:	4798      	blx	r3
 80196de:	4683      	mov	fp, r0
 80196e0:	6820      	ldr	r0, [r4, #0]
 80196e2:	6803      	ldr	r3, [r0, #0]
 80196e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80196e6:	4798      	blx	r3
 80196e8:	465b      	mov	r3, fp
 80196ea:	9000      	str	r0, [sp, #0]
 80196ec:	4651      	mov	r1, sl
 80196ee:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80196f0:	a832      	add	r0, sp, #200	; 0xc8
 80196f2:	f002 f913 	bl	801b91c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80196f6:	7be1      	ldrb	r1, [r4, #15]
 80196f8:	a811      	add	r0, sp, #68	; 0x44
 80196fa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80196fe:	7963      	ldrb	r3, [r4, #5]
 8019700:	1a52      	subs	r2, r2, r1
 8019702:	7c21      	ldrb	r1, [r4, #16]
 8019704:	9101      	str	r1, [sp, #4]
 8019706:	b292      	uxth	r2, r2
 8019708:	6821      	ldr	r1, [r4, #0]
 801970a:	9100      	str	r1, [sp, #0]
 801970c:	a932      	add	r1, sp, #200	; 0xc8
 801970e:	f7ff fc79 	bl	8019004 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8019712:	7c23      	ldrb	r3, [r4, #16]
 8019714:	b9bb      	cbnz	r3, 8019746 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8019716:	fa1f fa86 	uxth.w	sl, r6
 801971a:	2d00      	cmp	r5, #0
 801971c:	dd45      	ble.n	80197aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801971e:	4638      	mov	r0, r7
 8019720:	f002 fcce 	bl	801c0c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019724:	2800      	cmp	r0, #0
 8019726:	d03d      	beq.n	80197a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019728:	280a      	cmp	r0, #10
 801972a:	d1f6      	bne.n	801971a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801972c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019730:	3d01      	subs	r5, #1
 8019732:	4453      	add	r3, sl
 8019734:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019738:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801973c:	eba3 030a 	sub.w	r3, r3, sl
 8019740:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019744:	e7e9      	b.n	801971a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8019746:	0073      	lsls	r3, r6, #1
 8019748:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801974c:	fa1f fa86 	uxth.w	sl, r6
 8019750:	9309      	str	r3, [sp, #36]	; 0x24
 8019752:	2d00      	cmp	r5, #0
 8019754:	dd29      	ble.n	80197aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8019756:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801975a:	a811      	add	r0, sp, #68	; 0x44
 801975c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801975e:	428b      	cmp	r3, r1
 8019760:	bfd4      	ite	le
 8019762:	2100      	movle	r1, #0
 8019764:	2101      	movgt	r1, #1
 8019766:	f7ff fe69 	bl	801943c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801976a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801976e:	3b01      	subs	r3, #1
 8019770:	b29b      	uxth	r3, r3
 8019772:	455b      	cmp	r3, fp
 8019774:	930b      	str	r3, [sp, #44]	; 0x2c
 8019776:	d005      	beq.n	8019784 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8019778:	7961      	ldrb	r1, [r4, #5]
 801977a:	4638      	mov	r0, r7
 801977c:	f7ea fba0 	bl	8003ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019782:	e7f4      	b.n	801976e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8019784:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019788:	3d01      	subs	r5, #1
 801978a:	4453      	add	r3, sl
 801978c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019790:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8019794:	eba3 030a 	sub.w	r3, r3, sl
 8019798:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801979c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d1d6      	bne.n	8019752 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 80197a4:	b065      	add	sp, #404	; 0x194
 80197a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197aa:	0075      	lsls	r5, r6, #1
 80197ac:	f04f 0a00 	mov.w	sl, #0
 80197b0:	7c23      	ldrb	r3, [r4, #16]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d066      	beq.n	8019884 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 80197b6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80197ba:	a811      	add	r0, sp, #68	; 0x44
 80197bc:	428d      	cmp	r5, r1
 80197be:	bfd4      	ite	le
 80197c0:	2100      	movle	r1, #0
 80197c2:	2101      	movgt	r1, #1
 80197c4:	f7ff fe3a 	bl	801943c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80197c8:	9b08      	ldr	r3, [sp, #32]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d055      	beq.n	801987a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80197ce:	f894 b010 	ldrb.w	fp, [r4, #16]
 80197d2:	2264      	movs	r2, #100	; 0x64
 80197d4:	4639      	mov	r1, r7
 80197d6:	a84b      	add	r0, sp, #300	; 0x12c
 80197d8:	f00e ff0a 	bl	80285f0 <memcpy>
 80197dc:	f1bb 0f00 	cmp.w	fp, #0
 80197e0:	d058      	beq.n	8019894 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80197e2:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80197e6:	7922      	ldrb	r2, [r4, #4]
 80197e8:	2a01      	cmp	r2, #1
 80197ea:	d13c      	bne.n	8019866 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80197ec:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80197f0:	1ac0      	subs	r0, r0, r3
 80197f2:	2302      	movs	r3, #2
 80197f4:	fb90 f0f3 	sdiv	r0, r0, r3
 80197f8:	b200      	sxth	r0, r0
 80197fa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80197fe:	4418      	add	r0, r3
 8019800:	7c23      	ldrb	r3, [r4, #16]
 8019802:	b200      	sxth	r0, r0
 8019804:	2b00      	cmp	r3, #0
 8019806:	d03a      	beq.n	801987e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8019808:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801980c:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8019810:	9000      	str	r0, [sp, #0]
 8019812:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8019816:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019818:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801981c:	e9cd a703 	strd	sl, r7, [sp, #12]
 8019820:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8019824:	464a      	mov	r2, r9
 8019826:	2100      	movs	r1, #0
 8019828:	f7ff fc95 	bl	8019156 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801982c:	2800      	cmp	r0, #0
 801982e:	d1b9      	bne.n	80197a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019830:	b2b2      	uxth	r2, r6
 8019832:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019836:	4611      	mov	r1, r2
 8019838:	4413      	add	r3, r2
 801983a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801983e:	b21b      	sxth	r3, r3
 8019840:	1a52      	subs	r2, r2, r1
 8019842:	7c21      	ldrb	r1, [r4, #16]
 8019844:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019848:	b212      	sxth	r2, r2
 801984a:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801984e:	b109      	cbz	r1, 8019854 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8019850:	42b2      	cmp	r2, r6
 8019852:	dba7      	blt.n	80197a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019854:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8019858:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801985c:	440a      	add	r2, r1
 801985e:	b212      	sxth	r2, r2
 8019860:	4293      	cmp	r3, r2
 8019862:	dda5      	ble.n	80197b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8019864:	e79e      	b.n	80197a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019866:	2a02      	cmp	r2, #2
 8019868:	d105      	bne.n	8019876 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801986a:	7be2      	ldrb	r2, [r4, #15]
 801986c:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8019870:	1a80      	subs	r0, r0, r2
 8019872:	1ac0      	subs	r0, r0, r3
 8019874:	e7c0      	b.n	80197f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8019876:	2000      	movs	r0, #0
 8019878:	e7bf      	b.n	80197fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801987a:	7be0      	ldrb	r0, [r4, #15]
 801987c:	e7bd      	b.n	80197fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801987e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019882:	e7c3      	b.n	801980c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8019884:	9b08      	ldr	r3, [sp, #32]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d0f7      	beq.n	801987a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801988a:	2264      	movs	r2, #100	; 0x64
 801988c:	4639      	mov	r1, r7
 801988e:	a84b      	add	r0, sp, #300	; 0x12c
 8019890:	f00e feae 	bl	80285f0 <memcpy>
 8019894:	2300      	movs	r3, #0
 8019896:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801989a:	6821      	ldr	r1, [r4, #0]
 801989c:	a84b      	add	r0, sp, #300	; 0x12c
 801989e:	f7ff fbed 	bl	801907c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80198a2:	b203      	sxth	r3, r0
 80198a4:	e79f      	b.n	80197e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

080198a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80198a6:	2b03      	cmp	r3, #3
 80198a8:	d818      	bhi.n	80198dc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80198aa:	e8df f003 	tbb	[pc, r3]
 80198ae:	0602      	.short	0x0602
 80198b0:	130d      	.short	0x130d
 80198b2:	f9b0 2000 	ldrsh.w	r2, [r0]
 80198b6:	1850      	adds	r0, r2, r1
 80198b8:	4770      	bx	lr
 80198ba:	8803      	ldrh	r3, [r0, #0]
 80198bc:	8880      	ldrh	r0, [r0, #4]
 80198be:	4418      	add	r0, r3
 80198c0:	b200      	sxth	r0, r0
 80198c2:	1a80      	subs	r0, r0, r2
 80198c4:	3801      	subs	r0, #1
 80198c6:	4770      	bx	lr
 80198c8:	8803      	ldrh	r3, [r0, #0]
 80198ca:	8880      	ldrh	r0, [r0, #4]
 80198cc:	4418      	add	r0, r3
 80198ce:	b200      	sxth	r0, r0
 80198d0:	1a40      	subs	r0, r0, r1
 80198d2:	e7f7      	b.n	80198c4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80198d4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80198d8:	4410      	add	r0, r2
 80198da:	4770      	bx	lr
 80198dc:	2000      	movs	r0, #0
 80198de:	4770      	bx	lr

080198e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80198e0:	2b03      	cmp	r3, #3
 80198e2:	d817      	bhi.n	8019914 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80198e4:	e8df f003 	tbb	[pc, r3]
 80198e8:	10090602 	.word	0x10090602
 80198ec:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80198f0:	1850      	adds	r0, r2, r1
 80198f2:	4770      	bx	lr
 80198f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80198f8:	e7fa      	b.n	80198f0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80198fa:	8843      	ldrh	r3, [r0, #2]
 80198fc:	88c0      	ldrh	r0, [r0, #6]
 80198fe:	4418      	add	r0, r3
 8019900:	b200      	sxth	r0, r0
 8019902:	1a80      	subs	r0, r0, r2
 8019904:	3801      	subs	r0, #1
 8019906:	4770      	bx	lr
 8019908:	8843      	ldrh	r3, [r0, #2]
 801990a:	88c0      	ldrh	r0, [r0, #6]
 801990c:	4418      	add	r0, r3
 801990e:	b200      	sxth	r0, r0
 8019910:	1a40      	subs	r0, r0, r1
 8019912:	e7f7      	b.n	8019904 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8019914:	2000      	movs	r0, #0
 8019916:	4770      	bx	lr

08019918 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8019918:	4b01      	ldr	r3, [pc, #4]	; (8019920 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801991a:	2200      	movs	r2, #0
 801991c:	601a      	str	r2, [r3, #0]
 801991e:	4770      	bx	lr
 8019920:	200150fc 	.word	0x200150fc

08019924 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8019924:	4603      	mov	r3, r0
 8019926:	b1c8      	cbz	r0, 801995c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8019928:	0c02      	lsrs	r2, r0, #16
 801992a:	0412      	lsls	r2, r2, #16
 801992c:	b9a2      	cbnz	r2, 8019958 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801992e:	0403      	lsls	r3, r0, #16
 8019930:	2010      	movs	r0, #16
 8019932:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019936:	bf04      	itt	eq
 8019938:	021b      	lsleq	r3, r3, #8
 801993a:	3008      	addeq	r0, #8
 801993c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019940:	bf04      	itt	eq
 8019942:	011b      	lsleq	r3, r3, #4
 8019944:	3004      	addeq	r0, #4
 8019946:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801994a:	bf04      	itt	eq
 801994c:	009b      	lsleq	r3, r3, #2
 801994e:	3002      	addeq	r0, #2
 8019950:	2b00      	cmp	r3, #0
 8019952:	db04      	blt.n	801995e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019954:	3001      	adds	r0, #1
 8019956:	4770      	bx	lr
 8019958:	2000      	movs	r0, #0
 801995a:	e7ea      	b.n	8019932 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801995c:	2020      	movs	r0, #32
 801995e:	4770      	bx	lr

08019960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019964:	b087      	sub	sp, #28
 8019966:	4681      	mov	r9, r0
 8019968:	4698      	mov	r8, r3
 801996a:	4610      	mov	r0, r2
 801996c:	460d      	mov	r5, r1
 801996e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8019972:	b981      	cbnz	r1, 8019996 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8019974:	b14b      	cbz	r3, 801998a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8019976:	460b      	mov	r3, r1
 8019978:	464a      	mov	r2, r9
 801997a:	4641      	mov	r1, r8
 801997c:	e9cd 4700 	strd	r4, r7, [sp]
 8019980:	f7ff ffee 	bl	8019960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019984:	b007      	add	sp, #28
 8019986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801998a:	f04f 33ff 	mov.w	r3, #4294967295
 801998e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019992:	603b      	str	r3, [r7, #0]
 8019994:	e7f6      	b.n	8019984 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019996:	fa32 fa01 	lsrs.w	sl, r2, r1
 801999a:	d107      	bne.n	80199ac <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801999c:	fb09 f602 	mul.w	r6, r9, r2
 80199a0:	fbb6 f0f4 	udiv	r0, r6, r4
 80199a4:	fb04 6610 	mls	r6, r4, r0, r6
 80199a8:	603e      	str	r6, [r7, #0]
 80199aa:	e7eb      	b.n	8019984 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80199ac:	2601      	movs	r6, #1
 80199ae:	fa09 fb01 	lsl.w	fp, r9, r1
 80199b2:	408e      	lsls	r6, r1
 80199b4:	fbbb f3f4 	udiv	r3, fp, r4
 80199b8:	3e01      	subs	r6, #1
 80199ba:	9302      	str	r3, [sp, #8]
 80199bc:	fb0a f303 	mul.w	r3, sl, r3
 80199c0:	4016      	ands	r6, r2
 80199c2:	9303      	str	r3, [sp, #12]
 80199c4:	4630      	mov	r0, r6
 80199c6:	f7ff ffad 	bl	8019924 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80199ca:	464a      	mov	r2, r9
 80199cc:	460b      	mov	r3, r1
 80199ce:	4601      	mov	r1, r0
 80199d0:	4630      	mov	r0, r6
 80199d2:	e9cd 4700 	strd	r4, r7, [sp]
 80199d6:	f7ff ffc3 	bl	8019960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80199da:	9b02      	ldr	r3, [sp, #8]
 80199dc:	4606      	mov	r6, r0
 80199de:	eb05 0108 	add.w	r1, r5, r8
 80199e2:	fb04 bb13 	mls	fp, r4, r3, fp
 80199e6:	4658      	mov	r0, fp
 80199e8:	f7ff ff9c 	bl	8019924 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80199ec:	ab05      	add	r3, sp, #20
 80199ee:	465a      	mov	r2, fp
 80199f0:	e9cd 4300 	strd	r4, r3, [sp]
 80199f4:	4603      	mov	r3, r0
 80199f6:	4650      	mov	r0, sl
 80199f8:	f7ff ffb2 	bl	8019960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80199fc:	6839      	ldr	r1, [r7, #0]
 80199fe:	9a05      	ldr	r2, [sp, #20]
 8019a00:	9b03      	ldr	r3, [sp, #12]
 8019a02:	4411      	add	r1, r2
 8019a04:	fbb1 f2f4 	udiv	r2, r1, r4
 8019a08:	18d3      	adds	r3, r2, r3
 8019a0a:	fb04 1412 	mls	r4, r4, r2, r1
 8019a0e:	441e      	add	r6, r3
 8019a10:	603c      	str	r4, [r7, #0]
 8019a12:	4430      	add	r0, r6
 8019a14:	e7b6      	b.n	8019984 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08019a16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8019a16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a1a:	b085      	sub	sp, #20
 8019a1c:	f1b0 0900 	subs.w	r9, r0, #0
 8019a20:	461d      	mov	r5, r3
 8019a22:	4617      	mov	r7, r2
 8019a24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019a26:	bfbb      	ittet	lt
 8019a28:	f1c9 0900 	rsblt	r9, r9, #0
 8019a2c:	f04f 36ff 	movlt.w	r6, #4294967295
 8019a30:	2601      	movge	r6, #1
 8019a32:	6823      	ldrlt	r3, [r4, #0]
 8019a34:	bfbc      	itt	lt
 8019a36:	425b      	neglt	r3, r3
 8019a38:	6023      	strlt	r3, [r4, #0]
 8019a3a:	2a00      	cmp	r2, #0
 8019a3c:	da04      	bge.n	8019a48 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8019a3e:	6823      	ldr	r3, [r4, #0]
 8019a40:	4257      	negs	r7, r2
 8019a42:	4276      	negs	r6, r6
 8019a44:	425b      	negs	r3, r3
 8019a46:	6023      	str	r3, [r4, #0]
 8019a48:	2d00      	cmp	r5, #0
 8019a4a:	4638      	mov	r0, r7
 8019a4c:	bfba      	itte	lt
 8019a4e:	426d      	neglt	r5, r5
 8019a50:	f04f 38ff 	movlt.w	r8, #4294967295
 8019a54:	f04f 0801 	movge.w	r8, #1
 8019a58:	f7ff ff64 	bl	8019924 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019a5c:	ab03      	add	r3, sp, #12
 8019a5e:	463a      	mov	r2, r7
 8019a60:	e9cd 5300 	strd	r5, r3, [sp]
 8019a64:	4603      	mov	r3, r0
 8019a66:	4648      	mov	r0, r9
 8019a68:	f7ff ff7a 	bl	8019960 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019a6c:	6823      	ldr	r3, [r4, #0]
 8019a6e:	9a03      	ldr	r2, [sp, #12]
 8019a70:	4546      	cmp	r6, r8
 8019a72:	441a      	add	r2, r3
 8019a74:	fb92 f3f5 	sdiv	r3, r2, r5
 8019a78:	4418      	add	r0, r3
 8019a7a:	fb05 2313 	mls	r3, r5, r3, r2
 8019a7e:	bf18      	it	ne
 8019a80:	4240      	negne	r0, r0
 8019a82:	1c72      	adds	r2, r6, #1
 8019a84:	6023      	str	r3, [r4, #0]
 8019a86:	d105      	bne.n	8019a94 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	f1c3 0200 	rsb	r2, r3, #0
 8019a8e:	db0b      	blt.n	8019aa8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019a90:	6022      	str	r2, [r4, #0]
 8019a92:	e006      	b.n	8019aa2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019a94:	2e01      	cmp	r6, #1
 8019a96:	d104      	bne.n	8019aa2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	da02      	bge.n	8019aa2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019a9c:	442b      	add	r3, r5
 8019a9e:	3801      	subs	r0, #1
 8019aa0:	6023      	str	r3, [r4, #0]
 8019aa2:	b005      	add	sp, #20
 8019aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019aa8:	3801      	subs	r0, #1
 8019aaa:	1b52      	subs	r2, r2, r5
 8019aac:	e7f0      	b.n	8019a90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08019ab0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019ab0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019ab4:	4c1c      	ldr	r4, [pc, #112]	; (8019b28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019ab6:	4605      	mov	r5, r0
 8019ab8:	6807      	ldr	r7, [r0, #0]
 8019aba:	69a3      	ldr	r3, [r4, #24]
 8019abc:	b92b      	cbnz	r3, 8019aca <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8019abe:	6840      	ldr	r0, [r0, #4]
 8019ac0:	e9c5 7000 	strd	r7, r0, [r5]
 8019ac4:	b004      	add	sp, #16
 8019ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019aca:	f04f 0802 	mov.w	r8, #2
 8019ace:	68a2      	ldr	r2, [r4, #8]
 8019ad0:	ae04      	add	r6, sp, #16
 8019ad2:	6820      	ldr	r0, [r4, #0]
 8019ad4:	fb93 f1f8 	sdiv	r1, r3, r8
 8019ad8:	440a      	add	r2, r1
 8019ada:	69e1      	ldr	r1, [r4, #28]
 8019adc:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019ae0:	463a      	mov	r2, r7
 8019ae2:	9600      	str	r6, [sp, #0]
 8019ae4:	f7ff ff97 	bl	8019a16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019ae8:	69a3      	ldr	r3, [r4, #24]
 8019aea:	4607      	mov	r7, r0
 8019aec:	686a      	ldr	r2, [r5, #4]
 8019aee:	6a21      	ldr	r1, [r4, #32]
 8019af0:	9600      	str	r6, [sp, #0]
 8019af2:	6860      	ldr	r0, [r4, #4]
 8019af4:	f7ff ff8f 	bl	8019a16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019af8:	69a3      	ldr	r3, [r4, #24]
 8019afa:	6962      	ldr	r2, [r4, #20]
 8019afc:	4407      	add	r7, r0
 8019afe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019b00:	9600      	str	r6, [sp, #0]
 8019b02:	68e0      	ldr	r0, [r4, #12]
 8019b04:	fb93 f8f8 	sdiv	r8, r3, r8
 8019b08:	4442      	add	r2, r8
 8019b0a:	9203      	str	r2, [sp, #12]
 8019b0c:	682a      	ldr	r2, [r5, #0]
 8019b0e:	f7ff ff82 	bl	8019a16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019b12:	4680      	mov	r8, r0
 8019b14:	9600      	str	r6, [sp, #0]
 8019b16:	69a3      	ldr	r3, [r4, #24]
 8019b18:	686a      	ldr	r2, [r5, #4]
 8019b1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019b1c:	6920      	ldr	r0, [r4, #16]
 8019b1e:	f7ff ff7a 	bl	8019a16 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019b22:	4440      	add	r0, r8
 8019b24:	e7cc      	b.n	8019ac0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019b26:	bf00      	nop
 8019b28:	20015100 	.word	0x20015100

08019b2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019b2c:	4b07      	ldr	r3, [pc, #28]	; (8019b4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8019b2e:	781b      	ldrb	r3, [r3, #0]
 8019b30:	2b01      	cmp	r3, #1
 8019b32:	d109      	bne.n	8019b48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8019b34:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019b38:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019b3c:	8003      	strh	r3, [r0, #0]
 8019b3e:	4b04      	ldr	r3, [pc, #16]	; (8019b50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019b40:	881b      	ldrh	r3, [r3, #0]
 8019b42:	3b01      	subs	r3, #1
 8019b44:	1a9b      	subs	r3, r3, r2
 8019b46:	800b      	strh	r3, [r1, #0]
 8019b48:	4770      	bx	lr
 8019b4a:	bf00      	nop
 8019b4c:	200150ec 	.word	0x200150ec
 8019b50:	200150e8 	.word	0x200150e8

08019b54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019b54:	4b07      	ldr	r3, [pc, #28]	; (8019b74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019b56:	b510      	push	{r4, lr}
 8019b58:	781b      	ldrb	r3, [r3, #0]
 8019b5a:	2b01      	cmp	r3, #1
 8019b5c:	d108      	bne.n	8019b70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019b5e:	4b06      	ldr	r3, [pc, #24]	; (8019b78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019b60:	880c      	ldrh	r4, [r1, #0]
 8019b62:	881b      	ldrh	r3, [r3, #0]
 8019b64:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019b68:	3b01      	subs	r3, #1
 8019b6a:	1b1b      	subs	r3, r3, r4
 8019b6c:	8003      	strh	r3, [r0, #0]
 8019b6e:	800a      	strh	r2, [r1, #0]
 8019b70:	bd10      	pop	{r4, pc}
 8019b72:	bf00      	nop
 8019b74:	200150ec 	.word	0x200150ec
 8019b78:	200150e8 	.word	0x200150e8

08019b7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019b7c:	4b0a      	ldr	r3, [pc, #40]	; (8019ba8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019b7e:	b510      	push	{r4, lr}
 8019b80:	781b      	ldrb	r3, [r3, #0]
 8019b82:	2b01      	cmp	r3, #1
 8019b84:	d10e      	bne.n	8019ba4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019b86:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019b8a:	8843      	ldrh	r3, [r0, #2]
 8019b8c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019b90:	18ca      	adds	r2, r1, r3
 8019b92:	4b06      	ldr	r3, [pc, #24]	; (8019bac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019b94:	8044      	strh	r4, [r0, #2]
 8019b96:	881b      	ldrh	r3, [r3, #0]
 8019b98:	1a9b      	subs	r3, r3, r2
 8019b9a:	8003      	strh	r3, [r0, #0]
 8019b9c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019ba0:	8081      	strh	r1, [r0, #4]
 8019ba2:	80c3      	strh	r3, [r0, #6]
 8019ba4:	bd10      	pop	{r4, pc}
 8019ba6:	bf00      	nop
 8019ba8:	200150ec 	.word	0x200150ec
 8019bac:	200150e8 	.word	0x200150e8

08019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019bb0:	4b08      	ldr	r3, [pc, #32]	; (8019bd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8019bb2:	781b      	ldrb	r3, [r3, #0]
 8019bb4:	2b01      	cmp	r3, #1
 8019bb6:	d10c      	bne.n	8019bd2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8019bb8:	8803      	ldrh	r3, [r0, #0]
 8019bba:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8019bbe:	8842      	ldrh	r2, [r0, #2]
 8019bc0:	8002      	strh	r2, [r0, #0]
 8019bc2:	185a      	adds	r2, r3, r1
 8019bc4:	4b04      	ldr	r3, [pc, #16]	; (8019bd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019bc6:	881b      	ldrh	r3, [r3, #0]
 8019bc8:	1a9b      	subs	r3, r3, r2
 8019bca:	8043      	strh	r3, [r0, #2]
 8019bcc:	88c3      	ldrh	r3, [r0, #6]
 8019bce:	80c1      	strh	r1, [r0, #6]
 8019bd0:	8083      	strh	r3, [r0, #4]
 8019bd2:	4770      	bx	lr
 8019bd4:	200150ec 	.word	0x200150ec
 8019bd8:	200150e8 	.word	0x200150e8

08019bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019bdc:	4b07      	ldr	r3, [pc, #28]	; (8019bfc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019bde:	b510      	push	{r4, lr}
 8019be0:	781b      	ldrb	r3, [r3, #0]
 8019be2:	2b01      	cmp	r3, #1
 8019be4:	d108      	bne.n	8019bf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019be6:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019bea:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019bee:	8003      	strh	r3, [r0, #0]
 8019bf0:	8893      	ldrh	r3, [r2, #4]
 8019bf2:	3b01      	subs	r3, #1
 8019bf4:	1b1b      	subs	r3, r3, r4
 8019bf6:	800b      	strh	r3, [r1, #0]
 8019bf8:	bd10      	pop	{r4, pc}
 8019bfa:	bf00      	nop
 8019bfc:	200150ec 	.word	0x200150ec

08019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019c00:	4b0a      	ldr	r3, [pc, #40]	; (8019c2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019c02:	460a      	mov	r2, r1
 8019c04:	b510      	push	{r4, lr}
 8019c06:	781b      	ldrb	r3, [r3, #0]
 8019c08:	2b01      	cmp	r3, #1
 8019c0a:	d10d      	bne.n	8019c28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019c0c:	8881      	ldrh	r1, [r0, #4]
 8019c0e:	8803      	ldrh	r3, [r0, #0]
 8019c10:	440b      	add	r3, r1
 8019c12:	4601      	mov	r1, r0
 8019c14:	3b01      	subs	r3, #1
 8019c16:	f821 3b02 	strh.w	r3, [r1], #2
 8019c1a:	f7ff ffdf 	bl	8019bdc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019c1e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019c22:	88c2      	ldrh	r2, [r0, #6]
 8019c24:	80c3      	strh	r3, [r0, #6]
 8019c26:	8082      	strh	r2, [r0, #4]
 8019c28:	bd10      	pop	{r4, pc}
 8019c2a:	bf00      	nop
 8019c2c:	200150ec 	.word	0x200150ec

08019c30 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019c30:	b570      	push	{r4, r5, r6, lr}
 8019c32:	2300      	movs	r3, #0
 8019c34:	4c0a      	ldr	r4, [pc, #40]	; (8019c60 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8019c36:	4605      	mov	r5, r0
 8019c38:	460e      	mov	r6, r1
 8019c3a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8019c3e:	6820      	ldr	r0, [r4, #0]
 8019c40:	b110      	cbz	r0, 8019c48 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8019c42:	6803      	ldr	r3, [r0, #0]
 8019c44:	695b      	ldr	r3, [r3, #20]
 8019c46:	4798      	blx	r3
 8019c48:	6026      	str	r6, [r4, #0]
 8019c4a:	4630      	mov	r0, r6
 8019c4c:	6833      	ldr	r3, [r6, #0]
 8019c4e:	68db      	ldr	r3, [r3, #12]
 8019c50:	4798      	blx	r3
 8019c52:	682b      	ldr	r3, [r5, #0]
 8019c54:	4628      	mov	r0, r5
 8019c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c5c:	4718      	bx	r3
 8019c5e:	bf00      	nop
 8019c60:	20015130 	.word	0x20015130

08019c64 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019c64:	4b06      	ldr	r3, [pc, #24]	; (8019c80 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8019c66:	2100      	movs	r1, #0
 8019c68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019c6c:	4b05      	ldr	r3, [pc, #20]	; (8019c84 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019c6e:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8019c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019c76:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8019c7a:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019c7e:	4770      	bx	lr
 8019c80:	200150e8 	.word	0x200150e8
 8019c84:	200150ea 	.word	0x200150ea

08019c88 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019c88:	4b03      	ldr	r3, [pc, #12]	; (8019c98 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019c8a:	6818      	ldr	r0, [r3, #0]
 8019c8c:	b110      	cbz	r0, 8019c94 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019c8e:	6803      	ldr	r3, [r0, #0]
 8019c90:	699b      	ldr	r3, [r3, #24]
 8019c92:	4718      	bx	r3
 8019c94:	4770      	bx	lr
 8019c96:	bf00      	nop
 8019c98:	20015130 	.word	0x20015130

08019c9c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019c9c:	4770      	bx	lr
	...

08019ca0 <_ZN8touchgfx11Application4drawEv>:
 8019ca0:	4b09      	ldr	r3, [pc, #36]	; (8019cc8 <_ZN8touchgfx11Application4drawEv+0x28>)
 8019ca2:	b507      	push	{r0, r1, r2, lr}
 8019ca4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019ca8:	2100      	movs	r1, #0
 8019caa:	4b08      	ldr	r3, [pc, #32]	; (8019ccc <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019cac:	9100      	str	r1, [sp, #0]
 8019cae:	4669      	mov	r1, sp
 8019cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019cb4:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019cb8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019cbc:	6803      	ldr	r3, [r0, #0]
 8019cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019cc0:	4798      	blx	r3
 8019cc2:	b003      	add	sp, #12
 8019cc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019cc8:	200150e8 	.word	0x200150e8
 8019ccc:	200150ea 	.word	0x200150ea

08019cd0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019cd0:	4b03      	ldr	r3, [pc, #12]	; (8019ce0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019cd2:	6818      	ldr	r0, [r3, #0]
 8019cd4:	b110      	cbz	r0, 8019cdc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019cd6:	6803      	ldr	r3, [r0, #0]
 8019cd8:	69db      	ldr	r3, [r3, #28]
 8019cda:	4718      	bx	r3
 8019cdc:	4770      	bx	lr
 8019cde:	bf00      	nop
 8019ce0:	20015130 	.word	0x20015130

08019ce4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019ce4:	4b03      	ldr	r3, [pc, #12]	; (8019cf4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019ce6:	6818      	ldr	r0, [r3, #0]
 8019ce8:	b110      	cbz	r0, 8019cf0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019cea:	6803      	ldr	r3, [r0, #0]
 8019cec:	6a1b      	ldr	r3, [r3, #32]
 8019cee:	4718      	bx	r3
 8019cf0:	4770      	bx	lr
 8019cf2:	bf00      	nop
 8019cf4:	20015130 	.word	0x20015130

08019cf8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019cfe:	4770      	bx	lr

08019d00 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019d00:	4b03      	ldr	r3, [pc, #12]	; (8019d10 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019d02:	6818      	ldr	r0, [r3, #0]
 8019d04:	b110      	cbz	r0, 8019d0c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019d06:	6803      	ldr	r3, [r0, #0]
 8019d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d0a:	4718      	bx	r3
 8019d0c:	4770      	bx	lr
 8019d0e:	bf00      	nop
 8019d10:	20015130 	.word	0x20015130

08019d14 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019d14:	b570      	push	{r4, r5, r6, lr}
 8019d16:	4d32      	ldr	r5, [pc, #200]	; (8019de0 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8019d18:	4604      	mov	r4, r0
 8019d1a:	6828      	ldr	r0, [r5, #0]
 8019d1c:	b140      	cbz	r0, 8019d30 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019d1e:	7a03      	ldrb	r3, [r0, #8]
 8019d20:	b933      	cbnz	r3, 8019d30 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019d22:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8019d26:	6803      	ldr	r3, [r0, #0]
 8019d28:	689b      	ldr	r3, [r3, #8]
 8019d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d2e:	4718      	bx	r3
 8019d30:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8019d34:	b97b      	cbnz	r3, 8019d56 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019d36:	b170      	cbz	r0, 8019d56 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019d38:	7a03      	ldrb	r3, [r0, #8]
 8019d3a:	b163      	cbz	r3, 8019d56 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019d3c:	4b29      	ldr	r3, [pc, #164]	; (8019de4 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8019d3e:	6818      	ldr	r0, [r3, #0]
 8019d40:	b110      	cbz	r0, 8019d48 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8019d42:	6803      	ldr	r3, [r0, #0]
 8019d44:	691b      	ldr	r3, [r3, #16]
 8019d46:	4798      	blx	r3
 8019d48:	6828      	ldr	r0, [r5, #0]
 8019d4a:	6803      	ldr	r3, [r0, #0]
 8019d4c:	68db      	ldr	r3, [r3, #12]
 8019d4e:	4798      	blx	r3
 8019d50:	2301      	movs	r3, #1
 8019d52:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8019d56:	2500      	movs	r5, #0
 8019d58:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019d5c:	42a8      	cmp	r0, r5
 8019d5e:	dd0c      	ble.n	8019d7a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8019d60:	1963      	adds	r3, r4, r5
 8019d62:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019d66:	b132      	cbz	r2, 8019d76 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019d68:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019d6c:	4413      	add	r3, r2
 8019d6e:	6858      	ldr	r0, [r3, #4]
 8019d70:	6803      	ldr	r3, [r0, #0]
 8019d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019d74:	4798      	blx	r3
 8019d76:	3501      	adds	r5, #1
 8019d78:	e7ee      	b.n	8019d58 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019d7a:	2300      	movs	r3, #0
 8019d7c:	461a      	mov	r2, r3
 8019d7e:	4298      	cmp	r0, r3
 8019d80:	d015      	beq.n	8019dae <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8019d82:	18e1      	adds	r1, r4, r3
 8019d84:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8019d88:	b16d      	cbz	r5, 8019da6 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	d00a      	beq.n	8019da4 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8019d8e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8019d92:	4431      	add	r1, r6
 8019d94:	684e      	ldr	r6, [r1, #4]
 8019d96:	b291      	uxth	r1, r2
 8019d98:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019d9c:	604e      	str	r6, [r1, #4]
 8019d9e:	18a1      	adds	r1, r4, r2
 8019da0:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8019da4:	3201      	adds	r2, #1
 8019da6:	3301      	adds	r3, #1
 8019da8:	e7e9      	b.n	8019d7e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8019daa:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8019dae:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8019db2:	4295      	cmp	r5, r2
 8019db4:	dd0d      	ble.n	8019dd2 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8019db6:	1e6b      	subs	r3, r5, #1
 8019db8:	b29b      	uxth	r3, r3
 8019dba:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	3104      	adds	r1, #4
 8019dc2:	4285      	cmp	r5, r0
 8019dc4:	ddf1      	ble.n	8019daa <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8019dc6:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8019dca:	3001      	adds	r0, #1
 8019dcc:	f841 6c04 	str.w	r6, [r1, #-4]
 8019dd0:	e7f7      	b.n	8019dc2 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8019dd2:	4b04      	ldr	r3, [pc, #16]	; (8019de4 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8019dd4:	6818      	ldr	r0, [r3, #0]
 8019dd6:	b110      	cbz	r0, 8019dde <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8019dd8:	6803      	ldr	r3, [r0, #0]
 8019dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ddc:	e7a5      	b.n	8019d2a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019dde:	bd70      	pop	{r4, r5, r6, pc}
 8019de0:	20015134 	.word	0x20015134
 8019de4:	20015130 	.word	0x20015130

08019de8 <_ZN8touchgfx11ApplicationD1Ev>:
 8019de8:	4770      	bx	lr

08019dea <_ZN8touchgfx11ApplicationD0Ev>:
 8019dea:	b510      	push	{r4, lr}
 8019dec:	4604      	mov	r4, r0
 8019dee:	f44f 719c 	mov.w	r1, #312	; 0x138
 8019df2:	f00e fb4d 	bl	8028490 <_ZdlPvj>
 8019df6:	4620      	mov	r0, r4
 8019df8:	bd10      	pop	{r4, pc}

08019dfa <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019dfa:	b510      	push	{r4, lr}
 8019dfc:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019e00:	888a      	ldrh	r2, [r1, #4]
 8019e02:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019e06:	4422      	add	r2, r4
 8019e08:	b212      	sxth	r2, r2
 8019e0a:	4293      	cmp	r3, r2
 8019e0c:	da15      	bge.n	8019e3a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019e0e:	8882      	ldrh	r2, [r0, #4]
 8019e10:	4413      	add	r3, r2
 8019e12:	b21b      	sxth	r3, r3
 8019e14:	429c      	cmp	r4, r3
 8019e16:	da10      	bge.n	8019e3a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019e18:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019e1c:	88c9      	ldrh	r1, [r1, #6]
 8019e1e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019e22:	4419      	add	r1, r3
 8019e24:	b209      	sxth	r1, r1
 8019e26:	428a      	cmp	r2, r1
 8019e28:	da07      	bge.n	8019e3a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019e2a:	88c0      	ldrh	r0, [r0, #6]
 8019e2c:	4410      	add	r0, r2
 8019e2e:	b200      	sxth	r0, r0
 8019e30:	4283      	cmp	r3, r0
 8019e32:	bfac      	ite	ge
 8019e34:	2000      	movge	r0, #0
 8019e36:	2001      	movlt	r0, #1
 8019e38:	bd10      	pop	{r4, pc}
 8019e3a:	2000      	movs	r0, #0
 8019e3c:	e7fc      	b.n	8019e38 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019e3e <_ZN8touchgfx4Rect10restrictToEss>:
 8019e3e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	b510      	push	{r4, lr}
 8019e46:	da04      	bge.n	8019e52 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8019e48:	8884      	ldrh	r4, [r0, #4]
 8019e4a:	4423      	add	r3, r4
 8019e4c:	8083      	strh	r3, [r0, #4]
 8019e4e:	2300      	movs	r3, #0
 8019e50:	8003      	strh	r3, [r0, #0]
 8019e52:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019e56:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019e5a:	1b09      	subs	r1, r1, r4
 8019e5c:	428b      	cmp	r3, r1
 8019e5e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019e62:	bfc8      	it	gt
 8019e64:	8081      	strhgt	r1, [r0, #4]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	da04      	bge.n	8019e74 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8019e6a:	88c1      	ldrh	r1, [r0, #6]
 8019e6c:	440b      	add	r3, r1
 8019e6e:	80c3      	strh	r3, [r0, #6]
 8019e70:	2300      	movs	r3, #0
 8019e72:	8043      	strh	r3, [r0, #2]
 8019e74:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019e78:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019e7c:	1a52      	subs	r2, r2, r1
 8019e7e:	4293      	cmp	r3, r2
 8019e80:	bfc8      	it	gt
 8019e82:	80c2      	strhgt	r2, [r0, #6]
 8019e84:	bd10      	pop	{r4, pc}
	...

08019e88 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019e88:	4b10      	ldr	r3, [pc, #64]	; (8019ecc <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8019e8a:	b510      	push	{r4, lr}
 8019e8c:	460c      	mov	r4, r1
 8019e8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019e92:	4b0f      	ldr	r3, [pc, #60]	; (8019ed0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8019e94:	4620      	mov	r0, r4
 8019e96:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019e9a:	f7ff ffd0 	bl	8019e3e <_ZN8touchgfx4Rect10restrictToEss>
 8019e9e:	4b0d      	ldr	r3, [pc, #52]	; (8019ed4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8019ea0:	6818      	ldr	r0, [r3, #0]
 8019ea2:	b190      	cbz	r0, 8019eca <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8019ea4:	6803      	ldr	r3, [r0, #0]
 8019ea6:	4621      	mov	r1, r4
 8019ea8:	689b      	ldr	r3, [r3, #8]
 8019eaa:	4798      	blx	r3
 8019eac:	4b0a      	ldr	r3, [pc, #40]	; (8019ed8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8019eae:	6818      	ldr	r0, [r3, #0]
 8019eb0:	b118      	cbz	r0, 8019eba <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8019eb2:	6803      	ldr	r3, [r0, #0]
 8019eb4:	4621      	mov	r1, r4
 8019eb6:	689b      	ldr	r3, [r3, #8]
 8019eb8:	4798      	blx	r3
 8019eba:	4b08      	ldr	r3, [pc, #32]	; (8019edc <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8019ebc:	4621      	mov	r1, r4
 8019ebe:	6818      	ldr	r0, [r3, #0]
 8019ec0:	6803      	ldr	r3, [r0, #0]
 8019ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ec6:	69db      	ldr	r3, [r3, #28]
 8019ec8:	4718      	bx	r3
 8019eca:	bd10      	pop	{r4, pc}
 8019ecc:	200150ea 	.word	0x200150ea
 8019ed0:	200150e8 	.word	0x200150e8
 8019ed4:	20015130 	.word	0x20015130
 8019ed8:	2001512c 	.word	0x2001512c
 8019edc:	200150f4 	.word	0x200150f4

08019ee0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ee2:	4606      	mov	r6, r0
 8019ee4:	4608      	mov	r0, r1
 8019ee6:	460f      	mov	r7, r1
 8019ee8:	f7fc fe4f 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019eec:	b9e8      	cbnz	r0, 8019f2a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019eee:	f9b7 5000 	ldrsh.w	r5, [r7]
 8019ef2:	f9b6 4000 	ldrsh.w	r4, [r6]
 8019ef6:	42a5      	cmp	r5, r4
 8019ef8:	db17      	blt.n	8019f2a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019efa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8019efe:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8019f02:	429a      	cmp	r2, r3
 8019f04:	db11      	blt.n	8019f2a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019f06:	88b9      	ldrh	r1, [r7, #4]
 8019f08:	440d      	add	r5, r1
 8019f0a:	88b1      	ldrh	r1, [r6, #4]
 8019f0c:	440c      	add	r4, r1
 8019f0e:	b22d      	sxth	r5, r5
 8019f10:	b224      	sxth	r4, r4
 8019f12:	42a5      	cmp	r5, r4
 8019f14:	dc09      	bgt.n	8019f2a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019f16:	88f8      	ldrh	r0, [r7, #6]
 8019f18:	4410      	add	r0, r2
 8019f1a:	88f2      	ldrh	r2, [r6, #6]
 8019f1c:	4413      	add	r3, r2
 8019f1e:	b200      	sxth	r0, r0
 8019f20:	b21b      	sxth	r3, r3
 8019f22:	4298      	cmp	r0, r3
 8019f24:	bfcc      	ite	gt
 8019f26:	2000      	movgt	r0, #0
 8019f28:	2001      	movle	r0, #1
 8019f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019f2c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f2e:	4604      	mov	r4, r0
 8019f30:	4608      	mov	r0, r1
 8019f32:	460d      	mov	r5, r1
 8019f34:	f7fc fe29 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019f38:	b978      	cbnz	r0, 8019f5a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8019f3a:	4620      	mov	r0, r4
 8019f3c:	f7fc fe25 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019f40:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019f44:	b150      	cbz	r0, 8019f5c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019f46:	8026      	strh	r6, [r4, #0]
 8019f48:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019f4c:	8063      	strh	r3, [r4, #2]
 8019f4e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8019f52:	80a3      	strh	r3, [r4, #4]
 8019f54:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019f58:	80e3      	strh	r3, [r4, #6]
 8019f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f5c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8019f60:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019f64:	42b1      	cmp	r1, r6
 8019f66:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019f6a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8019f6e:	460f      	mov	r7, r1
 8019f70:	88ed      	ldrh	r5, [r5, #6]
 8019f72:	bfa8      	it	ge
 8019f74:	4637      	movge	r7, r6
 8019f76:	4293      	cmp	r3, r2
 8019f78:	4618      	mov	r0, r3
 8019f7a:	4466      	add	r6, ip
 8019f7c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8019f80:	bfa8      	it	ge
 8019f82:	4610      	movge	r0, r2
 8019f84:	442a      	add	r2, r5
 8019f86:	88e5      	ldrh	r5, [r4, #6]
 8019f88:	4461      	add	r1, ip
 8019f8a:	b236      	sxth	r6, r6
 8019f8c:	8027      	strh	r7, [r4, #0]
 8019f8e:	442b      	add	r3, r5
 8019f90:	b209      	sxth	r1, r1
 8019f92:	b212      	sxth	r2, r2
 8019f94:	8060      	strh	r0, [r4, #2]
 8019f96:	b21b      	sxth	r3, r3
 8019f98:	428e      	cmp	r6, r1
 8019f9a:	bfac      	ite	ge
 8019f9c:	ebc7 0106 	rsbge	r1, r7, r6
 8019fa0:	ebc7 0101 	rsblt	r1, r7, r1
 8019fa4:	429a      	cmp	r2, r3
 8019fa6:	bfac      	ite	ge
 8019fa8:	ebc0 0202 	rsbge	r2, r0, r2
 8019fac:	ebc0 0203 	rsblt	r2, r0, r3
 8019fb0:	80a1      	strh	r1, [r4, #4]
 8019fb2:	80e2      	strh	r2, [r4, #6]
 8019fb4:	e7d1      	b.n	8019f5a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08019fb8 <_ZN8touchgfx11Application11getInstanceEv>:
 8019fb8:	4b01      	ldr	r3, [pc, #4]	; (8019fc0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8019fba:	6818      	ldr	r0, [r3, #0]
 8019fbc:	4770      	bx	lr
 8019fbe:	bf00      	nop
 8019fc0:	20015140 	.word	0x20015140

08019fc4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 8019fc4:	b570      	push	{r4, r5, r6, lr}
 8019fc6:	2200      	movs	r2, #0
 8019fc8:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8019fcc:	1d04      	adds	r4, r0, #4
 8019fce:	b295      	uxth	r5, r2
 8019fd0:	429d      	cmp	r5, r3
 8019fd2:	d20e      	bcs.n	8019ff2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 8019fd4:	f854 6b04 	ldr.w	r6, [r4], #4
 8019fd8:	4615      	mov	r5, r2
 8019fda:	3201      	adds	r2, #1
 8019fdc:	428e      	cmp	r6, r1
 8019fde:	d1f6      	bne.n	8019fce <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 8019fe0:	4428      	add	r0, r5
 8019fe2:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 8019fe6:	2bff      	cmp	r3, #255	; 0xff
 8019fe8:	d002      	beq.n	8019ff0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 8019fea:	3301      	adds	r3, #1
 8019fec:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 8019ff0:	bd70      	pop	{r4, r5, r6, pc}
 8019ff2:	18c2      	adds	r2, r0, r3
 8019ff4:	2b20      	cmp	r3, #32
 8019ff6:	f04f 0401 	mov.w	r4, #1
 8019ffa:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 8019ffe:	bf1f      	itttt	ne
 801a000:	191a      	addne	r2, r3, r4
 801a002:	f8a0 2084 	strhne.w	r2, [r0, #132]	; 0x84
 801a006:	eb00 0083 	addne.w	r0, r0, r3, lsl #2
 801a00a:	6041      	strne	r1, [r0, #4]
 801a00c:	e7f0      	b.n	8019ff0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>

0801a00e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801a00e:	b570      	push	{r4, r5, r6, lr}
 801a010:	2300      	movs	r3, #0
 801a012:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801a016:	1d04      	adds	r4, r0, #4
 801a018:	b29a      	uxth	r2, r3
 801a01a:	4296      	cmp	r6, r2
 801a01c:	d90a      	bls.n	801a034 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801a01e:	f854 2b04 	ldr.w	r2, [r4], #4
 801a022:	428a      	cmp	r2, r1
 801a024:	d107      	bne.n	801a036 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801a026:	18c5      	adds	r5, r0, r3
 801a028:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801a02c:	b11a      	cbz	r2, 801a036 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801a02e:	3a01      	subs	r2, #1
 801a030:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801a034:	bd70      	pop	{r4, r5, r6, pc}
 801a036:	3301      	adds	r3, #1
 801a038:	e7ee      	b.n	801a018 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801a03a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a03a:	2300      	movs	r3, #0
 801a03c:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a040:	30a8      	adds	r0, #168	; 0xa8
 801a042:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a046:	f802 3b01 	strb.w	r3, [r2], #1
 801a04a:	4282      	cmp	r2, r0
 801a04c:	d1fb      	bne.n	801a046 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a04e:	4770      	bx	lr

0801a050 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a050:	4603      	mov	r3, r0
 801a052:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a056:	2200      	movs	r2, #0
 801a058:	801a      	strh	r2, [r3, #0]
 801a05a:	3308      	adds	r3, #8
 801a05c:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a060:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a064:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a068:	428b      	cmp	r3, r1
 801a06a:	d1f5      	bne.n	801a058 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a06c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a070:	4770      	bx	lr
	...

0801a074 <_ZN8touchgfx11ApplicationC1Ev>:
 801a074:	b570      	push	{r4, r5, r6, lr}
 801a076:	4b19      	ldr	r3, [pc, #100]	; (801a0dc <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801a078:	2500      	movs	r5, #0
 801a07a:	4604      	mov	r4, r0
 801a07c:	30a8      	adds	r0, #168	; 0xa8
 801a07e:	f840 3ca8 	str.w	r3, [r0, #-168]
 801a082:	f820 5c24 	strh.w	r5, [r0, #-36]
 801a086:	f7ff ffe3 	bl	801a050 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a08a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a08e:	f7ff ffdf 	bl	801a050 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a092:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801a096:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801a09a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801a09e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801a0a2:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801a0a6:	490e      	ldr	r1, [pc, #56]	; (801a0e0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a0a8:	480e      	ldr	r0, [pc, #56]	; (801a0e4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a0aa:	f00e f8c9 	bl	8028240 <CRC_Lock>
 801a0ae:	4e0e      	ldr	r6, [pc, #56]	; (801a0e8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a0b0:	4b0e      	ldr	r3, [pc, #56]	; (801a0ec <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801a0b2:	b158      	cbz	r0, 801a0cc <_ZN8touchgfx11ApplicationC1Ev+0x58>
 801a0b4:	801d      	strh	r5, [r3, #0]
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	4a0d      	ldr	r2, [pc, #52]	; (801a0f0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801a0ba:	4620      	mov	r0, r4
 801a0bc:	6013      	str	r3, [r2, #0]
 801a0be:	4a0d      	ldr	r2, [pc, #52]	; (801a0f4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801a0c0:	6033      	str	r3, [r6, #0]
 801a0c2:	6013      	str	r3, [r2, #0]
 801a0c4:	f7ff ffb9 	bl	801a03a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	bd70      	pop	{r4, r5, r6, pc}
 801a0cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a0d0:	2002      	movs	r0, #2
 801a0d2:	801a      	strh	r2, [r3, #0]
 801a0d4:	6030      	str	r0, [r6, #0]
 801a0d6:	f001 fa1d 	bl	801b514 <_ZN8touchgfx6Screen4drawEv>
 801a0da:	e7ec      	b.n	801a0b6 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801a0dc:	0802df7c 	.word	0x0802df7c
 801a0e0:	b5e8b5cd 	.word	0xb5e8b5cd
 801a0e4:	f407a5c2 	.word	0xf407a5c2
 801a0e8:	20015130 	.word	0x20015130
 801a0ec:	20000044 	.word	0x20000044
 801a0f0:	20015140 	.word	0x20015140
 801a0f4:	20015134 	.word	0x20015134

0801a0f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a0f8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a0fc:	3b01      	subs	r3, #1
 801a0fe:	b29b      	uxth	r3, r3
 801a100:	428b      	cmp	r3, r1
 801a102:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a106:	b510      	push	{r4, lr}
 801a108:	d908      	bls.n	801a11c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801a10a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a10e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a112:	681a      	ldr	r2, [r3, #0]
 801a114:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a118:	685a      	ldr	r2, [r3, #4]
 801a11a:	6062      	str	r2, [r4, #4]
 801a11c:	bd10      	pop	{r4, pc}
	...

0801a120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a124:	b08f      	sub	sp, #60	; 0x3c
 801a126:	4b94      	ldr	r3, [pc, #592]	; (801a378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801a128:	4683      	mov	fp, r0
 801a12a:	ac0a      	add	r4, sp, #40	; 0x28
 801a12c:	e884 0006 	stmia.w	r4, {r1, r2}
 801a130:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a134:	4620      	mov	r0, r4
 801a136:	4b91      	ldr	r3, [pc, #580]	; (801a37c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801a138:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a13c:	f7ff fe7f 	bl	8019e3e <_ZN8touchgfx4Rect10restrictToEss>
 801a140:	4620      	mov	r0, r4
 801a142:	f7fc fd22 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a146:	2800      	cmp	r0, #0
 801a148:	d16a      	bne.n	801a220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a14a:	9403      	str	r4, [sp, #12]
 801a14c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a150:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a154:	2400      	movs	r4, #0
 801a156:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801a15a:	9301      	str	r3, [sp, #4]
 801a15c:	36a0      	adds	r6, #160	; 0xa0
 801a15e:	42a5      	cmp	r5, r4
 801a160:	d00d      	beq.n	801a17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801a162:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801a166:	9803      	ldr	r0, [sp, #12]
 801a168:	f7ff feba 	bl	8019ee0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a16c:	b128      	cbz	r0, 801a17a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801a16e:	1e69      	subs	r1, r5, #1
 801a170:	9801      	ldr	r0, [sp, #4]
 801a172:	1b09      	subs	r1, r1, r4
 801a174:	b289      	uxth	r1, r1
 801a176:	f7ff ffbf 	bl	801a0f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a17a:	3401      	adds	r4, #1
 801a17c:	e7ef      	b.n	801a15e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801a17e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a182:	1e7b      	subs	r3, r7, #1
 801a184:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801a188:	9704      	str	r7, [sp, #16]
 801a18a:	9302      	str	r3, [sp, #8]
 801a18c:	2400      	movs	r4, #0
 801a18e:	4655      	mov	r5, sl
 801a190:	9705      	str	r7, [sp, #20]
 801a192:	4626      	mov	r6, r4
 801a194:	9b05      	ldr	r3, [sp, #20]
 801a196:	2b00      	cmp	r3, #0
 801a198:	d078      	beq.n	801a28c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801a19a:	9903      	ldr	r1, [sp, #12]
 801a19c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a1a0:	f7ff fe2b 	bl	8019dfa <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a1a4:	b360      	cbz	r0, 801a200 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801a1a6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801a1aa:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801a1ae:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801a1b2:	45e6      	cmp	lr, ip
 801a1b4:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801a1b8:	db35      	blt.n	801a226 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801a1ba:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801a1be:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a1c2:	4472      	add	r2, lr
 801a1c4:	4463      	add	r3, ip
 801a1c6:	b212      	sxth	r2, r2
 801a1c8:	b21b      	sxth	r3, r3
 801a1ca:	429a      	cmp	r2, r3
 801a1cc:	dc2b      	bgt.n	801a226 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801a1ce:	fa1f f288 	uxth.w	r2, r8
 801a1d2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a1d6:	45c1      	cmp	r9, r8
 801a1d8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a1dc:	4413      	add	r3, r2
 801a1de:	fa1f fc89 	uxth.w	ip, r9
 801a1e2:	b29b      	uxth	r3, r3
 801a1e4:	fa0f fe83 	sxth.w	lr, r3
 801a1e8:	db0f      	blt.n	801a20a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801a1ea:	eba3 030c 	sub.w	r3, r3, ip
 801a1ee:	1ac9      	subs	r1, r1, r3
 801a1f0:	b209      	sxth	r1, r1
 801a1f2:	2900      	cmp	r1, #0
 801a1f4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a1f8:	dd12      	ble.n	801a220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a1fa:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801a1fe:	4604      	mov	r4, r0
 801a200:	9b05      	ldr	r3, [sp, #20]
 801a202:	3d08      	subs	r5, #8
 801a204:	3b01      	subs	r3, #1
 801a206:	9305      	str	r3, [sp, #20]
 801a208:	e7c4      	b.n	801a194 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801a20a:	4461      	add	r1, ip
 801a20c:	b209      	sxth	r1, r1
 801a20e:	4571      	cmp	r1, lr
 801a210:	dc3a      	bgt.n	801a288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a212:	eba2 020c 	sub.w	r2, r2, ip
 801a216:	b212      	sxth	r2, r2
 801a218:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801a21c:	2a00      	cmp	r2, #0
 801a21e:	dcee      	bgt.n	801a1fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801a220:	b00f      	add	sp, #60	; 0x3c
 801a222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a226:	45c1      	cmp	r9, r8
 801a228:	db2e      	blt.n	801a288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a22a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801a22e:	4499      	add	r9, r3
 801a230:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a234:	4498      	add	r8, r3
 801a236:	fa0f f989 	sxth.w	r9, r9
 801a23a:	fa0f f888 	sxth.w	r8, r8
 801a23e:	45c1      	cmp	r9, r8
 801a240:	dc22      	bgt.n	801a288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a242:	fa1f f28c 	uxth.w	r2, ip
 801a246:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a24a:	45e6      	cmp	lr, ip
 801a24c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a250:	4413      	add	r3, r2
 801a252:	fa1f f88e 	uxth.w	r8, lr
 801a256:	b29b      	uxth	r3, r3
 801a258:	fa0f f983 	sxth.w	r9, r3
 801a25c:	db0a      	blt.n	801a274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801a25e:	eba3 0308 	sub.w	r3, r3, r8
 801a262:	1ac9      	subs	r1, r1, r3
 801a264:	b209      	sxth	r1, r1
 801a266:	2900      	cmp	r1, #0
 801a268:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801a26c:	ddd8      	ble.n	801a220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a26e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801a272:	e7c4      	b.n	801a1fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801a274:	4441      	add	r1, r8
 801a276:	b209      	sxth	r1, r1
 801a278:	4549      	cmp	r1, r9
 801a27a:	dc05      	bgt.n	801a288 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a27c:	eba2 0208 	sub.w	r2, r2, r8
 801a280:	b212      	sxth	r2, r2
 801a282:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a286:	e7c9      	b.n	801a21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801a288:	4606      	mov	r6, r0
 801a28a:	e7b9      	b.n	801a200 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801a28c:	2c00      	cmp	r4, #0
 801a28e:	f47f af7d 	bne.w	801a18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801a292:	2e00      	cmp	r6, #0
 801a294:	f000 81e1 	beq.w	801a65a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801a298:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801a29c:	4655      	mov	r5, sl
 801a29e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801a2a2:	b2b9      	uxth	r1, r7
 801a2a4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801a2a8:	b2b3      	uxth	r3, r6
 801a2aa:	9105      	str	r1, [sp, #20]
 801a2ac:	9805      	ldr	r0, [sp, #20]
 801a2ae:	441a      	add	r2, r3
 801a2b0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a2b4:	b292      	uxth	r2, r2
 801a2b6:	4401      	add	r1, r0
 801a2b8:	fa0f f882 	sxth.w	r8, r2
 801a2bc:	b289      	uxth	r1, r1
 801a2be:	9106      	str	r1, [sp, #24]
 801a2c0:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801a2c4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801a2c8:	9b04      	ldr	r3, [sp, #16]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d058      	beq.n	801a380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801a2ce:	9903      	ldr	r1, [sp, #12]
 801a2d0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a2d4:	f7ff fd91 	bl	8019dfa <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a2d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a2dc:	b1d8      	cbz	r0, 801a316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a2de:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801a2e2:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801a2e6:	4576      	cmp	r6, lr
 801a2e8:	dc26      	bgt.n	801a338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801a2ea:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801a2ee:	44f4      	add	ip, lr
 801a2f0:	fa0f fc8c 	sxth.w	ip, ip
 801a2f4:	45e0      	cmp	r8, ip
 801a2f6:	db1f      	blt.n	801a338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801a2f8:	428f      	cmp	r7, r1
 801a2fa:	fa1f fc81 	uxth.w	ip, r1
 801a2fe:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801a302:	dc0f      	bgt.n	801a324 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801a304:	9806      	ldr	r0, [sp, #24]
 801a306:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801a30a:	eba0 0c0c 	sub.w	ip, r0, ip
 801a30e:	eba1 010c 	sub.w	r1, r1, ip
 801a312:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801a316:	4620      	mov	r0, r4
 801a318:	9904      	ldr	r1, [sp, #16]
 801a31a:	3d08      	subs	r5, #8
 801a31c:	4604      	mov	r4, r0
 801a31e:	3901      	subs	r1, #1
 801a320:	9104      	str	r1, [sp, #16]
 801a322:	e7cf      	b.n	801a2c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801a324:	4461      	add	r1, ip
 801a326:	b209      	sxth	r1, r1
 801a328:	4549      	cmp	r1, r9
 801a32a:	dcf5      	bgt.n	801a318 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a32c:	9905      	ldr	r1, [sp, #20]
 801a32e:	eba1 0c0c 	sub.w	ip, r1, ip
 801a332:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801a336:	e7ee      	b.n	801a316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a338:	428f      	cmp	r7, r1
 801a33a:	dced      	bgt.n	801a318 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a33c:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801a340:	4461      	add	r1, ip
 801a342:	b209      	sxth	r1, r1
 801a344:	4589      	cmp	r9, r1
 801a346:	dbe7      	blt.n	801a318 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a348:	4576      	cmp	r6, lr
 801a34a:	fa1f fc8e 	uxth.w	ip, lr
 801a34e:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801a352:	dc08      	bgt.n	801a366 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801a354:	eba2 0c0c 	sub.w	ip, r2, ip
 801a358:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801a35c:	eba1 010c 	sub.w	r1, r1, ip
 801a360:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801a364:	e7d7      	b.n	801a316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a366:	4461      	add	r1, ip
 801a368:	b209      	sxth	r1, r1
 801a36a:	4588      	cmp	r8, r1
 801a36c:	dbd4      	blt.n	801a318 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a36e:	eba3 0c0c 	sub.w	ip, r3, ip
 801a372:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801a376:	e7ce      	b.n	801a316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a378:	200150ea 	.word	0x200150ea
 801a37c:	200150e8 	.word	0x200150e8
 801a380:	2c00      	cmp	r4, #0
 801a382:	f000 816a 	beq.w	801a65a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801a386:	9b02      	ldr	r3, [sp, #8]
 801a388:	3301      	adds	r3, #1
 801a38a:	f000 8166 	beq.w	801a65a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801a38e:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801a392:	9803      	ldr	r0, [sp, #12]
 801a394:	4621      	mov	r1, r4
 801a396:	f7ff fda3 	bl	8019ee0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a39a:	b120      	cbz	r0, 801a3a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801a39c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a3a0:	9801      	ldr	r0, [sp, #4]
 801a3a2:	f7ff fea9 	bl	801a0f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a3a6:	9903      	ldr	r1, [sp, #12]
 801a3a8:	4620      	mov	r0, r4
 801a3aa:	f7ff fd26 	bl	8019dfa <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a3ae:	2800      	cmp	r0, #0
 801a3b0:	f000 809b 	beq.w	801a4ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801a3b4:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801a3b8:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801a3bc:	b281      	uxth	r1, r0
 801a3be:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801a3c2:	9309      	str	r3, [sp, #36]	; 0x24
 801a3c4:	eb01 0c03 	add.w	ip, r1, r3
 801a3c8:	b2ab      	uxth	r3, r5
 801a3ca:	4285      	cmp	r5, r0
 801a3cc:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801a3d0:	fa1f f98c 	uxth.w	r9, ip
 801a3d4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801a3d8:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801a3dc:	eb03 040c 	add.w	r4, r3, ip
 801a3e0:	b2a4      	uxth	r4, r4
 801a3e2:	9405      	str	r4, [sp, #20]
 801a3e4:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801a3e8:	9404      	str	r4, [sp, #16]
 801a3ea:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801a3ee:	f340 809a 	ble.w	801a526 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801a3f2:	1a5b      	subs	r3, r3, r1
 801a3f4:	4596      	cmp	lr, r2
 801a3f6:	fa0f f589 	sxth.w	r5, r9
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	b21e      	sxth	r6, r3
 801a3fe:	dd2e      	ble.n	801a45e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801a400:	9f02      	ldr	r7, [sp, #8]
 801a402:	fa1f fe8e 	uxth.w	lr, lr
 801a406:	b292      	uxth	r2, r2
 801a408:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801a40c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801a410:	9f04      	ldr	r7, [sp, #16]
 801a412:	ebae 0102 	sub.w	r1, lr, r2
 801a416:	4486      	add	lr, r0
 801a418:	1b7f      	subs	r7, r7, r5
 801a41a:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801a41e:	b289      	uxth	r1, r1
 801a420:	442a      	add	r2, r5
 801a422:	fa0f fe8e 	sxth.w	lr, lr
 801a426:	b20c      	sxth	r4, r1
 801a428:	b212      	sxth	r2, r2
 801a42a:	4367      	muls	r7, r4
 801a42c:	ebae 0202 	sub.w	r2, lr, r2
 801a430:	4372      	muls	r2, r6
 801a432:	4297      	cmp	r7, r2
 801a434:	db09      	blt.n	801a44a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801a436:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801a43a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801a43e:	449c      	add	ip, r3
 801a440:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a444:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801a448:	e680      	b.n	801a14c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a44a:	4401      	add	r1, r0
 801a44c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801a450:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801a454:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a458:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a45c:	e676      	b.n	801a14c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a45e:	9f04      	ldr	r7, [sp, #16]
 801a460:	42bd      	cmp	r5, r7
 801a462:	da27      	bge.n	801a4b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801a464:	9902      	ldr	r1, [sp, #8]
 801a466:	1b7f      	subs	r7, r7, r5
 801a468:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801a46c:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801a470:	eb04 010e 	add.w	r1, r4, lr
 801a474:	fa1f f881 	uxth.w	r8, r1
 801a478:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801a47c:	4411      	add	r1, r2
 801a47e:	fa0f f988 	sxth.w	r9, r8
 801a482:	eba2 020e 	sub.w	r2, r2, lr
 801a486:	eba1 0108 	sub.w	r1, r1, r8
 801a48a:	4372      	muls	r2, r6
 801a48c:	b289      	uxth	r1, r1
 801a48e:	fa0f f881 	sxth.w	r8, r1
 801a492:	fb08 f707 	mul.w	r7, r8, r7
 801a496:	42ba      	cmp	r2, r7
 801a498:	dc06      	bgt.n	801a4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801a49a:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801a49e:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801a4a2:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801a4a6:	e7ca      	b.n	801a43e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801a4a8:	4421      	add	r1, r4
 801a4aa:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801a4ae:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a4b2:	e64b      	b.n	801a14c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a4b4:	9d05      	ldr	r5, [sp, #20]
 801a4b6:	2c06      	cmp	r4, #6
 801a4b8:	eba9 0505 	sub.w	r5, r9, r5
 801a4bc:	b2ad      	uxth	r5, r5
 801a4be:	fa0f fe85 	sxth.w	lr, r5
 801a4c2:	d818      	bhi.n	801a4f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801a4c4:	9b04      	ldr	r3, [sp, #16]
 801a4c6:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801a4ca:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801a4ce:	1c63      	adds	r3, r4, #1
 801a4d0:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801a4d4:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801a4d8:	9b01      	ldr	r3, [sp, #4]
 801a4da:	9d01      	ldr	r5, [sp, #4]
 801a4dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a4e0:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801a4e4:	805a      	strh	r2, [r3, #2]
 801a4e6:	809e      	strh	r6, [r3, #4]
 801a4e8:	80d9      	strh	r1, [r3, #6]
 801a4ea:	9b02      	ldr	r3, [sp, #8]
 801a4ec:	f1aa 0a08 	sub.w	sl, sl, #8
 801a4f0:	3b01      	subs	r3, #1
 801a4f2:	9302      	str	r3, [sp, #8]
 801a4f4:	e747      	b.n	801a386 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801a4f6:	9a02      	ldr	r2, [sp, #8]
 801a4f8:	45b6      	cmp	lr, r6
 801a4fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a4fe:	db0d      	blt.n	801a51c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801a500:	449c      	add	ip, r3
 801a502:	445a      	add	r2, fp
 801a504:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801a508:	fa1f fc8c 	uxth.w	ip, ip
 801a50c:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801a510:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801a514:	448c      	add	ip, r1
 801a516:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801a51a:	e617      	b.n	801a14c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a51c:	445a      	add	r2, fp
 801a51e:	44ac      	add	ip, r5
 801a520:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801a524:	e78e      	b.n	801a444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a526:	fa1f f18e 	uxth.w	r1, lr
 801a52a:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801a52e:	b293      	uxth	r3, r2
 801a530:	4596      	cmp	lr, r2
 801a532:	eb01 0806 	add.w	r8, r1, r6
 801a536:	9306      	str	r3, [sp, #24]
 801a538:	fa1f f888 	uxth.w	r8, r8
 801a53c:	9f06      	ldr	r7, [sp, #24]
 801a53e:	fa0f f388 	sxth.w	r3, r8
 801a542:	9307      	str	r3, [sp, #28]
 801a544:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801a548:	443b      	add	r3, r7
 801a54a:	b29b      	uxth	r3, r3
 801a54c:	9308      	str	r3, [sp, #32]
 801a54e:	da25      	bge.n	801a59c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801a550:	9905      	ldr	r1, [sp, #20]
 801a552:	eba3 0308 	sub.w	r3, r3, r8
 801a556:	eba2 020e 	sub.w	r2, r2, lr
 801a55a:	1b40      	subs	r0, r0, r5
 801a55c:	eba9 0401 	sub.w	r4, r9, r1
 801a560:	b29b      	uxth	r3, r3
 801a562:	b2a4      	uxth	r4, r4
 801a564:	b219      	sxth	r1, r3
 801a566:	fa0f f984 	sxth.w	r9, r4
 801a56a:	4348      	muls	r0, r1
 801a56c:	fb09 f202 	mul.w	r2, r9, r2
 801a570:	4282      	cmp	r2, r0
 801a572:	9a02      	ldr	r2, [sp, #8]
 801a574:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a578:	445a      	add	r2, fp
 801a57a:	dc06      	bgt.n	801a58a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801a57c:	9b07      	ldr	r3, [sp, #28]
 801a57e:	44a4      	add	ip, r4
 801a580:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801a584:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801a588:	e75c      	b.n	801a444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a58a:	9904      	ldr	r1, [sp, #16]
 801a58c:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801a590:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801a594:	4433      	add	r3, r6
 801a596:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a59a:	e5d7      	b.n	801a14c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a59c:	9f06      	ldr	r7, [sp, #24]
 801a59e:	9b04      	ldr	r3, [sp, #16]
 801a5a0:	1bc9      	subs	r1, r1, r7
 801a5a2:	fa0f f789 	sxth.w	r7, r9
 801a5a6:	b289      	uxth	r1, r1
 801a5a8:	429f      	cmp	r7, r3
 801a5aa:	fa0f fe81 	sxth.w	lr, r1
 801a5ae:	dd22      	ble.n	801a5f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801a5b0:	9a05      	ldr	r2, [sp, #20]
 801a5b2:	1b40      	subs	r0, r0, r5
 801a5b4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a5b8:	eba9 0202 	sub.w	r2, r9, r2
 801a5bc:	9d07      	ldr	r5, [sp, #28]
 801a5be:	fb0e f000 	mul.w	r0, lr, r0
 801a5c2:	b292      	uxth	r2, r2
 801a5c4:	eba5 0a03 	sub.w	sl, r5, r3
 801a5c8:	9b02      	ldr	r3, [sp, #8]
 801a5ca:	b214      	sxth	r4, r2
 801a5cc:	00db      	lsls	r3, r3, #3
 801a5ce:	fb04 fa0a 	mul.w	sl, r4, sl
 801a5d2:	445b      	add	r3, fp
 801a5d4:	4550      	cmp	r0, sl
 801a5d6:	db03      	blt.n	801a5e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801a5d8:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801a5dc:	4494      	add	ip, r2
 801a5de:	e731      	b.n	801a444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a5e0:	9a04      	ldr	r2, [sp, #16]
 801a5e2:	4431      	add	r1, r6
 801a5e4:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801a5e8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801a5ec:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801a5f0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a5f4:	e75b      	b.n	801a4ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801a5f6:	9b08      	ldr	r3, [sp, #32]
 801a5f8:	2c06      	cmp	r4, #6
 801a5fa:	eba3 0308 	sub.w	r3, r3, r8
 801a5fe:	b29b      	uxth	r3, r3
 801a600:	b21d      	sxth	r5, r3
 801a602:	d813      	bhi.n	801a62c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801a604:	9b07      	ldr	r3, [sp, #28]
 801a606:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801a60a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801a60e:	1c63      	adds	r3, r4, #1
 801a610:	9901      	ldr	r1, [sp, #4]
 801a612:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801a616:	9b01      	ldr	r3, [sp, #4]
 801a618:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801a61c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a620:	805a      	strh	r2, [r3, #2]
 801a622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a624:	f8a3 e006 	strh.w	lr, [r3, #6]
 801a628:	809a      	strh	r2, [r3, #4]
 801a62a:	e75e      	b.n	801a4ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801a62c:	9802      	ldr	r0, [sp, #8]
 801a62e:	4575      	cmp	r5, lr
 801a630:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a634:	db0d      	blt.n	801a652 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801a636:	4431      	add	r1, r6
 801a638:	9b06      	ldr	r3, [sp, #24]
 801a63a:	4458      	add	r0, fp
 801a63c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a640:	b289      	uxth	r1, r1
 801a642:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801a646:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a64a:	4419      	add	r1, r3
 801a64c:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801a650:	e57c      	b.n	801a14c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a652:	4458      	add	r0, fp
 801a654:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801a658:	e79c      	b.n	801a594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801a65a:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801a65e:	2e07      	cmp	r6, #7
 801a660:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801a664:	d812      	bhi.n	801a68c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801a666:	1c75      	adds	r5, r6, #1
 801a668:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801a66c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801a670:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801a674:	9d01      	ldr	r5, [sp, #4]
 801a676:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801a67a:	442c      	add	r4, r5
 801a67c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801a680:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801a684:	8061      	strh	r1, [r4, #2]
 801a686:	80a2      	strh	r2, [r4, #4]
 801a688:	80e3      	strh	r3, [r4, #6]
 801a68a:	e5c9      	b.n	801a220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a68c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a690:	3e01      	subs	r6, #1
 801a692:	445c      	add	r4, fp
 801a694:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801a698:	f04f 37ff 	mov.w	r7, #4294967295
 801a69c:	2500      	movs	r5, #0
 801a69e:	9305      	str	r3, [sp, #20]
 801a6a0:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801a6a4:	1e72      	subs	r2, r6, #1
 801a6a6:	9302      	str	r3, [sp, #8]
 801a6a8:	4691      	mov	r9, r2
 801a6aa:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801a6ae:	9304      	str	r3, [sp, #16]
 801a6b0:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801a6b4:	f1b9 3fff 	cmp.w	r9, #4294967295
 801a6b8:	6818      	ldr	r0, [r3, #0]
 801a6ba:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a6be:	9207      	str	r2, [sp, #28]
 801a6c0:	bf16      	itet	ne
 801a6c2:	9905      	ldrne	r1, [sp, #20]
 801a6c4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801a6c8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801a6cc:	9306      	str	r3, [sp, #24]
 801a6ce:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a6d2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801a6d6:	fb18 f801 	smulbb	r8, r8, r1
 801a6da:	6859      	ldr	r1, [r3, #4]
 801a6dc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a6e0:	4671      	mov	r1, lr
 801a6e2:	a80c      	add	r0, sp, #48	; 0x30
 801a6e4:	f7ff fc22 	bl	8019f2c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a6e8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801a6ec:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801a6f0:	f04f 0c08 	mov.w	ip, #8
 801a6f4:	9b04      	ldr	r3, [sp, #16]
 801a6f6:	9a02      	ldr	r2, [sp, #8]
 801a6f8:	fb10 f001 	smulbb	r0, r0, r1
 801a6fc:	fb02 8803 	mla	r8, r2, r3, r8
 801a700:	eba0 0108 	sub.w	r1, r0, r8
 801a704:	fb90 f0fc 	sdiv	r0, r0, ip
 801a708:	4288      	cmp	r0, r1
 801a70a:	dc20      	bgt.n	801a74e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801a70c:	4551      	cmp	r1, sl
 801a70e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801a712:	da03      	bge.n	801a71c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801a714:	b1d9      	cbz	r1, 801a74e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801a716:	468a      	mov	sl, r1
 801a718:	464f      	mov	r7, r9
 801a71a:	4635      	mov	r5, r6
 801a71c:	f109 39ff 	add.w	r9, r9, #4294967295
 801a720:	f119 0f02 	cmn.w	r9, #2
 801a724:	d1c6      	bne.n	801a6b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801a726:	4616      	mov	r6, r2
 801a728:	3201      	adds	r2, #1
 801a72a:	f1a4 0408 	sub.w	r4, r4, #8
 801a72e:	d1b7      	bne.n	801a6a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801a730:	9b01      	ldr	r3, [sp, #4]
 801a732:	b2ac      	uxth	r4, r5
 801a734:	00ed      	lsls	r5, r5, #3
 801a736:	1958      	adds	r0, r3, r5
 801a738:	1c7b      	adds	r3, r7, #1
 801a73a:	d10b      	bne.n	801a754 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801a73c:	4601      	mov	r1, r0
 801a73e:	9803      	ldr	r0, [sp, #12]
 801a740:	f7ff fbf4 	bl	8019f2c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a744:	4621      	mov	r1, r4
 801a746:	9801      	ldr	r0, [sp, #4]
 801a748:	f7ff fcd6 	bl	801a0f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a74c:	e4fe      	b.n	801a14c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a74e:	464f      	mov	r7, r9
 801a750:	4635      	mov	r5, r6
 801a752:	e7ed      	b.n	801a730 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801a754:	9b01      	ldr	r3, [sp, #4]
 801a756:	00ff      	lsls	r7, r7, #3
 801a758:	445d      	add	r5, fp
 801a75a:	19d9      	adds	r1, r3, r7
 801a75c:	445f      	add	r7, fp
 801a75e:	f7ff fbe5 	bl	8019f2c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a762:	9b03      	ldr	r3, [sp, #12]
 801a764:	cb03      	ldmia	r3!, {r0, r1}
 801a766:	9b03      	ldr	r3, [sp, #12]
 801a768:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801a76c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801a770:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801a774:	6869      	ldr	r1, [r5, #4]
 801a776:	c303      	stmia	r3!, {r0, r1}
 801a778:	e7e4      	b.n	801a744 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801a77a:	bf00      	nop

0801a77c <_ZN8touchgfx11Application10invalidateEv>:
 801a77c:	4b09      	ldr	r3, [pc, #36]	; (801a7a4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801a77e:	b082      	sub	sp, #8
 801a780:	2100      	movs	r1, #0
 801a782:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a786:	4b08      	ldr	r3, [pc, #32]	; (801a7a8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801a788:	9100      	str	r1, [sp, #0]
 801a78a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a78e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a792:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a796:	ab02      	add	r3, sp, #8
 801a798:	e913 0006 	ldmdb	r3, {r1, r2}
 801a79c:	b002      	add	sp, #8
 801a79e:	f7ff bcbf 	b.w	801a120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a7a2:	bf00      	nop
 801a7a4:	200150e8 	.word	0x200150e8
 801a7a8:	200150ea 	.word	0x200150ea

0801a7ac <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b0:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801a7b4:	b09b      	sub	sp, #108	; 0x6c
 801a7b6:	4604      	mov	r4, r0
 801a7b8:	4630      	mov	r0, r6
 801a7ba:	f7fc f9e6 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a7be:	4605      	mov	r5, r0
 801a7c0:	b940      	cbnz	r0, 801a7d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801a7c2:	4620      	mov	r0, r4
 801a7c4:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a7c8:	f7ff fcaa 	bl	801a120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a7cc:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801a7d0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801a7d4:	4bc8      	ldr	r3, [pc, #800]	; (801aaf8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d03e      	beq.n	801a85a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801a7dc:	4dc7      	ldr	r5, [pc, #796]	; (801aafc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801a7de:	4628      	mov	r0, r5
 801a7e0:	f7fc f9d3 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a7e4:	4606      	mov	r6, r0
 801a7e6:	2800      	cmp	r0, #0
 801a7e8:	d137      	bne.n	801a85a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801a7ea:	4628      	mov	r0, r5
 801a7ec:	f7ff f9c6 	bl	8019b7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a7f0:	6829      	ldr	r1, [r5, #0]
 801a7f2:	686a      	ldr	r2, [r5, #4]
 801a7f4:	4620      	mov	r0, r4
 801a7f6:	f7ff fc93 	bl	801a120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a7fa:	802e      	strh	r6, [r5, #0]
 801a7fc:	806e      	strh	r6, [r5, #2]
 801a7fe:	80ae      	strh	r6, [r5, #4]
 801a800:	80ee      	strh	r6, [r5, #6]
 801a802:	ae09      	add	r6, sp, #36	; 0x24
 801a804:	4630      	mov	r0, r6
 801a806:	f7ff fc23 	bl	801a050 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a80a:	4abd      	ldr	r2, [pc, #756]	; (801ab00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801a80c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801a810:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801a814:	8815      	ldrh	r5, [r2, #0]
 801a816:	9202      	str	r2, [sp, #8]
 801a818:	462b      	mov	r3, r5
 801a81a:	429f      	cmp	r7, r3
 801a81c:	d924      	bls.n	801a868 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801a81e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801a822:	2907      	cmp	r1, #7
 801a824:	d816      	bhi.n	801a854 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801a826:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a82a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801a82e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801a832:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801a836:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801a83a:	1c4a      	adds	r2, r1, #1
 801a83c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801a840:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801a844:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801a848:	f8a2 9002 	strh.w	r9, [r2, #2]
 801a84c:	f8a2 e004 	strh.w	lr, [r2, #4]
 801a850:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a854:	3301      	adds	r3, #1
 801a856:	b29b      	uxth	r3, r3
 801a858:	e7df      	b.n	801a81a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801a85a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d1cf      	bne.n	801a802 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801a862:	b01b      	add	sp, #108	; 0x6c
 801a864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a868:	462f      	mov	r7, r5
 801a86a:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801a86e:	42bb      	cmp	r3, r7
 801a870:	d90b      	bls.n	801a88a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801a872:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801a876:	3701      	adds	r7, #1
 801a878:	4620      	mov	r0, r4
 801a87a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801a87e:	b2bf      	uxth	r7, r7
 801a880:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801a884:	f7ff fc4c 	bl	801a120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a888:	e7ef      	b.n	801a86a <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801a88a:	4a9e      	ldr	r2, [pc, #632]	; (801ab04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801a88c:	6813      	ldr	r3, [r2, #0]
 801a88e:	4690      	mov	r8, r2
 801a890:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a894:	2b01      	cmp	r3, #1
 801a896:	f040 80e4 	bne.w	801aa62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801a89a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a89e:	4629      	mov	r1, r5
 801a8a0:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801a8a4:	2500      	movs	r5, #0
 801a8a6:	33aa      	adds	r3, #170	; 0xaa
 801a8a8:	428f      	cmp	r7, r1
 801a8aa:	f103 0308 	add.w	r3, r3, #8
 801a8ae:	dd0a      	ble.n	801a8c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801a8b0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801a8b4:	3101      	adds	r1, #1
 801a8b6:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801a8ba:	4402      	add	r2, r0
 801a8bc:	b212      	sxth	r2, r2
 801a8be:	4295      	cmp	r5, r2
 801a8c0:	bfb8      	it	lt
 801a8c2:	4615      	movlt	r5, r2
 801a8c4:	e7f0      	b.n	801a8a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801a8c6:	4b90      	ldr	r3, [pc, #576]	; (801ab08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801a8c8:	f8df b238 	ldr.w	fp, [pc, #568]	; 801ab04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801a8cc:	881b      	ldrh	r3, [r3, #0]
 801a8ce:	46d8      	mov	r8, fp
 801a8d0:	2b0f      	cmp	r3, #15
 801a8d2:	bf8c      	ite	hi
 801a8d4:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801a8d8:	f04f 0a01 	movls.w	sl, #1
 801a8dc:	2300      	movs	r3, #0
 801a8de:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a8e2:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801a8e6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801a8ea:	4438      	add	r0, r7
 801a8ec:	b207      	sxth	r7, r0
 801a8ee:	f8db 0000 	ldr.w	r0, [fp]
 801a8f2:	42bd      	cmp	r5, r7
 801a8f4:	6803      	ldr	r3, [r0, #0]
 801a8f6:	f340 8084 	ble.w	801aa02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801a8fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a8fe:	4798      	blx	r3
 801a900:	eb07 030a 	add.w	r3, r7, sl
 801a904:	4298      	cmp	r0, r3
 801a906:	da07      	bge.n	801a918 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801a908:	4285      	cmp	r5, r0
 801a90a:	dd05      	ble.n	801a918 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801a90c:	4287      	cmp	r7, r0
 801a90e:	dd6d      	ble.n	801a9ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a910:	2f00      	cmp	r7, #0
 801a912:	dd6b      	ble.n	801a9ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a914:	4628      	mov	r0, r5
 801a916:	e004      	b.n	801a922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801a918:	4287      	cmp	r7, r0
 801a91a:	dcfb      	bgt.n	801a914 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801a91c:	42a8      	cmp	r0, r5
 801a91e:	bfa8      	it	ge
 801a920:	4628      	movge	r0, r5
 801a922:	4b7a      	ldr	r3, [pc, #488]	; (801ab0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801a924:	1bc0      	subs	r0, r0, r7
 801a926:	2200      	movs	r2, #0
 801a928:	f8ad 7016 	strh.w	r7, [sp, #22]
 801a92c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a930:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a934:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a938:	9b02      	ldr	r3, [sp, #8]
 801a93a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a93e:	881f      	ldrh	r7, [r3, #0]
 801a940:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a944:	42bb      	cmp	r3, r7
 801a946:	d9cc      	bls.n	801a8e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801a948:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801a94c:	ab07      	add	r3, sp, #28
 801a94e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a952:	6851      	ldr	r1, [r2, #4]
 801a954:	c303      	stmia	r3!, {r0, r1}
 801a956:	a905      	add	r1, sp, #20
 801a958:	a807      	add	r0, sp, #28
 801a95a:	f7ff fa4e 	bl	8019dfa <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a95e:	2800      	cmp	r0, #0
 801a960:	d04c      	beq.n	801a9fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801a962:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a966:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801a96a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801a96e:	4686      	mov	lr, r0
 801a970:	4290      	cmp	r0, r2
 801a972:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a976:	4448      	add	r0, r9
 801a978:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801a97c:	bfb8      	it	lt
 801a97e:	4696      	movlt	lr, r2
 801a980:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a984:	444a      	add	r2, r9
 801a986:	b280      	uxth	r0, r0
 801a988:	4299      	cmp	r1, r3
 801a98a:	468c      	mov	ip, r1
 801a98c:	b292      	uxth	r2, r2
 801a98e:	9303      	str	r3, [sp, #12]
 801a990:	bfb8      	it	lt
 801a992:	469c      	movlt	ip, r3
 801a994:	b203      	sxth	r3, r0
 801a996:	fa0f f982 	sxth.w	r9, r2
 801a99a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801a99e:	f8ad c01e 	strh.w	ip, [sp, #30]
 801a9a2:	454b      	cmp	r3, r9
 801a9a4:	bfb8      	it	lt
 801a9a6:	4602      	movlt	r2, r0
 801a9a8:	9b03      	ldr	r3, [sp, #12]
 801a9aa:	eba2 020e 	sub.w	r2, r2, lr
 801a9ae:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a9b2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801a9b6:	4411      	add	r1, r2
 801a9b8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a9bc:	4413      	add	r3, r2
 801a9be:	b289      	uxth	r1, r1
 801a9c0:	b29b      	uxth	r3, r3
 801a9c2:	b208      	sxth	r0, r1
 801a9c4:	b21a      	sxth	r2, r3
 801a9c6:	4290      	cmp	r0, r2
 801a9c8:	bfb8      	it	lt
 801a9ca:	460b      	movlt	r3, r1
 801a9cc:	eba3 030c 	sub.w	r3, r3, ip
 801a9d0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a9d4:	a807      	add	r0, sp, #28
 801a9d6:	f7fc f8d8 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a9da:	b920      	cbnz	r0, 801a9e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801a9dc:	6823      	ldr	r3, [r4, #0]
 801a9de:	a907      	add	r1, sp, #28
 801a9e0:	4620      	mov	r0, r4
 801a9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a9e4:	4798      	blx	r3
 801a9e6:	3701      	adds	r7, #1
 801a9e8:	b2bf      	uxth	r7, r7
 801a9ea:	e7a9      	b.n	801a940 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801a9ec:	f8d8 0000 	ldr.w	r0, [r8]
 801a9f0:	2101      	movs	r1, #1
 801a9f2:	6803      	ldr	r3, [r0, #0]
 801a9f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801a9f8:	4798      	blx	r3
 801a9fa:	e772      	b.n	801a8e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801a9fc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801aa00:	e7e8      	b.n	801a9d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801aa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa04:	4798      	blx	r3
 801aa06:	4b42      	ldr	r3, [pc, #264]	; (801ab10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801aa08:	781b      	ldrb	r3, [r3, #0]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	f43f af29 	beq.w	801a862 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801aa10:	2300      	movs	r3, #0
 801aa12:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801aa16:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801aa1a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801aa1e:	9b02      	ldr	r3, [sp, #8]
 801aa20:	881b      	ldrh	r3, [r3, #0]
 801aa22:	429d      	cmp	r5, r3
 801aa24:	f67f af1d 	bls.w	801a862 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801aa28:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801aa2c:	2907      	cmp	r1, #7
 801aa2e:	d815      	bhi.n	801aa5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801aa30:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801aa34:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801aa38:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801aa3c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801aa40:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801aa44:	1c4a      	adds	r2, r1, #1
 801aa46:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801aa4a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801aa4e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801aa52:	f8a2 e002 	strh.w	lr, [r2, #2]
 801aa56:	f8a2 c004 	strh.w	ip, [r2, #4]
 801aa5a:	80d7      	strh	r7, [r2, #6]
 801aa5c:	3301      	adds	r3, #1
 801aa5e:	b29b      	uxth	r3, r3
 801aa60:	e7df      	b.n	801aa22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801aa62:	2b02      	cmp	r3, #2
 801aa64:	f040 8135 	bne.w	801acd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801aa68:	4b2a      	ldr	r3, [pc, #168]	; (801ab14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801aa6a:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801aa6e:	781b      	ldrb	r3, [r3, #0]
 801aa70:	2b01      	cmp	r3, #1
 801aa72:	f000 809c 	beq.w	801abae <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801aa76:	9b02      	ldr	r3, [sp, #8]
 801aa78:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801aa7c:	f8b3 b000 	ldrh.w	fp, [r3]
 801aa80:	f10b 0b01 	add.w	fp, fp, #1
 801aa84:	fa1f fb8b 	uxth.w	fp, fp
 801aa88:	2a00      	cmp	r2, #0
 801aa8a:	d0bc      	beq.n	801aa06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801aa8c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801aa90:	4659      	mov	r1, fp
 801aa92:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801aa96:	f04f 0800 	mov.w	r8, #0
 801aa9a:	441d      	add	r5, r3
 801aa9c:	b22d      	sxth	r5, r5
 801aa9e:	b28b      	uxth	r3, r1
 801aaa0:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801aaa4:	429a      	cmp	r2, r3
 801aaa6:	f240 80c0 	bls.w	801ac2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801aaaa:	4427      	add	r7, r4
 801aaac:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801aab0:	4608      	mov	r0, r1
 801aab2:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801aab6:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801aaba:	4563      	cmp	r3, ip
 801aabc:	f340 80a2 	ble.w	801ac04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801aac0:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801aac4:	4465      	add	r5, ip
 801aac6:	b22d      	sxth	r5, r5
 801aac8:	429d      	cmp	r5, r3
 801aaca:	bfa8      	it	ge
 801aacc:	461d      	movge	r5, r3
 801aace:	3101      	adds	r1, #1
 801aad0:	4680      	mov	r8, r0
 801aad2:	e7e4      	b.n	801aa9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801aad4:	d10b      	bne.n	801aaee <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801aad6:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801aada:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801aade:	458c      	cmp	ip, r1
 801aae0:	bfb4      	ite	lt
 801aae2:	469c      	movlt	ip, r3
 801aae4:	46bc      	movge	ip, r7
 801aae6:	4572      	cmp	r2, lr
 801aae8:	bfb8      	it	lt
 801aaea:	4672      	movlt	r2, lr
 801aaec:	e087      	b.n	801abfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801aaee:	428a      	cmp	r2, r1
 801aaf0:	46bc      	mov	ip, r7
 801aaf2:	bfb8      	it	lt
 801aaf4:	460a      	movlt	r2, r1
 801aaf6:	e082      	b.n	801abfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801aaf8:	2001512c 	.word	0x2001512c
 801aafc:	20015138 	.word	0x20015138
 801ab00:	20000044 	.word	0x20000044
 801ab04:	200150f4 	.word	0x200150f4
 801ab08:	200150ea 	.word	0x200150ea
 801ab0c:	200150e8 	.word	0x200150e8
 801ab10:	200150f2 	.word	0x200150f2
 801ab14:	200150ec 	.word	0x200150ec
 801ab18:	1961      	adds	r1, r4, r5
 801ab1a:	ab07      	add	r3, sp, #28
 801ab1c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801ab20:	6849      	ldr	r1, [r1, #4]
 801ab22:	c303      	stmia	r3!, {r0, r1}
 801ab24:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801ab28:	a807      	add	r0, sp, #28
 801ab2a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ab2e:	2b13      	cmp	r3, #19
 801ab30:	440b      	add	r3, r1
 801ab32:	bfd8      	it	le
 801ab34:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801ab38:	1a9b      	subs	r3, r3, r2
 801ab3a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801ab3e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ab42:	f7ff f835 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ab46:	a807      	add	r0, sp, #28
 801ab48:	f7fc f81f 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab4c:	bb78      	cbnz	r0, 801abae <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801ab4e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ab52:	4425      	add	r5, r4
 801ab54:	f8d8 0000 	ldr.w	r0, [r8]
 801ab58:	f1bc 0f14 	cmp.w	ip, #20
 801ab5c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ab60:	f8d0 e000 	ldr.w	lr, [r0]
 801ab64:	bfa8      	it	ge
 801ab66:	f04f 0c14 	movge.w	ip, #20
 801ab6a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801ab6e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ab72:	fa1f fc8c 	uxth.w	ip, ip
 801ab76:	f8cd c000 	str.w	ip, [sp]
 801ab7a:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801ab7e:	47d0      	blx	sl
 801ab80:	4682      	mov	sl, r0
 801ab82:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ab86:	a807      	add	r0, sp, #28
 801ab88:	f7fe fff8 	bl	8019b7c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ab8c:	6823      	ldr	r3, [r4, #0]
 801ab8e:	4620      	mov	r0, r4
 801ab90:	a907      	add	r1, sp, #28
 801ab92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab94:	4798      	blx	r3
 801ab96:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801ab9a:	eba0 000a 	sub.w	r0, r0, sl
 801ab9e:	b200      	sxth	r0, r0
 801aba0:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801aba4:	b918      	cbnz	r0, 801abae <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801aba6:	b2b9      	uxth	r1, r7
 801aba8:	4648      	mov	r0, r9
 801abaa:	f7ff faa5 	bl	801a0f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801abae:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801abb2:	f1bb 0f00 	cmp.w	fp, #0
 801abb6:	f43f af26 	beq.w	801aa06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801abba:	9b02      	ldr	r3, [sp, #8]
 801abbc:	2700      	movs	r7, #0
 801abbe:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801abc2:	881b      	ldrh	r3, [r3, #0]
 801abc4:	3301      	adds	r3, #1
 801abc6:	b29b      	uxth	r3, r3
 801abc8:	b299      	uxth	r1, r3
 801abca:	00fd      	lsls	r5, r7, #3
 801abcc:	458b      	cmp	fp, r1
 801abce:	d9a3      	bls.n	801ab18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801abd0:	4425      	add	r5, r4
 801abd2:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801abd6:	469c      	mov	ip, r3
 801abd8:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801abdc:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801abe0:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801abe4:	4408      	add	r0, r1
 801abe6:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801abea:	4471      	add	r1, lr
 801abec:	b200      	sxth	r0, r0
 801abee:	b209      	sxth	r1, r1
 801abf0:	4288      	cmp	r0, r1
 801abf2:	f6bf af6f 	bge.w	801aad4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801abf6:	4586      	cmp	lr, r0
 801abf8:	4672      	mov	r2, lr
 801abfa:	bfb8      	it	lt
 801abfc:	4602      	movlt	r2, r0
 801abfe:	3301      	adds	r3, #1
 801ac00:	4667      	mov	r7, ip
 801ac02:	e7e1      	b.n	801abc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801ac04:	d10c      	bne.n	801ac20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801ac06:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801ac0a:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801ac0e:	4287      	cmp	r7, r0
 801ac10:	bfb4      	ite	lt
 801ac12:	4608      	movlt	r0, r1
 801ac14:	4640      	movge	r0, r8
 801ac16:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801ac1a:	443b      	add	r3, r7
 801ac1c:	b21b      	sxth	r3, r3
 801ac1e:	e753      	b.n	801aac8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801ac20:	4565      	cmp	r5, ip
 801ac22:	4640      	mov	r0, r8
 801ac24:	bfa8      	it	ge
 801ac26:	4665      	movge	r5, ip
 801ac28:	e751      	b.n	801aace <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801ac2a:	eb09 0007 	add.w	r0, r9, r7
 801ac2e:	4427      	add	r7, r4
 801ac30:	9203      	str	r2, [sp, #12]
 801ac32:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801ac36:	f1ba 0f13 	cmp.w	sl, #19
 801ac3a:	bfde      	ittt	le
 801ac3c:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801ac40:	4455      	addle	r5, sl
 801ac42:	b22d      	sxthle	r5, r5
 801ac44:	f7fb ffa1 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ac48:	9a03      	ldr	r2, [sp, #12]
 801ac4a:	2800      	cmp	r0, #0
 801ac4c:	f47f af1c 	bne.w	801aa88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801ac50:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801ac54:	fa1f fa8a 	uxth.w	sl, sl
 801ac58:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ac5c:	1aad      	subs	r5, r5, r2
 801ac5e:	4829      	ldr	r0, [pc, #164]	; (801ad04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801ac60:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801ac64:	2d14      	cmp	r5, #20
 801ac66:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801ac6a:	6800      	ldr	r0, [r0, #0]
 801ac6c:	bfa8      	it	ge
 801ac6e:	2514      	movge	r5, #20
 801ac70:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ac74:	f8ad 201e 	strh.w	r2, [sp, #30]
 801ac78:	b289      	uxth	r1, r1
 801ac7a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ac7e:	b2ad      	uxth	r5, r5
 801ac80:	f8d0 c000 	ldr.w	ip, [r0]
 801ac84:	b292      	uxth	r2, r2
 801ac86:	4555      	cmp	r5, sl
 801ac88:	bf94      	ite	ls
 801ac8a:	9500      	strls	r5, [sp, #0]
 801ac8c:	f8cd a000 	strhi.w	sl, [sp]
 801ac90:	b29b      	uxth	r3, r3
 801ac92:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801ac96:	47a8      	blx	r5
 801ac98:	6823      	ldr	r3, [r4, #0]
 801ac9a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ac9e:	a907      	add	r1, sp, #28
 801aca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aca2:	4620      	mov	r0, r4
 801aca4:	4798      	blx	r3
 801aca6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801acaa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801acae:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801acb2:	1a5b      	subs	r3, r3, r1
 801acb4:	440a      	add	r2, r1
 801acb6:	b21b      	sxth	r3, r3
 801acb8:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801acbc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	f47f aed8 	bne.w	801aa76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801acc6:	fa1f f188 	uxth.w	r1, r8
 801acca:	4648      	mov	r0, r9
 801accc:	f7ff fa14 	bl	801a0f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801acd0:	e6d1      	b.n	801aa76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801acd2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801acd6:	42ab      	cmp	r3, r5
 801acd8:	f67f ae95 	bls.w	801aa06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801acdc:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ace0:	ab07      	add	r3, sp, #28
 801ace2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ace6:	6851      	ldr	r1, [r2, #4]
 801ace8:	c303      	stmia	r3!, {r0, r1}
 801acea:	a807      	add	r0, sp, #28
 801acec:	f7fb ff4d 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801acf0:	b920      	cbnz	r0, 801acfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801acf2:	6823      	ldr	r3, [r4, #0]
 801acf4:	a907      	add	r1, sp, #28
 801acf6:	4620      	mov	r0, r4
 801acf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acfa:	4798      	blx	r3
 801acfc:	3501      	adds	r5, #1
 801acfe:	b2ad      	uxth	r5, r5
 801ad00:	e7e7      	b.n	801acd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801ad02:	bf00      	nop
 801ad04:	200150f4 	.word	0x200150f4

0801ad08 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ad08:	4b03      	ldr	r3, [pc, #12]	; (801ad18 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ad0a:	2200      	movs	r2, #0
 801ad0c:	801a      	strh	r2, [r3, #0]
 801ad0e:	805a      	strh	r2, [r3, #2]
 801ad10:	809a      	strh	r2, [r3, #4]
 801ad12:	80da      	strh	r2, [r3, #6]
 801ad14:	4770      	bx	lr
 801ad16:	bf00      	nop
 801ad18:	20015138 	.word	0x20015138

0801ad1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad20:	b09d      	sub	sp, #116	; 0x74
 801ad22:	4606      	mov	r6, r0
 801ad24:	4614      	mov	r4, r2
 801ad26:	468a      	mov	sl, r1
 801ad28:	a803      	add	r0, sp, #12
 801ad2a:	461d      	mov	r5, r3
 801ad2c:	f000 fd9b 	bl	801b866 <_ZN8touchgfx12TextProviderC1Ev>
 801ad30:	6833      	ldr	r3, [r6, #0]
 801ad32:	4630      	mov	r0, r6
 801ad34:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801ad38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad3a:	4798      	blx	r3
 801ad3c:	6833      	ldr	r3, [r6, #0]
 801ad3e:	4607      	mov	r7, r0
 801ad40:	4630      	mov	r0, r6
 801ad42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ad44:	4798      	blx	r3
 801ad46:	462a      	mov	r2, r5
 801ad48:	2500      	movs	r5, #0
 801ad4a:	4621      	mov	r1, r4
 801ad4c:	9000      	str	r0, [sp, #0]
 801ad4e:	463b      	mov	r3, r7
 801ad50:	462c      	mov	r4, r5
 801ad52:	46a9      	mov	r9, r5
 801ad54:	46a8      	mov	r8, r5
 801ad56:	a803      	add	r0, sp, #12
 801ad58:	f000 fde0 	bl	801b91c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	9302      	str	r3, [sp, #8]
 801ad60:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ad64:	429c      	cmp	r4, r3
 801ad66:	d002      	beq.n	801ad6e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801ad68:	455c      	cmp	r4, fp
 801ad6a:	bf18      	it	ne
 801ad6c:	4625      	movne	r5, r4
 801ad6e:	ab02      	add	r3, sp, #8
 801ad70:	4632      	mov	r2, r6
 801ad72:	4651      	mov	r1, sl
 801ad74:	a803      	add	r0, sp, #12
 801ad76:	f001 f8d7 	bl	801bf28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ad7a:	4604      	mov	r4, r0
 801ad7c:	b108      	cbz	r0, 801ad82 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801ad7e:	280a      	cmp	r0, #10
 801ad80:	d10a      	bne.n	801ad98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801ad82:	45c1      	cmp	r9, r8
 801ad84:	bf38      	it	cc
 801ad86:	46c1      	movcc	r9, r8
 801ad88:	f04f 0800 	mov.w	r8, #0
 801ad8c:	2c00      	cmp	r4, #0
 801ad8e:	d1e5      	bne.n	801ad5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ad90:	4648      	mov	r0, r9
 801ad92:	b01d      	add	sp, #116	; 0x74
 801ad94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad98:	9a02      	ldr	r2, [sp, #8]
 801ad9a:	2a00      	cmp	r2, #0
 801ad9c:	d0de      	beq.n	801ad5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ad9e:	7b57      	ldrb	r7, [r2, #13]
 801ada0:	4629      	mov	r1, r5
 801ada2:	6833      	ldr	r3, [r6, #0]
 801ada4:	007f      	lsls	r7, r7, #1
 801ada6:	8894      	ldrh	r4, [r2, #4]
 801ada8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801adaa:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801adae:	7a97      	ldrb	r7, [r2, #10]
 801adb0:	4307      	orrs	r7, r0
 801adb2:	4630      	mov	r0, r6
 801adb4:	4798      	blx	r3
 801adb6:	4438      	add	r0, r7
 801adb8:	4480      	add	r8, r0
 801adba:	fa1f f888 	uxth.w	r8, r8
 801adbe:	e7e5      	b.n	801ad8c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801adc0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801adc0:	b508      	push	{r3, lr}
 801adc2:	6803      	ldr	r3, [r0, #0]
 801adc4:	68db      	ldr	r3, [r3, #12]
 801adc6:	4798      	blx	r3
 801adc8:	b128      	cbz	r0, 801add6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801adca:	7b43      	ldrb	r3, [r0, #13]
 801adcc:	7a80      	ldrb	r0, [r0, #10]
 801adce:	005b      	lsls	r3, r3, #1
 801add0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801add4:	4318      	orrs	r0, r3
 801add6:	bd08      	pop	{r3, pc}

0801add8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801add8:	b40e      	push	{r1, r2, r3}
 801adda:	b5f0      	push	{r4, r5, r6, r7, lr}
 801addc:	b09e      	sub	sp, #120	; 0x78
 801adde:	4605      	mov	r5, r0
 801ade0:	ab23      	add	r3, sp, #140	; 0x8c
 801ade2:	a805      	add	r0, sp, #20
 801ade4:	f853 4b04 	ldr.w	r4, [r3], #4
 801ade8:	9303      	str	r3, [sp, #12]
 801adea:	f000 fd3c 	bl	801b866 <_ZN8touchgfx12TextProviderC1Ev>
 801adee:	682b      	ldr	r3, [r5, #0]
 801adf0:	4628      	mov	r0, r5
 801adf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801adf4:	4798      	blx	r3
 801adf6:	682b      	ldr	r3, [r5, #0]
 801adf8:	4606      	mov	r6, r0
 801adfa:	4628      	mov	r0, r5
 801adfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801adfe:	4798      	blx	r3
 801ae00:	4633      	mov	r3, r6
 801ae02:	4621      	mov	r1, r4
 801ae04:	ae1e      	add	r6, sp, #120	; 0x78
 801ae06:	2400      	movs	r4, #0
 801ae08:	9000      	str	r0, [sp, #0]
 801ae0a:	9a03      	ldr	r2, [sp, #12]
 801ae0c:	a805      	add	r0, sp, #20
 801ae0e:	f000 fd85 	bl	801b91c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ae12:	f846 4d68 	str.w	r4, [r6, #-104]!
 801ae16:	462a      	mov	r2, r5
 801ae18:	4633      	mov	r3, r6
 801ae1a:	4621      	mov	r1, r4
 801ae1c:	a805      	add	r0, sp, #20
 801ae1e:	f001 f883 	bl	801bf28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ae22:	b300      	cbz	r0, 801ae66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801ae24:	280a      	cmp	r0, #10
 801ae26:	d01a      	beq.n	801ae5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ae28:	9f04      	ldr	r7, [sp, #16]
 801ae2a:	b1c7      	cbz	r7, 801ae5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ae2c:	7b78      	ldrb	r0, [r7, #13]
 801ae2e:	7a3b      	ldrb	r3, [r7, #8]
 801ae30:	00c1      	lsls	r1, r0, #3
 801ae32:	88aa      	ldrh	r2, [r5, #4]
 801ae34:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ae38:	4319      	orrs	r1, r3
 801ae3a:	0643      	lsls	r3, r0, #25
 801ae3c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801ae40:	bf48      	it	mi
 801ae42:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801ae46:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ae4a:	bf48      	it	mi
 801ae4c:	b219      	sxthmi	r1, r3
 801ae4e:	79fb      	ldrb	r3, [r7, #7]
 801ae50:	4303      	orrs	r3, r0
 801ae52:	4413      	add	r3, r2
 801ae54:	1a5b      	subs	r3, r3, r1
 801ae56:	b29b      	uxth	r3, r3
 801ae58:	42a3      	cmp	r3, r4
 801ae5a:	bfc8      	it	gt
 801ae5c:	b21c      	sxthgt	r4, r3
 801ae5e:	4633      	mov	r3, r6
 801ae60:	462a      	mov	r2, r5
 801ae62:	2100      	movs	r1, #0
 801ae64:	e7da      	b.n	801ae1c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801ae66:	b2a0      	uxth	r0, r4
 801ae68:	b01e      	add	sp, #120	; 0x78
 801ae6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ae6e:	b003      	add	sp, #12
 801ae70:	4770      	bx	lr

0801ae72 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ae72:	b40e      	push	{r1, r2, r3}
 801ae74:	b570      	push	{r4, r5, r6, lr}
 801ae76:	b09d      	sub	sp, #116	; 0x74
 801ae78:	4604      	mov	r4, r0
 801ae7a:	ab21      	add	r3, sp, #132	; 0x84
 801ae7c:	a803      	add	r0, sp, #12
 801ae7e:	f853 5b04 	ldr.w	r5, [r3], #4
 801ae82:	9302      	str	r3, [sp, #8]
 801ae84:	f000 fcef 	bl	801b866 <_ZN8touchgfx12TextProviderC1Ev>
 801ae88:	6823      	ldr	r3, [r4, #0]
 801ae8a:	4620      	mov	r0, r4
 801ae8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae8e:	4798      	blx	r3
 801ae90:	6823      	ldr	r3, [r4, #0]
 801ae92:	4606      	mov	r6, r0
 801ae94:	4620      	mov	r0, r4
 801ae96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ae98:	2401      	movs	r4, #1
 801ae9a:	4798      	blx	r3
 801ae9c:	4633      	mov	r3, r6
 801ae9e:	9000      	str	r0, [sp, #0]
 801aea0:	4629      	mov	r1, r5
 801aea2:	9a02      	ldr	r2, [sp, #8]
 801aea4:	a803      	add	r0, sp, #12
 801aea6:	f000 fd39 	bl	801b91c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801aeaa:	a803      	add	r0, sp, #12
 801aeac:	f001 f908 	bl	801c0c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aeb0:	b2a3      	uxth	r3, r4
 801aeb2:	b138      	cbz	r0, 801aec4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801aeb4:	280a      	cmp	r0, #10
 801aeb6:	a803      	add	r0, sp, #12
 801aeb8:	bf04      	itt	eq
 801aeba:	3301      	addeq	r3, #1
 801aebc:	b21c      	sxtheq	r4, r3
 801aebe:	f001 f8ff 	bl	801c0c0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aec2:	e7f5      	b.n	801aeb0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801aec4:	4618      	mov	r0, r3
 801aec6:	b01d      	add	sp, #116	; 0x74
 801aec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aecc:	b003      	add	sp, #12
 801aece:	4770      	bx	lr

0801aed0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801aed0:	b40e      	push	{r1, r2, r3}
 801aed2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aed4:	b09e      	sub	sp, #120	; 0x78
 801aed6:	4604      	mov	r4, r0
 801aed8:	ab23      	add	r3, sp, #140	; 0x8c
 801aeda:	a805      	add	r0, sp, #20
 801aedc:	f853 5b04 	ldr.w	r5, [r3], #4
 801aee0:	9303      	str	r3, [sp, #12]
 801aee2:	f000 fcc0 	bl	801b866 <_ZN8touchgfx12TextProviderC1Ev>
 801aee6:	6823      	ldr	r3, [r4, #0]
 801aee8:	4620      	mov	r0, r4
 801aeea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aeec:	4798      	blx	r3
 801aeee:	6823      	ldr	r3, [r4, #0]
 801aef0:	4606      	mov	r6, r0
 801aef2:	4620      	mov	r0, r4
 801aef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aef6:	4798      	blx	r3
 801aef8:	4633      	mov	r3, r6
 801aefa:	4629      	mov	r1, r5
 801aefc:	9000      	str	r0, [sp, #0]
 801aefe:	9a03      	ldr	r2, [sp, #12]
 801af00:	a805      	add	r0, sp, #20
 801af02:	f000 fd0b 	bl	801b91c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801af06:	ad1e      	add	r5, sp, #120	; 0x78
 801af08:	2100      	movs	r1, #0
 801af0a:	26ff      	movs	r6, #255	; 0xff
 801af0c:	4622      	mov	r2, r4
 801af0e:	a805      	add	r0, sp, #20
 801af10:	f845 1d68 	str.w	r1, [r5, #-104]!
 801af14:	462b      	mov	r3, r5
 801af16:	f001 f807 	bl	801bf28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801af1a:	b1d8      	cbz	r0, 801af54 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801af1c:	280a      	cmp	r0, #10
 801af1e:	d012      	beq.n	801af46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801af20:	9804      	ldr	r0, [sp, #16]
 801af22:	b180      	cbz	r0, 801af46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801af24:	7b47      	ldrb	r7, [r0, #13]
 801af26:	7922      	ldrb	r2, [r4, #4]
 801af28:	00fb      	lsls	r3, r7, #3
 801af2a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801af2e:	7a03      	ldrb	r3, [r0, #8]
 801af30:	430b      	orrs	r3, r1
 801af32:	0679      	lsls	r1, r7, #25
 801af34:	bf44      	itt	mi
 801af36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801af3a:	b21b      	sxthmi	r3, r3
 801af3c:	1ad3      	subs	r3, r2, r3
 801af3e:	b2db      	uxtb	r3, r3
 801af40:	429e      	cmp	r6, r3
 801af42:	bf28      	it	cs
 801af44:	461e      	movcs	r6, r3
 801af46:	462b      	mov	r3, r5
 801af48:	4622      	mov	r2, r4
 801af4a:	2100      	movs	r1, #0
 801af4c:	a805      	add	r0, sp, #20
 801af4e:	f000 ffeb 	bl	801bf28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801af52:	e7e2      	b.n	801af1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801af54:	4630      	mov	r0, r6
 801af56:	b01e      	add	sp, #120	; 0x78
 801af58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801af5c:	b003      	add	sp, #12
 801af5e:	4770      	bx	lr

0801af60 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801af60:	b513      	push	{r0, r1, r4, lr}
 801af62:	6803      	ldr	r3, [r0, #0]
 801af64:	2400      	movs	r4, #0
 801af66:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801af6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801af6e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801af72:	4669      	mov	r1, sp
 801af74:	691b      	ldr	r3, [r3, #16]
 801af76:	9400      	str	r4, [sp, #0]
 801af78:	f8ad 2006 	strh.w	r2, [sp, #6]
 801af7c:	4798      	blx	r3
 801af7e:	b002      	add	sp, #8
 801af80:	bd10      	pop	{r4, pc}

0801af82 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801af82:	b538      	push	{r3, r4, r5, lr}
 801af84:	680b      	ldr	r3, [r1, #0]
 801af86:	460c      	mov	r4, r1
 801af88:	4605      	mov	r5, r0
 801af8a:	68db      	ldr	r3, [r3, #12]
 801af8c:	4798      	blx	r3
 801af8e:	6823      	ldr	r3, [r4, #0]
 801af90:	4620      	mov	r0, r4
 801af92:	4629      	mov	r1, r5
 801af94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af96:	4798      	blx	r3
 801af98:	4628      	mov	r0, r5
 801af9a:	bd38      	pop	{r3, r4, r5, pc}

0801af9c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801af9c:	b410      	push	{r4}
 801af9e:	880a      	ldrh	r2, [r1, #0]
 801afa0:	8884      	ldrh	r4, [r0, #4]
 801afa2:	4422      	add	r2, r4
 801afa4:	800a      	strh	r2, [r1, #0]
 801afa6:	884a      	ldrh	r2, [r1, #2]
 801afa8:	88c4      	ldrh	r4, [r0, #6]
 801afaa:	4422      	add	r2, r4
 801afac:	804a      	strh	r2, [r1, #2]
 801afae:	6940      	ldr	r0, [r0, #20]
 801afb0:	b120      	cbz	r0, 801afbc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801afb2:	6803      	ldr	r3, [r0, #0]
 801afb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801afb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afba:	4718      	bx	r3
 801afbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801afc0:	4770      	bx	lr

0801afc2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801afc2:	b570      	push	{r4, r5, r6, lr}
 801afc4:	8882      	ldrh	r2, [r0, #4]
 801afc6:	460c      	mov	r4, r1
 801afc8:	880b      	ldrh	r3, [r1, #0]
 801afca:	4605      	mov	r5, r0
 801afcc:	4413      	add	r3, r2
 801afce:	800b      	strh	r3, [r1, #0]
 801afd0:	884b      	ldrh	r3, [r1, #2]
 801afd2:	88c2      	ldrh	r2, [r0, #6]
 801afd4:	4413      	add	r3, r2
 801afd6:	804b      	strh	r3, [r1, #2]
 801afd8:	1d01      	adds	r1, r0, #4
 801afda:	4620      	mov	r0, r4
 801afdc:	f7fb fd92 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 801afe0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	dd0b      	ble.n	801b000 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801afe8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801afec:	2b00      	cmp	r3, #0
 801afee:	dd07      	ble.n	801b000 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801aff0:	6968      	ldr	r0, [r5, #20]
 801aff2:	b128      	cbz	r0, 801b000 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801aff4:	6803      	ldr	r3, [r0, #0]
 801aff6:	4621      	mov	r1, r4
 801aff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801affa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801affe:	4718      	bx	r3
 801b000:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b004 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b004:	b570      	push	{r4, r5, r6, lr}
 801b006:	8882      	ldrh	r2, [r0, #4]
 801b008:	460c      	mov	r4, r1
 801b00a:	880b      	ldrh	r3, [r1, #0]
 801b00c:	4605      	mov	r5, r0
 801b00e:	4413      	add	r3, r2
 801b010:	800b      	strh	r3, [r1, #0]
 801b012:	884b      	ldrh	r3, [r1, #2]
 801b014:	88c2      	ldrh	r2, [r0, #6]
 801b016:	4413      	add	r3, r2
 801b018:	804b      	strh	r3, [r1, #2]
 801b01a:	1d01      	adds	r1, r0, #4
 801b01c:	4620      	mov	r0, r4
 801b01e:	f7fb fd71 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 801b022:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b026:	2b00      	cmp	r3, #0
 801b028:	dd18      	ble.n	801b05c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801b02a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	dd14      	ble.n	801b05c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801b032:	6968      	ldr	r0, [r5, #20]
 801b034:	b128      	cbz	r0, 801b042 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801b036:	6803      	ldr	r3, [r0, #0]
 801b038:	4621      	mov	r1, r4
 801b03a:	691b      	ldr	r3, [r3, #16]
 801b03c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b040:	4718      	bx	r3
 801b042:	4b07      	ldr	r3, [pc, #28]	; (801b060 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	3304      	adds	r3, #4
 801b048:	429d      	cmp	r5, r3
 801b04a:	d107      	bne.n	801b05c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801b04c:	f7fe ffb4 	bl	8019fb8 <_ZN8touchgfx11Application11getInstanceEv>
 801b050:	6821      	ldr	r1, [r4, #0]
 801b052:	6862      	ldr	r2, [r4, #4]
 801b054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b058:	f7ff b862 	b.w	801a120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b05c:	bd70      	pop	{r4, r5, r6, pc}
 801b05e:	bf00      	nop
 801b060:	20015130 	.word	0x20015130

0801b064 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b064:	b570      	push	{r4, r5, r6, lr}
 801b066:	4604      	mov	r4, r0
 801b068:	4616      	mov	r6, r2
 801b06a:	460d      	mov	r5, r1
 801b06c:	b901      	cbnz	r1, 801b070 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b06e:	b192      	cbz	r2, 801b096 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801b070:	6823      	ldr	r3, [r4, #0]
 801b072:	4620      	mov	r0, r4
 801b074:	699b      	ldr	r3, [r3, #24]
 801b076:	4798      	blx	r3
 801b078:	88e2      	ldrh	r2, [r4, #6]
 801b07a:	88a1      	ldrh	r1, [r4, #4]
 801b07c:	4620      	mov	r0, r4
 801b07e:	4432      	add	r2, r6
 801b080:	4429      	add	r1, r5
 801b082:	b212      	sxth	r2, r2
 801b084:	b209      	sxth	r1, r1
 801b086:	f7e8 fc57 	bl	8003938 <_ZN8touchgfx8Drawable5setXYEss>
 801b08a:	6823      	ldr	r3, [r4, #0]
 801b08c:	4620      	mov	r0, r4
 801b08e:	699b      	ldr	r3, [r3, #24]
 801b090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b094:	4718      	bx	r3
 801b096:	bd70      	pop	{r4, r5, r6, pc}

0801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b098:	b510      	push	{r4, lr}
 801b09a:	2300      	movs	r3, #0
 801b09c:	4604      	mov	r4, r0
 801b09e:	4608      	mov	r0, r1
 801b0a0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b0a4:	8023      	strh	r3, [r4, #0]
 801b0a6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b0aa:	8063      	strh	r3, [r4, #2]
 801b0ac:	6803      	ldr	r3, [r0, #0]
 801b0ae:	80a1      	strh	r1, [r4, #4]
 801b0b0:	4621      	mov	r1, r4
 801b0b2:	80e2      	strh	r2, [r4, #6]
 801b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0b6:	4798      	blx	r3
 801b0b8:	4620      	mov	r0, r4
 801b0ba:	bd10      	pop	{r4, pc}

0801b0bc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b0bc:	b530      	push	{r4, r5, lr}
 801b0be:	8083      	strh	r3, [r0, #4]
 801b0c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b0c4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b0c8:	7183      	strb	r3, [r0, #6]
 801b0ca:	79c3      	ldrb	r3, [r0, #7]
 801b0cc:	6101      	str	r1, [r0, #16]
 801b0ce:	f365 0306 	bfi	r3, r5, #0, #7
 801b0d2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b0d6:	8282      	strh	r2, [r0, #20]
 801b0d8:	f365 13c7 	bfi	r3, r5, #7, #1
 801b0dc:	71c3      	strb	r3, [r0, #7]
 801b0de:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b0e2:	7203      	strb	r3, [r0, #8]
 801b0e4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b0e8:	7243      	strb	r3, [r0, #9]
 801b0ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b0ee:	8143      	strh	r3, [r0, #10]
 801b0f0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b0f4:	8183      	strh	r3, [r0, #12]
 801b0f6:	4b01      	ldr	r3, [pc, #4]	; (801b0fc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b0f8:	6003      	str	r3, [r0, #0]
 801b0fa:	bd30      	pop	{r4, r5, pc}
 801b0fc:	0802dfc8 	.word	0x0802dfc8

0801b100 <_ZNK8touchgfx9ConstFont4findEt>:
 801b100:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b102:	6904      	ldr	r4, [r0, #16]
 801b104:	b3bc      	cbz	r4, 801b176 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b106:	88a3      	ldrh	r3, [r4, #4]
 801b108:	8a82      	ldrh	r2, [r0, #20]
 801b10a:	1acb      	subs	r3, r1, r3
 801b10c:	f102 32ff 	add.w	r2, r2, #4294967295
 801b110:	d431      	bmi.n	801b176 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b112:	4293      	cmp	r3, r2
 801b114:	dd0c      	ble.n	801b130 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b116:	230e      	movs	r3, #14
 801b118:	fb03 4302 	mla	r3, r3, r2, r4
 801b11c:	889b      	ldrh	r3, [r3, #4]
 801b11e:	1a5b      	subs	r3, r3, r1
 801b120:	1ad3      	subs	r3, r2, r3
 801b122:	429a      	cmp	r2, r3
 801b124:	db27      	blt.n	801b176 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b126:	2b00      	cmp	r3, #0
 801b128:	bfbc      	itt	lt
 801b12a:	2302      	movlt	r3, #2
 801b12c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b130:	2500      	movs	r5, #0
 801b132:	260e      	movs	r6, #14
 801b134:	4295      	cmp	r5, r2
 801b136:	dc1e      	bgt.n	801b176 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b138:	fb06 4003 	mla	r0, r6, r3, r4
 801b13c:	8887      	ldrh	r7, [r0, #4]
 801b13e:	42b9      	cmp	r1, r7
 801b140:	d01a      	beq.n	801b178 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b142:	d20d      	bcs.n	801b160 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b144:	1e5a      	subs	r2, r3, #1
 801b146:	4295      	cmp	r5, r2
 801b148:	dc15      	bgt.n	801b176 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b14a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b14e:	1a5b      	subs	r3, r3, r1
 801b150:	1ad3      	subs	r3, r2, r3
 801b152:	429a      	cmp	r2, r3
 801b154:	db0f      	blt.n	801b176 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b156:	429d      	cmp	r5, r3
 801b158:	ddec      	ble.n	801b134 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b15a:	1953      	adds	r3, r2, r5
 801b15c:	105b      	asrs	r3, r3, #1
 801b15e:	e7e9      	b.n	801b134 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b160:	1c5d      	adds	r5, r3, #1
 801b162:	42aa      	cmp	r2, r5
 801b164:	db07      	blt.n	801b176 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b166:	8a43      	ldrh	r3, [r0, #18]
 801b168:	1acb      	subs	r3, r1, r3
 801b16a:	442b      	add	r3, r5
 801b16c:	429d      	cmp	r5, r3
 801b16e:	dc02      	bgt.n	801b176 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b170:	429a      	cmp	r2, r3
 801b172:	dadf      	bge.n	801b134 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b174:	e7f1      	b.n	801b15a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b176:	2000      	movs	r0, #0
 801b178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b17a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b17a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b17c:	4604      	mov	r4, r0
 801b17e:	4617      	mov	r7, r2
 801b180:	461e      	mov	r6, r3
 801b182:	b911      	cbnz	r1, 801b18a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b184:	2500      	movs	r5, #0
 801b186:	4628      	mov	r0, r5
 801b188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b18a:	290a      	cmp	r1, #10
 801b18c:	d0fa      	beq.n	801b184 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b18e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b192:	4291      	cmp	r1, r2
 801b194:	d0f6      	beq.n	801b184 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b196:	f242 020b 	movw	r2, #8203	; 0x200b
 801b19a:	4291      	cmp	r1, r2
 801b19c:	d0f2      	beq.n	801b184 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b19e:	f7ff ffaf 	bl	801b100 <_ZNK8touchgfx9ConstFont4findEt>
 801b1a2:	4605      	mov	r5, r0
 801b1a4:	b950      	cbnz	r0, 801b1bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b1a6:	6823      	ldr	r3, [r4, #0]
 801b1a8:	4620      	mov	r0, r4
 801b1aa:	691b      	ldr	r3, [r3, #16]
 801b1ac:	4798      	blx	r3
 801b1ae:	4601      	mov	r1, r0
 801b1b0:	4620      	mov	r0, r4
 801b1b2:	f7ff ffa5 	bl	801b100 <_ZNK8touchgfx9ConstFont4findEt>
 801b1b6:	4605      	mov	r5, r0
 801b1b8:	2800      	cmp	r0, #0
 801b1ba:	d0e3      	beq.n	801b184 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b1bc:	6823      	ldr	r3, [r4, #0]
 801b1be:	4629      	mov	r1, r5
 801b1c0:	4620      	mov	r0, r4
 801b1c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b1c4:	4798      	blx	r3
 801b1c6:	6038      	str	r0, [r7, #0]
 801b1c8:	6823      	ldr	r3, [r4, #0]
 801b1ca:	4620      	mov	r0, r4
 801b1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b1ce:	4798      	blx	r3
 801b1d0:	7030      	strb	r0, [r6, #0]
 801b1d2:	e7d8      	b.n	801b186 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b1d4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801b1d4:	2000      	movs	r0, #0
 801b1d6:	4770      	bx	lr

0801b1d8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801b1d8:	2001      	movs	r0, #1
 801b1da:	4770      	bx	lr

0801b1dc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b1dc:	2002      	movs	r0, #2
 801b1de:	4770      	bx	lr

0801b1e0 <_ZN8touchgfx6ScreenD1Ev>:
 801b1e0:	4770      	bx	lr

0801b1e2 <_ZN8touchgfx12GestureEventD1Ev>:
 801b1e2:	4770      	bx	lr

0801b1e4 <_ZN8touchgfx9DragEventD1Ev>:
 801b1e4:	4770      	bx	lr

0801b1e6 <_ZN8touchgfx10ClickEventD1Ev>:
 801b1e6:	4770      	bx	lr

0801b1e8 <_ZN8touchgfx10ClickEventD0Ev>:
 801b1e8:	b510      	push	{r4, lr}
 801b1ea:	4604      	mov	r4, r0
 801b1ec:	210c      	movs	r1, #12
 801b1ee:	f00d f94f 	bl	8028490 <_ZdlPvj>
 801b1f2:	4620      	mov	r0, r4
 801b1f4:	bd10      	pop	{r4, pc}

0801b1f6 <_ZN8touchgfx9DragEventD0Ev>:
 801b1f6:	b510      	push	{r4, lr}
 801b1f8:	4604      	mov	r4, r0
 801b1fa:	2110      	movs	r1, #16
 801b1fc:	f00d f948 	bl	8028490 <_ZdlPvj>
 801b200:	4620      	mov	r0, r4
 801b202:	bd10      	pop	{r4, pc}

0801b204 <_ZN8touchgfx12GestureEventD0Ev>:
 801b204:	b510      	push	{r4, lr}
 801b206:	4604      	mov	r4, r0
 801b208:	210c      	movs	r1, #12
 801b20a:	f00d f941 	bl	8028490 <_ZdlPvj>
 801b20e:	4620      	mov	r0, r4
 801b210:	bd10      	pop	{r4, pc}

0801b212 <_ZN8touchgfx6ScreenD0Ev>:
 801b212:	b510      	push	{r4, lr}
 801b214:	4604      	mov	r4, r0
 801b216:	213c      	movs	r1, #60	; 0x3c
 801b218:	f00d f93a 	bl	8028490 <_ZdlPvj>
 801b21c:	4620      	mov	r0, r4
 801b21e:	bd10      	pop	{r4, pc}

0801b220 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b220:	b530      	push	{r4, r5, lr}
 801b222:	460d      	mov	r5, r1
 801b224:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b226:	b087      	sub	sp, #28
 801b228:	4604      	mov	r4, r0
 801b22a:	b301      	cbz	r1, 801b26e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b22c:	a801      	add	r0, sp, #4
 801b22e:	f7ff ff33 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b232:	892a      	ldrh	r2, [r5, #8]
 801b234:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b238:	7928      	ldrb	r0, [r5, #4]
 801b23a:	1ad2      	subs	r2, r2, r3
 801b23c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b23e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b242:	441a      	add	r2, r3
 801b244:	896b      	ldrh	r3, [r5, #10]
 801b246:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b24a:	f88d 0010 	strb.w	r0, [sp, #16]
 801b24e:	1b5b      	subs	r3, r3, r5
 801b250:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b252:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b254:	442b      	add	r3, r5
 801b256:	4d07      	ldr	r5, [pc, #28]	; (801b274 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b258:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b25c:	a903      	add	r1, sp, #12
 801b25e:	9503      	str	r5, [sp, #12]
 801b260:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b264:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b268:	6803      	ldr	r3, [r0, #0]
 801b26a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b26c:	4798      	blx	r3
 801b26e:	b007      	add	sp, #28
 801b270:	bd30      	pop	{r4, r5, pc}
 801b272:	bf00      	nop
 801b274:	0802e048 	.word	0x0802e048

0801b278 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b27c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b27e:	b08a      	sub	sp, #40	; 0x28
 801b280:	4604      	mov	r4, r0
 801b282:	460d      	mov	r5, r1
 801b284:	b113      	cbz	r3, 801b28c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801b286:	790b      	ldrb	r3, [r1, #4]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d044      	beq.n	801b316 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b28c:	f104 0804 	add.w	r8, r4, #4
 801b290:	a803      	add	r0, sp, #12
 801b292:	4641      	mov	r1, r8
 801b294:	f7ff ff00 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b298:	792b      	ldrb	r3, [r5, #4]
 801b29a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b29e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b2a2:	b983      	cbnz	r3, 801b2c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801b2a4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801b2a8:	892a      	ldrh	r2, [r5, #8]
 801b2aa:	88e9      	ldrh	r1, [r5, #6]
 801b2ac:	4640      	mov	r0, r8
 801b2ae:	1b92      	subs	r2, r2, r6
 801b2b0:	9301      	str	r3, [sp, #4]
 801b2b2:	1bc9      	subs	r1, r1, r7
 801b2b4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801b2b8:	b212      	sxth	r2, r2
 801b2ba:	9300      	str	r3, [sp, #0]
 801b2bc:	b209      	sxth	r1, r1
 801b2be:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b2c2:	f7fb fb3d 	bl	8016940 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801b2c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b2c8:	b329      	cbz	r1, 801b316 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b2ca:	a805      	add	r0, sp, #20
 801b2cc:	f7ff fee4 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b2d0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b2d4:	792b      	ldrb	r3, [r5, #4]
 801b2d6:	a907      	add	r1, sp, #28
 801b2d8:	1abf      	subs	r7, r7, r2
 801b2da:	88ea      	ldrh	r2, [r5, #6]
 801b2dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b2de:	4417      	add	r7, r2
 801b2e0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801b2e2:	f88d 3020 	strb.w	r3, [sp, #32]
 801b2e6:	4417      	add	r7, r2
 801b2e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b2ec:	1ab6      	subs	r6, r6, r2
 801b2ee:	892a      	ldrh	r2, [r5, #8]
 801b2f0:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801b2f4:	4416      	add	r6, r2
 801b2f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b2f8:	4416      	add	r6, r2
 801b2fa:	4a08      	ldr	r2, [pc, #32]	; (801b31c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b2fc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801b300:	2600      	movs	r6, #0
 801b302:	9207      	str	r2, [sp, #28]
 801b304:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801b308:	6803      	ldr	r3, [r0, #0]
 801b30a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b30c:	4798      	blx	r3
 801b30e:	792b      	ldrb	r3, [r5, #4]
 801b310:	b10b      	cbz	r3, 801b316 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b312:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b316:	b00a      	add	sp, #40	; 0x28
 801b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b31c:	0802e020 	.word	0x0802e020

0801b320 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b324:	460c      	mov	r4, r1
 801b326:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b328:	b088      	sub	sp, #32
 801b32a:	4605      	mov	r5, r0
 801b32c:	2900      	cmp	r1, #0
 801b32e:	d06d      	beq.n	801b40c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b330:	4668      	mov	r0, sp
 801b332:	f7ff feb1 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b336:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801b338:	88e3      	ldrh	r3, [r4, #6]
 801b33a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b33e:	440b      	add	r3, r1
 801b340:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b344:	b21b      	sxth	r3, r3
 801b346:	4543      	cmp	r3, r8
 801b348:	db31      	blt.n	801b3ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b34a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b34e:	44c4      	add	ip, r8
 801b350:	fa0f fc8c 	sxth.w	ip, ip
 801b354:	4563      	cmp	r3, ip
 801b356:	da2a      	bge.n	801b3ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b358:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801b35a:	8926      	ldrh	r6, [r4, #8]
 801b35c:	4416      	add	r6, r2
 801b35e:	b236      	sxth	r6, r6
 801b360:	42be      	cmp	r6, r7
 801b362:	db24      	blt.n	801b3ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b364:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b368:	4438      	add	r0, r7
 801b36a:	b200      	sxth	r0, r0
 801b36c:	4286      	cmp	r6, r0
 801b36e:	da1e      	bge.n	801b3ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b370:	8963      	ldrh	r3, [r4, #10]
 801b372:	4419      	add	r1, r3
 801b374:	b209      	sxth	r1, r1
 801b376:	4541      	cmp	r1, r8
 801b378:	db08      	blt.n	801b38c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b37a:	4561      	cmp	r1, ip
 801b37c:	da06      	bge.n	801b38c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b37e:	89a3      	ldrh	r3, [r4, #12]
 801b380:	441a      	add	r2, r3
 801b382:	b212      	sxth	r2, r2
 801b384:	42ba      	cmp	r2, r7
 801b386:	db01      	blt.n	801b38c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b388:	4282      	cmp	r2, r0
 801b38a:	db10      	blt.n	801b3ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b38c:	4b21      	ldr	r3, [pc, #132]	; (801b414 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b38e:	a904      	add	r1, sp, #16
 801b390:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b392:	9304      	str	r3, [sp, #16]
 801b394:	2302      	movs	r3, #2
 801b396:	f88d 3014 	strb.w	r3, [sp, #20]
 801b39a:	2300      	movs	r3, #0
 801b39c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b3a0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b3a4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b3a8:	6803      	ldr	r3, [r0, #0]
 801b3aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3ac:	4798      	blx	r3
 801b3ae:	1d29      	adds	r1, r5, #4
 801b3b0:	a802      	add	r0, sp, #8
 801b3b2:	f7ff fe71 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b3b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b3ba:	88e0      	ldrh	r0, [r4, #6]
 801b3bc:	eba3 0808 	sub.w	r8, r3, r8
 801b3c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b3c4:	7921      	ldrb	r1, [r4, #4]
 801b3c6:	fa1f f888 	uxth.w	r8, r8
 801b3ca:	1bdf      	subs	r7, r3, r7
 801b3cc:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b3d0:	b2bb      	uxth	r3, r7
 801b3d2:	4440      	add	r0, r8
 801b3d4:	8922      	ldrh	r2, [r4, #8]
 801b3d6:	8967      	ldrh	r7, [r4, #10]
 801b3d8:	4460      	add	r0, ip
 801b3da:	89a4      	ldrh	r4, [r4, #12]
 801b3dc:	441a      	add	r2, r3
 801b3de:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b3e0:	44b8      	add	r8, r7
 801b3e2:	4423      	add	r3, r4
 801b3e4:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b3e8:	4432      	add	r2, r6
 801b3ea:	44e0      	add	r8, ip
 801b3ec:	4433      	add	r3, r6
 801b3ee:	4c0a      	ldr	r4, [pc, #40]	; (801b418 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b3f0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b3f2:	f88d 1014 	strb.w	r1, [sp, #20]
 801b3f6:	a904      	add	r1, sp, #16
 801b3f8:	9404      	str	r4, [sp, #16]
 801b3fa:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b3fe:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b402:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b406:	6803      	ldr	r3, [r0, #0]
 801b408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b40a:	4798      	blx	r3
 801b40c:	b008      	add	sp, #32
 801b40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b412:	bf00      	nop
 801b414:	0802e020 	.word	0x0802e020
 801b418:	0802e034 	.word	0x0802e034

0801b41c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b41e:	4604      	mov	r4, r0
 801b420:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b424:	3201      	adds	r2, #1
 801b426:	d112      	bne.n	801b44e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b428:	2500      	movs	r5, #0
 801b42a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b42e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b432:	6803      	ldr	r3, [r0, #0]
 801b434:	9500      	str	r5, [sp, #0]
 801b436:	466d      	mov	r5, sp
 801b438:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b43c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b440:	4629      	mov	r1, r5
 801b442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b444:	4798      	blx	r3
 801b446:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b44a:	e884 0003 	stmia.w	r4, {r0, r1}
 801b44e:	4620      	mov	r0, r4
 801b450:	b003      	add	sp, #12
 801b452:	bd30      	pop	{r4, r5, pc}

0801b454 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b454:	b513      	push	{r0, r1, r4, lr}
 801b456:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b45a:	4604      	mov	r4, r0
 801b45c:	3301      	adds	r3, #1
 801b45e:	d109      	bne.n	801b474 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b460:	4601      	mov	r1, r0
 801b462:	4668      	mov	r0, sp
 801b464:	f7ff fe18 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b468:	f8bd 3000 	ldrh.w	r3, [sp]
 801b46c:	8423      	strh	r3, [r4, #32]
 801b46e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b472:	8463      	strh	r3, [r4, #34]	; 0x22
 801b474:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b478:	b002      	add	sp, #8
 801b47a:	bd10      	pop	{r4, pc}

0801b47c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b47c:	b513      	push	{r0, r1, r4, lr}
 801b47e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b482:	4604      	mov	r4, r0
 801b484:	3301      	adds	r3, #1
 801b486:	d109      	bne.n	801b49c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b488:	4601      	mov	r1, r0
 801b48a:	4668      	mov	r0, sp
 801b48c:	f7ff fe04 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b490:	f8bd 3000 	ldrh.w	r3, [sp]
 801b494:	8423      	strh	r3, [r4, #32]
 801b496:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b49a:	8463      	strh	r3, [r4, #34]	; 0x22
 801b49c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b4a0:	b002      	add	sp, #8
 801b4a2:	bd10      	pop	{r4, pc}

0801b4a4 <_ZN8touchgfx6ScreenC1Ev>:
 801b4a4:	b570      	push	{r4, r5, r6, lr}
 801b4a6:	4b17      	ldr	r3, [pc, #92]	; (801b504 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b4a8:	4605      	mov	r5, r0
 801b4aa:	4a17      	ldr	r2, [pc, #92]	; (801b508 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b4ac:	2101      	movs	r1, #1
 801b4ae:	f845 3b04 	str.w	r3, [r5], #4
 801b4b2:	2300      	movs	r3, #0
 801b4b4:	6042      	str	r2, [r0, #4]
 801b4b6:	4604      	mov	r4, r0
 801b4b8:	8103      	strh	r3, [r0, #8]
 801b4ba:	8143      	strh	r3, [r0, #10]
 801b4bc:	8183      	strh	r3, [r0, #12]
 801b4be:	81c3      	strh	r3, [r0, #14]
 801b4c0:	8203      	strh	r3, [r0, #16]
 801b4c2:	8243      	strh	r3, [r0, #18]
 801b4c4:	8283      	strh	r3, [r0, #20]
 801b4c6:	82c3      	strh	r3, [r0, #22]
 801b4c8:	6203      	str	r3, [r0, #32]
 801b4ca:	8483      	strh	r3, [r0, #36]	; 0x24
 801b4cc:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b4ce:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b4d2:	6343      	str	r3, [r0, #52]	; 0x34
 801b4d4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b4d8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801b4dc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b4e0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801b4e4:	4b09      	ldr	r3, [pc, #36]	; (801b50c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b4e6:	4628      	mov	r0, r5
 801b4e8:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b4ec:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801b4ee:	4a08      	ldr	r2, [pc, #32]	; (801b510 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b4f0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b4f4:	4798      	blx	r3
 801b4f6:	6863      	ldr	r3, [r4, #4]
 801b4f8:	4628      	mov	r0, r5
 801b4fa:	4631      	mov	r1, r6
 801b4fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b4fe:	4798      	blx	r3
 801b500:	4620      	mov	r0, r4
 801b502:	bd70      	pop	{r4, r5, r6, pc}
 801b504:	0802e05c 	.word	0x0802e05c
 801b508:	0802dd58 	.word	0x0802dd58
 801b50c:	200150ea 	.word	0x200150ea
 801b510:	200150e8 	.word	0x200150e8

0801b514 <_ZN8touchgfx6Screen4drawEv>:
 801b514:	4b09      	ldr	r3, [pc, #36]	; (801b53c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b516:	b507      	push	{r0, r1, r2, lr}
 801b518:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b51c:	2100      	movs	r1, #0
 801b51e:	4b08      	ldr	r3, [pc, #32]	; (801b540 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b520:	9100      	str	r1, [sp, #0]
 801b522:	4669      	mov	r1, sp
 801b524:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b528:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b52c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b530:	6803      	ldr	r3, [r0, #0]
 801b532:	689b      	ldr	r3, [r3, #8]
 801b534:	4798      	blx	r3
 801b536:	b003      	add	sp, #12
 801b538:	f85d fb04 	ldr.w	pc, [sp], #4
 801b53c:	200150e8 	.word	0x200150e8
 801b540:	200150ea 	.word	0x200150ea

0801b544 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b548:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b54c:	b089      	sub	sp, #36	; 0x24
 801b54e:	4680      	mov	r8, r0
 801b550:	460c      	mov	r4, r1
 801b552:	2b00      	cmp	r3, #0
 801b554:	4615      	mov	r5, r2
 801b556:	dd0e      	ble.n	801b576 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b558:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	dd0a      	ble.n	801b576 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b560:	4628      	mov	r0, r5
 801b562:	f7ff ff5b 	bl	801b41c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b566:	4621      	mov	r1, r4
 801b568:	f7fe fc47 	bl	8019dfa <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b56c:	69eb      	ldr	r3, [r5, #28]
 801b56e:	b928      	cbnz	r0, 801b57c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b570:	461d      	mov	r5, r3
 801b572:	2b00      	cmp	r3, #0
 801b574:	d1f4      	bne.n	801b560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b576:	b009      	add	sp, #36	; 0x24
 801b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b57c:	ae04      	add	r6, sp, #16
 801b57e:	2b00      	cmp	r3, #0
 801b580:	f000 80b5 	beq.w	801b6ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b584:	682b      	ldr	r3, [r5, #0]
 801b586:	4629      	mov	r1, r5
 801b588:	a802      	add	r0, sp, #8
 801b58a:	68db      	ldr	r3, [r3, #12]
 801b58c:	4798      	blx	r3
 801b58e:	4628      	mov	r0, r5
 801b590:	f7ff ff60 	bl	801b454 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b594:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b598:	4407      	add	r7, r0
 801b59a:	4628      	mov	r0, r5
 801b59c:	f7ff ff6e 	bl	801b47c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b5a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b5a4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b5a8:	b23f      	sxth	r7, r7
 801b5aa:	4418      	add	r0, r3
 801b5ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b5b0:	4621      	mov	r1, r4
 801b5b2:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b5b6:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b5ba:	4630      	mov	r0, r6
 801b5bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b5c0:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b5c4:	f7fb fa9e 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 801b5c8:	4628      	mov	r0, r5
 801b5ca:	f7ff ff27 	bl	801b41c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b5ce:	ab06      	add	r3, sp, #24
 801b5d0:	4602      	mov	r2, r0
 801b5d2:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b5d6:	e883 0003 	stmia.w	r3, {r0, r1}
 801b5da:	4611      	mov	r1, r2
 801b5dc:	4618      	mov	r0, r3
 801b5de:	f7fb fa91 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 801b5e2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b5e6:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b5ea:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b5ee:	4299      	cmp	r1, r3
 801b5f0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b5f4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b5f8:	d10b      	bne.n	801b612 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b5fa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b5fe:	4552      	cmp	r2, sl
 801b600:	d107      	bne.n	801b612 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b602:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b606:	455a      	cmp	r2, fp
 801b608:	d103      	bne.n	801b612 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b60a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b60e:	454a      	cmp	r2, r9
 801b610:	d06d      	beq.n	801b6ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b612:	f1bb 0f00 	cmp.w	fp, #0
 801b616:	dd65      	ble.n	801b6e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b618:	f1b9 0f00 	cmp.w	r9, #0
 801b61c:	dd62      	ble.n	801b6e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b61e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b622:	fa1f f08a 	uxth.w	r0, sl
 801b626:	4552      	cmp	r2, sl
 801b628:	9000      	str	r0, [sp, #0]
 801b62a:	da12      	bge.n	801b652 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b62c:	9301      	str	r3, [sp, #4]
 801b62e:	9b00      	ldr	r3, [sp, #0]
 801b630:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b634:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b638:	1a9a      	subs	r2, r3, r2
 801b63a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b63e:	4631      	mov	r1, r6
 801b640:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b644:	4640      	mov	r0, r8
 801b646:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b64a:	69ea      	ldr	r2, [r5, #28]
 801b64c:	f7ff ff7a 	bl	801b544 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b650:	9b01      	ldr	r3, [sp, #4]
 801b652:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b656:	b29f      	uxth	r7, r3
 801b658:	429a      	cmp	r2, r3
 801b65a:	da0d      	bge.n	801b678 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b65c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b660:	1aba      	subs	r2, r7, r2
 801b662:	f8ad a012 	strh.w	sl, [sp, #18]
 801b666:	4631      	mov	r1, r6
 801b668:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b66c:	4640      	mov	r0, r8
 801b66e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b672:	69ea      	ldr	r2, [r5, #28]
 801b674:	f7ff ff66 	bl	801b544 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b678:	8822      	ldrh	r2, [r4, #0]
 801b67a:	445f      	add	r7, fp
 801b67c:	88a3      	ldrh	r3, [r4, #4]
 801b67e:	b2bf      	uxth	r7, r7
 801b680:	4413      	add	r3, r2
 801b682:	b23a      	sxth	r2, r7
 801b684:	b29b      	uxth	r3, r3
 801b686:	b219      	sxth	r1, r3
 801b688:	4291      	cmp	r1, r2
 801b68a:	dd0d      	ble.n	801b6a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b68c:	1bdb      	subs	r3, r3, r7
 801b68e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b692:	f8ad a012 	strh.w	sl, [sp, #18]
 801b696:	4631      	mov	r1, r6
 801b698:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b69c:	4640      	mov	r0, r8
 801b69e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b6a2:	69ea      	ldr	r2, [r5, #28]
 801b6a4:	f7ff ff4e 	bl	801b544 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b6a8:	88e2      	ldrh	r2, [r4, #6]
 801b6aa:	8863      	ldrh	r3, [r4, #2]
 801b6ac:	4413      	add	r3, r2
 801b6ae:	9a00      	ldr	r2, [sp, #0]
 801b6b0:	444a      	add	r2, r9
 801b6b2:	b29b      	uxth	r3, r3
 801b6b4:	fa1f f982 	uxth.w	r9, r2
 801b6b8:	b219      	sxth	r1, r3
 801b6ba:	fa0f f289 	sxth.w	r2, r9
 801b6be:	428a      	cmp	r2, r1
 801b6c0:	da15      	bge.n	801b6ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b6c2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b6c6:	eba3 0309 	sub.w	r3, r3, r9
 801b6ca:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b6ce:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b6d2:	4631      	mov	r1, r6
 801b6d4:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b6d8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b6dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6e0:	69ea      	ldr	r2, [r5, #28]
 801b6e2:	e001      	b.n	801b6e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b6e4:	69ea      	ldr	r2, [r5, #28]
 801b6e6:	4621      	mov	r1, r4
 801b6e8:	4640      	mov	r0, r8
 801b6ea:	f7ff ff2b 	bl	801b544 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b6ee:	4628      	mov	r0, r5
 801b6f0:	f7ff fe94 	bl	801b41c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b6f4:	6861      	ldr	r1, [r4, #4]
 801b6f6:	4602      	mov	r2, r0
 801b6f8:	4633      	mov	r3, r6
 801b6fa:	6820      	ldr	r0, [r4, #0]
 801b6fc:	c303      	stmia	r3!, {r0, r1}
 801b6fe:	4611      	mov	r1, r2
 801b700:	4630      	mov	r0, r6
 801b702:	f7fb f9ff 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 801b706:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	f77f af33 	ble.w	801b576 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b710:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b714:	2b00      	cmp	r3, #0
 801b716:	f77f af2e 	ble.w	801b576 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b71a:	4628      	mov	r0, r5
 801b71c:	f7ff fe9a 	bl	801b454 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b720:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b724:	1a18      	subs	r0, r3, r0
 801b726:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b72a:	4628      	mov	r0, r5
 801b72c:	f7ff fea6 	bl	801b47c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b730:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b734:	4631      	mov	r1, r6
 801b736:	1a18      	subs	r0, r3, r0
 801b738:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b73c:	4628      	mov	r0, r5
 801b73e:	682b      	ldr	r3, [r5, #0]
 801b740:	689b      	ldr	r3, [r3, #8]
 801b742:	4798      	blx	r3
 801b744:	e717      	b.n	801b576 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b746 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b746:	b570      	push	{r4, r5, r6, lr}
 801b748:	1d06      	adds	r6, r0, #4
 801b74a:	b086      	sub	sp, #24
 801b74c:	460c      	mov	r4, r1
 801b74e:	2300      	movs	r3, #0
 801b750:	4631      	mov	r1, r6
 801b752:	4605      	mov	r5, r0
 801b754:	a802      	add	r0, sp, #8
 801b756:	9301      	str	r3, [sp, #4]
 801b758:	f7ff fc9e 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b75c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b760:	8822      	ldrh	r2, [r4, #0]
 801b762:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801b766:	1ad2      	subs	r2, r2, r3
 801b768:	8863      	ldrh	r3, [r4, #2]
 801b76a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b76e:	1a5b      	subs	r3, r3, r1
 801b770:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b774:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b778:	aa01      	add	r2, sp, #4
 801b77a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b77e:	4630      	mov	r0, r6
 801b780:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b784:	a904      	add	r1, sp, #16
 801b786:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b78a:	f7fb fa93 	bl	8016cb4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b78e:	9a01      	ldr	r2, [sp, #4]
 801b790:	b11a      	cbz	r2, 801b79a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801b792:	4621      	mov	r1, r4
 801b794:	4628      	mov	r0, r5
 801b796:	f7ff fed5 	bl	801b544 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b79a:	b006      	add	sp, #24
 801b79c:	bd70      	pop	{r4, r5, r6, pc}

0801b79e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b79e:	4602      	mov	r2, r0
 801b7a0:	b530      	push	{r4, r5, lr}
 801b7a2:	4604      	mov	r4, r0
 801b7a4:	b085      	sub	sp, #20
 801b7a6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b7aa:	460d      	mov	r5, r1
 801b7ac:	466b      	mov	r3, sp
 801b7ae:	6851      	ldr	r1, [r2, #4]
 801b7b0:	c303      	stmia	r3!, {r0, r1}
 801b7b2:	4629      	mov	r1, r5
 801b7b4:	4668      	mov	r0, sp
 801b7b6:	f7fb f9a5 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 801b7ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b7be:	b12b      	cbz	r3, 801b7cc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801b7c0:	4669      	mov	r1, sp
 801b7c2:	4620      	mov	r0, r4
 801b7c4:	f7ff ffbf 	bl	801b746 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b7c8:	b005      	add	sp, #20
 801b7ca:	bd30      	pop	{r4, r5, pc}
 801b7cc:	3404      	adds	r4, #4
 801b7ce:	a802      	add	r0, sp, #8
 801b7d0:	4621      	mov	r1, r4
 801b7d2:	f7ff fc61 	bl	801b098 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b7d6:	f8bd 3000 	ldrh.w	r3, [sp]
 801b7da:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b7de:	4669      	mov	r1, sp
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	1a9b      	subs	r3, r3, r2
 801b7e4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b7e8:	f8ad 3000 	strh.w	r3, [sp]
 801b7ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b7f0:	1a9b      	subs	r3, r3, r2
 801b7f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b7f6:	f7fb fa24 	bl	8016c42 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b7fa:	e7e5      	b.n	801b7c8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801b7fc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b7fc:	460b      	mov	r3, r1
 801b7fe:	680a      	ldr	r2, [r1, #0]
 801b800:	1d01      	adds	r1, r0, #4
 801b802:	6992      	ldr	r2, [r2, #24]
 801b804:	4618      	mov	r0, r3
 801b806:	4710      	bx	r2

0801b808 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801b808:	4298      	cmp	r0, r3
 801b80a:	d200      	bcs.n	801b80e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801b80c:	b913      	cbnz	r3, 801b814 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801b80e:	440a      	add	r2, r1
 801b810:	b210      	sxth	r0, r2
 801b812:	4770      	bx	lr
 801b814:	ee07 2a90 	vmov	s15, r2
 801b818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b81c:	ee07 0a90 	vmov	s15, r0
 801b820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b824:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b828:	ee07 3a10 	vmov	s14, r3
 801b82c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801b830:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801b834:	ee07 1a90 	vmov	s15, r1
 801b838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b83c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b840:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801b844:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b84c:	bfcc      	ite	gt
 801b84e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801b852:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801b856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b85a:	ee17 3a90 	vmov	r3, s15
 801b85e:	b218      	sxth	r0, r3
 801b860:	4770      	bx	lr

0801b862 <_ZN8touchgfx15EasingEquations12linearEaseInEtsst>:
 801b862:	f7ff bfd1 	b.w	801b808 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>

0801b866 <_ZN8touchgfx12TextProviderC1Ev>:
 801b866:	b538      	push	{r3, r4, r5, lr}
 801b868:	2500      	movs	r5, #0
 801b86a:	2302      	movs	r3, #2
 801b86c:	4604      	mov	r4, r0
 801b86e:	220e      	movs	r2, #14
 801b870:	7403      	strb	r3, [r0, #16]
 801b872:	4629      	mov	r1, r5
 801b874:	6145      	str	r5, [r0, #20]
 801b876:	7605      	strb	r5, [r0, #24]
 801b878:	83c5      	strh	r5, [r0, #30]
 801b87a:	8405      	strh	r5, [r0, #32]
 801b87c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801b87e:	8705      	strh	r5, [r0, #56]	; 0x38
 801b880:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801b882:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801b886:	e9c0 5500 	strd	r5, r5, [r0]
 801b88a:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801b88e:	304c      	adds	r0, #76	; 0x4c
 801b890:	f00c febc 	bl	802860c <memset>
 801b894:	2301      	movs	r3, #1
 801b896:	4620      	mov	r0, r4
 801b898:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801b89c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801b8a0:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801b8a4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801b8a8:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801b8ac:	f7e8 fb4a 	bl	8003f44 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	bd38      	pop	{r3, r4, r5, pc}

0801b8b4 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801b8b4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801b8b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b8ba:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801b8bc:	fab0 f080 	clz	r0, r0
 801b8c0:	0940      	lsrs	r0, r0, #5
 801b8c2:	4770      	bx	lr

0801b8c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801b8c4:	b530      	push	{r4, r5, lr}
 801b8c6:	2500      	movs	r5, #0
 801b8c8:	2401      	movs	r4, #1
 801b8ca:	6843      	ldr	r3, [r0, #4]
 801b8cc:	b913      	cbnz	r3, 801b8d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801b8ce:	6803      	ldr	r3, [r0, #0]
 801b8d0:	b313      	cbz	r3, 801b918 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801b8d2:	6043      	str	r3, [r0, #4]
 801b8d4:	7e03      	ldrb	r3, [r0, #24]
 801b8d6:	b143      	cbz	r3, 801b8ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801b8d8:	6943      	ldr	r3, [r0, #20]
 801b8da:	b12b      	cbz	r3, 801b8e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b8dc:	881a      	ldrh	r2, [r3, #0]
 801b8de:	b11a      	cbz	r2, 801b8e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801b8e0:	1c9a      	adds	r2, r3, #2
 801b8e2:	6142      	str	r2, [r0, #20]
 801b8e4:	8818      	ldrh	r0, [r3, #0]
 801b8e6:	bd30      	pop	{r4, r5, pc}
 801b8e8:	7605      	strb	r5, [r0, #24]
 801b8ea:	6843      	ldr	r3, [r0, #4]
 801b8ec:	8819      	ldrh	r1, [r3, #0]
 801b8ee:	b199      	cbz	r1, 801b918 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801b8f0:	1c9a      	adds	r2, r3, #2
 801b8f2:	2902      	cmp	r1, #2
 801b8f4:	6042      	str	r2, [r0, #4]
 801b8f6:	d1f5      	bne.n	801b8e4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801b8f8:	7c03      	ldrb	r3, [r0, #16]
 801b8fa:	2b01      	cmp	r3, #1
 801b8fc:	d8e5      	bhi.n	801b8ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b8fe:	1c5a      	adds	r2, r3, #1
 801b900:	3302      	adds	r3, #2
 801b902:	7402      	strb	r2, [r0, #16]
 801b904:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801b908:	6143      	str	r3, [r0, #20]
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d0dd      	beq.n	801b8ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b90e:	881b      	ldrh	r3, [r3, #0]
 801b910:	2b00      	cmp	r3, #0
 801b912:	d0da      	beq.n	801b8ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b914:	7604      	strb	r4, [r0, #24]
 801b916:	e7d8      	b.n	801b8ca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801b918:	2000      	movs	r0, #0
 801b91a:	e7e4      	b.n	801b8e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801b91c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801b91c:	6001      	str	r1, [r0, #0]
 801b91e:	2100      	movs	r1, #0
 801b920:	b430      	push	{r4, r5}
 801b922:	6041      	str	r1, [r0, #4]
 801b924:	6815      	ldr	r5, [r2, #0]
 801b926:	6085      	str	r5, [r0, #8]
 801b928:	6852      	ldr	r2, [r2, #4]
 801b92a:	6443      	str	r3, [r0, #68]	; 0x44
 801b92c:	9b02      	ldr	r3, [sp, #8]
 801b92e:	60c2      	str	r2, [r0, #12]
 801b930:	7401      	strb	r1, [r0, #16]
 801b932:	6141      	str	r1, [r0, #20]
 801b934:	7601      	strb	r1, [r0, #24]
 801b936:	8701      	strh	r1, [r0, #56]	; 0x38
 801b938:	8401      	strh	r1, [r0, #32]
 801b93a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801b93e:	6483      	str	r3, [r0, #72]	; 0x48
 801b940:	bc30      	pop	{r4, r5}
 801b942:	f7e8 baff 	b.w	8003f44 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801b946 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801b946:	b408      	push	{r3}
 801b948:	b510      	push	{r4, lr}
 801b94a:	b085      	sub	sp, #20
 801b94c:	ac07      	add	r4, sp, #28
 801b94e:	f854 3b04 	ldr.w	r3, [r4], #4
 801b952:	9300      	str	r3, [sp, #0]
 801b954:	4613      	mov	r3, r2
 801b956:	4622      	mov	r2, r4
 801b958:	9403      	str	r4, [sp, #12]
 801b95a:	f7ff ffdf 	bl	801b91c <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b95e:	b005      	add	sp, #20
 801b960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b964:	b001      	add	sp, #4
 801b966:	4770      	bx	lr

0801b968 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801b968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b96a:	4605      	mov	r5, r0
 801b96c:	4608      	mov	r0, r1
 801b96e:	b1f1      	cbz	r1, 801b9ae <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801b970:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801b974:	460b      	mov	r3, r1
 801b976:	f101 0708 	add.w	r7, r1, #8
 801b97a:	4622      	mov	r2, r4
 801b97c:	6818      	ldr	r0, [r3, #0]
 801b97e:	3308      	adds	r3, #8
 801b980:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801b984:	4626      	mov	r6, r4
 801b986:	42bb      	cmp	r3, r7
 801b988:	c603      	stmia	r6!, {r0, r1}
 801b98a:	4634      	mov	r4, r6
 801b98c:	d1f6      	bne.n	801b97c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801b98e:	6818      	ldr	r0, [r3, #0]
 801b990:	6030      	str	r0, [r6, #0]
 801b992:	4610      	mov	r0, r2
 801b994:	889b      	ldrh	r3, [r3, #4]
 801b996:	80b3      	strh	r3, [r6, #4]
 801b998:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801b99c:	015b      	lsls	r3, r3, #5
 801b99e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801b9a2:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801b9a6:	430b      	orrs	r3, r1
 801b9a8:	425b      	negs	r3, r3
 801b9aa:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801b9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b9b0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801b9b0:	b538      	push	{r3, r4, r5, lr}
 801b9b2:	460c      	mov	r4, r1
 801b9b4:	6811      	ldr	r1, [r2, #0]
 801b9b6:	4610      	mov	r0, r2
 801b9b8:	68cd      	ldr	r5, [r1, #12]
 801b9ba:	4619      	mov	r1, r3
 801b9bc:	47a8      	blx	r5
 801b9be:	2800      	cmp	r0, #0
 801b9c0:	bf08      	it	eq
 801b9c2:	4620      	moveq	r0, r4
 801b9c4:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b9c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801b9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9ca:	4604      	mov	r4, r0
 801b9cc:	4615      	mov	r5, r2
 801b9ce:	4608      	mov	r0, r1
 801b9d0:	b93a      	cbnz	r2, 801b9e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801b9d2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801b9d6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801b9da:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801b9de:	4628      	mov	r0, r5
 801b9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9e2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801b9e6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801b9ea:	8893      	ldrh	r3, [r2, #4]
 801b9ec:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801b9f0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801b9f4:	79ee      	ldrb	r6, [r5, #7]
 801b9f6:	4316      	orrs	r6, r2
 801b9f8:	19da      	adds	r2, r3, r7
 801b9fa:	b291      	uxth	r1, r2
 801b9fc:	b2b7      	uxth	r7, r6
 801b9fe:	291d      	cmp	r1, #29
 801ba00:	d87b      	bhi.n	801bafa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801ba02:	2201      	movs	r2, #1
 801ba04:	10f6      	asrs	r6, r6, #3
 801ba06:	408a      	lsls	r2, r1
 801ba08:	4974      	ldr	r1, [pc, #464]	; (801bbdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801ba0a:	420a      	tst	r2, r1
 801ba0c:	d12e      	bne.n	801ba6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801ba0e:	f412 7f60 	tst.w	r2, #896	; 0x380
 801ba12:	d072      	beq.n	801bafa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801ba14:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801ba18:	462b      	mov	r3, r5
 801ba1a:	f105 0e08 	add.w	lr, r5, #8
 801ba1e:	4615      	mov	r5, r2
 801ba20:	6818      	ldr	r0, [r3, #0]
 801ba22:	3308      	adds	r3, #8
 801ba24:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ba28:	4694      	mov	ip, r2
 801ba2a:	4573      	cmp	r3, lr
 801ba2c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ba30:	4662      	mov	r2, ip
 801ba32:	d1f5      	bne.n	801ba20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801ba34:	6818      	ldr	r0, [r3, #0]
 801ba36:	f8cc 0000 	str.w	r0, [ip]
 801ba3a:	889b      	ldrh	r3, [r3, #4]
 801ba3c:	f8ac 3004 	strh.w	r3, [ip, #4]
 801ba40:	b2b3      	uxth	r3, r6
 801ba42:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801ba46:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801ba4a:	1aca      	subs	r2, r1, r3
 801ba4c:	1bcf      	subs	r7, r1, r7
 801ba4e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801ba52:	b292      	uxth	r2, r2
 801ba54:	1afb      	subs	r3, r7, r3
 801ba56:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801ba5a:	10d2      	asrs	r2, r2, #3
 801ba5c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801ba60:	4302      	orrs	r2, r0
 801ba62:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801ba66:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801ba6a:	e7b8      	b.n	801b9de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ba6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ba6e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ba72:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801ba74:	f640 6333 	movw	r3, #3635	; 0xe33
 801ba78:	4299      	cmp	r1, r3
 801ba7a:	d110      	bne.n	801ba9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801ba7c:	6803      	ldr	r3, [r0, #0]
 801ba7e:	68db      	ldr	r3, [r3, #12]
 801ba80:	4798      	blx	r3
 801ba82:	7b41      	ldrb	r1, [r0, #13]
 801ba84:	00cb      	lsls	r3, r1, #3
 801ba86:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ba8a:	7a03      	ldrb	r3, [r0, #8]
 801ba8c:	0648      	lsls	r0, r1, #25
 801ba8e:	ea43 0302 	orr.w	r3, r3, r2
 801ba92:	bf44      	itt	mi
 801ba94:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ba98:	b21b      	sxthmi	r3, r3
 801ba9a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ba9e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801baa2:	462a      	mov	r2, r5
 801baa4:	f105 0c08 	add.w	ip, r5, #8
 801baa8:	443b      	add	r3, r7
 801baaa:	4433      	add	r3, r6
 801baac:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801bab0:	b29b      	uxth	r3, r3
 801bab2:	4635      	mov	r5, r6
 801bab4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bab8:	6810      	ldr	r0, [r2, #0]
 801baba:	3208      	adds	r2, #8
 801babc:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801bac0:	4637      	mov	r7, r6
 801bac2:	4562      	cmp	r2, ip
 801bac4:	c703      	stmia	r7!, {r0, r1}
 801bac6:	463e      	mov	r6, r7
 801bac8:	d1f6      	bne.n	801bab8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801baca:	6810      	ldr	r0, [r2, #0]
 801bacc:	6038      	str	r0, [r7, #0]
 801bace:	8892      	ldrh	r2, [r2, #4]
 801bad0:	80ba      	strh	r2, [r7, #4]
 801bad2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801bad6:	10db      	asrs	r3, r3, #3
 801bad8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801badc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bae0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bae4:	4313      	orrs	r3, r2
 801bae6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801baea:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801baee:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801baf2:	1a9b      	subs	r3, r3, r2
 801baf4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801baf8:	e771      	b.n	801b9de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bafa:	f023 0204 	bic.w	r2, r3, #4
 801bafe:	f640 611b 	movw	r1, #3611	; 0xe1b
 801bb02:	428a      	cmp	r2, r1
 801bb04:	d003      	beq.n	801bb0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801bb06:	f640 621d 	movw	r2, #3613	; 0xe1d
 801bb0a:	4293      	cmp	r3, r2
 801bb0c:	d120      	bne.n	801bb50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801bb0e:	3b01      	subs	r3, #1
 801bb10:	4602      	mov	r2, r0
 801bb12:	4629      	mov	r1, r5
 801bb14:	4620      	mov	r0, r4
 801bb16:	b29b      	uxth	r3, r3
 801bb18:	f7ff ff4a 	bl	801b9b0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bb1c:	7b41      	ldrb	r1, [r0, #13]
 801bb1e:	00cb      	lsls	r3, r1, #3
 801bb20:	0649      	lsls	r1, r1, #25
 801bb22:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bb26:	7a03      	ldrb	r3, [r0, #8]
 801bb28:	ea43 0302 	orr.w	r3, r3, r2
 801bb2c:	bf44      	itt	mi
 801bb2e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bb32:	b21b      	sxthmi	r3, r3
 801bb34:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bb38:	7b6b      	ldrb	r3, [r5, #13]
 801bb3a:	7aaa      	ldrb	r2, [r5, #10]
 801bb3c:	005b      	lsls	r3, r3, #1
 801bb3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bb42:	4313      	orrs	r3, r2
 801bb44:	115a      	asrs	r2, r3, #5
 801bb46:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bb4a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801bb4e:	e035      	b.n	801bbbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801bb50:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801bb54:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801bb58:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801bb5c:	7a2a      	ldrb	r2, [r5, #8]
 801bb5e:	ea42 0201 	orr.w	r2, r2, r1
 801bb62:	f640 6109 	movw	r1, #3593	; 0xe09
 801bb66:	bf1c      	itt	ne
 801bb68:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801bb6c:	b212      	sxthne	r2, r2
 801bb6e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801bb72:	f023 0210 	bic.w	r2, r3, #16
 801bb76:	428a      	cmp	r2, r1
 801bb78:	d003      	beq.n	801bb82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801bb7a:	f640 6213 	movw	r2, #3603	; 0xe13
 801bb7e:	4293      	cmp	r3, r2
 801bb80:	d129      	bne.n	801bbd6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801bb82:	7b6e      	ldrb	r6, [r5, #13]
 801bb84:	4629      	mov	r1, r5
 801bb86:	0076      	lsls	r6, r6, #1
 801bb88:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bb8c:	7aae      	ldrb	r6, [r5, #10]
 801bb8e:	4316      	orrs	r6, r2
 801bb90:	f640 6213 	movw	r2, #3603	; 0xe13
 801bb94:	4293      	cmp	r3, r2
 801bb96:	4602      	mov	r2, r0
 801bb98:	4620      	mov	r0, r4
 801bb9a:	bf16      	itet	ne
 801bb9c:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bba0:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801bba4:	b29b      	uxthne	r3, r3
 801bba6:	f7ff ff03 	bl	801b9b0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bbaa:	7b43      	ldrb	r3, [r0, #13]
 801bbac:	7a82      	ldrb	r2, [r0, #10]
 801bbae:	005b      	lsls	r3, r3, #1
 801bbb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bbb4:	4313      	orrs	r3, r2
 801bbb6:	1af6      	subs	r6, r6, r3
 801bbb8:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801bbbc:	7b69      	ldrb	r1, [r5, #13]
 801bbbe:	00cb      	lsls	r3, r1, #3
 801bbc0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bbc4:	7a2b      	ldrb	r3, [r5, #8]
 801bbc6:	4313      	orrs	r3, r2
 801bbc8:	064a      	lsls	r2, r1, #25
 801bbca:	bf44      	itt	mi
 801bbcc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bbd0:	b21b      	sxthmi	r3, r3
 801bbd2:	1bdb      	subs	r3, r3, r7
 801bbd4:	e747      	b.n	801ba66 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801bbd6:	2300      	movs	r3, #0
 801bbd8:	e7b7      	b.n	801bb4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801bbda:	bf00      	nop
 801bbdc:	3fc00079 	.word	0x3fc00079

0801bbe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bbe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bbe4:	4604      	mov	r4, r0
 801bbe6:	b942      	cbnz	r2, 801bbfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bbe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bbec:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801bbf0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801bbf4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801bbf8:	e047      	b.n	801bc8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bbfa:	7b51      	ldrb	r1, [r2, #13]
 801bbfc:	8893      	ldrh	r3, [r2, #4]
 801bbfe:	010d      	lsls	r5, r1, #4
 801bc00:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801bc04:	79d5      	ldrb	r5, [r2, #7]
 801bc06:	4305      	orrs	r5, r0
 801bc08:	2d04      	cmp	r5, #4
 801bc0a:	bfcc      	ite	gt
 801bc0c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801bc10:	f04f 0e01 	movle.w	lr, #1
 801bc14:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801bc18:	f200 80ab 	bhi.w	801bd72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801bc1c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801bc20:	4283      	cmp	r3, r0
 801bc22:	d216      	bcs.n	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc24:	f240 605b 	movw	r0, #1627	; 0x65b
 801bc28:	4283      	cmp	r3, r0
 801bc2a:	d859      	bhi.n	801bce0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801bc2c:	f240 6057 	movw	r0, #1623	; 0x657
 801bc30:	4283      	cmp	r3, r0
 801bc32:	d20e      	bcs.n	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc34:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bc38:	d24a      	bcs.n	801bcd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801bc3a:	f240 604e 	movw	r0, #1614	; 0x64e
 801bc3e:	4283      	cmp	r3, r0
 801bc40:	d207      	bcs.n	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bc42:	f240 601a 	movw	r0, #1562	; 0x61a
 801bc46:	4283      	cmp	r3, r0
 801bc48:	d02a      	beq.n	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bc4a:	d821      	bhi.n	801bc90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801bc4c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801bc50:	d35b      	bcc.n	801bd0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bc52:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801bc56:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bc5a:	f040 80d0 	bne.w	801bdfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bc5e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801bc62:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bc66:	f040 80ca 	bne.w	801bdfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bc6a:	00cb      	lsls	r3, r1, #3
 801bc6c:	0649      	lsls	r1, r1, #25
 801bc6e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bc72:	7a13      	ldrb	r3, [r2, #8]
 801bc74:	ea43 0300 	orr.w	r3, r3, r0
 801bc78:	bf44      	itt	mi
 801bc7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bc7e:	b21b      	sxthmi	r3, r3
 801bc80:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bc84:	1b5d      	subs	r5, r3, r5
 801bc86:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bc8a:	4610      	mov	r0, r2
 801bc8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bc90:	f240 604b 	movw	r0, #1611	; 0x64b
 801bc94:	4283      	cmp	r3, r0
 801bc96:	d338      	bcc.n	801bd0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bc98:	f240 604c 	movw	r0, #1612	; 0x64c
 801bc9c:	4283      	cmp	r3, r0
 801bc9e:	d9d8      	bls.n	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bca0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801bca4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801bca8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bcac:	f040 80f3 	bne.w	801be96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801bcb0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bcb4:	f040 80ef 	bne.w	801be96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801bcb8:	00cb      	lsls	r3, r1, #3
 801bcba:	064e      	lsls	r6, r1, #25
 801bcbc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bcc0:	7a13      	ldrb	r3, [r2, #8]
 801bcc2:	ea43 0300 	orr.w	r3, r3, r0
 801bcc6:	bf44      	itt	mi
 801bcc8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bccc:	b21b      	sxthmi	r3, r3
 801bcce:	e7d9      	b.n	801bc84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801bcd0:	f240 6054 	movw	r0, #1620	; 0x654
 801bcd4:	4283      	cmp	r3, r0
 801bcd6:	d8e3      	bhi.n	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bcd8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bcdc:	d9e0      	bls.n	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bcde:	e7b8      	b.n	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bce0:	f240 6074 	movw	r0, #1652	; 0x674
 801bce4:	4283      	cmp	r3, r0
 801bce6:	d0b4      	beq.n	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bce8:	d82d      	bhi.n	801bd46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801bcea:	f240 605e 	movw	r0, #1630	; 0x65e
 801bcee:	4283      	cmp	r3, r0
 801bcf0:	d804      	bhi.n	801bcfc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801bcf2:	f240 605d 	movw	r0, #1629	; 0x65d
 801bcf6:	4283      	cmp	r3, r0
 801bcf8:	d3d2      	bcc.n	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bcfa:	e7aa      	b.n	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bcfc:	f240 605f 	movw	r0, #1631	; 0x65f
 801bd00:	4283      	cmp	r3, r0
 801bd02:	d0cd      	beq.n	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd04:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801bd08:	d0a3      	beq.n	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd0a:	00cb      	lsls	r3, r1, #3
 801bd0c:	0649      	lsls	r1, r1, #25
 801bd0e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bd12:	7a13      	ldrb	r3, [r2, #8]
 801bd14:	ea43 0300 	orr.w	r3, r3, r0
 801bd18:	bf44      	itt	mi
 801bd1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bd1e:	b21b      	sxthmi	r3, r3
 801bd20:	1b5d      	subs	r5, r3, r5
 801bd22:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bd26:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bd2a:	7b53      	ldrb	r3, [r2, #13]
 801bd2c:	015b      	lsls	r3, r3, #5
 801bd2e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bd32:	7993      	ldrb	r3, [r2, #6]
 801bd34:	430b      	orrs	r3, r1
 801bd36:	2105      	movs	r1, #5
 801bd38:	005b      	lsls	r3, r3, #1
 801bd3a:	fb93 f3f1 	sdiv	r3, r3, r1
 801bd3e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801bd42:	440b      	add	r3, r1
 801bd44:	e756      	b.n	801bbf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801bd46:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801bd4a:	4283      	cmp	r3, r0
 801bd4c:	d809      	bhi.n	801bd62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801bd4e:	f240 60df 	movw	r0, #1759	; 0x6df
 801bd52:	4283      	cmp	r3, r0
 801bd54:	f4bf af7d 	bcs.w	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd58:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801bd5c:	2b05      	cmp	r3, #5
 801bd5e:	d8d4      	bhi.n	801bd0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bd60:	e777      	b.n	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd62:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801bd66:	4283      	cmp	r3, r0
 801bd68:	d09a      	beq.n	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd6a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801bd6e:	4283      	cmp	r3, r0
 801bd70:	e7ca      	b.n	801bd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bd72:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801bd76:	d22b      	bcs.n	801bdd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801bd78:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801bd7c:	4283      	cmp	r3, r0
 801bd7e:	d28f      	bcs.n	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bd80:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bd84:	4283      	cmp	r3, r0
 801bd86:	d816      	bhi.n	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801bd88:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801bd8c:	4283      	cmp	r3, r0
 801bd8e:	f4bf af60 	bcs.w	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd92:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801bd96:	4283      	cmp	r3, r0
 801bd98:	d80a      	bhi.n	801bdb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801bd9a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801bd9e:	4283      	cmp	r3, r0
 801bda0:	f4bf af57 	bcs.w	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bda4:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801bda8:	4283      	cmp	r3, r0
 801bdaa:	f43f af79 	beq.w	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bdae:	e7ac      	b.n	801bd0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bdb0:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801bdb4:	e7f8      	b.n	801bda8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801bdb6:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801bdba:	4283      	cmp	r3, r0
 801bdbc:	d802      	bhi.n	801bdc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801bdbe:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801bdc2:	e798      	b.n	801bcf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801bdc4:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801bdc8:	4283      	cmp	r3, r0
 801bdca:	f47f af42 	bne.w	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bdce:	e767      	b.n	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bdd0:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801bdd4:	4283      	cmp	r3, r0
 801bdd6:	f43f af63 	beq.w	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bdda:	d802      	bhi.n	801bde2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801bddc:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801bde0:	e7f2      	b.n	801bdc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801bde2:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801bde6:	4283      	cmp	r3, r0
 801bde8:	d805      	bhi.n	801bdf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801bdea:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801bdee:	4283      	cmp	r3, r0
 801bdf0:	f4ff af2f 	bcc.w	801bc52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bdf4:	e754      	b.n	801bca0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bdf6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801bdfa:	4283      	cmp	r3, r0
 801bdfc:	e7af      	b.n	801bd5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801bdfe:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801be02:	4617      	mov	r7, r2
 801be04:	f102 0808 	add.w	r8, r2, #8
 801be08:	4666      	mov	r6, ip
 801be0a:	6838      	ldr	r0, [r7, #0]
 801be0c:	3708      	adds	r7, #8
 801be0e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801be12:	46e6      	mov	lr, ip
 801be14:	4547      	cmp	r7, r8
 801be16:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801be1a:	46f4      	mov	ip, lr
 801be1c:	d1f5      	bne.n	801be0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801be1e:	6838      	ldr	r0, [r7, #0]
 801be20:	f8ce 0000 	str.w	r0, [lr]
 801be24:	88b9      	ldrh	r1, [r7, #4]
 801be26:	f8ae 1004 	strh.w	r1, [lr, #4]
 801be2a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801be2e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801be32:	d009      	beq.n	801be48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801be34:	7b51      	ldrb	r1, [r2, #13]
 801be36:	7992      	ldrb	r2, [r2, #6]
 801be38:	0149      	lsls	r1, r1, #5
 801be3a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801be3e:	4311      	orrs	r1, r2
 801be40:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801be44:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801be48:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801be4c:	b2ad      	uxth	r5, r5
 801be4e:	d00d      	beq.n	801be6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801be50:	442b      	add	r3, r5
 801be52:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801be56:	b29b      	uxth	r3, r3
 801be58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801be5c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801be60:	10db      	asrs	r3, r3, #3
 801be62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801be66:	4313      	orrs	r3, r2
 801be68:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801be6c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801be70:	00cb      	lsls	r3, r1, #3
 801be72:	064f      	lsls	r7, r1, #25
 801be74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801be78:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801be7c:	ea43 0302 	orr.w	r3, r3, r2
 801be80:	bf44      	itt	mi
 801be82:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801be86:	b21b      	sxthmi	r3, r3
 801be88:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801be8c:	1b5b      	subs	r3, r3, r5
 801be8e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801be92:	4632      	mov	r2, r6
 801be94:	e6f9      	b.n	801bc8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801be96:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801be9a:	4617      	mov	r7, r2
 801be9c:	f102 0908 	add.w	r9, r2, #8
 801bea0:	4666      	mov	r6, ip
 801bea2:	6838      	ldr	r0, [r7, #0]
 801bea4:	3708      	adds	r7, #8
 801bea6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801beaa:	46e0      	mov	r8, ip
 801beac:	454f      	cmp	r7, r9
 801beae:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801beb2:	46c4      	mov	ip, r8
 801beb4:	d1f5      	bne.n	801bea2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801beb6:	6838      	ldr	r0, [r7, #0]
 801beb8:	f8c8 0000 	str.w	r0, [r8]
 801bebc:	88b9      	ldrh	r1, [r7, #4]
 801bebe:	f8a8 1004 	strh.w	r1, [r8, #4]
 801bec2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801bec6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801beca:	d009      	beq.n	801bee0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801becc:	7b51      	ldrb	r1, [r2, #13]
 801bece:	7992      	ldrb	r2, [r2, #6]
 801bed0:	0149      	lsls	r1, r1, #5
 801bed2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bed6:	4311      	orrs	r1, r2
 801bed8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bedc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801bee0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bee4:	d00e      	beq.n	801bf04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801bee6:	eba3 030e 	sub.w	r3, r3, lr
 801beea:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801beee:	b29b      	uxth	r3, r3
 801bef0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bef4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801bef8:	10db      	asrs	r3, r3, #3
 801befa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801befe:	4313      	orrs	r3, r2
 801bf00:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801bf04:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801bf08:	00cb      	lsls	r3, r1, #3
 801bf0a:	0648      	lsls	r0, r1, #25
 801bf0c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bf10:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801bf14:	ea43 0302 	orr.w	r3, r3, r2
 801bf18:	bf44      	itt	mi
 801bf1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bf1e:	b21b      	sxthmi	r3, r3
 801bf20:	1b5d      	subs	r5, r3, r5
 801bf22:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bf26:	e7b4      	b.n	801be92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801bf28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801bf28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf2c:	461e      	mov	r6, r3
 801bf2e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801bf30:	4604      	mov	r4, r0
 801bf32:	4617      	mov	r7, r2
 801bf34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bf38:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801bf3c:	f7e7 ffc0 	bl	8003ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bf40:	4605      	mov	r5, r0
 801bf42:	b918      	cbnz	r0, 801bf4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801bf44:	6030      	str	r0, [r6, #0]
 801bf46:	4628      	mov	r0, r5
 801bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf4c:	683b      	ldr	r3, [r7, #0]
 801bf4e:	4601      	mov	r1, r0
 801bf50:	4638      	mov	r0, r7
 801bf52:	68db      	ldr	r3, [r3, #12]
 801bf54:	4798      	blx	r3
 801bf56:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801bf5a:	4602      	mov	r2, r0
 801bf5c:	6030      	str	r0, [r6, #0]
 801bf5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bf62:	d213      	bcs.n	801bf8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801bf64:	4643      	mov	r3, r8
 801bf66:	4639      	mov	r1, r7
 801bf68:	4620      	mov	r0, r4
 801bf6a:	f7ff fe39 	bl	801bbe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801bf6e:	6030      	str	r0, [r6, #0]
 801bf70:	6833      	ldr	r3, [r6, #0]
 801bf72:	b143      	cbz	r3, 801bf86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801bf74:	7b5a      	ldrb	r2, [r3, #13]
 801bf76:	7a9b      	ldrb	r3, [r3, #10]
 801bf78:	0052      	lsls	r2, r2, #1
 801bf7a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801bf7e:	4313      	orrs	r3, r2
 801bf80:	bf0c      	ite	eq
 801bf82:	2301      	moveq	r3, #1
 801bf84:	2300      	movne	r3, #0
 801bf86:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801bf8a:	e7dc      	b.n	801bf46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801bf8c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801bf90:	b29b      	uxth	r3, r3
 801bf92:	2b7f      	cmp	r3, #127	; 0x7f
 801bf94:	d804      	bhi.n	801bfa0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801bf96:	4639      	mov	r1, r7
 801bf98:	4620      	mov	r0, r4
 801bf9a:	f7ff fd15 	bl	801b9c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801bf9e:	e7e6      	b.n	801bf6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801bfa0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	d0e3      	beq.n	801bf70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801bfa8:	f640 1302 	movw	r3, #2306	; 0x902
 801bfac:	429d      	cmp	r5, r3
 801bfae:	d1df      	bne.n	801bf70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801bfb0:	4601      	mov	r1, r0
 801bfb2:	4620      	mov	r0, r4
 801bfb4:	f7ff fcd8 	bl	801b968 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801bfb8:	e7d9      	b.n	801bf6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801bfba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801bfba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bfbe:	461e      	mov	r6, r3
 801bfc0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801bfc2:	4604      	mov	r4, r0
 801bfc4:	4617      	mov	r7, r2
 801bfc6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bfca:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801bfce:	f7e7 ff77 	bl	8003ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801bfd2:	4605      	mov	r5, r0
 801bfd4:	b918      	cbnz	r0, 801bfde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801bfd6:	6030      	str	r0, [r6, #0]
 801bfd8:	4628      	mov	r0, r5
 801bfda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bfde:	683b      	ldr	r3, [r7, #0]
 801bfe0:	4601      	mov	r1, r0
 801bfe2:	4638      	mov	r0, r7
 801bfe4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801bfe8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801bfec:	47c8      	blx	r9
 801bfee:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801bff2:	4602      	mov	r2, r0
 801bff4:	6030      	str	r0, [r6, #0]
 801bff6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bffa:	d213      	bcs.n	801c024 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801bffc:	4643      	mov	r3, r8
 801bffe:	4639      	mov	r1, r7
 801c000:	4620      	mov	r0, r4
 801c002:	f7ff fded 	bl	801bbe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c006:	6030      	str	r0, [r6, #0]
 801c008:	6833      	ldr	r3, [r6, #0]
 801c00a:	b143      	cbz	r3, 801c01e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801c00c:	7b5a      	ldrb	r2, [r3, #13]
 801c00e:	7a9b      	ldrb	r3, [r3, #10]
 801c010:	0052      	lsls	r2, r2, #1
 801c012:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c016:	4313      	orrs	r3, r2
 801c018:	bf0c      	ite	eq
 801c01a:	2301      	moveq	r3, #1
 801c01c:	2300      	movne	r3, #0
 801c01e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801c022:	e7d9      	b.n	801bfd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801c024:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c028:	b29b      	uxth	r3, r3
 801c02a:	2b7f      	cmp	r3, #127	; 0x7f
 801c02c:	d804      	bhi.n	801c038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801c02e:	4639      	mov	r1, r7
 801c030:	4620      	mov	r0, r4
 801c032:	f7ff fcc9 	bl	801b9c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c036:	e7e6      	b.n	801c006 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801c038:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d0e3      	beq.n	801c008 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c040:	f640 1302 	movw	r3, #2306	; 0x902
 801c044:	429d      	cmp	r5, r3
 801c046:	d1df      	bne.n	801c008 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c048:	4601      	mov	r1, r0
 801c04a:	4620      	mov	r0, r4
 801c04c:	f7ff fc8c 	bl	801b968 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c050:	e7d9      	b.n	801c006 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801c052 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c052:	b510      	push	{r4, lr}
 801c054:	4604      	mov	r4, r0
 801c056:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801c05a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c05c:	b1e1      	cbz	r1, 801c098 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c05e:	2b0a      	cmp	r3, #10
 801c060:	d02d      	beq.n	801c0be <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c062:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801c064:	3901      	subs	r1, #1
 801c066:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c06a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801c06c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801c070:	1c51      	adds	r1, r2, #1
 801c072:	b289      	uxth	r1, r1
 801c074:	2901      	cmp	r1, #1
 801c076:	bf8a      	itet	hi
 801c078:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c07c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801c07e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801c080:	1c5a      	adds	r2, r3, #1
 801c082:	8722      	strh	r2, [r4, #56]	; 0x38
 801c084:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c086:	4413      	add	r3, r2
 801c088:	b29b      	uxth	r3, r3
 801c08a:	2b09      	cmp	r3, #9
 801c08c:	bf88      	it	hi
 801c08e:	3b0a      	subhi	r3, #10
 801c090:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c094:	8458      	strh	r0, [r3, #34]	; 0x22
 801c096:	e7de      	b.n	801c056 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c098:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c09a:	2b0a      	cmp	r3, #10
 801c09c:	d00f      	beq.n	801c0be <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c09e:	4620      	mov	r0, r4
 801c0a0:	f7ff fc10 	bl	801b8c4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c0a4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c0a6:	1c5a      	adds	r2, r3, #1
 801c0a8:	8722      	strh	r2, [r4, #56]	; 0x38
 801c0aa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c0ac:	4413      	add	r3, r2
 801c0ae:	b29b      	uxth	r3, r3
 801c0b0:	2b09      	cmp	r3, #9
 801c0b2:	bf88      	it	hi
 801c0b4:	3b0a      	subhi	r3, #10
 801c0b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c0ba:	8458      	strh	r0, [r3, #34]	; 0x22
 801c0bc:	e7ec      	b.n	801c098 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c0be:	bd10      	pop	{r4, pc}

0801c0c0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c0c0:	b538      	push	{r3, r4, r5, lr}
 801c0c2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c0c4:	4604      	mov	r4, r0
 801c0c6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801c0ca:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801c0cc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801c0ce:	3a01      	subs	r2, #1
 801c0d0:	8702      	strh	r2, [r0, #56]	; 0x38
 801c0d2:	1c5a      	adds	r2, r3, #1
 801c0d4:	b292      	uxth	r2, r2
 801c0d6:	2a09      	cmp	r2, #9
 801c0d8:	bf8a      	itet	hi
 801c0da:	3b09      	subhi	r3, #9
 801c0dc:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801c0de:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801c0e0:	f7ff ffb7 	bl	801c052 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c0e4:	8c23      	ldrh	r3, [r4, #32]
 801c0e6:	2b01      	cmp	r3, #1
 801c0e8:	bf9c      	itt	ls
 801c0ea:	3301      	addls	r3, #1
 801c0ec:	8423      	strhls	r3, [r4, #32]
 801c0ee:	8be3      	ldrh	r3, [r4, #30]
 801c0f0:	b90b      	cbnz	r3, 801c0f6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801c0f2:	2302      	movs	r3, #2
 801c0f4:	83e3      	strh	r3, [r4, #30]
 801c0f6:	8be3      	ldrh	r3, [r4, #30]
 801c0f8:	4628      	mov	r0, r5
 801c0fa:	3b01      	subs	r3, #1
 801c0fc:	b29b      	uxth	r3, r3
 801c0fe:	83e3      	strh	r3, [r4, #30]
 801c100:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c104:	8365      	strh	r5, [r4, #26]
 801c106:	bd38      	pop	{r3, r4, r5, pc}

0801c108 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c108:	428a      	cmp	r2, r1
 801c10a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c10e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801c110:	d932      	bls.n	801c178 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801c112:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801c114:	1a54      	subs	r4, r2, r1
 801c116:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801c11a:	19ee      	adds	r6, r5, r7
 801c11c:	fa1f fe84 	uxth.w	lr, r4
 801c120:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801c124:	3e01      	subs	r6, #1
 801c126:	b2b4      	uxth	r4, r6
 801c128:	eba4 090e 	sub.w	r9, r4, lr
 801c12c:	fa1f f989 	uxth.w	r9, r9
 801c130:	2c09      	cmp	r4, #9
 801c132:	4626      	mov	r6, r4
 801c134:	bf88      	it	hi
 801c136:	f1a4 060a 	subhi.w	r6, r4, #10
 801c13a:	f1bc 0f00 	cmp.w	ip, #0
 801c13e:	f104 34ff 	add.w	r4, r4, #4294967295
 801c142:	bf08      	it	eq
 801c144:	f04f 0c02 	moveq.w	ip, #2
 801c148:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c14c:	b2a4      	uxth	r4, r4
 801c14e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c152:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801c156:	454c      	cmp	r4, r9
 801c158:	fa1f fc8c 	uxth.w	ip, ip
 801c15c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801c160:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801c164:	d1e4      	bne.n	801c130 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801c166:	eba5 050e 	sub.w	r5, r5, lr
 801c16a:	eb0e 0408 	add.w	r4, lr, r8
 801c16e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801c172:	8705      	strh	r5, [r0, #56]	; 0x38
 801c174:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801c178:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801c17a:	250a      	movs	r5, #10
 801c17c:	1a64      	subs	r4, r4, r1
 801c17e:	4439      	add	r1, r7
 801c180:	b289      	uxth	r1, r1
 801c182:	8704      	strh	r4, [r0, #56]	; 0x38
 801c184:	2909      	cmp	r1, #9
 801c186:	bf88      	it	hi
 801c188:	390a      	subhi	r1, #10
 801c18a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801c18c:	b18a      	cbz	r2, 801c1b2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801c18e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801c190:	3a01      	subs	r2, #1
 801c192:	3101      	adds	r1, #1
 801c194:	b292      	uxth	r2, r2
 801c196:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c19a:	8701      	strh	r1, [r0, #56]	; 0x38
 801c19c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801c19e:	b901      	cbnz	r1, 801c1a2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801c1a0:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c1a2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801c1a4:	3901      	subs	r1, #1
 801c1a6:	b289      	uxth	r1, r1
 801c1a8:	86c1      	strh	r1, [r0, #54]	; 0x36
 801c1aa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c1ae:	844c      	strh	r4, [r1, #34]	; 0x22
 801c1b0:	e7ec      	b.n	801c18c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801c1b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1b6:	f7ff bf4c 	b.w	801c052 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801c1ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c1ba:	b570      	push	{r4, r5, r6, lr}
 801c1bc:	2500      	movs	r5, #0
 801c1be:	4295      	cmp	r5, r2
 801c1c0:	d011      	beq.n	801c1e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801c1c2:	8bc4      	ldrh	r4, [r0, #30]
 801c1c4:	f831 6b02 	ldrh.w	r6, [r1], #2
 801c1c8:	4414      	add	r4, r2
 801c1ca:	3c01      	subs	r4, #1
 801c1cc:	1b64      	subs	r4, r4, r5
 801c1ce:	b2a4      	uxth	r4, r4
 801c1d0:	2c01      	cmp	r4, #1
 801c1d2:	bf88      	it	hi
 801c1d4:	3c02      	subhi	r4, #2
 801c1d6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c1da:	8b64      	ldrh	r4, [r4, #26]
 801c1dc:	42b4      	cmp	r4, r6
 801c1de:	d117      	bne.n	801c210 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801c1e0:	3501      	adds	r5, #1
 801c1e2:	b2ad      	uxth	r5, r5
 801c1e4:	e7eb      	b.n	801c1be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801c1e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c1ea:	2400      	movs	r4, #0
 801c1ec:	4413      	add	r3, r2
 801c1ee:	b2a2      	uxth	r2, r4
 801c1f0:	429a      	cmp	r2, r3
 801c1f2:	da0f      	bge.n	801c214 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801c1f4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801c1f6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c1fa:	3401      	adds	r4, #1
 801c1fc:	4432      	add	r2, r6
 801c1fe:	b292      	uxth	r2, r2
 801c200:	2a09      	cmp	r2, #9
 801c202:	bf88      	it	hi
 801c204:	3a0a      	subhi	r2, #10
 801c206:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c20a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801c20c:	42aa      	cmp	r2, r5
 801c20e:	d0ee      	beq.n	801c1ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801c210:	2000      	movs	r0, #0
 801c212:	bd70      	pop	{r4, r5, r6, pc}
 801c214:	2001      	movs	r0, #1
 801c216:	e7fc      	b.n	801c212 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801c218 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c21c:	4605      	mov	r5, r0
 801c21e:	4616      	mov	r6, r2
 801c220:	1c8c      	adds	r4, r1, #2
 801c222:	8809      	ldrh	r1, [r1, #0]
 801c224:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c228:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c22c:	42b3      	cmp	r3, r6
 801c22e:	d124      	bne.n	801c27a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c230:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c234:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c238:	f001 070f 	and.w	r7, r1, #15
 801c23c:	4652      	mov	r2, sl
 801c23e:	f8cd 8000 	str.w	r8, [sp]
 801c242:	464b      	mov	r3, r9
 801c244:	4621      	mov	r1, r4
 801c246:	4628      	mov	r0, r5
 801c248:	f7ff ffb7 	bl	801c1ba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c24c:	4683      	mov	fp, r0
 801c24e:	b168      	cbz	r0, 801c26c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c250:	eb0a 0109 	add.w	r1, sl, r9
 801c254:	463a      	mov	r2, r7
 801c256:	4628      	mov	r0, r5
 801c258:	4441      	add	r1, r8
 801c25a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c25e:	4649      	mov	r1, r9
 801c260:	f7ff ff52 	bl	801c108 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c264:	4658      	mov	r0, fp
 801c266:	b003      	add	sp, #12
 801c268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c26c:	eb07 010a 	add.w	r1, r7, sl
 801c270:	4449      	add	r1, r9
 801c272:	4441      	add	r1, r8
 801c274:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c278:	e7d2      	b.n	801c220 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c27a:	f04f 0b00 	mov.w	fp, #0
 801c27e:	e7f1      	b.n	801c264 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c280 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c280:	b570      	push	{r4, r5, r6, lr}
 801c282:	8810      	ldrh	r0, [r2, #0]
 801c284:	4298      	cmp	r0, r3
 801c286:	d817      	bhi.n	801c2b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c288:	1e48      	subs	r0, r1, #1
 801c28a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c28e:	4298      	cmp	r0, r3
 801c290:	d312      	bcc.n	801c2b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c292:	2400      	movs	r4, #0
 801c294:	428c      	cmp	r4, r1
 801c296:	d20f      	bcs.n	801c2b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c298:	1860      	adds	r0, r4, r1
 801c29a:	1040      	asrs	r0, r0, #1
 801c29c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c2a0:	0085      	lsls	r5, r0, #2
 801c2a2:	42b3      	cmp	r3, r6
 801c2a4:	d902      	bls.n	801c2ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c2a6:	3001      	adds	r0, #1
 801c2a8:	b284      	uxth	r4, r0
 801c2aa:	e7f3      	b.n	801c294 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c2ac:	d201      	bcs.n	801c2b2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c2ae:	b281      	uxth	r1, r0
 801c2b0:	e7f0      	b.n	801c294 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c2b2:	442a      	add	r2, r5
 801c2b4:	8850      	ldrh	r0, [r2, #2]
 801c2b6:	bd70      	pop	{r4, r5, r6, pc}
 801c2b8:	2000      	movs	r0, #0
 801c2ba:	e7fc      	b.n	801c2b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c2bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2c0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801c2c2:	4604      	mov	r4, r0
 801c2c4:	260b      	movs	r6, #11
 801c2c6:	886f      	ldrh	r7, [r5, #2]
 801c2c8:	087f      	lsrs	r7, r7, #1
 801c2ca:	3e01      	subs	r6, #1
 801c2cc:	d013      	beq.n	801c2f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c2ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c2d0:	462a      	mov	r2, r5
 801c2d2:	4639      	mov	r1, r7
 801c2d4:	4620      	mov	r0, r4
 801c2d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c2da:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801c2de:	4643      	mov	r3, r8
 801c2e0:	f7ff ffce 	bl	801c280 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c2e4:	b138      	cbz	r0, 801c2f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c2e6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c2ea:	4642      	mov	r2, r8
 801c2ec:	4620      	mov	r0, r4
 801c2ee:	f7ff ff93 	bl	801c218 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c2f2:	2800      	cmp	r0, #0
 801c2f4:	d1e9      	bne.n	801c2ca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801c2fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c2fc:	b570      	push	{r4, r5, r6, lr}
 801c2fe:	694a      	ldr	r2, [r1, #20]
 801c300:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801c302:	684b      	ldr	r3, [r1, #4]
 801c304:	1b54      	subs	r4, r2, r5
 801c306:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801c308:	f000 8106 	beq.w	801c518 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c30c:	1b9b      	subs	r3, r3, r6
 801c30e:	d003      	beq.n	801c318 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c310:	4363      	muls	r3, r4
 801c312:	2210      	movs	r2, #16
 801c314:	fb93 f3f2 	sdiv	r3, r3, r2
 801c318:	680c      	ldr	r4, [r1, #0]
 801c31a:	698a      	ldr	r2, [r1, #24]
 801c31c:	1b65      	subs	r5, r4, r5
 801c31e:	f000 80fd 	beq.w	801c51c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c322:	1b92      	subs	r2, r2, r6
 801c324:	d003      	beq.n	801c32e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c326:	436a      	muls	r2, r5
 801c328:	2410      	movs	r4, #16
 801c32a:	fb92 f2f4 	sdiv	r2, r2, r4
 801c32e:	1a9b      	subs	r3, r3, r2
 801c330:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801c558 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c338:	460a      	mov	r2, r1
 801c33a:	ee07 3a90 	vmov	s15, r3
 801c33e:	f100 040c 	add.w	r4, r0, #12
 801c342:	4603      	mov	r3, r0
 801c344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c348:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c34c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c350:	eeb1 6a43 	vneg.f32	s12, s6
 801c354:	edd2 7a02 	vldr	s15, [r2, #8]
 801c358:	3214      	adds	r2, #20
 801c35a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c35e:	ece3 6a01 	vstmia	r3!, {s13}
 801c362:	429c      	cmp	r4, r3
 801c364:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c368:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c36c:	edc3 7a02 	vstr	s15, [r3, #8]
 801c370:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c374:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c378:	edc3 7a05 	vstr	s15, [r3, #20]
 801c37c:	d1ea      	bne.n	801c354 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c37e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c380:	698b      	ldr	r3, [r1, #24]
 801c382:	edd0 4a02 	vldr	s9, [r0, #8]
 801c386:	1a9b      	subs	r3, r3, r2
 801c388:	edd0 3a00 	vldr	s7, [r0]
 801c38c:	edd0 6a01 	vldr	s13, [r0, #4]
 801c390:	ee07 3a90 	vmov	s15, r3
 801c394:	684b      	ldr	r3, [r1, #4]
 801c396:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c39a:	ed90 5a05 	vldr	s10, [r0, #20]
 801c39e:	1a9b      	subs	r3, r3, r2
 801c3a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c3a4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c3a8:	ed90 2a03 	vldr	s4, [r0, #12]
 801c3ac:	ee07 3a10 	vmov	s14, r3
 801c3b0:	edd0 5a04 	vldr	s11, [r0, #16]
 801c3b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c3b8:	ed90 1a07 	vldr	s2, [r0, #28]
 801c3bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c3c0:	edd0 2a06 	vldr	s5, [r0, #24]
 801c3c4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c3c8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c3cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c3d0:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c3d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c3d8:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c3dc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801c3e0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c3e2:	694a      	ldr	r2, [r1, #20]
 801c3e4:	1b13      	subs	r3, r2, r4
 801c3e6:	ee07 3a10 	vmov	s14, r3
 801c3ea:	680b      	ldr	r3, [r1, #0]
 801c3ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c3f0:	1b1b      	subs	r3, r3, r4
 801c3f2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c3f6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c3fa:	ee07 3a10 	vmov	s14, r3
 801c3fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c402:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c406:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c40a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c40e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801c412:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c414:	698b      	ldr	r3, [r1, #24]
 801c416:	1a9b      	subs	r3, r3, r2
 801c418:	ee06 3a90 	vmov	s13, r3
 801c41c:	684b      	ldr	r3, [r1, #4]
 801c41e:	1a9b      	subs	r3, r3, r2
 801c420:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c424:	ee07 3a10 	vmov	s14, r3
 801c428:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c42c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c430:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c434:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c438:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c43c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c440:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801c444:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c446:	694a      	ldr	r2, [r1, #20]
 801c448:	1b13      	subs	r3, r2, r4
 801c44a:	ee07 3a10 	vmov	s14, r3
 801c44e:	680b      	ldr	r3, [r1, #0]
 801c450:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c454:	1b1b      	subs	r3, r3, r4
 801c456:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c45a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c45e:	ee07 3a10 	vmov	s14, r3
 801c462:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c466:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c46a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c46e:	edd0 5a08 	vldr	s11, [r0, #32]
 801c472:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c476:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c47a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c47e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801c482:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c484:	698b      	ldr	r3, [r1, #24]
 801c486:	1a9b      	subs	r3, r3, r2
 801c488:	ee07 3a10 	vmov	s14, r3
 801c48c:	684b      	ldr	r3, [r1, #4]
 801c48e:	1a9b      	subs	r3, r3, r2
 801c490:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c494:	ee01 3a90 	vmov	s3, r3
 801c498:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c49c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c4a0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c4a4:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c4a8:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c4ac:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c4b0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c4b4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c4b6:	694a      	ldr	r2, [r1, #20]
 801c4b8:	1b13      	subs	r3, r2, r4
 801c4ba:	ee03 3a10 	vmov	s6, r3
 801c4be:	680b      	ldr	r3, [r1, #0]
 801c4c0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c4c4:	1b1b      	subs	r3, r3, r4
 801c4c6:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c4ca:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c4ce:	ee03 3a10 	vmov	s6, r3
 801c4d2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c4d6:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c4da:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c4de:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c4e2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c4e6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801c4ea:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c4ee:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4f6:	dd13      	ble.n	801c520 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c4f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c4fc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c500:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c502:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c50e:	dd15      	ble.n	801c53c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c514:	6403      	str	r3, [r0, #64]	; 0x40
 801c516:	bd70      	pop	{r4, r5, r6, pc}
 801c518:	4623      	mov	r3, r4
 801c51a:	e6fd      	b.n	801c318 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c51c:	462a      	mov	r2, r5
 801c51e:	e706      	b.n	801c32e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c520:	d502      	bpl.n	801c528 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c522:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c526:	e7e9      	b.n	801c4fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c528:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c52c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c530:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c538:	dade      	bge.n	801c4f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c53a:	e7f2      	b.n	801c522 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c53c:	d502      	bpl.n	801c544 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c53e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c542:	e7e7      	b.n	801c514 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c544:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c548:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c54c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c554:	dadc      	bge.n	801c510 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c556:	e7f2      	b.n	801c53e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c558:	3d800000 	.word	0x3d800000

0801c55c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c560:	2714      	movs	r7, #20
 801c562:	435f      	muls	r7, r3
 801c564:	eb02 0c07 	add.w	ip, r2, r7
 801c568:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c56c:	f115 0e0f 	adds.w	lr, r5, #15
 801c570:	f100 80a2 	bmi.w	801c6b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c574:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c578:	9c08      	ldr	r4, [sp, #32]
 801c57a:	2614      	movs	r6, #20
 801c57c:	f8c0 e014 	str.w	lr, [r0, #20]
 801c580:	4366      	muls	r6, r4
 801c582:	eb02 0806 	add.w	r8, r2, r6
 801c586:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c58a:	f115 040f 	adds.w	r4, r5, #15
 801c58e:	f100 809f 	bmi.w	801c6d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c592:	1124      	asrs	r4, r4, #4
 801c594:	eba4 040e 	sub.w	r4, r4, lr
 801c598:	6184      	str	r4, [r0, #24]
 801c59a:	2c00      	cmp	r4, #0
 801c59c:	f000 808a 	beq.w	801c6b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c5a0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c5a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c5a8:	5995      	ldr	r5, [r2, r6]
 801c5aa:	eba4 0809 	sub.w	r8, r4, r9
 801c5ae:	59d4      	ldr	r4, [r2, r7]
 801c5b0:	eba5 0a04 	sub.w	sl, r5, r4
 801c5b4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c5b8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c5bc:	fb0e fe05 	mul.w	lr, lr, r5
 801c5c0:	fb0a ee19 	mls	lr, sl, r9, lr
 801c5c4:	fb08 e404 	mla	r4, r8, r4, lr
 801c5c8:	3c01      	subs	r4, #1
 801c5ca:	19a4      	adds	r4, r4, r6
 801c5cc:	f100 808c 	bmi.w	801c6e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c5d0:	fb94 fef6 	sdiv	lr, r4, r6
 801c5d4:	fb06 441e 	mls	r4, r6, lr, r4
 801c5d8:	f8c0 e000 	str.w	lr, [r0]
 801c5dc:	6104      	str	r4, [r0, #16]
 801c5de:	2d00      	cmp	r5, #0
 801c5e0:	f2c0 8095 	blt.w	801c70e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c5e4:	fb95 f4f6 	sdiv	r4, r5, r6
 801c5e8:	fb06 5514 	mls	r5, r6, r4, r5
 801c5ec:	6044      	str	r4, [r0, #4]
 801c5ee:	6085      	str	r5, [r0, #8]
 801c5f0:	60c6      	str	r6, [r0, #12]
 801c5f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c5f6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c5fa:	6945      	ldr	r5, [r0, #20]
 801c5fc:	59d2      	ldr	r2, [r2, r7]
 801c5fe:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c602:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801c730 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c606:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c60a:	ee07 4a10 	vmov	s14, r4
 801c60e:	6804      	ldr	r4, [r0, #0]
 801c610:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c614:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c618:	ee07 2a90 	vmov	s15, r2
 801c61c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c624:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c628:	edd3 6a00 	vldr	s13, [r3]
 801c62c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c630:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801c634:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c638:	edc0 6a07 	vstr	s13, [r0, #28]
 801c63c:	edd0 6a01 	vldr	s13, [r0, #4]
 801c640:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801c644:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c648:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c64c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c650:	ed80 6a08 	vstr	s12, [r0, #32]
 801c654:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801c656:	6242      	str	r2, [r0, #36]	; 0x24
 801c658:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801c65c:	ed93 6a03 	vldr	s12, [r3, #12]
 801c660:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c664:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c668:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c66c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801c670:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c674:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801c678:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c67c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801c680:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c682:	6302      	str	r2, [r0, #48]	; 0x30
 801c684:	ed93 6a06 	vldr	s12, [r3, #24]
 801c688:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801c68c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c690:	eeb0 7a46 	vmov.f32	s14, s12
 801c694:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801c698:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c69c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c6a0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801c6a4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801c6a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c6ac:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801c6b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801c6b2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6b8:	2410      	movs	r4, #16
 801c6ba:	f1c5 0501 	rsb	r5, r5, #1
 801c6be:	fb9e fef4 	sdiv	lr, lr, r4
 801c6c2:	f015 050f 	ands.w	r5, r5, #15
 801c6c6:	bf18      	it	ne
 801c6c8:	2501      	movne	r5, #1
 801c6ca:	ebae 0e05 	sub.w	lr, lr, r5
 801c6ce:	e753      	b.n	801c578 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801c6d0:	f04f 0910 	mov.w	r9, #16
 801c6d4:	f1c5 0501 	rsb	r5, r5, #1
 801c6d8:	fb94 f4f9 	sdiv	r4, r4, r9
 801c6dc:	f015 050f 	ands.w	r5, r5, #15
 801c6e0:	bf18      	it	ne
 801c6e2:	2501      	movne	r5, #1
 801c6e4:	1b64      	subs	r4, r4, r5
 801c6e6:	e755      	b.n	801c594 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801c6e8:	4264      	negs	r4, r4
 801c6ea:	fb94 fef6 	sdiv	lr, r4, r6
 801c6ee:	f1ce 0800 	rsb	r8, lr, #0
 801c6f2:	fb06 441e 	mls	r4, r6, lr, r4
 801c6f6:	f8c0 8000 	str.w	r8, [r0]
 801c6fa:	6104      	str	r4, [r0, #16]
 801c6fc:	2c00      	cmp	r4, #0
 801c6fe:	f43f af6e 	beq.w	801c5de <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801c702:	ea6f 0e0e 	mvn.w	lr, lr
 801c706:	1b34      	subs	r4, r6, r4
 801c708:	f8c0 e000 	str.w	lr, [r0]
 801c70c:	e766      	b.n	801c5dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801c70e:	426d      	negs	r5, r5
 801c710:	fb95 f4f6 	sdiv	r4, r5, r6
 801c714:	f1c4 0e00 	rsb	lr, r4, #0
 801c718:	fb06 5514 	mls	r5, r6, r4, r5
 801c71c:	f8c0 e004 	str.w	lr, [r0, #4]
 801c720:	6085      	str	r5, [r0, #8]
 801c722:	2d00      	cmp	r5, #0
 801c724:	f43f af64 	beq.w	801c5f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801c728:	43e4      	mvns	r4, r4
 801c72a:	1b75      	subs	r5, r6, r5
 801c72c:	6044      	str	r4, [r0, #4]
 801c72e:	e75e      	b.n	801c5ee <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801c730:	3d800000 	.word	0x3d800000

0801c734 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801c734:	4b01      	ldr	r3, [pc, #4]	; (801c73c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801c736:	6018      	str	r0, [r3, #0]
 801c738:	4770      	bx	lr
 801c73a:	bf00      	nop
 801c73c:	20015154 	.word	0x20015154

0801c740 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801c740:	4b06      	ldr	r3, [pc, #24]	; (801c75c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801c742:	881a      	ldrh	r2, [r3, #0]
 801c744:	4282      	cmp	r2, r0
 801c746:	d807      	bhi.n	801c758 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801c748:	4b05      	ldr	r3, [pc, #20]	; (801c760 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801c74a:	881b      	ldrh	r3, [r3, #0]
 801c74c:	4413      	add	r3, r2
 801c74e:	4298      	cmp	r0, r3
 801c750:	bfac      	ite	ge
 801c752:	2000      	movge	r0, #0
 801c754:	2001      	movlt	r0, #1
 801c756:	4770      	bx	lr
 801c758:	2000      	movs	r0, #0
 801c75a:	4770      	bx	lr
 801c75c:	20015174 	.word	0x20015174
 801c760:	20015178 	.word	0x20015178

0801c764 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801c764:	b508      	push	{r3, lr}
 801c766:	4601      	mov	r1, r0
 801c768:	f7ff ffea 	bl	801c740 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801c76c:	b118      	cbz	r0, 801c776 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801c76e:	4b02      	ldr	r3, [pc, #8]	; (801c778 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801c776:	bd08      	pop	{r3, pc}
 801c778:	20015158 	.word	0x20015158

0801c77c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801c77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c77e:	4c24      	ldr	r4, [pc, #144]	; (801c810 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801c780:	6823      	ldr	r3, [r4, #0]
 801c782:	2b00      	cmp	r3, #0
 801c784:	d042      	beq.n	801c80c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801c786:	4a23      	ldr	r2, [pc, #140]	; (801c814 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801c788:	4d23      	ldr	r5, [pc, #140]	; (801c818 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801c78a:	8811      	ldrh	r1, [r2, #0]
 801c78c:	f8b5 c000 	ldrh.w	ip, [r5]
 801c790:	4822      	ldr	r0, [pc, #136]	; (801c81c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801c792:	4461      	add	r1, ip
 801c794:	1c4a      	adds	r2, r1, #1
 801c796:	008f      	lsls	r7, r1, #2
 801c798:	f022 0201 	bic.w	r2, r2, #1
 801c79c:	19de      	adds	r6, r3, r7
 801c79e:	0412      	lsls	r2, r2, #16
 801c7a0:	6006      	str	r6, [r0, #0]
 801c7a2:	4e1f      	ldr	r6, [pc, #124]	; (801c820 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801c7a4:	0c12      	lsrs	r2, r2, #16
 801c7a6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801c7aa:	19da      	adds	r2, r3, r7
 801c7ac:	6032      	str	r2, [r6, #0]
 801c7ae:	220e      	movs	r2, #14
 801c7b0:	fb02 f20c 	mul.w	r2, r2, ip
 801c7b4:	3203      	adds	r2, #3
 801c7b6:	f022 0203 	bic.w	r2, r2, #3
 801c7ba:	443a      	add	r2, r7
 801c7bc:	4f19      	ldr	r7, [pc, #100]	; (801c824 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801c7be:	4413      	add	r3, r2
 801c7c0:	603b      	str	r3, [r7, #0]
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	4f18      	ldr	r7, [pc, #96]	; (801c828 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801c7c6:	469c      	mov	ip, r3
 801c7c8:	803b      	strh	r3, [r7, #0]
 801c7ca:	4f18      	ldr	r7, [pc, #96]	; (801c82c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801c7cc:	683f      	ldr	r7, [r7, #0]
 801c7ce:	1aba      	subs	r2, r7, r2
 801c7d0:	4f17      	ldr	r7, [pc, #92]	; (801c830 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801c7d2:	603a      	str	r2, [r7, #0]
 801c7d4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801c7d8:	4a16      	ldr	r2, [pc, #88]	; (801c834 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801c7da:	8013      	strh	r3, [r2, #0]
 801c7dc:	428b      	cmp	r3, r1
 801c7de:	d10d      	bne.n	801c7fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801c7e0:	882d      	ldrh	r5, [r5, #0]
 801c7e2:	2300      	movs	r3, #0
 801c7e4:	6830      	ldr	r0, [r6, #0]
 801c7e6:	240e      	movs	r4, #14
 801c7e8:	429d      	cmp	r5, r3
 801c7ea:	d90f      	bls.n	801c80c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801c7ec:	fb04 0203 	mla	r2, r4, r3, r0
 801c7f0:	3301      	adds	r3, #1
 801c7f2:	7b11      	ldrb	r1, [r2, #12]
 801c7f4:	f36f 1145 	bfc	r1, #5, #1
 801c7f8:	7311      	strb	r1, [r2, #12]
 801c7fa:	e7f5      	b.n	801c7e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801c7fc:	6822      	ldr	r2, [r4, #0]
 801c7fe:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801c802:	6802      	ldr	r2, [r0, #0]
 801c804:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801c808:	3301      	adds	r3, #1
 801c80a:	e7e7      	b.n	801c7dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801c80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c80e:	bf00      	nop
 801c810:	20015158 	.word	0x20015158
 801c814:	20015174 	.word	0x20015174
 801c818:	20015178 	.word	0x20015178
 801c81c:	2001516c 	.word	0x2001516c
 801c820:	2001515c 	.word	0x2001515c
 801c824:	20015164 	.word	0x20015164
 801c828:	20015176 	.word	0x20015176
 801c82c:	20015160 	.word	0x20015160
 801c830:	20015170 	.word	0x20015170
 801c834:	20015168 	.word	0x20015168

0801c838 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801c838:	4b06      	ldr	r3, [pc, #24]	; (801c854 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	b943      	cbnz	r3, 801c850 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801c83e:	b139      	cbz	r1, 801c850 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801c840:	4b05      	ldr	r3, [pc, #20]	; (801c858 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801c842:	801a      	strh	r2, [r3, #0]
 801c844:	4b05      	ldr	r3, [pc, #20]	; (801c85c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801c846:	6019      	str	r1, [r3, #0]
 801c848:	4b05      	ldr	r3, [pc, #20]	; (801c860 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801c84a:	6018      	str	r0, [r3, #0]
 801c84c:	f7ff bf96 	b.w	801c77c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801c850:	4770      	bx	lr
 801c852:	bf00      	nop
 801c854:	20015164 	.word	0x20015164
 801c858:	20015178 	.word	0x20015178
 801c85c:	20015160 	.word	0x20015160
 801c860:	20015158 	.word	0x20015158

0801c864 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801c864:	b470      	push	{r4, r5, r6}
 801c866:	4c07      	ldr	r4, [pc, #28]	; (801c884 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801c868:	4605      	mov	r5, r0
 801c86a:	4610      	mov	r0, r2
 801c86c:	9a03      	ldr	r2, [sp, #12]
 801c86e:	6826      	ldr	r6, [r4, #0]
 801c870:	b936      	cbnz	r6, 801c880 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801c872:	6025      	str	r5, [r4, #0]
 801c874:	4c04      	ldr	r4, [pc, #16]	; (801c888 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801c876:	8021      	strh	r1, [r4, #0]
 801c878:	4619      	mov	r1, r3
 801c87a:	bc70      	pop	{r4, r5, r6}
 801c87c:	f7ff bfdc 	b.w	801c838 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801c880:	bc70      	pop	{r4, r5, r6}
 801c882:	4770      	bx	lr
 801c884:	2001517c 	.word	0x2001517c
 801c888:	20015174 	.word	0x20015174

0801c88c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801c88c:	4a12      	ldr	r2, [pc, #72]	; (801c8d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801c88e:	8803      	ldrh	r3, [r0, #0]
 801c890:	8812      	ldrh	r2, [r2, #0]
 801c892:	4293      	cmp	r3, r2
 801c894:	d207      	bcs.n	801c8a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801c896:	4a11      	ldr	r2, [pc, #68]	; (801c8dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801c898:	2114      	movs	r1, #20
 801c89a:	6812      	ldr	r2, [r2, #0]
 801c89c:	fb01 2303 	mla	r3, r1, r3, r2
 801c8a0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801c8a4:	4770      	bx	lr
 801c8a6:	490e      	ldr	r1, [pc, #56]	; (801c8e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801c8a8:	8809      	ldrh	r1, [r1, #0]
 801c8aa:	4411      	add	r1, r2
 801c8ac:	428b      	cmp	r3, r1
 801c8ae:	da04      	bge.n	801c8ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801c8b0:	1a9b      	subs	r3, r3, r2
 801c8b2:	4a0c      	ldr	r2, [pc, #48]	; (801c8e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801c8b4:	210e      	movs	r1, #14
 801c8b6:	6812      	ldr	r2, [r2, #0]
 801c8b8:	e7f0      	b.n	801c89c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801c8ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c8be:	4293      	cmp	r3, r2
 801c8c0:	d108      	bne.n	801c8d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801c8c2:	4b09      	ldr	r3, [pc, #36]	; (801c8e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801c8c4:	781b      	ldrb	r3, [r3, #0]
 801c8c6:	b91b      	cbnz	r3, 801c8d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801c8c8:	4b08      	ldr	r3, [pc, #32]	; (801c8ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801c8ca:	f9b3 0000 	ldrsh.w	r0, [r3]
 801c8ce:	4770      	bx	lr
 801c8d0:	4b07      	ldr	r3, [pc, #28]	; (801c8f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801c8d2:	e7fa      	b.n	801c8ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801c8d4:	2000      	movs	r0, #0
 801c8d6:	4770      	bx	lr
 801c8d8:	20015174 	.word	0x20015174
 801c8dc:	2001517c 	.word	0x2001517c
 801c8e0:	20015178 	.word	0x20015178
 801c8e4:	2001515c 	.word	0x2001515c
 801c8e8:	200150ec 	.word	0x200150ec
 801c8ec:	200150ee 	.word	0x200150ee
 801c8f0:	200150f0 	.word	0x200150f0

0801c8f4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801c8f4:	4a12      	ldr	r2, [pc, #72]	; (801c940 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801c8f6:	8803      	ldrh	r3, [r0, #0]
 801c8f8:	8812      	ldrh	r2, [r2, #0]
 801c8fa:	4293      	cmp	r3, r2
 801c8fc:	d207      	bcs.n	801c90e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801c8fe:	4a11      	ldr	r2, [pc, #68]	; (801c944 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801c900:	2114      	movs	r1, #20
 801c902:	6812      	ldr	r2, [r2, #0]
 801c904:	fb01 2303 	mla	r3, r1, r3, r2
 801c908:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801c90c:	4770      	bx	lr
 801c90e:	490e      	ldr	r1, [pc, #56]	; (801c948 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801c910:	8809      	ldrh	r1, [r1, #0]
 801c912:	4411      	add	r1, r2
 801c914:	428b      	cmp	r3, r1
 801c916:	da04      	bge.n	801c922 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801c918:	1a9b      	subs	r3, r3, r2
 801c91a:	4a0c      	ldr	r2, [pc, #48]	; (801c94c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801c91c:	210e      	movs	r1, #14
 801c91e:	6812      	ldr	r2, [r2, #0]
 801c920:	e7f0      	b.n	801c904 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801c922:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c926:	4293      	cmp	r3, r2
 801c928:	d108      	bne.n	801c93c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801c92a:	4b09      	ldr	r3, [pc, #36]	; (801c950 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801c92c:	781b      	ldrb	r3, [r3, #0]
 801c92e:	b91b      	cbnz	r3, 801c938 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801c930:	4b08      	ldr	r3, [pc, #32]	; (801c954 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801c932:	f9b3 0000 	ldrsh.w	r0, [r3]
 801c936:	4770      	bx	lr
 801c938:	4b07      	ldr	r3, [pc, #28]	; (801c958 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801c93a:	e7fa      	b.n	801c932 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801c93c:	2000      	movs	r0, #0
 801c93e:	4770      	bx	lr
 801c940:	20015174 	.word	0x20015174
 801c944:	2001517c 	.word	0x2001517c
 801c948:	20015178 	.word	0x20015178
 801c94c:	2001515c 	.word	0x2001515c
 801c950:	200150ec 	.word	0x200150ec
 801c954:	200150f0 	.word	0x200150f0
 801c958:	200150ee 	.word	0x200150ee

0801c95c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801c95c:	4a1f      	ldr	r2, [pc, #124]	; (801c9dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801c95e:	b510      	push	{r4, lr}
 801c960:	880b      	ldrh	r3, [r1, #0]
 801c962:	8812      	ldrh	r2, [r2, #0]
 801c964:	4293      	cmp	r3, r2
 801c966:	d213      	bcs.n	801c990 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801c968:	4a1d      	ldr	r2, [pc, #116]	; (801c9e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801c96a:	2114      	movs	r1, #20
 801c96c:	6812      	ldr	r2, [r2, #0]
 801c96e:	fb01 2303 	mla	r3, r1, r3, r2
 801c972:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801c976:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801c97a:	8a1a      	ldrh	r2, [r3, #16]
 801c97c:	8a5b      	ldrh	r3, [r3, #18]
 801c97e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801c982:	8004      	strh	r4, [r0, #0]
 801c984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c988:	8041      	strh	r1, [r0, #2]
 801c98a:	8082      	strh	r2, [r0, #4]
 801c98c:	80c3      	strh	r3, [r0, #6]
 801c98e:	e00e      	b.n	801c9ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801c990:	4914      	ldr	r1, [pc, #80]	; (801c9e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801c992:	8809      	ldrh	r1, [r1, #0]
 801c994:	4411      	add	r1, r2
 801c996:	428b      	cmp	r3, r1
 801c998:	da0a      	bge.n	801c9b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801c99a:	1a9b      	subs	r3, r3, r2
 801c99c:	4a12      	ldr	r2, [pc, #72]	; (801c9e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801c99e:	210e      	movs	r1, #14
 801c9a0:	6812      	ldr	r2, [r2, #0]
 801c9a2:	fb01 2303 	mla	r3, r1, r3, r2
 801c9a6:	681a      	ldr	r2, [r3, #0]
 801c9a8:	6002      	str	r2, [r0, #0]
 801c9aa:	685a      	ldr	r2, [r3, #4]
 801c9ac:	6042      	str	r2, [r0, #4]
 801c9ae:	bd10      	pop	{r4, pc}
 801c9b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c9b4:	4293      	cmp	r3, r2
 801c9b6:	d10b      	bne.n	801c9d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801c9b8:	4b0c      	ldr	r3, [pc, #48]	; (801c9ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801c9ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 801c9be:	4b0c      	ldr	r3, [pc, #48]	; (801c9f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801c9c0:	8081      	strh	r1, [r0, #4]
 801c9c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c9c6:	2300      	movs	r3, #0
 801c9c8:	80c2      	strh	r2, [r0, #6]
 801c9ca:	8003      	strh	r3, [r0, #0]
 801c9cc:	8043      	strh	r3, [r0, #2]
 801c9ce:	e7ee      	b.n	801c9ae <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	8003      	strh	r3, [r0, #0]
 801c9d4:	8043      	strh	r3, [r0, #2]
 801c9d6:	8083      	strh	r3, [r0, #4]
 801c9d8:	e7d8      	b.n	801c98c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801c9da:	bf00      	nop
 801c9dc:	20015174 	.word	0x20015174
 801c9e0:	2001517c 	.word	0x2001517c
 801c9e4:	20015178 	.word	0x20015178
 801c9e8:	2001515c 	.word	0x2001515c
 801c9ec:	200150e8 	.word	0x200150e8
 801c9f0:	200150ea 	.word	0x200150ea

0801c9f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801c9f4:	4a17      	ldr	r2, [pc, #92]	; (801ca54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801c9f6:	8803      	ldrh	r3, [r0, #0]
 801c9f8:	8812      	ldrh	r2, [r2, #0]
 801c9fa:	4293      	cmp	r3, r2
 801c9fc:	d213      	bcs.n	801ca26 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801c9fe:	4a16      	ldr	r2, [pc, #88]	; (801ca58 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801ca00:	2114      	movs	r1, #20
 801ca02:	6812      	ldr	r2, [r2, #0]
 801ca04:	fb01 2303 	mla	r3, r1, r3, r2
 801ca08:	8a1a      	ldrh	r2, [r3, #16]
 801ca0a:	8919      	ldrh	r1, [r3, #8]
 801ca0c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ca10:	428a      	cmp	r2, r1
 801ca12:	db1d      	blt.n	801ca50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ca14:	8a58      	ldrh	r0, [r3, #18]
 801ca16:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ca1a:	895b      	ldrh	r3, [r3, #10]
 801ca1c:	4298      	cmp	r0, r3
 801ca1e:	bfac      	ite	ge
 801ca20:	2000      	movge	r0, #0
 801ca22:	2001      	movlt	r0, #1
 801ca24:	4770      	bx	lr
 801ca26:	490d      	ldr	r1, [pc, #52]	; (801ca5c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ca28:	8809      	ldrh	r1, [r1, #0]
 801ca2a:	4411      	add	r1, r2
 801ca2c:	428b      	cmp	r3, r1
 801ca2e:	da0d      	bge.n	801ca4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801ca30:	1a9b      	subs	r3, r3, r2
 801ca32:	4a0b      	ldr	r2, [pc, #44]	; (801ca60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ca34:	210e      	movs	r1, #14
 801ca36:	6812      	ldr	r2, [r2, #0]
 801ca38:	fb01 2303 	mla	r3, r1, r3, r2
 801ca3c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ca40:	891a      	ldrh	r2, [r3, #8]
 801ca42:	4291      	cmp	r1, r2
 801ca44:	db04      	blt.n	801ca50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ca46:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ca4a:	e7e6      	b.n	801ca1a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801ca4c:	2000      	movs	r0, #0
 801ca4e:	4770      	bx	lr
 801ca50:	2001      	movs	r0, #1
 801ca52:	4770      	bx	lr
 801ca54:	20015174 	.word	0x20015174
 801ca58:	2001517c 	.word	0x2001517c
 801ca5c:	20015178 	.word	0x20015178
 801ca60:	2001515c 	.word	0x2001515c

0801ca64 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ca64:	4a12      	ldr	r2, [pc, #72]	; (801cab0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ca66:	8803      	ldrh	r3, [r0, #0]
 801ca68:	8811      	ldrh	r1, [r2, #0]
 801ca6a:	428b      	cmp	r3, r1
 801ca6c:	d20b      	bcs.n	801ca86 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801ca6e:	4a11      	ldr	r2, [pc, #68]	; (801cab4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ca70:	6812      	ldr	r2, [r2, #0]
 801ca72:	b112      	cbz	r2, 801ca7a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ca74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ca78:	b9c0      	cbnz	r0, 801caac <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801ca7a:	4a0f      	ldr	r2, [pc, #60]	; (801cab8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ca7c:	6811      	ldr	r1, [r2, #0]
 801ca7e:	2214      	movs	r2, #20
 801ca80:	4353      	muls	r3, r2
 801ca82:	58c8      	ldr	r0, [r1, r3]
 801ca84:	4770      	bx	lr
 801ca86:	4a0d      	ldr	r2, [pc, #52]	; (801cabc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ca88:	8812      	ldrh	r2, [r2, #0]
 801ca8a:	440a      	add	r2, r1
 801ca8c:	4293      	cmp	r3, r2
 801ca8e:	da04      	bge.n	801ca9a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801ca90:	4a08      	ldr	r2, [pc, #32]	; (801cab4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ca92:	6812      	ldr	r2, [r2, #0]
 801ca94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ca98:	4770      	bx	lr
 801ca9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ca9e:	4293      	cmp	r3, r2
 801caa0:	d103      	bne.n	801caaa <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801caa2:	4b07      	ldr	r3, [pc, #28]	; (801cac0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801caa8:	4770      	bx	lr
 801caaa:	2000      	movs	r0, #0
 801caac:	4770      	bx	lr
 801caae:	bf00      	nop
 801cab0:	20015174 	.word	0x20015174
 801cab4:	20015158 	.word	0x20015158
 801cab8:	2001517c 	.word	0x2001517c
 801cabc:	20015178 	.word	0x20015178
 801cac0:	200150f4 	.word	0x200150f4

0801cac4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801cac4:	4b24      	ldr	r3, [pc, #144]	; (801cb58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801cac6:	8802      	ldrh	r2, [r0, #0]
 801cac8:	8818      	ldrh	r0, [r3, #0]
 801caca:	4282      	cmp	r2, r0
 801cacc:	d221      	bcs.n	801cb12 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801cace:	4b23      	ldr	r3, [pc, #140]	; (801cb5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801cad0:	6819      	ldr	r1, [r3, #0]
 801cad2:	2314      	movs	r3, #20
 801cad4:	fb03 1302 	mla	r3, r3, r2, r1
 801cad8:	6858      	ldr	r0, [r3, #4]
 801cada:	2800      	cmp	r0, #0
 801cadc:	d03a      	beq.n	801cb54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cade:	4920      	ldr	r1, [pc, #128]	; (801cb60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cae0:	6809      	ldr	r1, [r1, #0]
 801cae2:	2900      	cmp	r1, #0
 801cae4:	d036      	beq.n	801cb54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801cae6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801caea:	2900      	cmp	r1, #0
 801caec:	d032      	beq.n	801cb54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801caee:	891a      	ldrh	r2, [r3, #8]
 801caf0:	8958      	ldrh	r0, [r3, #10]
 801caf2:	4350      	muls	r0, r2
 801caf4:	7c5a      	ldrb	r2, [r3, #17]
 801caf6:	7cdb      	ldrb	r3, [r3, #19]
 801caf8:	0952      	lsrs	r2, r2, #5
 801cafa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801cafe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801cb02:	2b0b      	cmp	r3, #11
 801cb04:	bf18      	it	ne
 801cb06:	0040      	lslne	r0, r0, #1
 801cb08:	3003      	adds	r0, #3
 801cb0a:	f020 0003 	bic.w	r0, r0, #3
 801cb0e:	4408      	add	r0, r1
 801cb10:	4770      	bx	lr
 801cb12:	4b14      	ldr	r3, [pc, #80]	; (801cb64 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801cb14:	881b      	ldrh	r3, [r3, #0]
 801cb16:	4403      	add	r3, r0
 801cb18:	429a      	cmp	r2, r3
 801cb1a:	da1a      	bge.n	801cb52 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cb1c:	4b12      	ldr	r3, [pc, #72]	; (801cb68 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801cb1e:	1a10      	subs	r0, r2, r0
 801cb20:	210e      	movs	r1, #14
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	fb01 3000 	mla	r0, r1, r0, r3
 801cb28:	7b03      	ldrb	r3, [r0, #12]
 801cb2a:	f003 031f 	and.w	r3, r3, #31
 801cb2e:	2b0b      	cmp	r3, #11
 801cb30:	d10b      	bne.n	801cb4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801cb32:	8903      	ldrh	r3, [r0, #8]
 801cb34:	8940      	ldrh	r0, [r0, #10]
 801cb36:	4358      	muls	r0, r3
 801cb38:	4b09      	ldr	r3, [pc, #36]	; (801cb60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801cb3a:	3003      	adds	r0, #3
 801cb3c:	6819      	ldr	r1, [r3, #0]
 801cb3e:	f020 0303 	bic.w	r3, r0, #3
 801cb42:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801cb46:	4418      	add	r0, r3
 801cb48:	4770      	bx	lr
 801cb4a:	2b0d      	cmp	r3, #13
 801cb4c:	d101      	bne.n	801cb52 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801cb4e:	300d      	adds	r0, #13
 801cb50:	4770      	bx	lr
 801cb52:	2000      	movs	r0, #0
 801cb54:	4770      	bx	lr
 801cb56:	bf00      	nop
 801cb58:	20015174 	.word	0x20015174
 801cb5c:	2001517c 	.word	0x2001517c
 801cb60:	20015158 	.word	0x20015158
 801cb64:	20015178 	.word	0x20015178
 801cb68:	2001515c 	.word	0x2001515c

0801cb6c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801cb6c:	4a17      	ldr	r2, [pc, #92]	; (801cbcc <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801cb6e:	b510      	push	{r4, lr}
 801cb70:	8803      	ldrh	r3, [r0, #0]
 801cb72:	8812      	ldrh	r2, [r2, #0]
 801cb74:	4293      	cmp	r3, r2
 801cb76:	d20c      	bcs.n	801cb92 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801cb78:	4a15      	ldr	r2, [pc, #84]	; (801cbd0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801cb7a:	2114      	movs	r1, #20
 801cb7c:	6812      	ldr	r2, [r2, #0]
 801cb7e:	fb01 2303 	mla	r3, r1, r3, r2
 801cb82:	7c58      	ldrb	r0, [r3, #17]
 801cb84:	0942      	lsrs	r2, r0, #5
 801cb86:	7cd8      	ldrb	r0, [r3, #19]
 801cb88:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801cb8c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801cb90:	bd10      	pop	{r4, pc}
 801cb92:	4910      	ldr	r1, [pc, #64]	; (801cbd4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801cb94:	8809      	ldrh	r1, [r1, #0]
 801cb96:	4411      	add	r1, r2
 801cb98:	428b      	cmp	r3, r1
 801cb9a:	da09      	bge.n	801cbb0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801cb9c:	1a9b      	subs	r3, r3, r2
 801cb9e:	4a0e      	ldr	r2, [pc, #56]	; (801cbd8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801cba0:	210e      	movs	r1, #14
 801cba2:	6812      	ldr	r2, [r2, #0]
 801cba4:	fb01 2303 	mla	r3, r1, r3, r2
 801cba8:	7b18      	ldrb	r0, [r3, #12]
 801cbaa:	f000 001f 	and.w	r0, r0, #31
 801cbae:	e7ef      	b.n	801cb90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801cbb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cbb4:	4293      	cmp	r3, r2
 801cbb6:	d106      	bne.n	801cbc6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801cbb8:	f7fa fa80 	bl	80170bc <_ZN8touchgfx3HAL3lcdEv>
 801cbbc:	6803      	ldr	r3, [r0, #0]
 801cbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbc4:	4718      	bx	r3
 801cbc6:	2000      	movs	r0, #0
 801cbc8:	e7e2      	b.n	801cb90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801cbca:	bf00      	nop
 801cbcc:	20015174 	.word	0x20015174
 801cbd0:	2001517c 	.word	0x2001517c
 801cbd4:	20015178 	.word	0x20015178
 801cbd8:	2001515c 	.word	0x2001515c

0801cbdc <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801cbdc:	2010      	movs	r0, #16
 801cbde:	4770      	bx	lr

0801cbe0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801cbe0:	2000      	movs	r0, #0
 801cbe2:	4770      	bx	lr

0801cbe4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801cbe4:	4b02      	ldr	r3, [pc, #8]	; (801cbf0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801cbe6:	8818      	ldrh	r0, [r3, #0]
 801cbe8:	0040      	lsls	r0, r0, #1
 801cbea:	b280      	uxth	r0, r0
 801cbec:	4770      	bx	lr
 801cbee:	bf00      	nop
 801cbf0:	200150ee 	.word	0x200150ee

0801cbf4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801cbf4:	2bff      	cmp	r3, #255	; 0xff
 801cbf6:	d050      	beq.n	801cc9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801cbf8:	2a0b      	cmp	r2, #11
 801cbfa:	d04a      	beq.n	801cc92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cbfc:	d80e      	bhi.n	801cc1c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801cbfe:	2a03      	cmp	r2, #3
 801cc00:	d03f      	beq.n	801cc82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801cc02:	d804      	bhi.n	801cc0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801cc04:	2a01      	cmp	r2, #1
 801cc06:	d03e      	beq.n	801cc86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801cc08:	d93f      	bls.n	801cc8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801cc0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801cc0c:	4770      	bx	lr
 801cc0e:	2a09      	cmp	r2, #9
 801cc10:	d03f      	beq.n	801cc92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801cc12:	d83c      	bhi.n	801cc8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801cc14:	2a08      	cmp	r2, #8
 801cc16:	d03a      	beq.n	801cc8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801cc18:	2000      	movs	r0, #0
 801cc1a:	4770      	bx	lr
 801cc1c:	2a2f      	cmp	r2, #47	; 0x2f
 801cc1e:	d024      	beq.n	801cc6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801cc20:	d80d      	bhi.n	801cc3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801cc22:	2a2d      	cmp	r2, #45	; 0x2d
 801cc24:	d014      	beq.n	801cc50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801cc26:	d826      	bhi.n	801cc76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801cc28:	2a2c      	cmp	r2, #44	; 0x2c
 801cc2a:	d1f5      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc2c:	684b      	ldr	r3, [r1, #4]
 801cc2e:	781b      	ldrb	r3, [r3, #0]
 801cc30:	2b01      	cmp	r3, #1
 801cc32:	d018      	beq.n	801cc66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801cc34:	d323      	bcc.n	801cc7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801cc36:	2b02      	cmp	r3, #2
 801cc38:	d1ee      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc3a:	6880      	ldr	r0, [r0, #8]
 801cc3c:	4770      	bx	lr
 801cc3e:	2a31      	cmp	r2, #49	; 0x31
 801cc40:	d004      	beq.n	801cc4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801cc42:	d328      	bcc.n	801cc96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cc44:	2a32      	cmp	r2, #50	; 0x32
 801cc46:	d026      	beq.n	801cc96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801cc48:	2a33      	cmp	r2, #51	; 0x33
 801cc4a:	d1e5      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc4c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801cc4e:	4770      	bx	lr
 801cc50:	684b      	ldr	r3, [r1, #4]
 801cc52:	781b      	ldrb	r3, [r3, #0]
 801cc54:	2b01      	cmp	r3, #1
 801cc56:	d004      	beq.n	801cc62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801cc58:	d30b      	bcc.n	801cc72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801cc5a:	2b02      	cmp	r3, #2
 801cc5c:	d1dc      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc5e:	6900      	ldr	r0, [r0, #16]
 801cc60:	4770      	bx	lr
 801cc62:	6a00      	ldr	r0, [r0, #32]
 801cc64:	4770      	bx	lr
 801cc66:	6980      	ldr	r0, [r0, #24]
 801cc68:	4770      	bx	lr
 801cc6a:	684b      	ldr	r3, [r1, #4]
 801cc6c:	781b      	ldrb	r3, [r3, #0]
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d1d2      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc72:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801cc74:	4770      	bx	lr
 801cc76:	684b      	ldr	r3, [r1, #4]
 801cc78:	781b      	ldrb	r3, [r3, #0]
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	d1cc      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cc7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801cc80:	4770      	bx	lr
 801cc82:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801cc84:	4770      	bx	lr
 801cc86:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801cc88:	4770      	bx	lr
 801cc8a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801cc8c:	4770      	bx	lr
 801cc8e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801cc90:	4770      	bx	lr
 801cc92:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801cc94:	4770      	bx	lr
 801cc96:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801cc98:	4770      	bx	lr
 801cc9a:	2a0b      	cmp	r2, #11
 801cc9c:	d049      	beq.n	801cd32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801cc9e:	d80e      	bhi.n	801ccbe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801cca0:	2a03      	cmp	r2, #3
 801cca2:	d040      	beq.n	801cd26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801cca4:	d804      	bhi.n	801ccb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801cca6:	2a01      	cmp	r2, #1
 801cca8:	d03f      	beq.n	801cd2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801ccaa:	d940      	bls.n	801cd2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801ccac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801ccae:	4770      	bx	lr
 801ccb0:	2a09      	cmp	r2, #9
 801ccb2:	d03e      	beq.n	801cd32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801ccb4:	d801      	bhi.n	801ccba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801ccb6:	2a08      	cmp	r2, #8
 801ccb8:	d1ae      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ccba:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801ccbc:	4770      	bx	lr
 801ccbe:	2a2f      	cmp	r2, #47	; 0x2f
 801ccc0:	d024      	beq.n	801cd0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801ccc2:	d80d      	bhi.n	801cce0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801ccc4:	2a2d      	cmp	r2, #45	; 0x2d
 801ccc6:	d014      	beq.n	801ccf2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801ccc8:	d826      	bhi.n	801cd18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801ccca:	2a2c      	cmp	r2, #44	; 0x2c
 801cccc:	d1a4      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ccce:	684b      	ldr	r3, [r1, #4]
 801ccd0:	781b      	ldrb	r3, [r3, #0]
 801ccd2:	2b01      	cmp	r3, #1
 801ccd4:	d018      	beq.n	801cd08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801ccd6:	d324      	bcc.n	801cd22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801ccd8:	2b02      	cmp	r3, #2
 801ccda:	d19d      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ccdc:	68c0      	ldr	r0, [r0, #12]
 801ccde:	4770      	bx	lr
 801cce0:	2a31      	cmp	r2, #49	; 0x31
 801cce2:	d004      	beq.n	801ccee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801cce4:	d327      	bcc.n	801cd36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801cce6:	2a32      	cmp	r2, #50	; 0x32
 801cce8:	d025      	beq.n	801cd36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801ccea:	2a33      	cmp	r2, #51	; 0x33
 801ccec:	d194      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801ccee:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801ccf0:	4770      	bx	lr
 801ccf2:	684b      	ldr	r3, [r1, #4]
 801ccf4:	781b      	ldrb	r3, [r3, #0]
 801ccf6:	2b01      	cmp	r3, #1
 801ccf8:	d004      	beq.n	801cd04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801ccfa:	d30b      	bcc.n	801cd14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801ccfc:	2b02      	cmp	r3, #2
 801ccfe:	d18b      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cd00:	6940      	ldr	r0, [r0, #20]
 801cd02:	4770      	bx	lr
 801cd04:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801cd06:	4770      	bx	lr
 801cd08:	69c0      	ldr	r0, [r0, #28]
 801cd0a:	4770      	bx	lr
 801cd0c:	684b      	ldr	r3, [r1, #4]
 801cd0e:	781b      	ldrb	r3, [r3, #0]
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d181      	bne.n	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cd14:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801cd16:	4770      	bx	lr
 801cd18:	684b      	ldr	r3, [r1, #4]
 801cd1a:	781b      	ldrb	r3, [r3, #0]
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	f47f af7b 	bne.w	801cc18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801cd22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801cd24:	4770      	bx	lr
 801cd26:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801cd28:	4770      	bx	lr
 801cd2a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801cd2c:	4770      	bx	lr
 801cd2e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801cd30:	4770      	bx	lr
 801cd32:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801cd34:	4770      	bx	lr
 801cd36:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801cd38:	4770      	bx	lr

0801cd3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd3e:	b087      	sub	sp, #28
 801cd40:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cd42:	9205      	str	r2, [sp, #20]
 801cd44:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801cd48:	9101      	str	r1, [sp, #4]
 801cd4a:	9202      	str	r2, [sp, #8]
 801cd4c:	6841      	ldr	r1, [r0, #4]
 801cd4e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801cd52:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801cd56:	fb01 2404 	mla	r4, r1, r4, r2
 801cd5a:	6802      	ldr	r2, [r0, #0]
 801cd5c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801cd60:	f8de 2000 	ldr.w	r2, [lr]
 801cd64:	9203      	str	r2, [sp, #12]
 801cd66:	f8de 2004 	ldr.w	r2, [lr, #4]
 801cd6a:	3204      	adds	r2, #4
 801cd6c:	9204      	str	r2, [sp, #16]
 801cd6e:	9a02      	ldr	r2, [sp, #8]
 801cd70:	43d6      	mvns	r6, r2
 801cd72:	b2f6      	uxtb	r6, r6
 801cd74:	9a01      	ldr	r2, [sp, #4]
 801cd76:	2a00      	cmp	r2, #0
 801cd78:	dc03      	bgt.n	801cd82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cd7a:	9a05      	ldr	r2, [sp, #20]
 801cd7c:	2a00      	cmp	r2, #0
 801cd7e:	f340 8129 	ble.w	801cfd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cd82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd84:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801cd88:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801cd8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd8e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801cd92:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	dd0e      	ble.n	801cdb8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801cd9a:	1408      	asrs	r0, r1, #16
 801cd9c:	d405      	bmi.n	801cdaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cd9e:	4560      	cmp	r0, ip
 801cda0:	da03      	bge.n	801cdaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cda2:	1410      	asrs	r0, r2, #16
 801cda4:	d401      	bmi.n	801cdaa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cda6:	42b8      	cmp	r0, r7
 801cda8:	db07      	blt.n	801cdba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801cdaa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cdac:	3b01      	subs	r3, #1
 801cdae:	3402      	adds	r4, #2
 801cdb0:	4401      	add	r1, r0
 801cdb2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cdb4:	4402      	add	r2, r0
 801cdb6:	e7ee      	b.n	801cd96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cdb8:	d071      	beq.n	801ce9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801cdba:	1e58      	subs	r0, r3, #1
 801cdbc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801cdbe:	fb05 1500 	mla	r5, r5, r0, r1
 801cdc2:	142d      	asrs	r5, r5, #16
 801cdc4:	d45f      	bmi.n	801ce86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cdc6:	4565      	cmp	r5, ip
 801cdc8:	da5d      	bge.n	801ce86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cdca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cdcc:	fb05 2000 	mla	r0, r5, r0, r2
 801cdd0:	1400      	asrs	r0, r0, #16
 801cdd2:	d458      	bmi.n	801ce86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cdd4:	42b8      	cmp	r0, r7
 801cdd6:	da56      	bge.n	801ce86 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801cdd8:	4699      	mov	r9, r3
 801cdda:	46a2      	mov	sl, r4
 801cddc:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801cde0:	f1b9 0f00 	cmp.w	r9, #0
 801cde4:	dd57      	ble.n	801ce96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801cde6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cdea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801cdee:	9803      	ldr	r0, [sp, #12]
 801cdf0:	140d      	asrs	r5, r1, #16
 801cdf2:	f109 39ff 	add.w	r9, r9, #4294967295
 801cdf6:	fb07 000c 	mla	r0, r7, ip, r0
 801cdfa:	5d40      	ldrb	r0, [r0, r5]
 801cdfc:	9d04      	ldr	r5, [sp, #16]
 801cdfe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801ce02:	f8ba 5000 	ldrh.w	r5, [sl]
 801ce06:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801ce0a:	122f      	asrs	r7, r5, #8
 801ce0c:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801ce10:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ce14:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ce18:	00ed      	lsls	r5, r5, #3
 801ce1a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801ce1e:	fb17 f706 	smulbb	r7, r7, r6
 801ce22:	b2ed      	uxtb	r5, r5
 801ce24:	fb18 f806 	smulbb	r8, r8, r6
 801ce28:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801ce2c:	10c7      	asrs	r7, r0, #3
 801ce2e:	fb15 f506 	smulbb	r5, r5, r6
 801ce32:	00c0      	lsls	r0, r0, #3
 801ce34:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ce38:	fa1f fc8c 	uxth.w	ip, ip
 801ce3c:	b2c0      	uxtb	r0, r0
 801ce3e:	fb07 870b 	mla	r7, r7, fp, r8
 801ce42:	fb00 500b 	mla	r0, r0, fp, r5
 801ce46:	f10c 0501 	add.w	r5, ip, #1
 801ce4a:	b2bf      	uxth	r7, r7
 801ce4c:	b280      	uxth	r0, r0
 801ce4e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ce52:	f107 0801 	add.w	r8, r7, #1
 801ce56:	1c45      	adds	r5, r0, #1
 801ce58:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801ce5c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ce60:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801ce64:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ce66:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801ce6a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ce6e:	4401      	add	r1, r0
 801ce70:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801ce74:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ce76:	ea45 0c0c 	orr.w	ip, r5, ip
 801ce7a:	4402      	add	r2, r0
 801ce7c:	ea4c 0c08 	orr.w	ip, ip, r8
 801ce80:	f82a cb02 	strh.w	ip, [sl], #2
 801ce84:	e7ac      	b.n	801cde0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ce86:	f04f 0800 	mov.w	r8, #0
 801ce8a:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801ce8e:	eb03 0008 	add.w	r0, r3, r8
 801ce92:	2800      	cmp	r0, #0
 801ce94:	dc41      	bgt.n	801cf1a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ce96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ce9a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ce9e:	9b01      	ldr	r3, [sp, #4]
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	f340 8097 	ble.w	801cfd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801cea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ceaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ceac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ceb0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ceb4:	eef0 6a62 	vmov.f32	s13, s5
 801ceb8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cebc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cec0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cec4:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801cec8:	eef0 6a43 	vmov.f32	s13, s6
 801cecc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ced0:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801ced4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ced8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cedc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cee0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cee4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cee8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ceec:	ee12 2a90 	vmov	r2, s5
 801cef0:	eef0 2a47 	vmov.f32	s5, s14
 801cef4:	fb92 f3f3 	sdiv	r3, r2, r3
 801cef8:	ee13 2a10 	vmov	r2, s6
 801cefc:	9313      	str	r3, [sp, #76]	; 0x4c
 801cefe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf00:	eeb0 3a67 	vmov.f32	s6, s15
 801cf04:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf08:	9314      	str	r3, [sp, #80]	; 0x50
 801cf0a:	9b01      	ldr	r3, [sp, #4]
 801cf0c:	9a05      	ldr	r2, [sp, #20]
 801cf0e:	3b01      	subs	r3, #1
 801cf10:	9301      	str	r3, [sp, #4]
 801cf12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf14:	bf08      	it	eq
 801cf16:	4613      	moveq	r3, r2
 801cf18:	e72c      	b.n	801cd74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cf1a:	140f      	asrs	r7, r1, #16
 801cf1c:	d453      	bmi.n	801cfc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801cf1e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801cf22:	42bd      	cmp	r5, r7
 801cf24:	dd4f      	ble.n	801cfc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801cf26:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801cf2a:	d44c      	bmi.n	801cfc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801cf2c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801cf30:	4560      	cmp	r0, ip
 801cf32:	dd48      	ble.n	801cfc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801cf34:	9803      	ldr	r0, [sp, #12]
 801cf36:	b22d      	sxth	r5, r5
 801cf38:	fb0c 0505 	mla	r5, ip, r5, r0
 801cf3c:	5de8      	ldrb	r0, [r5, r7]
 801cf3e:	9d04      	ldr	r5, [sp, #16]
 801cf40:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801cf44:	f06f 0501 	mvn.w	r5, #1
 801cf48:	fb05 fb08 	mul.w	fp, r5, r8
 801cf4c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801cf50:	f834 500b 	ldrh.w	r5, [r4, fp]
 801cf54:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cf58:	122f      	asrs	r7, r5, #8
 801cf5a:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801cf5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801cf62:	00ed      	lsls	r5, r5, #3
 801cf64:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801cf68:	fb17 f706 	smulbb	r7, r7, r6
 801cf6c:	b2ed      	uxtb	r5, r5
 801cf6e:	fb19 f906 	smulbb	r9, r9, r6
 801cf72:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801cf76:	10c7      	asrs	r7, r0, #3
 801cf78:	fb15 f506 	smulbb	r5, r5, r6
 801cf7c:	00c0      	lsls	r0, r0, #3
 801cf7e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cf82:	fa1f fc8c 	uxth.w	ip, ip
 801cf86:	b2c0      	uxtb	r0, r0
 801cf88:	fb07 970a 	mla	r7, r7, sl, r9
 801cf8c:	fb00 500a 	mla	r0, r0, sl, r5
 801cf90:	f10c 0501 	add.w	r5, ip, #1
 801cf94:	b2bf      	uxth	r7, r7
 801cf96:	b280      	uxth	r0, r0
 801cf98:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801cf9c:	f107 0901 	add.w	r9, r7, #1
 801cfa0:	1c45      	adds	r5, r0, #1
 801cfa2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801cfa6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801cfaa:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801cfae:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801cfb2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801cfb6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801cfba:	ea45 0c0c 	orr.w	ip, r5, ip
 801cfbe:	ea4c 0c09 	orr.w	ip, ip, r9
 801cfc2:	f824 c00b 	strh.w	ip, [r4, fp]
 801cfc6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cfc8:	f108 38ff 	add.w	r8, r8, #4294967295
 801cfcc:	4401      	add	r1, r0
 801cfce:	9814      	ldr	r0, [sp, #80]	; 0x50
 801cfd0:	4402      	add	r2, r0
 801cfd2:	e75c      	b.n	801ce8e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801cfd4:	b007      	add	sp, #28
 801cfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cfda <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfde:	b085      	sub	sp, #20
 801cfe0:	4693      	mov	fp, r2
 801cfe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cfe6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801cfe8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801cfea:	6870      	ldr	r0, [r6, #4]
 801cfec:	9100      	str	r1, [sp, #0]
 801cfee:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801cff2:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801cff6:	fb00 2404 	mla	r4, r0, r4, r2
 801cffa:	6832      	ldr	r2, [r6, #0]
 801cffc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d000:	682a      	ldr	r2, [r5, #0]
 801d002:	9201      	str	r2, [sp, #4]
 801d004:	686a      	ldr	r2, [r5, #4]
 801d006:	3204      	adds	r2, #4
 801d008:	9202      	str	r2, [sp, #8]
 801d00a:	9a00      	ldr	r2, [sp, #0]
 801d00c:	2a00      	cmp	r2, #0
 801d00e:	dc03      	bgt.n	801d018 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d010:	f1bb 0f00 	cmp.w	fp, #0
 801d014:	f340 80a0 	ble.w	801d158 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d018:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d01a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d01e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d022:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d024:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d028:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	dd0c      	ble.n	801d04a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d030:	1406      	asrs	r6, r0, #16
 801d032:	d405      	bmi.n	801d040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d034:	454e      	cmp	r6, r9
 801d036:	da03      	bge.n	801d040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d038:	1416      	asrs	r6, r2, #16
 801d03a:	d401      	bmi.n	801d040 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801d03c:	4546      	cmp	r6, r8
 801d03e:	db05      	blt.n	801d04c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d040:	4470      	add	r0, lr
 801d042:	4462      	add	r2, ip
 801d044:	3b01      	subs	r3, #1
 801d046:	3402      	adds	r4, #2
 801d048:	e7f0      	b.n	801d02c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d04a:	d00f      	beq.n	801d06c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d04c:	1e5e      	subs	r6, r3, #1
 801d04e:	fb0e 0706 	mla	r7, lr, r6, r0
 801d052:	143f      	asrs	r7, r7, #16
 801d054:	d541      	bpl.n	801d0da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801d056:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801d05a:	4698      	mov	r8, r3
 801d05c:	9603      	str	r6, [sp, #12]
 801d05e:	f1b8 0f00 	cmp.w	r8, #0
 801d062:	dc59      	bgt.n	801d118 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801d064:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d068:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d06c:	9b00      	ldr	r3, [sp, #0]
 801d06e:	2b00      	cmp	r3, #0
 801d070:	dd72      	ble.n	801d158 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801d072:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d078:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d07c:	eeb0 6a62 	vmov.f32	s12, s5
 801d080:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d084:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d088:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d08c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d090:	eeb0 6a43 	vmov.f32	s12, s6
 801d094:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d098:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d09c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d0a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d0a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d0ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d0b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d0b4:	ee12 2a90 	vmov	r2, s5
 801d0b8:	eef0 2a47 	vmov.f32	s5, s14
 801d0bc:	fb92 fef3 	sdiv	lr, r2, r3
 801d0c0:	ee13 2a10 	vmov	r2, s6
 801d0c4:	eeb0 3a67 	vmov.f32	s6, s15
 801d0c8:	fb92 fcf3 	sdiv	ip, r2, r3
 801d0cc:	9b00      	ldr	r3, [sp, #0]
 801d0ce:	3b01      	subs	r3, #1
 801d0d0:	9300      	str	r3, [sp, #0]
 801d0d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0d4:	bf08      	it	eq
 801d0d6:	465b      	moveq	r3, fp
 801d0d8:	e797      	b.n	801d00a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d0da:	454f      	cmp	r7, r9
 801d0dc:	dabb      	bge.n	801d056 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d0de:	fb0c 2606 	mla	r6, ip, r6, r2
 801d0e2:	1436      	asrs	r6, r6, #16
 801d0e4:	d4b7      	bmi.n	801d056 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d0e6:	4546      	cmp	r6, r8
 801d0e8:	dab5      	bge.n	801d056 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d0ea:	461e      	mov	r6, r3
 801d0ec:	46a0      	mov	r8, r4
 801d0ee:	2e00      	cmp	r6, #0
 801d0f0:	ddb8      	ble.n	801d064 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d0f2:	1417      	asrs	r7, r2, #16
 801d0f4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801d0f8:	9901      	ldr	r1, [sp, #4]
 801d0fa:	ea4f 4920 	mov.w	r9, r0, asr #16
 801d0fe:	4462      	add	r2, ip
 801d100:	4470      	add	r0, lr
 801d102:	fb0a 1707 	mla	r7, sl, r7, r1
 801d106:	9902      	ldr	r1, [sp, #8]
 801d108:	3e01      	subs	r6, #1
 801d10a:	f817 7009 	ldrb.w	r7, [r7, r9]
 801d10e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801d112:	f828 7b02 	strh.w	r7, [r8], #2
 801d116:	e7ea      	b.n	801d0ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d118:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d11c:	d417      	bmi.n	801d14e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d11e:	68ae      	ldr	r6, [r5, #8]
 801d120:	454e      	cmp	r6, r9
 801d122:	dd14      	ble.n	801d14e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d124:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801d128:	d411      	bmi.n	801d14e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d12a:	68ef      	ldr	r7, [r5, #12]
 801d12c:	4557      	cmp	r7, sl
 801d12e:	dd0e      	ble.n	801d14e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801d130:	9f01      	ldr	r7, [sp, #4]
 801d132:	b236      	sxth	r6, r6
 801d134:	f06f 0101 	mvn.w	r1, #1
 801d138:	fb0a 7606 	mla	r6, sl, r6, r7
 801d13c:	9f02      	ldr	r7, [sp, #8]
 801d13e:	f816 6009 	ldrb.w	r6, [r6, r9]
 801d142:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801d146:	fb01 f608 	mul.w	r6, r1, r8
 801d14a:	9903      	ldr	r1, [sp, #12]
 801d14c:	538f      	strh	r7, [r1, r6]
 801d14e:	4470      	add	r0, lr
 801d150:	4462      	add	r2, ip
 801d152:	f108 38ff 	add.w	r8, r8, #4294967295
 801d156:	e782      	b.n	801d05e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d158:	b005      	add	sp, #20
 801d15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d15e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d15e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d162:	b087      	sub	sp, #28
 801d164:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d166:	9205      	str	r2, [sp, #20]
 801d168:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d16c:	9102      	str	r1, [sp, #8]
 801d16e:	9203      	str	r2, [sp, #12]
 801d170:	6861      	ldr	r1, [r4, #4]
 801d172:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d176:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801d17a:	fb01 2000 	mla	r0, r1, r0, r2
 801d17e:	6822      	ldr	r2, [r4, #0]
 801d180:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d184:	9200      	str	r2, [sp, #0]
 801d186:	f8dc 2000 	ldr.w	r2, [ip]
 801d18a:	9204      	str	r2, [sp, #16]
 801d18c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d190:	3204      	adds	r2, #4
 801d192:	9201      	str	r2, [sp, #4]
 801d194:	9a03      	ldr	r2, [sp, #12]
 801d196:	43d5      	mvns	r5, r2
 801d198:	b2ed      	uxtb	r5, r5
 801d19a:	9a02      	ldr	r2, [sp, #8]
 801d19c:	2a00      	cmp	r2, #0
 801d19e:	dc03      	bgt.n	801d1a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d1a0:	9a05      	ldr	r2, [sp, #20]
 801d1a2:	2a00      	cmp	r2, #0
 801d1a4:	f340 812c 	ble.w	801d400 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d1a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d1aa:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d1ae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d1b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d1b4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d1b8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	dd10      	ble.n	801d1e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d1c0:	140c      	asrs	r4, r1, #16
 801d1c2:	d405      	bmi.n	801d1d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d1c4:	4574      	cmp	r4, lr
 801d1c6:	da03      	bge.n	801d1d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d1c8:	1414      	asrs	r4, r2, #16
 801d1ca:	d401      	bmi.n	801d1d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d1cc:	42bc      	cmp	r4, r7
 801d1ce:	db09      	blt.n	801d1e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d1d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d1d2:	3b01      	subs	r3, #1
 801d1d4:	9800      	ldr	r0, [sp, #0]
 801d1d6:	4421      	add	r1, r4
 801d1d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d1da:	3002      	adds	r0, #2
 801d1dc:	4422      	add	r2, r4
 801d1de:	9000      	str	r0, [sp, #0]
 801d1e0:	e7ec      	b.n	801d1bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d1e2:	d071      	beq.n	801d2c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801d1e4:	1e5c      	subs	r4, r3, #1
 801d1e6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d1e8:	fb06 1604 	mla	r6, r6, r4, r1
 801d1ec:	1436      	asrs	r6, r6, #16
 801d1ee:	d45d      	bmi.n	801d2ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d1f0:	4576      	cmp	r6, lr
 801d1f2:	da5b      	bge.n	801d2ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d1f4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d1f6:	fb06 2404 	mla	r4, r6, r4, r2
 801d1fa:	1424      	asrs	r4, r4, #16
 801d1fc:	d456      	bmi.n	801d2ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d1fe:	42bc      	cmp	r4, r7
 801d200:	da54      	bge.n	801d2ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d202:	4698      	mov	r8, r3
 801d204:	f8dd 9000 	ldr.w	r9, [sp]
 801d208:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801d20c:	f1b8 0f00 	cmp.w	r8, #0
 801d210:	dd54      	ble.n	801d2bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801d212:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d216:	1414      	asrs	r4, r2, #16
 801d218:	9804      	ldr	r0, [sp, #16]
 801d21a:	140e      	asrs	r6, r1, #16
 801d21c:	f108 38ff 	add.w	r8, r8, #4294967295
 801d220:	fb07 0404 	mla	r4, r7, r4, r0
 801d224:	9801      	ldr	r0, [sp, #4]
 801d226:	f814 e006 	ldrb.w	lr, [r4, r6]
 801d22a:	f8b9 4000 	ldrh.w	r4, [r9]
 801d22e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d232:	1227      	asrs	r7, r4, #8
 801d234:	eb00 0b0e 	add.w	fp, r0, lr
 801d238:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801d23c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d240:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d242:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d246:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d24a:	4401      	add	r1, r0
 801d24c:	fb16 f60a 	smulbb	r6, r6, sl
 801d250:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d252:	fb1b fb0a 	smulbb	fp, fp, sl
 801d256:	fb07 6705 	mla	r7, r7, r5, r6
 801d25a:	10e6      	asrs	r6, r4, #3
 801d25c:	00e4      	lsls	r4, r4, #3
 801d25e:	4402      	add	r2, r0
 801d260:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d264:	b2bf      	uxth	r7, r7
 801d266:	b2e4      	uxtb	r4, r4
 801d268:	fb06 b605 	mla	r6, r6, r5, fp
 801d26c:	fb14 f405 	smulbb	r4, r4, r5
 801d270:	b2b6      	uxth	r6, r6
 801d272:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801d276:	1c7c      	adds	r4, r7, #1
 801d278:	f106 0b01 	add.w	fp, r6, #1
 801d27c:	fa1f fe8e 	uxth.w	lr, lr
 801d280:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d284:	f10e 0401 	add.w	r4, lr, #1
 801d288:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d28c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d290:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801d294:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d298:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d29c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d2a0:	4327      	orrs	r7, r4
 801d2a2:	ea47 070b 	orr.w	r7, r7, fp
 801d2a6:	f829 7b02 	strh.w	r7, [r9], #2
 801d2aa:	e7af      	b.n	801d20c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801d2ac:	f04f 0e00 	mov.w	lr, #0
 801d2b0:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801d2b4:	eb03 040e 	add.w	r4, r3, lr
 801d2b8:	2c00      	cmp	r4, #0
 801d2ba:	dc43      	bgt.n	801d344 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801d2bc:	9a00      	ldr	r2, [sp, #0]
 801d2be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d2c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d2c6:	9300      	str	r3, [sp, #0]
 801d2c8:	9b02      	ldr	r3, [sp, #8]
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	f340 8098 	ble.w	801d400 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801d2d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d2d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d2da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d2de:	eef0 6a62 	vmov.f32	s13, s5
 801d2e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d2e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d2ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2ee:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801d2f2:	eef0 6a43 	vmov.f32	s13, s6
 801d2f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d2fa:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801d2fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d302:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d306:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d30a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d30e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d312:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d316:	ee12 2a90 	vmov	r2, s5
 801d31a:	eef0 2a47 	vmov.f32	s5, s14
 801d31e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d322:	ee13 2a10 	vmov	r2, s6
 801d326:	9313      	str	r3, [sp, #76]	; 0x4c
 801d328:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d32a:	eeb0 3a67 	vmov.f32	s6, s15
 801d32e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d332:	9314      	str	r3, [sp, #80]	; 0x50
 801d334:	9b02      	ldr	r3, [sp, #8]
 801d336:	9a05      	ldr	r2, [sp, #20]
 801d338:	3b01      	subs	r3, #1
 801d33a:	9302      	str	r3, [sp, #8]
 801d33c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d33e:	bf08      	it	eq
 801d340:	4613      	moveq	r3, r2
 801d342:	e72a      	b.n	801d19a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d344:	140f      	asrs	r7, r1, #16
 801d346:	d454      	bmi.n	801d3f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d348:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d34c:	42be      	cmp	r6, r7
 801d34e:	dd50      	ble.n	801d3f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d350:	ea5f 4822 	movs.w	r8, r2, asr #16
 801d354:	d44d      	bmi.n	801d3f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d356:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801d35a:	4544      	cmp	r4, r8
 801d35c:	dd49      	ble.n	801d3f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801d35e:	9c04      	ldr	r4, [sp, #16]
 801d360:	b236      	sxth	r6, r6
 801d362:	f06f 0001 	mvn.w	r0, #1
 801d366:	fb08 4606 	mla	r6, r8, r6, r4
 801d36a:	9c01      	ldr	r4, [sp, #4]
 801d36c:	fb00 fa0e 	mul.w	sl, r0, lr
 801d370:	9800      	ldr	r0, [sp, #0]
 801d372:	f816 8007 	ldrb.w	r8, [r6, r7]
 801d376:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d37a:	eb04 0b08 	add.w	fp, r4, r8
 801d37e:	f830 400a 	ldrh.w	r4, [r0, sl]
 801d382:	9801      	ldr	r0, [sp, #4]
 801d384:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801d388:	1227      	asrs	r7, r4, #8
 801d38a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801d38e:	fb16 f609 	smulbb	r6, r6, r9
 801d392:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d396:	f810 8008 	ldrb.w	r8, [r0, r8]
 801d39a:	fb1b fb09 	smulbb	fp, fp, r9
 801d39e:	fb07 6705 	mla	r7, r7, r5, r6
 801d3a2:	10e6      	asrs	r6, r4, #3
 801d3a4:	00e4      	lsls	r4, r4, #3
 801d3a6:	9800      	ldr	r0, [sp, #0]
 801d3a8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d3ac:	b2bf      	uxth	r7, r7
 801d3ae:	b2e4      	uxtb	r4, r4
 801d3b0:	fb06 b605 	mla	r6, r6, r5, fp
 801d3b4:	fb14 f405 	smulbb	r4, r4, r5
 801d3b8:	b2b6      	uxth	r6, r6
 801d3ba:	fb08 4809 	mla	r8, r8, r9, r4
 801d3be:	1c7c      	adds	r4, r7, #1
 801d3c0:	f106 0b01 	add.w	fp, r6, #1
 801d3c4:	fa1f f888 	uxth.w	r8, r8
 801d3c8:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801d3cc:	f108 0401 	add.w	r4, r8, #1
 801d3d0:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801d3d4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d3d8:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801d3dc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d3e0:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801d3e4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801d3e8:	4327      	orrs	r7, r4
 801d3ea:	ea47 070b 	orr.w	r7, r7, fp
 801d3ee:	f820 700a 	strh.w	r7, [r0, sl]
 801d3f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d3f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d3f8:	4401      	add	r1, r0
 801d3fa:	9814      	ldr	r0, [sp, #80]	; 0x50
 801d3fc:	4402      	add	r2, r0
 801d3fe:	e759      	b.n	801d2b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d400:	b007      	add	sp, #28
 801d402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d408 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d40c:	b085      	sub	sp, #20
 801d40e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d412:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d414:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801d416:	9203      	str	r2, [sp, #12]
 801d418:	6870      	ldr	r0, [r6, #4]
 801d41a:	686f      	ldr	r7, [r5, #4]
 801d41c:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801d420:	3704      	adds	r7, #4
 801d422:	9101      	str	r1, [sp, #4]
 801d424:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d428:	fb00 2404 	mla	r4, r0, r4, r2
 801d42c:	6832      	ldr	r2, [r6, #0]
 801d42e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d432:	682a      	ldr	r2, [r5, #0]
 801d434:	9202      	str	r2, [sp, #8]
 801d436:	9a01      	ldr	r2, [sp, #4]
 801d438:	2a00      	cmp	r2, #0
 801d43a:	dc03      	bgt.n	801d444 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d43c:	9a03      	ldr	r2, [sp, #12]
 801d43e:	2a00      	cmp	r2, #0
 801d440:	f340 80cc 	ble.w	801d5dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d444:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d446:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d44a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d44e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d450:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801d454:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d458:	2b00      	cmp	r3, #0
 801d45a:	dd0d      	ble.n	801d478 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801d45c:	1406      	asrs	r6, r0, #16
 801d45e:	d405      	bmi.n	801d46c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d460:	454e      	cmp	r6, r9
 801d462:	da03      	bge.n	801d46c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d464:	1416      	asrs	r6, r2, #16
 801d466:	d401      	bmi.n	801d46c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d468:	4546      	cmp	r6, r8
 801d46a:	db06      	blt.n	801d47a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d46c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d46e:	4460      	add	r0, ip
 801d470:	3b01      	subs	r3, #1
 801d472:	3402      	adds	r4, #2
 801d474:	4432      	add	r2, r6
 801d476:	e7ef      	b.n	801d458 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d478:	d00f      	beq.n	801d49a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d47a:	1e5e      	subs	r6, r3, #1
 801d47c:	fb0c 0e06 	mla	lr, ip, r6, r0
 801d480:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801d484:	d543      	bpl.n	801d50e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801d486:	4698      	mov	r8, r3
 801d488:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801d48c:	f1b8 0f00 	cmp.w	r8, #0
 801d490:	dc71      	bgt.n	801d576 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801d492:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d496:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d49a:	9b01      	ldr	r3, [sp, #4]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	f340 809d 	ble.w	801d5dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d4a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d4a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4ac:	eeb0 6a62 	vmov.f32	s12, s5
 801d4b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d4b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d4b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4bc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d4c0:	eeb0 6a43 	vmov.f32	s12, s6
 801d4c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d4c8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d4cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d4d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d4d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d4d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d4dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d4e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d4e4:	ee12 2a90 	vmov	r2, s5
 801d4e8:	eef0 2a47 	vmov.f32	s5, s14
 801d4ec:	fb92 fcf3 	sdiv	ip, r2, r3
 801d4f0:	ee13 2a10 	vmov	r2, s6
 801d4f4:	eeb0 3a67 	vmov.f32	s6, s15
 801d4f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4fc:	9312      	str	r3, [sp, #72]	; 0x48
 801d4fe:	9b01      	ldr	r3, [sp, #4]
 801d500:	9a03      	ldr	r2, [sp, #12]
 801d502:	3b01      	subs	r3, #1
 801d504:	9301      	str	r3, [sp, #4]
 801d506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d508:	bf08      	it	eq
 801d50a:	4613      	moveq	r3, r2
 801d50c:	e793      	b.n	801d436 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d50e:	45ce      	cmp	lr, r9
 801d510:	dab9      	bge.n	801d486 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d512:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d514:	fb01 2606 	mla	r6, r1, r6, r2
 801d518:	1436      	asrs	r6, r6, #16
 801d51a:	d4b4      	bmi.n	801d486 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d51c:	4546      	cmp	r6, r8
 801d51e:	dab2      	bge.n	801d486 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d520:	4698      	mov	r8, r3
 801d522:	46a2      	mov	sl, r4
 801d524:	f1b8 0f00 	cmp.w	r8, #0
 801d528:	ddb3      	ble.n	801d492 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d52a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801d52e:	1416      	asrs	r6, r2, #16
 801d530:	9902      	ldr	r1, [sp, #8]
 801d532:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801d536:	f108 38ff 	add.w	r8, r8, #4294967295
 801d53a:	4460      	add	r0, ip
 801d53c:	fb09 1606 	mla	r6, r9, r6, r1
 801d540:	4928      	ldr	r1, [pc, #160]	; (801d5e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801d542:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801d546:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d54a:	eb07 0b0e 	add.w	fp, r7, lr
 801d54e:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801d552:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801d556:	00f6      	lsls	r6, r6, #3
 801d558:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801d55c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d55e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d562:	440a      	add	r2, r1
 801d564:	ea49 0606 	orr.w	r6, r9, r6
 801d568:	f817 900e 	ldrb.w	r9, [r7, lr]
 801d56c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801d570:	f82a 6b02 	strh.w	r6, [sl], #2
 801d574:	e7d6      	b.n	801d524 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d576:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d57a:	d429      	bmi.n	801d5d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d57c:	68ae      	ldr	r6, [r5, #8]
 801d57e:	454e      	cmp	r6, r9
 801d580:	dd26      	ble.n	801d5d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d582:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801d586:	d423      	bmi.n	801d5d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d588:	68e9      	ldr	r1, [r5, #12]
 801d58a:	4559      	cmp	r1, fp
 801d58c:	dd20      	ble.n	801d5d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801d58e:	fa0f fe86 	sxth.w	lr, r6
 801d592:	9902      	ldr	r1, [sp, #8]
 801d594:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801d598:	f06f 0101 	mvn.w	r1, #1
 801d59c:	f81e e009 	ldrb.w	lr, [lr, r9]
 801d5a0:	fb01 f908 	mul.w	r9, r1, r8
 801d5a4:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801d5a8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d5ac:	eb07 060e 	add.w	r6, r7, lr
 801d5b0:	f896 b002 	ldrb.w	fp, [r6, #2]
 801d5b4:	7876      	ldrb	r6, [r6, #1]
 801d5b6:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801d5ba:	00f6      	lsls	r6, r6, #3
 801d5bc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801d5c0:	ea4b 0606 	orr.w	r6, fp, r6
 801d5c4:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801d5c8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801d5cc:	f82a 6009 	strh.w	r6, [sl, r9]
 801d5d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d5d2:	4460      	add	r0, ip
 801d5d4:	f108 38ff 	add.w	r8, r8, #4294967295
 801d5d8:	440a      	add	r2, r1
 801d5da:	e757      	b.n	801d48c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d5dc:	b005      	add	sp, #20
 801d5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5e2:	bf00      	nop
 801d5e4:	fffff800 	.word	0xfffff800

0801d5e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ec:	b087      	sub	sp, #28
 801d5ee:	468b      	mov	fp, r1
 801d5f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d5f4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d5f6:	9204      	str	r2, [sp, #16]
 801d5f8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d5fc:	6841      	ldr	r1, [r0, #4]
 801d5fe:	9205      	str	r2, [sp, #20]
 801d600:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d604:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801d608:	fb01 2404 	mla	r4, r1, r4, r2
 801d60c:	6802      	ldr	r2, [r0, #0]
 801d60e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d612:	f8dc 2000 	ldr.w	r2, [ip]
 801d616:	9201      	str	r2, [sp, #4]
 801d618:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801d61c:	3204      	adds	r2, #4
 801d61e:	9202      	str	r2, [sp, #8]
 801d620:	f1bb 0f00 	cmp.w	fp, #0
 801d624:	dc03      	bgt.n	801d62e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d626:	9a04      	ldr	r2, [sp, #16]
 801d628:	2a00      	cmp	r2, #0
 801d62a:	f340 8138 	ble.w	801d89e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d62e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d630:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801d634:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d638:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d63a:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801d63e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d642:	2b00      	cmp	r3, #0
 801d644:	dd0e      	ble.n	801d664 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d646:	1402      	asrs	r2, r0, #16
 801d648:	d405      	bmi.n	801d656 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d64a:	42ba      	cmp	r2, r7
 801d64c:	da03      	bge.n	801d656 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d64e:	140a      	asrs	r2, r1, #16
 801d650:	d401      	bmi.n	801d656 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d652:	42b2      	cmp	r2, r6
 801d654:	db07      	blt.n	801d666 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d656:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d658:	3b01      	subs	r3, #1
 801d65a:	3402      	adds	r4, #2
 801d65c:	4410      	add	r0, r2
 801d65e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d660:	4411      	add	r1, r2
 801d662:	e7ee      	b.n	801d642 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d664:	d019      	beq.n	801d69a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d666:	1e5a      	subs	r2, r3, #1
 801d668:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d66a:	fb05 0502 	mla	r5, r5, r2, r0
 801d66e:	142d      	asrs	r5, r5, #16
 801d670:	d409      	bmi.n	801d686 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d672:	42bd      	cmp	r5, r7
 801d674:	da07      	bge.n	801d686 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d676:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d678:	fb05 1202 	mla	r2, r5, r2, r1
 801d67c:	1412      	asrs	r2, r2, #16
 801d67e:	d402      	bmi.n	801d686 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d680:	42b2      	cmp	r2, r6
 801d682:	f2c0 80ac 	blt.w	801d7de <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801d686:	f04f 0e00 	mov.w	lr, #0
 801d68a:	eb03 020e 	add.w	r2, r3, lr
 801d68e:	2a00      	cmp	r2, #0
 801d690:	dc3e      	bgt.n	801d710 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d692:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d696:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d69a:	f1bb 0f00 	cmp.w	fp, #0
 801d69e:	f340 80fe 	ble.w	801d89e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d6a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d6a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6ac:	f1bb 0b01 	subs.w	fp, fp, #1
 801d6b0:	eeb0 6a62 	vmov.f32	s12, s5
 801d6b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d6b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d6bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6c0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d6c4:	eeb0 6a43 	vmov.f32	s12, s6
 801d6c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d6cc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d6d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d6d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d6e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d6e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d6e8:	ee12 2a90 	vmov	r2, s5
 801d6ec:	eef0 2a47 	vmov.f32	s5, s14
 801d6f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6f4:	ee13 2a10 	vmov	r2, s6
 801d6f8:	9313      	str	r3, [sp, #76]	; 0x4c
 801d6fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d6fc:	eeb0 3a67 	vmov.f32	s6, s15
 801d700:	fb92 f3f3 	sdiv	r3, r2, r3
 801d704:	9a04      	ldr	r2, [sp, #16]
 801d706:	9314      	str	r3, [sp, #80]	; 0x50
 801d708:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d70a:	bf08      	it	eq
 801d70c:	4613      	moveq	r3, r2
 801d70e:	e787      	b.n	801d620 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d710:	1406      	asrs	r6, r0, #16
 801d712:	d45d      	bmi.n	801d7d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d714:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801d718:	42b5      	cmp	r5, r6
 801d71a:	dd59      	ble.n	801d7d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d71c:	140f      	asrs	r7, r1, #16
 801d71e:	d457      	bmi.n	801d7d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d720:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d724:	42ba      	cmp	r2, r7
 801d726:	dd53      	ble.n	801d7d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d728:	9a01      	ldr	r2, [sp, #4]
 801d72a:	b22d      	sxth	r5, r5
 801d72c:	fb07 2505 	mla	r5, r7, r5, r2
 801d730:	5daa      	ldrb	r2, [r5, r6]
 801d732:	9d02      	ldr	r5, [sp, #8]
 801d734:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d738:	0e2e      	lsrs	r6, r5, #24
 801d73a:	d049      	beq.n	801d7d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d73c:	f06f 0201 	mvn.w	r2, #1
 801d740:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d744:	fb02 f20e 	mul.w	r2, r2, lr
 801d748:	f834 8002 	ldrh.w	r8, [r4, r2]
 801d74c:	9203      	str	r2, [sp, #12]
 801d74e:	9a05      	ldr	r2, [sp, #20]
 801d750:	ea4f 2728 	mov.w	r7, r8, asr #8
 801d754:	4356      	muls	r6, r2
 801d756:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d75a:	1c72      	adds	r2, r6, #1
 801d75c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d760:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d764:	b2ed      	uxtb	r5, r5
 801d766:	1212      	asrs	r2, r2, #8
 801d768:	fa1f f982 	uxth.w	r9, r2
 801d76c:	43d2      	mvns	r2, r2
 801d76e:	fb16 f609 	smulbb	r6, r6, r9
 801d772:	b2d2      	uxtb	r2, r2
 801d774:	fb15 f509 	smulbb	r5, r5, r9
 801d778:	fb07 6702 	mla	r7, r7, r2, r6
 801d77c:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801d780:	fb1a fa09 	smulbb	sl, sl, r9
 801d784:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801d788:	b2bf      	uxth	r7, r7
 801d78a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d78e:	fa5f f888 	uxtb.w	r8, r8
 801d792:	fb06 a602 	mla	r6, r6, r2, sl
 801d796:	fb08 5502 	mla	r5, r8, r2, r5
 801d79a:	1c7a      	adds	r2, r7, #1
 801d79c:	b2b6      	uxth	r6, r6
 801d79e:	b2ad      	uxth	r5, r5
 801d7a0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d7a4:	9a03      	ldr	r2, [sp, #12]
 801d7a6:	f105 0a01 	add.w	sl, r5, #1
 801d7aa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d7ae:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d7b2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d7b6:	ea4a 0707 	orr.w	r7, sl, r7
 801d7ba:	f106 0a01 	add.w	sl, r6, #1
 801d7be:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d7c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d7c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d7ca:	ea47 070a 	orr.w	r7, r7, sl
 801d7ce:	52a7      	strh	r7, [r4, r2]
 801d7d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d7d2:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d7d6:	4410      	add	r0, r2
 801d7d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d7da:	4411      	add	r1, r2
 801d7dc:	e755      	b.n	801d68a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801d7de:	f04f 0800 	mov.w	r8, #0
 801d7e2:	eba3 0208 	sub.w	r2, r3, r8
 801d7e6:	2a00      	cmp	r2, #0
 801d7e8:	f77f af53 	ble.w	801d692 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801d7ec:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801d7f0:	140a      	asrs	r2, r1, #16
 801d7f2:	9f01      	ldr	r7, [sp, #4]
 801d7f4:	1405      	asrs	r5, r0, #16
 801d7f6:	fb06 7202 	mla	r2, r6, r2, r7
 801d7fa:	5d52      	ldrb	r2, [r2, r5]
 801d7fc:	9d02      	ldr	r5, [sp, #8]
 801d7fe:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801d802:	0e2e      	lsrs	r6, r5, #24
 801d804:	d044      	beq.n	801d890 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801d806:	9a05      	ldr	r2, [sp, #20]
 801d808:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801d80c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801d810:	4356      	muls	r6, r2
 801d812:	ea4f 272e 	mov.w	r7, lr, asr #8
 801d816:	1c72      	adds	r2, r6, #1
 801d818:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d81c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801d820:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801d824:	b2ed      	uxtb	r5, r5
 801d826:	1212      	asrs	r2, r2, #8
 801d828:	fa1f f982 	uxth.w	r9, r2
 801d82c:	43d2      	mvns	r2, r2
 801d82e:	fb16 f609 	smulbb	r6, r6, r9
 801d832:	b2d2      	uxtb	r2, r2
 801d834:	fb15 f509 	smulbb	r5, r5, r9
 801d838:	fb07 6702 	mla	r7, r7, r2, r6
 801d83c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801d840:	fb1a fa09 	smulbb	sl, sl, r9
 801d844:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d848:	b2bf      	uxth	r7, r7
 801d84a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d84e:	fa5f fe8e 	uxtb.w	lr, lr
 801d852:	fb06 a602 	mla	r6, r6, r2, sl
 801d856:	fb0e 5502 	mla	r5, lr, r2, r5
 801d85a:	1c7a      	adds	r2, r7, #1
 801d85c:	b2b6      	uxth	r6, r6
 801d85e:	b2ad      	uxth	r5, r5
 801d860:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d864:	f105 0a01 	add.w	sl, r5, #1
 801d868:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801d86c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801d870:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801d874:	ea4a 0707 	orr.w	r7, sl, r7
 801d878:	f106 0a01 	add.w	sl, r6, #1
 801d87c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801d880:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d884:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801d888:	ea47 070a 	orr.w	r7, r7, sl
 801d88c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801d890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d892:	f108 0801 	add.w	r8, r8, #1
 801d896:	4410      	add	r0, r2
 801d898:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d89a:	4411      	add	r1, r2
 801d89c:	e7a1      	b.n	801d7e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d89e:	b007      	add	sp, #28
 801d8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d8a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8a8:	b085      	sub	sp, #20
 801d8aa:	468b      	mov	fp, r1
 801d8ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d8b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d8b2:	9203      	str	r2, [sp, #12]
 801d8b4:	6841      	ldr	r1, [r0, #4]
 801d8b6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801d8ba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801d8be:	fb01 2404 	mla	r4, r1, r4, r2
 801d8c2:	6802      	ldr	r2, [r0, #0]
 801d8c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801d8c8:	f8de 2000 	ldr.w	r2, [lr]
 801d8cc:	9200      	str	r2, [sp, #0]
 801d8ce:	f8de 2004 	ldr.w	r2, [lr, #4]
 801d8d2:	3204      	adds	r2, #4
 801d8d4:	9201      	str	r2, [sp, #4]
 801d8d6:	f1bb 0f00 	cmp.w	fp, #0
 801d8da:	dc03      	bgt.n	801d8e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d8dc:	9a03      	ldr	r2, [sp, #12]
 801d8de:	2a00      	cmp	r2, #0
 801d8e0:	f340 8153 	ble.w	801db8a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801d8e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d8e6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801d8ea:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801d8ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d8f0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801d8f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	dd0e      	ble.n	801d91a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d8fc:	1408      	asrs	r0, r1, #16
 801d8fe:	d405      	bmi.n	801d90c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d900:	42b8      	cmp	r0, r7
 801d902:	da03      	bge.n	801d90c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d904:	1410      	asrs	r0, r2, #16
 801d906:	d401      	bmi.n	801d90c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d908:	42b0      	cmp	r0, r6
 801d90a:	db07      	blt.n	801d91c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d90c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d90e:	3b01      	subs	r3, #1
 801d910:	3402      	adds	r4, #2
 801d912:	4401      	add	r1, r0
 801d914:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d916:	4402      	add	r2, r0
 801d918:	e7ee      	b.n	801d8f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d91a:	d017      	beq.n	801d94c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801d91c:	1e58      	subs	r0, r3, #1
 801d91e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d920:	fb05 1500 	mla	r5, r5, r0, r1
 801d924:	142d      	asrs	r5, r5, #16
 801d926:	d409      	bmi.n	801d93c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d928:	42bd      	cmp	r5, r7
 801d92a:	da07      	bge.n	801d93c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d92c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801d92e:	fb05 2000 	mla	r0, r5, r0, r2
 801d932:	1400      	asrs	r0, r0, #16
 801d934:	d402      	bmi.n	801d93c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d936:	42b0      	cmp	r0, r6
 801d938:	f2c0 80bc 	blt.w	801dab4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801d93c:	2600      	movs	r6, #0
 801d93e:	1998      	adds	r0, r3, r6
 801d940:	2800      	cmp	r0, #0
 801d942:	dc3e      	bgt.n	801d9c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d944:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d948:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d94c:	f1bb 0f00 	cmp.w	fp, #0
 801d950:	f340 811b 	ble.w	801db8a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801d954:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d95a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d95e:	f1bb 0b01 	subs.w	fp, fp, #1
 801d962:	eeb0 6a62 	vmov.f32	s12, s5
 801d966:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d96a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d96e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d972:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d976:	eeb0 6a43 	vmov.f32	s12, s6
 801d97a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d97e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d982:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d986:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d98a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d98e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d992:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d996:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d99a:	ee12 2a90 	vmov	r2, s5
 801d99e:	eef0 2a47 	vmov.f32	s5, s14
 801d9a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d9a6:	ee13 2a10 	vmov	r2, s6
 801d9aa:	9311      	str	r3, [sp, #68]	; 0x44
 801d9ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9ae:	eeb0 3a67 	vmov.f32	s6, s15
 801d9b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d9b6:	9a03      	ldr	r2, [sp, #12]
 801d9b8:	9312      	str	r3, [sp, #72]	; 0x48
 801d9ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9bc:	bf08      	it	eq
 801d9be:	4613      	moveq	r3, r2
 801d9c0:	e789      	b.n	801d8d6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801d9c2:	140f      	asrs	r7, r1, #16
 801d9c4:	d426      	bmi.n	801da14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d9c6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801d9ca:	42bd      	cmp	r5, r7
 801d9cc:	dd22      	ble.n	801da14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d9ce:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801d9d2:	d41f      	bmi.n	801da14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d9d4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801d9d8:	4560      	cmp	r0, ip
 801d9da:	dd1b      	ble.n	801da14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801d9dc:	9800      	ldr	r0, [sp, #0]
 801d9de:	b22d      	sxth	r5, r5
 801d9e0:	fb0c 0505 	mla	r5, ip, r5, r0
 801d9e4:	5de8      	ldrb	r0, [r5, r7]
 801d9e6:	9d01      	ldr	r5, [sp, #4]
 801d9e8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801d9ec:	0e07      	lsrs	r7, r0, #24
 801d9ee:	2fff      	cmp	r7, #255	; 0xff
 801d9f0:	d116      	bne.n	801da20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801d9f2:	f06f 0501 	mvn.w	r5, #1
 801d9f6:	fb05 f706 	mul.w	r7, r5, r6
 801d9fa:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801d9fe:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801da02:	0945      	lsrs	r5, r0, #5
 801da04:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801da08:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801da0c:	ea4c 0505 	orr.w	r5, ip, r5
 801da10:	4305      	orrs	r5, r0
 801da12:	53e5      	strh	r5, [r4, r7]
 801da14:	9811      	ldr	r0, [sp, #68]	; 0x44
 801da16:	3e01      	subs	r6, #1
 801da18:	4401      	add	r1, r0
 801da1a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801da1c:	4402      	add	r2, r0
 801da1e:	e78e      	b.n	801d93e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801da20:	b2fd      	uxtb	r5, r7
 801da22:	2f00      	cmp	r7, #0
 801da24:	d0f6      	beq.n	801da14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801da26:	f06f 0701 	mvn.w	r7, #1
 801da2a:	fa1f f985 	uxth.w	r9, r5
 801da2e:	43ed      	mvns	r5, r5
 801da30:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801da34:	4377      	muls	r7, r6
 801da36:	fb1a fa09 	smulbb	sl, sl, r9
 801da3a:	b2ed      	uxtb	r5, r5
 801da3c:	f834 8007 	ldrh.w	r8, [r4, r7]
 801da40:	9702      	str	r7, [sp, #8]
 801da42:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801da46:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801da4a:	fb17 f709 	smulbb	r7, r7, r9
 801da4e:	b2c0      	uxtb	r0, r0
 801da50:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801da54:	fb10 f009 	smulbb	r0, r0, r9
 801da58:	fb0c 7c05 	mla	ip, ip, r5, r7
 801da5c:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801da60:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801da64:	fa1f fc8c 	uxth.w	ip, ip
 801da68:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801da6c:	fa5f f888 	uxtb.w	r8, r8
 801da70:	fb07 a705 	mla	r7, r7, r5, sl
 801da74:	fb08 0005 	mla	r0, r8, r5, r0
 801da78:	f10c 0501 	add.w	r5, ip, #1
 801da7c:	b2bf      	uxth	r7, r7
 801da7e:	b280      	uxth	r0, r0
 801da80:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801da84:	f100 0a01 	add.w	sl, r0, #1
 801da88:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801da8c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801da90:	9802      	ldr	r0, [sp, #8]
 801da92:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801da96:	ea4a 0c0c 	orr.w	ip, sl, ip
 801da9a:	f107 0a01 	add.w	sl, r7, #1
 801da9e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801daa2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801daa6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801daaa:	ea4c 0c0a 	orr.w	ip, ip, sl
 801daae:	f824 c000 	strh.w	ip, [r4, r0]
 801dab2:	e7af      	b.n	801da14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801dab4:	f04f 0800 	mov.w	r8, #0
 801dab8:	eba3 0008 	sub.w	r0, r3, r8
 801dabc:	2800      	cmp	r0, #0
 801dabe:	f77f af41 	ble.w	801d944 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dac2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801dac6:	1410      	asrs	r0, r2, #16
 801dac8:	9f00      	ldr	r7, [sp, #0]
 801daca:	140d      	asrs	r5, r1, #16
 801dacc:	fb06 7000 	mla	r0, r6, r0, r7
 801dad0:	5d40      	ldrb	r0, [r0, r5]
 801dad2:	9d01      	ldr	r5, [sp, #4]
 801dad4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801dad8:	0e2e      	lsrs	r6, r5, #24
 801dada:	2eff      	cmp	r6, #255	; 0xff
 801dadc:	d112      	bne.n	801db04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801dade:	482c      	ldr	r0, [pc, #176]	; (801db90 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801dae0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801dae4:	0968      	lsrs	r0, r5, #5
 801dae6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801daea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801daee:	4330      	orrs	r0, r6
 801daf0:	4328      	orrs	r0, r5
 801daf2:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801daf6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801daf8:	f108 0801 	add.w	r8, r8, #1
 801dafc:	4401      	add	r1, r0
 801dafe:	9812      	ldr	r0, [sp, #72]	; 0x48
 801db00:	4402      	add	r2, r0
 801db02:	e7d9      	b.n	801dab8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801db04:	b2f0      	uxtb	r0, r6
 801db06:	2e00      	cmp	r6, #0
 801db08:	d0f5      	beq.n	801daf6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801db0a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801db0e:	fa1f f980 	uxth.w	r9, r0
 801db12:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801db16:	43c0      	mvns	r0, r0
 801db18:	ea4f 272c 	mov.w	r7, ip, asr #8
 801db1c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801db20:	fb16 f609 	smulbb	r6, r6, r9
 801db24:	b2c0      	uxtb	r0, r0
 801db26:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801db2a:	b2ed      	uxtb	r5, r5
 801db2c:	fb1a fa09 	smulbb	sl, sl, r9
 801db30:	fb07 6700 	mla	r7, r7, r0, r6
 801db34:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801db38:	fb15 f509 	smulbb	r5, r5, r9
 801db3c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801db40:	b2bf      	uxth	r7, r7
 801db42:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801db46:	fa5f fc8c 	uxtb.w	ip, ip
 801db4a:	fb06 a600 	mla	r6, r6, r0, sl
 801db4e:	fb0c 5500 	mla	r5, ip, r0, r5
 801db52:	1c78      	adds	r0, r7, #1
 801db54:	b2b6      	uxth	r6, r6
 801db56:	b2ad      	uxth	r5, r5
 801db58:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801db5c:	f105 0a01 	add.w	sl, r5, #1
 801db60:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801db64:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801db68:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801db6c:	ea4a 0707 	orr.w	r7, sl, r7
 801db70:	f106 0a01 	add.w	sl, r6, #1
 801db74:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801db78:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801db7c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801db80:	ea47 070a 	orr.w	r7, r7, sl
 801db84:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801db88:	e7b5      	b.n	801daf6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801db8a:	b005      	add	sp, #20
 801db8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db90:	fffff800 	.word	0xfffff800

0801db94 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db98:	b087      	sub	sp, #28
 801db9a:	468b      	mov	fp, r1
 801db9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dba0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801dba2:	9204      	str	r2, [sp, #16]
 801dba4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801dba8:	6861      	ldr	r1, [r4, #4]
 801dbaa:	9205      	str	r2, [sp, #20]
 801dbac:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801dbb0:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801dbb4:	fb01 2000 	mla	r0, r1, r0, r2
 801dbb8:	6822      	ldr	r2, [r4, #0]
 801dbba:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801dbbe:	f8de 2000 	ldr.w	r2, [lr]
 801dbc2:	9201      	str	r2, [sp, #4]
 801dbc4:	f8de 2004 	ldr.w	r2, [lr, #4]
 801dbc8:	9202      	str	r2, [sp, #8]
 801dbca:	f1bb 0f00 	cmp.w	fp, #0
 801dbce:	dc03      	bgt.n	801dbd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801dbd0:	9a04      	ldr	r2, [sp, #16]
 801dbd2:	2a00      	cmp	r2, #0
 801dbd4:	f340 8142 	ble.w	801de5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801dbd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dbda:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801dbde:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801dbe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dbe4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801dbe8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	dd0e      	ble.n	801dc0e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801dbf0:	140c      	asrs	r4, r1, #16
 801dbf2:	d405      	bmi.n	801dc00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dbf4:	42bc      	cmp	r4, r7
 801dbf6:	da03      	bge.n	801dc00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dbf8:	1414      	asrs	r4, r2, #16
 801dbfa:	d401      	bmi.n	801dc00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801dbfc:	42b4      	cmp	r4, r6
 801dbfe:	db07      	blt.n	801dc10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dc00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dc02:	3b01      	subs	r3, #1
 801dc04:	3002      	adds	r0, #2
 801dc06:	4421      	add	r1, r4
 801dc08:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dc0a:	4422      	add	r2, r4
 801dc0c:	e7ee      	b.n	801dbec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801dc0e:	d019      	beq.n	801dc44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801dc10:	1e5c      	subs	r4, r3, #1
 801dc12:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801dc14:	fb05 1504 	mla	r5, r5, r4, r1
 801dc18:	142d      	asrs	r5, r5, #16
 801dc1a:	d409      	bmi.n	801dc30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dc1c:	42bd      	cmp	r5, r7
 801dc1e:	da07      	bge.n	801dc30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dc20:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801dc22:	fb05 2404 	mla	r4, r5, r4, r2
 801dc26:	1424      	asrs	r4, r4, #16
 801dc28:	d402      	bmi.n	801dc30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801dc2a:	42b4      	cmp	r4, r6
 801dc2c:	f2c0 80b1 	blt.w	801dd92 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801dc30:	f04f 0800 	mov.w	r8, #0
 801dc34:	eb03 0408 	add.w	r4, r3, r8
 801dc38:	2c00      	cmp	r4, #0
 801dc3a:	dc3e      	bgt.n	801dcba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801dc3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dc40:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801dc44:	f1bb 0f00 	cmp.w	fp, #0
 801dc48:	f340 8108 	ble.w	801de5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801dc4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dc50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dc52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dc56:	f1bb 0b01 	subs.w	fp, fp, #1
 801dc5a:	eeb0 6a62 	vmov.f32	s12, s5
 801dc5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dc62:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dc66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc6a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801dc6e:	eeb0 6a43 	vmov.f32	s12, s6
 801dc72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dc76:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801dc7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dc7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dc82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc92:	ee12 2a90 	vmov	r2, s5
 801dc96:	eef0 2a47 	vmov.f32	s5, s14
 801dc9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801dc9e:	ee13 2a10 	vmov	r2, s6
 801dca2:	9313      	str	r3, [sp, #76]	; 0x4c
 801dca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dca6:	eeb0 3a67 	vmov.f32	s6, s15
 801dcaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801dcae:	9a04      	ldr	r2, [sp, #16]
 801dcb0:	9314      	str	r3, [sp, #80]	; 0x50
 801dcb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dcb4:	bf08      	it	eq
 801dcb6:	4613      	moveq	r3, r2
 801dcb8:	e787      	b.n	801dbca <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801dcba:	140e      	asrs	r6, r1, #16
 801dcbc:	d462      	bmi.n	801dd84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dcbe:	f8de 5008 	ldr.w	r5, [lr, #8]
 801dcc2:	42b5      	cmp	r5, r6
 801dcc4:	dd5e      	ble.n	801dd84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dcc6:	1417      	asrs	r7, r2, #16
 801dcc8:	d45c      	bmi.n	801dd84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dcca:	f8de 400c 	ldr.w	r4, [lr, #12]
 801dcce:	42bc      	cmp	r4, r7
 801dcd0:	dd58      	ble.n	801dd84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dcd2:	b22d      	sxth	r5, r5
 801dcd4:	9c02      	ldr	r4, [sp, #8]
 801dcd6:	fb07 6505 	mla	r5, r7, r5, r6
 801dcda:	5d66      	ldrb	r6, [r4, r5]
 801dcdc:	2e00      	cmp	r6, #0
 801dcde:	d051      	beq.n	801dd84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dce0:	9c01      	ldr	r4, [sp, #4]
 801dce2:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801dce6:	f06f 0401 	mvn.w	r4, #1
 801dcea:	fb04 f408 	mul.w	r4, r4, r8
 801dcee:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801dcf2:	5b05      	ldrh	r5, [r0, r4]
 801dcf4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dcf8:	9403      	str	r4, [sp, #12]
 801dcfa:	9c05      	ldr	r4, [sp, #20]
 801dcfc:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801dd00:	4366      	muls	r6, r4
 801dd02:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801dd06:	1c74      	adds	r4, r6, #1
 801dd08:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801dd0c:	122e      	asrs	r6, r5, #8
 801dd0e:	1224      	asrs	r4, r4, #8
 801dd10:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801dd14:	00ed      	lsls	r5, r5, #3
 801dd16:	b2a7      	uxth	r7, r4
 801dd18:	43e4      	mvns	r4, r4
 801dd1a:	b2ed      	uxtb	r5, r5
 801dd1c:	b2e4      	uxtb	r4, r4
 801dd1e:	fb16 f604 	smulbb	r6, r6, r4
 801dd22:	fb15 f504 	smulbb	r5, r5, r4
 801dd26:	fb0c 6c07 	mla	ip, ip, r7, r6
 801dd2a:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801dd2e:	fb1a fa04 	smulbb	sl, sl, r4
 801dd32:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801dd36:	fa1f fc8c 	uxth.w	ip, ip
 801dd3a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801dd3e:	fa5f f989 	uxtb.w	r9, r9
 801dd42:	fb06 a607 	mla	r6, r6, r7, sl
 801dd46:	f10c 0401 	add.w	r4, ip, #1
 801dd4a:	fb09 5507 	mla	r5, r9, r7, r5
 801dd4e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801dd52:	9c03      	ldr	r4, [sp, #12]
 801dd54:	b2ad      	uxth	r5, r5
 801dd56:	b2b6      	uxth	r6, r6
 801dd58:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801dd5c:	f105 0a01 	add.w	sl, r5, #1
 801dd60:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801dd64:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dd68:	ea4a 0c0c 	orr.w	ip, sl, ip
 801dd6c:	f106 0a01 	add.w	sl, r6, #1
 801dd70:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801dd74:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dd78:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dd7c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801dd80:	f820 c004 	strh.w	ip, [r0, r4]
 801dd84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801dd86:	f108 38ff 	add.w	r8, r8, #4294967295
 801dd8a:	4421      	add	r1, r4
 801dd8c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dd8e:	4422      	add	r2, r4
 801dd90:	e750      	b.n	801dc34 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801dd92:	f04f 0900 	mov.w	r9, #0
 801dd96:	eba3 0409 	sub.w	r4, r3, r9
 801dd9a:	2c00      	cmp	r4, #0
 801dd9c:	f77f af4e 	ble.w	801dc3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801dda0:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801dda4:	140d      	asrs	r5, r1, #16
 801dda6:	1414      	asrs	r4, r2, #16
 801dda8:	fb06 5404 	mla	r4, r6, r4, r5
 801ddac:	9d02      	ldr	r5, [sp, #8]
 801ddae:	5d2e      	ldrb	r6, [r5, r4]
 801ddb0:	2e00      	cmp	r6, #0
 801ddb2:	d04c      	beq.n	801de4e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ddb4:	9d01      	ldr	r5, [sp, #4]
 801ddb6:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801ddba:	9c05      	ldr	r4, [sp, #20]
 801ddbc:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801ddc0:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ddc4:	4366      	muls	r6, r4
 801ddc6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801ddca:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ddce:	1c74      	adds	r4, r6, #1
 801ddd0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801ddd4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801ddd8:	122e      	asrs	r6, r5, #8
 801ddda:	1224      	asrs	r4, r4, #8
 801dddc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801dde0:	00ed      	lsls	r5, r5, #3
 801dde2:	b2a7      	uxth	r7, r4
 801dde4:	43e4      	mvns	r4, r4
 801dde6:	b2ed      	uxtb	r5, r5
 801dde8:	b2e4      	uxtb	r4, r4
 801ddea:	fb16 f604 	smulbb	r6, r6, r4
 801ddee:	fb15 f504 	smulbb	r5, r5, r4
 801ddf2:	fb0c 6c07 	mla	ip, ip, r7, r6
 801ddf6:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ddfa:	fb1a fa04 	smulbb	sl, sl, r4
 801ddfe:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801de02:	fa1f fc8c 	uxth.w	ip, ip
 801de06:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801de0a:	fa5f f888 	uxtb.w	r8, r8
 801de0e:	fb06 a607 	mla	r6, r6, r7, sl
 801de12:	f10c 0401 	add.w	r4, ip, #1
 801de16:	fb08 5507 	mla	r5, r8, r7, r5
 801de1a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801de1e:	b2ad      	uxth	r5, r5
 801de20:	b2b6      	uxth	r6, r6
 801de22:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801de26:	f105 0a01 	add.w	sl, r5, #1
 801de2a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801de2e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801de32:	ea4a 0c0c 	orr.w	ip, sl, ip
 801de36:	f106 0a01 	add.w	sl, r6, #1
 801de3a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801de3e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801de42:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801de46:	ea4c 0c0a 	orr.w	ip, ip, sl
 801de4a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801de4e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de50:	f109 0901 	add.w	r9, r9, #1
 801de54:	4421      	add	r1, r4
 801de56:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801de58:	4422      	add	r2, r4
 801de5a:	e79c      	b.n	801dd96 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801de5c:	b007      	add	sp, #28
 801de5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de62 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de66:	b085      	sub	sp, #20
 801de68:	468b      	mov	fp, r1
 801de6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de70:	9203      	str	r2, [sp, #12]
 801de72:	6861      	ldr	r1, [r4, #4]
 801de74:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801de78:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801de7c:	fb01 2000 	mla	r0, r1, r0, r2
 801de80:	6822      	ldr	r2, [r4, #0]
 801de82:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801de86:	f8d8 2000 	ldr.w	r2, [r8]
 801de8a:	9200      	str	r2, [sp, #0]
 801de8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801de90:	9201      	str	r2, [sp, #4]
 801de92:	f1bb 0f00 	cmp.w	fp, #0
 801de96:	dc03      	bgt.n	801dea0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801de98:	9a03      	ldr	r2, [sp, #12]
 801de9a:	2a00      	cmp	r2, #0
 801de9c:	f340 8146 	ble.w	801e12c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801dea0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dea2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801dea6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801deaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801deac:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801deb0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	dd0e      	ble.n	801ded6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801deb8:	140c      	asrs	r4, r1, #16
 801deba:	d405      	bmi.n	801dec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801debc:	42bc      	cmp	r4, r7
 801debe:	da03      	bge.n	801dec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801dec0:	1414      	asrs	r4, r2, #16
 801dec2:	d401      	bmi.n	801dec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801dec4:	42b4      	cmp	r4, r6
 801dec6:	db07      	blt.n	801ded8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801dec8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801deca:	3b01      	subs	r3, #1
 801decc:	3002      	adds	r0, #2
 801dece:	4421      	add	r1, r4
 801ded0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ded2:	4422      	add	r2, r4
 801ded4:	e7ee      	b.n	801deb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ded6:	d017      	beq.n	801df08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ded8:	1e5c      	subs	r4, r3, #1
 801deda:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dedc:	fb05 1504 	mla	r5, r5, r4, r1
 801dee0:	142d      	asrs	r5, r5, #16
 801dee2:	d409      	bmi.n	801def8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dee4:	42bd      	cmp	r5, r7
 801dee6:	da07      	bge.n	801def8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801dee8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801deea:	fb05 2404 	mla	r4, r5, r4, r2
 801deee:	1424      	asrs	r4, r4, #16
 801def0:	d402      	bmi.n	801def8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801def2:	42b4      	cmp	r4, r6
 801def4:	f2c0 80b3 	blt.w	801e05e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801def8:	2600      	movs	r6, #0
 801defa:	199c      	adds	r4, r3, r6
 801defc:	2c00      	cmp	r4, #0
 801defe:	dc3e      	bgt.n	801df7e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801df00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801df04:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801df08:	f1bb 0f00 	cmp.w	fp, #0
 801df0c:	f340 810e 	ble.w	801e12c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801df10:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df1a:	f1bb 0b01 	subs.w	fp, fp, #1
 801df1e:	eeb0 6a62 	vmov.f32	s12, s5
 801df22:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801df26:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df2e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801df32:	eeb0 6a43 	vmov.f32	s12, s6
 801df36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801df3a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801df3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801df42:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df46:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df56:	ee12 2a90 	vmov	r2, s5
 801df5a:	eef0 2a47 	vmov.f32	s5, s14
 801df5e:	fb92 f3f3 	sdiv	r3, r2, r3
 801df62:	ee13 2a10 	vmov	r2, s6
 801df66:	9311      	str	r3, [sp, #68]	; 0x44
 801df68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df6a:	eeb0 3a67 	vmov.f32	s6, s15
 801df6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801df72:	9a03      	ldr	r2, [sp, #12]
 801df74:	9312      	str	r3, [sp, #72]	; 0x48
 801df76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df78:	bf08      	it	eq
 801df7a:	4613      	moveq	r3, r2
 801df7c:	e789      	b.n	801de92 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801df7e:	140f      	asrs	r7, r1, #16
 801df80:	d418      	bmi.n	801dfb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801df82:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801df86:	42bd      	cmp	r5, r7
 801df88:	dd14      	ble.n	801dfb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801df8a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801df8e:	d411      	bmi.n	801dfb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801df90:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801df94:	4564      	cmp	r4, ip
 801df96:	dd0d      	ble.n	801dfb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801df98:	b22d      	sxth	r5, r5
 801df9a:	9c01      	ldr	r4, [sp, #4]
 801df9c:	fb0c 7505 	mla	r5, ip, r5, r7
 801dfa0:	5d64      	ldrb	r4, [r4, r5]
 801dfa2:	2cff      	cmp	r4, #255	; 0xff
 801dfa4:	d10c      	bne.n	801dfc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801dfa6:	9c00      	ldr	r4, [sp, #0]
 801dfa8:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801dfac:	f06f 0401 	mvn.w	r4, #1
 801dfb0:	4374      	muls	r4, r6
 801dfb2:	5305      	strh	r5, [r0, r4]
 801dfb4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dfb6:	3e01      	subs	r6, #1
 801dfb8:	4421      	add	r1, r4
 801dfba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dfbc:	4422      	add	r2, r4
 801dfbe:	e79c      	b.n	801defa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801dfc0:	2c00      	cmp	r4, #0
 801dfc2:	d0f7      	beq.n	801dfb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801dfc4:	9f00      	ldr	r7, [sp, #0]
 801dfc6:	fa1f fc84 	uxth.w	ip, r4
 801dfca:	43e4      	mvns	r4, r4
 801dfcc:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801dfd0:	f06f 0501 	mvn.w	r5, #1
 801dfd4:	b2e4      	uxtb	r4, r4
 801dfd6:	4375      	muls	r5, r6
 801dfd8:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801dfdc:	9502      	str	r5, [sp, #8]
 801dfde:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801dfe2:	5b45      	ldrh	r5, [r0, r5]
 801dfe4:	122f      	asrs	r7, r5, #8
 801dfe6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801dfea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801dfee:	00ed      	lsls	r5, r5, #3
 801dff0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801dff4:	fb17 f704 	smulbb	r7, r7, r4
 801dff8:	b2ed      	uxtb	r5, r5
 801dffa:	fb1a fa04 	smulbb	sl, sl, r4
 801dffe:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801e002:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801e006:	fb15 f504 	smulbb	r5, r5, r4
 801e00a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801e00e:	fa1f fe8e 	uxth.w	lr, lr
 801e012:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e016:	fa5f f989 	uxtb.w	r9, r9
 801e01a:	fb07 a70c 	mla	r7, r7, ip, sl
 801e01e:	f10e 0401 	add.w	r4, lr, #1
 801e022:	fb09 550c 	mla	r5, r9, ip, r5
 801e026:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801e02a:	9c02      	ldr	r4, [sp, #8]
 801e02c:	b2ad      	uxth	r5, r5
 801e02e:	b2bf      	uxth	r7, r7
 801e030:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801e034:	f105 0a01 	add.w	sl, r5, #1
 801e038:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e03c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e040:	ea4a 0e0e 	orr.w	lr, sl, lr
 801e044:	f107 0a01 	add.w	sl, r7, #1
 801e048:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801e04c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e050:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e054:	ea4e 0e0a 	orr.w	lr, lr, sl
 801e058:	f820 e004 	strh.w	lr, [r0, r4]
 801e05c:	e7aa      	b.n	801dfb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801e05e:	f04f 0900 	mov.w	r9, #0
 801e062:	eba3 0409 	sub.w	r4, r3, r9
 801e066:	2c00      	cmp	r4, #0
 801e068:	f77f af4a 	ble.w	801df00 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e06c:	1414      	asrs	r4, r2, #16
 801e06e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801e072:	140d      	asrs	r5, r1, #16
 801e074:	fb06 5504 	mla	r5, r6, r4, r5
 801e078:	9c01      	ldr	r4, [sp, #4]
 801e07a:	5d64      	ldrb	r4, [r4, r5]
 801e07c:	2cff      	cmp	r4, #255	; 0xff
 801e07e:	d10b      	bne.n	801e098 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e080:	9c00      	ldr	r4, [sp, #0]
 801e082:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e086:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801e08a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e08c:	f109 0901 	add.w	r9, r9, #1
 801e090:	4421      	add	r1, r4
 801e092:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e094:	4422      	add	r2, r4
 801e096:	e7e4      	b.n	801e062 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e098:	2c00      	cmp	r4, #0
 801e09a:	d0f6      	beq.n	801e08a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e09c:	9e00      	ldr	r6, [sp, #0]
 801e09e:	b2a7      	uxth	r7, r4
 801e0a0:	43e4      	mvns	r4, r4
 801e0a2:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801e0a6:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801e0aa:	b2e4      	uxtb	r4, r4
 801e0ac:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e0b0:	122e      	asrs	r6, r5, #8
 801e0b2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e0b6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e0ba:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e0be:	00ed      	lsls	r5, r5, #3
 801e0c0:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801e0c4:	fb16 f604 	smulbb	r6, r6, r4
 801e0c8:	b2ed      	uxtb	r5, r5
 801e0ca:	fb1a fa04 	smulbb	sl, sl, r4
 801e0ce:	fb0c 6c07 	mla	ip, ip, r7, r6
 801e0d2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801e0d6:	fb15 f504 	smulbb	r5, r5, r4
 801e0da:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e0de:	fa1f fc8c 	uxth.w	ip, ip
 801e0e2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e0e6:	fa5f fe8e 	uxtb.w	lr, lr
 801e0ea:	fb06 a607 	mla	r6, r6, r7, sl
 801e0ee:	f10c 0401 	add.w	r4, ip, #1
 801e0f2:	fb0e 5507 	mla	r5, lr, r7, r5
 801e0f6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801e0fa:	b2ad      	uxth	r5, r5
 801e0fc:	b2b6      	uxth	r6, r6
 801e0fe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e102:	f105 0a01 	add.w	sl, r5, #1
 801e106:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801e10a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801e10e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801e112:	f106 0a01 	add.w	sl, r6, #1
 801e116:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801e11a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801e11e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801e122:	ea4c 0c0a 	orr.w	ip, ip, sl
 801e126:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801e12a:	e7ae      	b.n	801e08a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801e12c:	b005      	add	sp, #20
 801e12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e132 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e136:	b085      	sub	sp, #20
 801e138:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e13a:	9203      	str	r2, [sp, #12]
 801e13c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801e140:	9100      	str	r1, [sp, #0]
 801e142:	9201      	str	r2, [sp, #4]
 801e144:	6841      	ldr	r1, [r0, #4]
 801e146:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801e14a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e14e:	fb01 2404 	mla	r4, r1, r4, r2
 801e152:	6802      	ldr	r2, [r0, #0]
 801e154:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e158:	f8de 2000 	ldr.w	r2, [lr]
 801e15c:	9202      	str	r2, [sp, #8]
 801e15e:	9a01      	ldr	r2, [sp, #4]
 801e160:	43d6      	mvns	r6, r2
 801e162:	b2f6      	uxtb	r6, r6
 801e164:	9a00      	ldr	r2, [sp, #0]
 801e166:	2a00      	cmp	r2, #0
 801e168:	dc03      	bgt.n	801e172 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801e16a:	9a03      	ldr	r2, [sp, #12]
 801e16c:	2a00      	cmp	r2, #0
 801e16e:	f340 8124 	ble.w	801e3ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e172:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e174:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e178:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e17c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e17e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e182:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e186:	2b00      	cmp	r3, #0
 801e188:	dd0e      	ble.n	801e1a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e18a:	1408      	asrs	r0, r1, #16
 801e18c:	d405      	bmi.n	801e19a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e18e:	4560      	cmp	r0, ip
 801e190:	da03      	bge.n	801e19a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e192:	1410      	asrs	r0, r2, #16
 801e194:	d401      	bmi.n	801e19a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801e196:	42b8      	cmp	r0, r7
 801e198:	db07      	blt.n	801e1aa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801e19a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e19c:	3b01      	subs	r3, #1
 801e19e:	3402      	adds	r4, #2
 801e1a0:	4401      	add	r1, r0
 801e1a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e1a4:	4402      	add	r2, r0
 801e1a6:	e7ee      	b.n	801e186 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801e1a8:	d06e      	beq.n	801e288 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e1aa:	1e58      	subs	r0, r3, #1
 801e1ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e1ae:	fb05 1500 	mla	r5, r5, r0, r1
 801e1b2:	142d      	asrs	r5, r5, #16
 801e1b4:	d45c      	bmi.n	801e270 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e1b6:	4565      	cmp	r5, ip
 801e1b8:	da5a      	bge.n	801e270 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e1ba:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e1bc:	fb05 2000 	mla	r0, r5, r0, r2
 801e1c0:	1400      	asrs	r0, r0, #16
 801e1c2:	d455      	bmi.n	801e270 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e1c4:	42b8      	cmp	r0, r7
 801e1c6:	da53      	bge.n	801e270 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e1c8:	4699      	mov	r9, r3
 801e1ca:	46a2      	mov	sl, r4
 801e1cc:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801e1d0:	f1b9 0f00 	cmp.w	r9, #0
 801e1d4:	dd54      	ble.n	801e280 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e1d6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e1da:	140d      	asrs	r5, r1, #16
 801e1dc:	1410      	asrs	r0, r2, #16
 801e1de:	f109 39ff 	add.w	r9, r9, #4294967295
 801e1e2:	fb07 5000 	mla	r0, r7, r0, r5
 801e1e6:	9d02      	ldr	r5, [sp, #8]
 801e1e8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e1ec:	f8ba 5000 	ldrh.w	r5, [sl]
 801e1f0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e1f4:	122f      	asrs	r7, r5, #8
 801e1f6:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e1fa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e1fe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e202:	00ed      	lsls	r5, r5, #3
 801e204:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e208:	fb17 f706 	smulbb	r7, r7, r6
 801e20c:	b2ed      	uxtb	r5, r5
 801e20e:	fb18 f806 	smulbb	r8, r8, r6
 801e212:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e216:	10c7      	asrs	r7, r0, #3
 801e218:	fb15 f506 	smulbb	r5, r5, r6
 801e21c:	00c0      	lsls	r0, r0, #3
 801e21e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e222:	fa1f fc8c 	uxth.w	ip, ip
 801e226:	b2c0      	uxtb	r0, r0
 801e228:	fb07 870b 	mla	r7, r7, fp, r8
 801e22c:	fb00 500b 	mla	r0, r0, fp, r5
 801e230:	f10c 0501 	add.w	r5, ip, #1
 801e234:	b2bf      	uxth	r7, r7
 801e236:	b280      	uxth	r0, r0
 801e238:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e23c:	f107 0801 	add.w	r8, r7, #1
 801e240:	1c45      	adds	r5, r0, #1
 801e242:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e246:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e24a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e24e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e250:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e254:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e258:	4401      	add	r1, r0
 801e25a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e25e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e260:	ea45 0c0c 	orr.w	ip, r5, ip
 801e264:	4402      	add	r2, r0
 801e266:	ea4c 0c08 	orr.w	ip, ip, r8
 801e26a:	f82a cb02 	strh.w	ip, [sl], #2
 801e26e:	e7af      	b.n	801e1d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e270:	f04f 0800 	mov.w	r8, #0
 801e274:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801e278:	eb03 0008 	add.w	r0, r3, r8
 801e27c:	2800      	cmp	r0, #0
 801e27e:	dc41      	bgt.n	801e304 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801e280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e284:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e288:	9b00      	ldr	r3, [sp, #0]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	f340 8095 	ble.w	801e3ba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801e290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e296:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e29a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e29e:	eef0 6a62 	vmov.f32	s13, s5
 801e2a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e2a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e2ae:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801e2b2:	eef0 6a43 	vmov.f32	s13, s6
 801e2b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e2ba:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801e2be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e2c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e2c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e2ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e2ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e2d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e2d6:	ee12 2a90 	vmov	r2, s5
 801e2da:	eef0 2a47 	vmov.f32	s5, s14
 801e2de:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2e2:	ee13 2a10 	vmov	r2, s6
 801e2e6:	9311      	str	r3, [sp, #68]	; 0x44
 801e2e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2ea:	eeb0 3a67 	vmov.f32	s6, s15
 801e2ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2f2:	9312      	str	r3, [sp, #72]	; 0x48
 801e2f4:	9b00      	ldr	r3, [sp, #0]
 801e2f6:	9a03      	ldr	r2, [sp, #12]
 801e2f8:	3b01      	subs	r3, #1
 801e2fa:	9300      	str	r3, [sp, #0]
 801e2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e2fe:	bf08      	it	eq
 801e300:	4613      	moveq	r3, r2
 801e302:	e72f      	b.n	801e164 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801e304:	140f      	asrs	r7, r1, #16
 801e306:	d451      	bmi.n	801e3ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e308:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e30c:	42bd      	cmp	r5, r7
 801e30e:	dd4d      	ble.n	801e3ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e310:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e314:	d44a      	bmi.n	801e3ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e316:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e31a:	4560      	cmp	r0, ip
 801e31c:	dd46      	ble.n	801e3ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e31e:	b22d      	sxth	r5, r5
 801e320:	9802      	ldr	r0, [sp, #8]
 801e322:	fb0c 7505 	mla	r5, ip, r5, r7
 801e326:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801e32a:	f06f 0501 	mvn.w	r5, #1
 801e32e:	fb05 fb08 	mul.w	fp, r5, r8
 801e332:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e336:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e33a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e33e:	122f      	asrs	r7, r5, #8
 801e340:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e344:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e348:	00ed      	lsls	r5, r5, #3
 801e34a:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e34e:	fb17 f706 	smulbb	r7, r7, r6
 801e352:	b2ed      	uxtb	r5, r5
 801e354:	fb19 f906 	smulbb	r9, r9, r6
 801e358:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e35c:	10c7      	asrs	r7, r0, #3
 801e35e:	fb15 f506 	smulbb	r5, r5, r6
 801e362:	00c0      	lsls	r0, r0, #3
 801e364:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e368:	fa1f fc8c 	uxth.w	ip, ip
 801e36c:	b2c0      	uxtb	r0, r0
 801e36e:	fb07 970a 	mla	r7, r7, sl, r9
 801e372:	fb00 500a 	mla	r0, r0, sl, r5
 801e376:	f10c 0501 	add.w	r5, ip, #1
 801e37a:	b2bf      	uxth	r7, r7
 801e37c:	b280      	uxth	r0, r0
 801e37e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e382:	f107 0901 	add.w	r9, r7, #1
 801e386:	1c45      	adds	r5, r0, #1
 801e388:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e38c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e390:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e394:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e398:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e39c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e3a0:	ea45 0c0c 	orr.w	ip, r5, ip
 801e3a4:	ea4c 0c09 	orr.w	ip, ip, r9
 801e3a8:	f824 c00b 	strh.w	ip, [r4, fp]
 801e3ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e3ae:	f108 38ff 	add.w	r8, r8, #4294967295
 801e3b2:	4401      	add	r1, r0
 801e3b4:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e3b6:	4402      	add	r2, r0
 801e3b8:	e75e      	b.n	801e278 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801e3ba:	b005      	add	sp, #20
 801e3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3c0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c4:	b085      	sub	sp, #20
 801e3c6:	4693      	mov	fp, r2
 801e3c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e3cc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e3ce:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e3d0:	6870      	ldr	r0, [r6, #4]
 801e3d2:	9101      	str	r1, [sp, #4]
 801e3d4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e3d8:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e3dc:	fb00 2404 	mla	r4, r0, r4, r2
 801e3e0:	6832      	ldr	r2, [r6, #0]
 801e3e2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e3e6:	682a      	ldr	r2, [r5, #0]
 801e3e8:	9202      	str	r2, [sp, #8]
 801e3ea:	9a01      	ldr	r2, [sp, #4]
 801e3ec:	2a00      	cmp	r2, #0
 801e3ee:	dc03      	bgt.n	801e3f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e3f0:	f1bb 0f00 	cmp.w	fp, #0
 801e3f4:	f340 809a 	ble.w	801e52c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e3f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e3fa:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e3fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e402:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e404:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e408:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	dd0c      	ble.n	801e42a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801e410:	1406      	asrs	r6, r0, #16
 801e412:	d405      	bmi.n	801e420 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e414:	454e      	cmp	r6, r9
 801e416:	da03      	bge.n	801e420 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e418:	1416      	asrs	r6, r2, #16
 801e41a:	d401      	bmi.n	801e420 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e41c:	4546      	cmp	r6, r8
 801e41e:	db05      	blt.n	801e42c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e420:	4470      	add	r0, lr
 801e422:	4462      	add	r2, ip
 801e424:	3b01      	subs	r3, #1
 801e426:	3402      	adds	r4, #2
 801e428:	e7f0      	b.n	801e40c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e42a:	d00f      	beq.n	801e44c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e42c:	1e5e      	subs	r6, r3, #1
 801e42e:	fb0e 0706 	mla	r7, lr, r6, r0
 801e432:	143f      	asrs	r7, r7, #16
 801e434:	d541      	bpl.n	801e4ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e436:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e43a:	4698      	mov	r8, r3
 801e43c:	9603      	str	r6, [sp, #12]
 801e43e:	f1b8 0f00 	cmp.w	r8, #0
 801e442:	dc56      	bgt.n	801e4f2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801e444:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e448:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e44c:	9b01      	ldr	r3, [sp, #4]
 801e44e:	2b00      	cmp	r3, #0
 801e450:	dd6c      	ble.n	801e52c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801e452:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e458:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e45c:	eeb0 6a62 	vmov.f32	s12, s5
 801e460:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e464:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e468:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e46c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e470:	eeb0 6a43 	vmov.f32	s12, s6
 801e474:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e478:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e47c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e480:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e484:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e488:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e48c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e490:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e494:	ee12 2a90 	vmov	r2, s5
 801e498:	eef0 2a47 	vmov.f32	s5, s14
 801e49c:	fb92 fef3 	sdiv	lr, r2, r3
 801e4a0:	ee13 2a10 	vmov	r2, s6
 801e4a4:	eeb0 3a67 	vmov.f32	s6, s15
 801e4a8:	fb92 fcf3 	sdiv	ip, r2, r3
 801e4ac:	9b01      	ldr	r3, [sp, #4]
 801e4ae:	3b01      	subs	r3, #1
 801e4b0:	9301      	str	r3, [sp, #4]
 801e4b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4b4:	bf08      	it	eq
 801e4b6:	465b      	moveq	r3, fp
 801e4b8:	e797      	b.n	801e3ea <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e4ba:	454f      	cmp	r7, r9
 801e4bc:	dabb      	bge.n	801e436 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e4be:	fb0c 2606 	mla	r6, ip, r6, r2
 801e4c2:	1436      	asrs	r6, r6, #16
 801e4c4:	d4b7      	bmi.n	801e436 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e4c6:	4546      	cmp	r6, r8
 801e4c8:	dab5      	bge.n	801e436 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e4ca:	461e      	mov	r6, r3
 801e4cc:	46a0      	mov	r8, r4
 801e4ce:	2e00      	cmp	r6, #0
 801e4d0:	ddb8      	ble.n	801e444 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e4d2:	1417      	asrs	r7, r2, #16
 801e4d4:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e4d8:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e4dc:	9902      	ldr	r1, [sp, #8]
 801e4de:	4470      	add	r0, lr
 801e4e0:	4462      	add	r2, ip
 801e4e2:	fb0a 9707 	mla	r7, sl, r7, r9
 801e4e6:	3e01      	subs	r6, #1
 801e4e8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e4ec:	f828 7b02 	strh.w	r7, [r8], #2
 801e4f0:	e7ed      	b.n	801e4ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801e4f2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e4f6:	d414      	bmi.n	801e522 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e4f8:	68ae      	ldr	r6, [r5, #8]
 801e4fa:	454e      	cmp	r6, r9
 801e4fc:	dd11      	ble.n	801e522 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e4fe:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e502:	d40e      	bmi.n	801e522 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e504:	68ef      	ldr	r7, [r5, #12]
 801e506:	4557      	cmp	r7, sl
 801e508:	dd0b      	ble.n	801e522 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801e50a:	b236      	sxth	r6, r6
 801e50c:	f06f 0101 	mvn.w	r1, #1
 801e510:	9f02      	ldr	r7, [sp, #8]
 801e512:	fb0a 9606 	mla	r6, sl, r6, r9
 801e516:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e51a:	fb01 f608 	mul.w	r6, r1, r8
 801e51e:	9903      	ldr	r1, [sp, #12]
 801e520:	538f      	strh	r7, [r1, r6]
 801e522:	4470      	add	r0, lr
 801e524:	4462      	add	r2, ip
 801e526:	f108 38ff 	add.w	r8, r8, #4294967295
 801e52a:	e788      	b.n	801e43e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e52c:	b005      	add	sp, #20
 801e52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e532 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e536:	b087      	sub	sp, #28
 801e538:	468b      	mov	fp, r1
 801e53a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e53e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e540:	9203      	str	r2, [sp, #12]
 801e542:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e546:	6841      	ldr	r1, [r0, #4]
 801e548:	9204      	str	r2, [sp, #16]
 801e54a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801e54e:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801e552:	fb01 2505 	mla	r5, r1, r5, r2
 801e556:	6802      	ldr	r2, [r0, #0]
 801e558:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801e55c:	f8d9 2000 	ldr.w	r2, [r9]
 801e560:	9201      	str	r2, [sp, #4]
 801e562:	f1bb 0f00 	cmp.w	fp, #0
 801e566:	dc03      	bgt.n	801e570 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e568:	9a03      	ldr	r2, [sp, #12]
 801e56a:	2a00      	cmp	r2, #0
 801e56c:	f340 8158 	ble.w	801e820 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801e570:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e572:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801e576:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e57a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e57c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801e580:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e584:	2b00      	cmp	r3, #0
 801e586:	dd0e      	ble.n	801e5a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e588:	1402      	asrs	r2, r0, #16
 801e58a:	d405      	bmi.n	801e598 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e58c:	42ba      	cmp	r2, r7
 801e58e:	da03      	bge.n	801e598 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e590:	140a      	asrs	r2, r1, #16
 801e592:	d401      	bmi.n	801e598 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e594:	42b2      	cmp	r2, r6
 801e596:	db07      	blt.n	801e5a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e59a:	3b01      	subs	r3, #1
 801e59c:	3502      	adds	r5, #2
 801e59e:	4410      	add	r0, r2
 801e5a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e5a2:	4411      	add	r1, r2
 801e5a4:	e7ee      	b.n	801e584 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e5a6:	d017      	beq.n	801e5d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e5a8:	1e5a      	subs	r2, r3, #1
 801e5aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e5ac:	fb04 0402 	mla	r4, r4, r2, r0
 801e5b0:	1424      	asrs	r4, r4, #16
 801e5b2:	d409      	bmi.n	801e5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5b4:	42bc      	cmp	r4, r7
 801e5b6:	da07      	bge.n	801e5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5b8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e5ba:	fb04 1202 	mla	r2, r4, r2, r1
 801e5be:	1412      	asrs	r2, r2, #16
 801e5c0:	d402      	bmi.n	801e5c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5c2:	42b2      	cmp	r2, r6
 801e5c4:	f2c0 80bf 	blt.w	801e746 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801e5c8:	2700      	movs	r7, #0
 801e5ca:	19da      	adds	r2, r3, r7
 801e5cc:	2a00      	cmp	r2, #0
 801e5ce:	dc3e      	bgt.n	801e64e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e5d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e5d4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801e5d8:	f1bb 0f00 	cmp.w	fp, #0
 801e5dc:	f340 8120 	ble.w	801e820 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801e5e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e5e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e5ea:	f1bb 0b01 	subs.w	fp, fp, #1
 801e5ee:	eeb0 6a62 	vmov.f32	s12, s5
 801e5f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e5f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e5fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e5fe:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e602:	eeb0 6a43 	vmov.f32	s12, s6
 801e606:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e60a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e60e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e612:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e616:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e61a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e61e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e622:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e626:	ee12 2a90 	vmov	r2, s5
 801e62a:	eef0 2a47 	vmov.f32	s5, s14
 801e62e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e632:	ee13 2a10 	vmov	r2, s6
 801e636:	9313      	str	r3, [sp, #76]	; 0x4c
 801e638:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e63a:	eeb0 3a67 	vmov.f32	s6, s15
 801e63e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e642:	9a03      	ldr	r2, [sp, #12]
 801e644:	9314      	str	r3, [sp, #80]	; 0x50
 801e646:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e648:	bf08      	it	eq
 801e64a:	4613      	moveq	r3, r2
 801e64c:	e789      	b.n	801e562 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e64e:	1406      	asrs	r6, r0, #16
 801e650:	d42d      	bmi.n	801e6ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e652:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801e656:	42b4      	cmp	r4, r6
 801e658:	dd29      	ble.n	801e6ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e65a:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801e65e:	d426      	bmi.n	801e6ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e660:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801e664:	4562      	cmp	r2, ip
 801e666:	dd22      	ble.n	801e6ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e668:	b224      	sxth	r4, r4
 801e66a:	9a01      	ldr	r2, [sp, #4]
 801e66c:	fb0c 6404 	mla	r4, ip, r4, r6
 801e670:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801e674:	0e22      	lsrs	r2, r4, #24
 801e676:	d01a      	beq.n	801e6ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e678:	9e04      	ldr	r6, [sp, #16]
 801e67a:	4372      	muls	r2, r6
 801e67c:	1c56      	adds	r6, r2, #1
 801e67e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e682:	0a26      	lsrs	r6, r4, #8
 801e684:	1212      	asrs	r2, r2, #8
 801e686:	9605      	str	r6, [sp, #20]
 801e688:	2aff      	cmp	r2, #255	; 0xff
 801e68a:	d116      	bne.n	801e6ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801e68c:	f06f 0201 	mvn.w	r2, #1
 801e690:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801e694:	fb02 fc07 	mul.w	ip, r2, r7
 801e698:	0962      	lsrs	r2, r4, #5
 801e69a:	f026 0607 	bic.w	r6, r6, #7
 801e69e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e6a2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e6a6:	4316      	orrs	r6, r2
 801e6a8:	4326      	orrs	r6, r4
 801e6aa:	f825 600c 	strh.w	r6, [r5, ip]
 801e6ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e6b0:	3f01      	subs	r7, #1
 801e6b2:	4410      	add	r0, r2
 801e6b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e6b6:	4411      	add	r1, r2
 801e6b8:	e787      	b.n	801e5ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e6ba:	f06f 0601 	mvn.w	r6, #1
 801e6be:	fa1f fa82 	uxth.w	sl, r2
 801e6c2:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801e6c6:	43d2      	mvns	r2, r2
 801e6c8:	437e      	muls	r6, r7
 801e6ca:	b2e4      	uxtb	r4, r4
 801e6cc:	fb1c fc0a 	smulbb	ip, ip, sl
 801e6d0:	b2d2      	uxtb	r2, r2
 801e6d2:	f835 8006 	ldrh.w	r8, [r5, r6]
 801e6d6:	fb14 f40a 	smulbb	r4, r4, sl
 801e6da:	9602      	str	r6, [sp, #8]
 801e6dc:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801e6e0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801e6e4:	fb16 f60a 	smulbb	r6, r6, sl
 801e6e8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e6ec:	fb0e ce02 	mla	lr, lr, r2, ip
 801e6f0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801e6f4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801e6f8:	fa1f fe8e 	uxth.w	lr, lr
 801e6fc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e700:	fa5f f888 	uxtb.w	r8, r8
 801e704:	fb0c 6c02 	mla	ip, ip, r2, r6
 801e708:	fb08 4402 	mla	r4, r8, r2, r4
 801e70c:	f10e 0201 	add.w	r2, lr, #1
 801e710:	fa1f fc8c 	uxth.w	ip, ip
 801e714:	b2a4      	uxth	r4, r4
 801e716:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801e71a:	9a02      	ldr	r2, [sp, #8]
 801e71c:	1c66      	adds	r6, r4, #1
 801e71e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801e722:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801e726:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e72a:	ea46 0e0e 	orr.w	lr, r6, lr
 801e72e:	f10c 0601 	add.w	r6, ip, #1
 801e732:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801e736:	0976      	lsrs	r6, r6, #5
 801e738:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e73c:	ea4e 0e06 	orr.w	lr, lr, r6
 801e740:	f825 e002 	strh.w	lr, [r5, r2]
 801e744:	e7b3      	b.n	801e6ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801e746:	f04f 0800 	mov.w	r8, #0
 801e74a:	eba3 0208 	sub.w	r2, r3, r8
 801e74e:	2a00      	cmp	r2, #0
 801e750:	f77f af3e 	ble.w	801e5d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e754:	1404      	asrs	r4, r0, #16
 801e756:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801e75a:	140a      	asrs	r2, r1, #16
 801e75c:	fb06 4202 	mla	r2, r6, r2, r4
 801e760:	9c01      	ldr	r4, [sp, #4]
 801e762:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801e766:	0e22      	lsrs	r2, r4, #24
 801e768:	d015      	beq.n	801e796 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801e76a:	9e04      	ldr	r6, [sp, #16]
 801e76c:	4372      	muls	r2, r6
 801e76e:	1c56      	adds	r6, r2, #1
 801e770:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801e774:	0a26      	lsrs	r6, r4, #8
 801e776:	1212      	asrs	r2, r2, #8
 801e778:	2aff      	cmp	r2, #255	; 0xff
 801e77a:	d113      	bne.n	801e7a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801e77c:	0962      	lsrs	r2, r4, #5
 801e77e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801e782:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801e786:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e78a:	f026 0607 	bic.w	r6, r6, #7
 801e78e:	4316      	orrs	r6, r2
 801e790:	4326      	orrs	r6, r4
 801e792:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801e796:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e798:	f108 0801 	add.w	r8, r8, #1
 801e79c:	4410      	add	r0, r2
 801e79e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e7a0:	4411      	add	r1, r2
 801e7a2:	e7d2      	b.n	801e74a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801e7a4:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801e7a8:	fa1f fa82 	uxth.w	sl, r2
 801e7ac:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801e7b0:	43d2      	mvns	r2, r2
 801e7b2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e7b6:	fb17 f70a 	smulbb	r7, r7, sl
 801e7ba:	b2d2      	uxtb	r2, r2
 801e7bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e7c0:	b2e4      	uxtb	r4, r4
 801e7c2:	b2f6      	uxtb	r6, r6
 801e7c4:	fb0c 7c02 	mla	ip, ip, r2, r7
 801e7c8:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801e7cc:	fb14 f40a 	smulbb	r4, r4, sl
 801e7d0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e7d4:	fa1f fc8c 	uxth.w	ip, ip
 801e7d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e7dc:	fb16 f60a 	smulbb	r6, r6, sl
 801e7e0:	fa5f fe8e 	uxtb.w	lr, lr
 801e7e4:	fb0e 4402 	mla	r4, lr, r2, r4
 801e7e8:	fb07 6702 	mla	r7, r7, r2, r6
 801e7ec:	f10c 0201 	add.w	r2, ip, #1
 801e7f0:	b2a4      	uxth	r4, r4
 801e7f2:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801e7f6:	1c66      	adds	r6, r4, #1
 801e7f8:	b2bf      	uxth	r7, r7
 801e7fa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e7fe:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801e802:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e806:	ea46 0c0c 	orr.w	ip, r6, ip
 801e80a:	1c7e      	adds	r6, r7, #1
 801e80c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801e810:	0976      	lsrs	r6, r6, #5
 801e812:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e816:	ea4c 0c06 	orr.w	ip, ip, r6
 801e81a:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801e81e:	e7ba      	b.n	801e796 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801e820:	b007      	add	sp, #28
 801e822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e828 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e82c:	b085      	sub	sp, #20
 801e82e:	468b      	mov	fp, r1
 801e830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e834:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e836:	9203      	str	r2, [sp, #12]
 801e838:	6841      	ldr	r1, [r0, #4]
 801e83a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801e83e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e842:	fb01 2404 	mla	r4, r1, r4, r2
 801e846:	6802      	ldr	r2, [r0, #0]
 801e848:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e84c:	f8d8 2000 	ldr.w	r2, [r8]
 801e850:	9201      	str	r2, [sp, #4]
 801e852:	f1bb 0f00 	cmp.w	fp, #0
 801e856:	dc03      	bgt.n	801e860 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801e858:	9a03      	ldr	r2, [sp, #12]
 801e85a:	2a00      	cmp	r2, #0
 801e85c:	f340 814f 	ble.w	801eafe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801e860:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e862:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801e866:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e86a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e86c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801e870:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e874:	2b00      	cmp	r3, #0
 801e876:	dd0e      	ble.n	801e896 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e878:	1408      	asrs	r0, r1, #16
 801e87a:	d405      	bmi.n	801e888 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e87c:	42b8      	cmp	r0, r7
 801e87e:	da03      	bge.n	801e888 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e880:	1410      	asrs	r0, r2, #16
 801e882:	d401      	bmi.n	801e888 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801e884:	42b0      	cmp	r0, r6
 801e886:	db07      	blt.n	801e898 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e888:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e88a:	3b01      	subs	r3, #1
 801e88c:	3402      	adds	r4, #2
 801e88e:	4401      	add	r1, r0
 801e890:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e892:	4402      	add	r2, r0
 801e894:	e7ee      	b.n	801e874 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e896:	d017      	beq.n	801e8c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e898:	1e58      	subs	r0, r3, #1
 801e89a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e89c:	fb05 1500 	mla	r5, r5, r0, r1
 801e8a0:	142d      	asrs	r5, r5, #16
 801e8a2:	d409      	bmi.n	801e8b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8a4:	42bd      	cmp	r5, r7
 801e8a6:	da07      	bge.n	801e8b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801e8aa:	fb05 2000 	mla	r0, r5, r0, r2
 801e8ae:	1400      	asrs	r0, r0, #16
 801e8b0:	d402      	bmi.n	801e8b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e8b2:	42b0      	cmp	r0, r6
 801e8b4:	f2c0 80ba 	blt.w	801ea2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801e8b8:	2600      	movs	r6, #0
 801e8ba:	1998      	adds	r0, r3, r6
 801e8bc:	2800      	cmp	r0, #0
 801e8be:	dc3e      	bgt.n	801e93e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801e8c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e8c4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e8c8:	f1bb 0f00 	cmp.w	fp, #0
 801e8cc:	f340 8117 	ble.w	801eafe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801e8d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8da:	f1bb 0b01 	subs.w	fp, fp, #1
 801e8de:	eeb0 6a62 	vmov.f32	s12, s5
 801e8e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e8e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8ee:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e8f2:	eeb0 6a43 	vmov.f32	s12, s6
 801e8f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8fa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e8fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e902:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e906:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e90a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e90e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e912:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e916:	ee12 2a90 	vmov	r2, s5
 801e91a:	eef0 2a47 	vmov.f32	s5, s14
 801e91e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e922:	ee13 2a10 	vmov	r2, s6
 801e926:	9311      	str	r3, [sp, #68]	; 0x44
 801e928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e92a:	eeb0 3a67 	vmov.f32	s6, s15
 801e92e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e932:	9a03      	ldr	r2, [sp, #12]
 801e934:	9312      	str	r3, [sp, #72]	; 0x48
 801e936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e938:	bf08      	it	eq
 801e93a:	4613      	moveq	r3, r2
 801e93c:	e789      	b.n	801e852 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801e93e:	140f      	asrs	r7, r1, #16
 801e940:	d424      	bmi.n	801e98c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e942:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801e946:	42bd      	cmp	r5, r7
 801e948:	dd20      	ble.n	801e98c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e94a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e94e:	d41d      	bmi.n	801e98c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e950:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801e954:	4560      	cmp	r0, ip
 801e956:	dd19      	ble.n	801e98c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e958:	b22d      	sxth	r5, r5
 801e95a:	9801      	ldr	r0, [sp, #4]
 801e95c:	fb0c 7505 	mla	r5, ip, r5, r7
 801e960:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801e964:	0e07      	lsrs	r7, r0, #24
 801e966:	2fff      	cmp	r7, #255	; 0xff
 801e968:	d116      	bne.n	801e998 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801e96a:	f06f 0501 	mvn.w	r5, #1
 801e96e:	fb05 f706 	mul.w	r7, r5, r6
 801e972:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801e976:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801e97a:	0945      	lsrs	r5, r0, #5
 801e97c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801e980:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e984:	ea4c 0505 	orr.w	r5, ip, r5
 801e988:	4305      	orrs	r5, r0
 801e98a:	53e5      	strh	r5, [r4, r7]
 801e98c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e98e:	3e01      	subs	r6, #1
 801e990:	4401      	add	r1, r0
 801e992:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e994:	4402      	add	r2, r0
 801e996:	e790      	b.n	801e8ba <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e998:	b2fd      	uxtb	r5, r7
 801e99a:	2f00      	cmp	r7, #0
 801e99c:	d0f6      	beq.n	801e98c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e99e:	f06f 0701 	mvn.w	r7, #1
 801e9a2:	fa1f f985 	uxth.w	r9, r5
 801e9a6:	43ed      	mvns	r5, r5
 801e9a8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801e9ac:	4377      	muls	r7, r6
 801e9ae:	fb1a fa09 	smulbb	sl, sl, r9
 801e9b2:	b2ed      	uxtb	r5, r5
 801e9b4:	f834 e007 	ldrh.w	lr, [r4, r7]
 801e9b8:	9702      	str	r7, [sp, #8]
 801e9ba:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801e9be:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801e9c2:	fb17 f709 	smulbb	r7, r7, r9
 801e9c6:	b2c0      	uxtb	r0, r0
 801e9c8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e9cc:	fb10 f009 	smulbb	r0, r0, r9
 801e9d0:	fb0c 7c05 	mla	ip, ip, r5, r7
 801e9d4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801e9d8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e9dc:	fa1f fc8c 	uxth.w	ip, ip
 801e9e0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e9e4:	fa5f fe8e 	uxtb.w	lr, lr
 801e9e8:	fb07 a705 	mla	r7, r7, r5, sl
 801e9ec:	fb0e 0005 	mla	r0, lr, r5, r0
 801e9f0:	f10c 0501 	add.w	r5, ip, #1
 801e9f4:	b2bf      	uxth	r7, r7
 801e9f6:	b280      	uxth	r0, r0
 801e9f8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e9fc:	f100 0a01 	add.w	sl, r0, #1
 801ea00:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ea04:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ea08:	9802      	ldr	r0, [sp, #8]
 801ea0a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ea0e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ea12:	f107 0a01 	add.w	sl, r7, #1
 801ea16:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ea1a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ea1e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ea22:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ea26:	f824 c000 	strh.w	ip, [r4, r0]
 801ea2a:	e7af      	b.n	801e98c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ea2c:	f04f 0e00 	mov.w	lr, #0
 801ea30:	eba3 000e 	sub.w	r0, r3, lr
 801ea34:	2800      	cmp	r0, #0
 801ea36:	f77f af43 	ble.w	801e8c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ea3a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ea3e:	140d      	asrs	r5, r1, #16
 801ea40:	1410      	asrs	r0, r2, #16
 801ea42:	fb06 5000 	mla	r0, r6, r0, r5
 801ea46:	9d01      	ldr	r5, [sp, #4]
 801ea48:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ea4c:	0e2e      	lsrs	r6, r5, #24
 801ea4e:	2eff      	cmp	r6, #255	; 0xff
 801ea50:	d112      	bne.n	801ea78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ea52:	482c      	ldr	r0, [pc, #176]	; (801eb04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801ea54:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ea58:	0968      	lsrs	r0, r5, #5
 801ea5a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ea5e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ea62:	4330      	orrs	r0, r6
 801ea64:	4328      	orrs	r0, r5
 801ea66:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801ea6a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ea6c:	f10e 0e01 	add.w	lr, lr, #1
 801ea70:	4401      	add	r1, r0
 801ea72:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ea74:	4402      	add	r2, r0
 801ea76:	e7db      	b.n	801ea30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ea78:	b2f0      	uxtb	r0, r6
 801ea7a:	2e00      	cmp	r6, #0
 801ea7c:	d0f5      	beq.n	801ea6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ea7e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ea82:	fa1f f980 	uxth.w	r9, r0
 801ea86:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ea8a:	43c0      	mvns	r0, r0
 801ea8c:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ea90:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ea94:	fb16 f609 	smulbb	r6, r6, r9
 801ea98:	b2c0      	uxtb	r0, r0
 801ea9a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ea9e:	b2ed      	uxtb	r5, r5
 801eaa0:	fb1a fa09 	smulbb	sl, sl, r9
 801eaa4:	fb07 6700 	mla	r7, r7, r0, r6
 801eaa8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801eaac:	fb15 f509 	smulbb	r5, r5, r9
 801eab0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801eab4:	b2bf      	uxth	r7, r7
 801eab6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eaba:	fa5f fc8c 	uxtb.w	ip, ip
 801eabe:	fb06 a600 	mla	r6, r6, r0, sl
 801eac2:	fb0c 5500 	mla	r5, ip, r0, r5
 801eac6:	1c78      	adds	r0, r7, #1
 801eac8:	b2b6      	uxth	r6, r6
 801eaca:	b2ad      	uxth	r5, r5
 801eacc:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ead0:	f105 0a01 	add.w	sl, r5, #1
 801ead4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ead8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eadc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eae0:	ea4a 0707 	orr.w	r7, sl, r7
 801eae4:	f106 0a01 	add.w	sl, r6, #1
 801eae8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eaec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eaf0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eaf4:	ea47 070a 	orr.w	r7, r7, sl
 801eaf8:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801eafc:	e7b5      	b.n	801ea6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801eafe:	b005      	add	sp, #20
 801eb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb04:	fffff800 	.word	0xfffff800

0801eb08 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb0c:	b087      	sub	sp, #28
 801eb0e:	468b      	mov	fp, r1
 801eb10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eb14:	9815      	ldr	r0, [sp, #84]	; 0x54
 801eb16:	9203      	str	r2, [sp, #12]
 801eb18:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801eb1c:	6841      	ldr	r1, [r0, #4]
 801eb1e:	9204      	str	r2, [sp, #16]
 801eb20:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801eb24:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801eb28:	fb01 2404 	mla	r4, r1, r4, r2
 801eb2c:	6802      	ldr	r2, [r0, #0]
 801eb2e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eb32:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801eb36:	3201      	adds	r2, #1
 801eb38:	f022 0201 	bic.w	r2, r2, #1
 801eb3c:	9200      	str	r2, [sp, #0]
 801eb3e:	f8d9 2000 	ldr.w	r2, [r9]
 801eb42:	9201      	str	r2, [sp, #4]
 801eb44:	f1bb 0f00 	cmp.w	fp, #0
 801eb48:	dc03      	bgt.n	801eb52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801eb4a:	9a03      	ldr	r2, [sp, #12]
 801eb4c:	2a00      	cmp	r2, #0
 801eb4e:	f340 816a 	ble.w	801ee26 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801eb52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eb54:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801eb58:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eb5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eb5e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801eb62:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801eb66:	2b00      	cmp	r3, #0
 801eb68:	dd0e      	ble.n	801eb88 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801eb6a:	1402      	asrs	r2, r0, #16
 801eb6c:	d405      	bmi.n	801eb7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb6e:	42ba      	cmp	r2, r7
 801eb70:	da03      	bge.n	801eb7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb72:	140a      	asrs	r2, r1, #16
 801eb74:	d401      	bmi.n	801eb7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb76:	42b2      	cmp	r2, r6
 801eb78:	db07      	blt.n	801eb8a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801eb7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eb7c:	3b01      	subs	r3, #1
 801eb7e:	3402      	adds	r4, #2
 801eb80:	4410      	add	r0, r2
 801eb82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eb84:	4411      	add	r1, r2
 801eb86:	e7ee      	b.n	801eb66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801eb88:	d017      	beq.n	801ebba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801eb8a:	1e5a      	subs	r2, r3, #1
 801eb8c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801eb8e:	fb05 0502 	mla	r5, r5, r2, r0
 801eb92:	142d      	asrs	r5, r5, #16
 801eb94:	d409      	bmi.n	801ebaa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801eb96:	42bd      	cmp	r5, r7
 801eb98:	da07      	bge.n	801ebaa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801eb9a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801eb9c:	fb05 1202 	mla	r2, r5, r2, r1
 801eba0:	1412      	asrs	r2, r2, #16
 801eba2:	d402      	bmi.n	801ebaa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801eba4:	42b2      	cmp	r2, r6
 801eba6:	f2c0 80c8 	blt.w	801ed3a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801ebaa:	2700      	movs	r7, #0
 801ebac:	19da      	adds	r2, r3, r7
 801ebae:	2a00      	cmp	r2, #0
 801ebb0:	dc3e      	bgt.n	801ec30 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ebb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ebb6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ebba:	f1bb 0f00 	cmp.w	fp, #0
 801ebbe:	f340 8132 	ble.w	801ee26 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ebc2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ebc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ebc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ebcc:	f1bb 0b01 	subs.w	fp, fp, #1
 801ebd0:	eeb0 6a62 	vmov.f32	s12, s5
 801ebd4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ebd8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ebdc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebe0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ebe4:	eeb0 6a43 	vmov.f32	s12, s6
 801ebe8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ebec:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ebf0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ebf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ebf8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ebfc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ec00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ec04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ec08:	ee12 2a90 	vmov	r2, s5
 801ec0c:	eef0 2a47 	vmov.f32	s5, s14
 801ec10:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec14:	ee13 2a10 	vmov	r2, s6
 801ec18:	9313      	str	r3, [sp, #76]	; 0x4c
 801ec1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec1c:	eeb0 3a67 	vmov.f32	s6, s15
 801ec20:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec24:	9a03      	ldr	r2, [sp, #12]
 801ec26:	9314      	str	r3, [sp, #80]	; 0x50
 801ec28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec2a:	bf08      	it	eq
 801ec2c:	4613      	moveq	r3, r2
 801ec2e:	e789      	b.n	801eb44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ec30:	1405      	asrs	r5, r0, #16
 801ec32:	d436      	bmi.n	801eca2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ec34:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ec38:	42aa      	cmp	r2, r5
 801ec3a:	dd32      	ble.n	801eca2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ec3c:	140e      	asrs	r6, r1, #16
 801ec3e:	d430      	bmi.n	801eca2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ec40:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ec44:	42b2      	cmp	r2, r6
 801ec46:	dd2c      	ble.n	801eca2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ec48:	9a00      	ldr	r2, [sp, #0]
 801ec4a:	fb06 5502 	mla	r5, r6, r2, r5
 801ec4e:	9e01      	ldr	r6, [sp, #4]
 801ec50:	086a      	lsrs	r2, r5, #1
 801ec52:	5cb2      	ldrb	r2, [r6, r2]
 801ec54:	07ee      	lsls	r6, r5, #31
 801ec56:	bf54      	ite	pl
 801ec58:	f002 020f 	andpl.w	r2, r2, #15
 801ec5c:	1112      	asrmi	r2, r2, #4
 801ec5e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ec62:	b2d2      	uxtb	r2, r2
 801ec64:	b1ea      	cbz	r2, 801eca2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ec66:	9d04      	ldr	r5, [sp, #16]
 801ec68:	436a      	muls	r2, r5
 801ec6a:	1c55      	adds	r5, r2, #1
 801ec6c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ec70:	4d6e      	ldr	r5, [pc, #440]	; (801ee2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ec72:	1212      	asrs	r2, r2, #8
 801ec74:	682d      	ldr	r5, [r5, #0]
 801ec76:	2aff      	cmp	r2, #255	; 0xff
 801ec78:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ec7c:	9605      	str	r6, [sp, #20]
 801ec7e:	d116      	bne.n	801ecae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ec80:	f06f 0201 	mvn.w	r2, #1
 801ec84:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801ec88:	fb02 fc07 	mul.w	ip, r2, r7
 801ec8c:	096a      	lsrs	r2, r5, #5
 801ec8e:	f026 0607 	bic.w	r6, r6, #7
 801ec92:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ec96:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ec9a:	4316      	orrs	r6, r2
 801ec9c:	432e      	orrs	r6, r5
 801ec9e:	f824 600c 	strh.w	r6, [r4, ip]
 801eca2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eca4:	3f01      	subs	r7, #1
 801eca6:	4410      	add	r0, r2
 801eca8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ecaa:	4411      	add	r1, r2
 801ecac:	e77e      	b.n	801ebac <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ecae:	f06f 0601 	mvn.w	r6, #1
 801ecb2:	fa1f fa82 	uxth.w	sl, r2
 801ecb6:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801ecba:	43d2      	mvns	r2, r2
 801ecbc:	437e      	muls	r6, r7
 801ecbe:	b2ed      	uxtb	r5, r5
 801ecc0:	fb1c fc0a 	smulbb	ip, ip, sl
 801ecc4:	b2d2      	uxtb	r2, r2
 801ecc6:	f834 8006 	ldrh.w	r8, [r4, r6]
 801ecca:	fb15 f50a 	smulbb	r5, r5, sl
 801ecce:	9602      	str	r6, [sp, #8]
 801ecd0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801ecd4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801ecd8:	fb16 f60a 	smulbb	r6, r6, sl
 801ecdc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801ece0:	fb0e ce02 	mla	lr, lr, r2, ip
 801ece4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801ece8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ecec:	fa1f fe8e 	uxth.w	lr, lr
 801ecf0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ecf4:	fa5f f888 	uxtb.w	r8, r8
 801ecf8:	fb0c 6c02 	mla	ip, ip, r2, r6
 801ecfc:	fb08 5502 	mla	r5, r8, r2, r5
 801ed00:	f10e 0201 	add.w	r2, lr, #1
 801ed04:	fa1f fc8c 	uxth.w	ip, ip
 801ed08:	b2ad      	uxth	r5, r5
 801ed0a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801ed0e:	9a02      	ldr	r2, [sp, #8]
 801ed10:	1c6e      	adds	r6, r5, #1
 801ed12:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801ed16:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 801ed1a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ed1e:	ea46 0e0e 	orr.w	lr, r6, lr
 801ed22:	f10c 0601 	add.w	r6, ip, #1
 801ed26:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801ed2a:	0976      	lsrs	r6, r6, #5
 801ed2c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ed30:	ea4e 0e06 	orr.w	lr, lr, r6
 801ed34:	f824 e002 	strh.w	lr, [r4, r2]
 801ed38:	e7b3      	b.n	801eca2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ed3a:	f04f 0800 	mov.w	r8, #0
 801ed3e:	eba3 0208 	sub.w	r2, r3, r8
 801ed42:	2a00      	cmp	r2, #0
 801ed44:	f77f af35 	ble.w	801ebb2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ed48:	1402      	asrs	r2, r0, #16
 801ed4a:	9e00      	ldr	r6, [sp, #0]
 801ed4c:	140d      	asrs	r5, r1, #16
 801ed4e:	fb06 2505 	mla	r5, r6, r5, r2
 801ed52:	9e01      	ldr	r6, [sp, #4]
 801ed54:	086a      	lsrs	r2, r5, #1
 801ed56:	07ed      	lsls	r5, r5, #31
 801ed58:	5cb2      	ldrb	r2, [r6, r2]
 801ed5a:	bf54      	ite	pl
 801ed5c:	f002 020f 	andpl.w	r2, r2, #15
 801ed60:	1112      	asrmi	r2, r2, #4
 801ed62:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ed66:	b2d2      	uxtb	r2, r2
 801ed68:	b1c2      	cbz	r2, 801ed9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ed6a:	9d04      	ldr	r5, [sp, #16]
 801ed6c:	436a      	muls	r2, r5
 801ed6e:	1c55      	adds	r5, r2, #1
 801ed70:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ed74:	4d2d      	ldr	r5, [pc, #180]	; (801ee2c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ed76:	1212      	asrs	r2, r2, #8
 801ed78:	682e      	ldr	r6, [r5, #0]
 801ed7a:	2aff      	cmp	r2, #255	; 0xff
 801ed7c:	ea4f 2516 	mov.w	r5, r6, lsr #8
 801ed80:	d113      	bne.n	801edaa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801ed82:	0972      	lsrs	r2, r6, #5
 801ed84:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801ed88:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801ed8c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ed90:	f025 0507 	bic.w	r5, r5, #7
 801ed94:	4315      	orrs	r5, r2
 801ed96:	4335      	orrs	r5, r6
 801ed98:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 801ed9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ed9e:	f108 0801 	add.w	r8, r8, #1
 801eda2:	4410      	add	r0, r2
 801eda4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eda6:	4411      	add	r1, r2
 801eda8:	e7c9      	b.n	801ed3e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801edaa:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801edae:	fa1f fa82 	uxth.w	sl, r2
 801edb2:	f3c6 4707 	ubfx	r7, r6, #16, #8
 801edb6:	43d2      	mvns	r2, r2
 801edb8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801edbc:	fb17 f70a 	smulbb	r7, r7, sl
 801edc0:	b2d2      	uxtb	r2, r2
 801edc2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801edc6:	b2f6      	uxtb	r6, r6
 801edc8:	b2ed      	uxtb	r5, r5
 801edca:	fb0c 7c02 	mla	ip, ip, r2, r7
 801edce:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801edd2:	fb16 f60a 	smulbb	r6, r6, sl
 801edd6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801edda:	fa1f fc8c 	uxth.w	ip, ip
 801edde:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ede2:	fb15 f50a 	smulbb	r5, r5, sl
 801ede6:	fa5f fe8e 	uxtb.w	lr, lr
 801edea:	fb0e 6602 	mla	r6, lr, r2, r6
 801edee:	fb07 5702 	mla	r7, r7, r2, r5
 801edf2:	f10c 0201 	add.w	r2, ip, #1
 801edf6:	b2b6      	uxth	r6, r6
 801edf8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801edfc:	1c75      	adds	r5, r6, #1
 801edfe:	b2bf      	uxth	r7, r7
 801ee00:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ee04:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 801ee08:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ee0c:	ea45 0c0c 	orr.w	ip, r5, ip
 801ee10:	1c7d      	adds	r5, r7, #1
 801ee12:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 801ee16:	096d      	lsrs	r5, r5, #5
 801ee18:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ee1c:	ea4c 0c05 	orr.w	ip, ip, r5
 801ee20:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 801ee24:	e7ba      	b.n	801ed9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ee26:	b007      	add	sp, #28
 801ee28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee2c:	200150fc 	.word	0x200150fc

0801ee30 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee34:	b087      	sub	sp, #28
 801ee36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ee3a:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801f144 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 801ee3e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ee40:	9101      	str	r1, [sp, #4]
 801ee42:	9205      	str	r2, [sp, #20]
 801ee44:	6841      	ldr	r1, [r0, #4]
 801ee46:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801ee4a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ee4e:	fb01 2404 	mla	r4, r1, r4, r2
 801ee52:	6802      	ldr	r2, [r0, #0]
 801ee54:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ee58:	f8db 2008 	ldr.w	r2, [fp, #8]
 801ee5c:	3201      	adds	r2, #1
 801ee5e:	f022 0201 	bic.w	r2, r2, #1
 801ee62:	9202      	str	r2, [sp, #8]
 801ee64:	f8db 2000 	ldr.w	r2, [fp]
 801ee68:	9203      	str	r2, [sp, #12]
 801ee6a:	9a01      	ldr	r2, [sp, #4]
 801ee6c:	2a00      	cmp	r2, #0
 801ee6e:	dc03      	bgt.n	801ee78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ee70:	9a05      	ldr	r2, [sp, #20]
 801ee72:	2a00      	cmp	r2, #0
 801ee74:	f340 8162 	ble.w	801f13c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801ee78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee7a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801ee7e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ee82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ee84:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801ee88:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ee8c:	2b00      	cmp	r3, #0
 801ee8e:	dd0e      	ble.n	801eeae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ee90:	1402      	asrs	r2, r0, #16
 801ee92:	d405      	bmi.n	801eea0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ee94:	42ba      	cmp	r2, r7
 801ee96:	da03      	bge.n	801eea0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ee98:	140a      	asrs	r2, r1, #16
 801ee9a:	d401      	bmi.n	801eea0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ee9c:	42b2      	cmp	r2, r6
 801ee9e:	db07      	blt.n	801eeb0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801eea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eea2:	3b01      	subs	r3, #1
 801eea4:	3402      	adds	r4, #2
 801eea6:	4410      	add	r0, r2
 801eea8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eeaa:	4411      	add	r1, r2
 801eeac:	e7ee      	b.n	801ee8c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801eeae:	d017      	beq.n	801eee0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801eeb0:	1e5a      	subs	r2, r3, #1
 801eeb2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801eeb4:	fb05 0502 	mla	r5, r5, r2, r0
 801eeb8:	142d      	asrs	r5, r5, #16
 801eeba:	d409      	bmi.n	801eed0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eebc:	42bd      	cmp	r5, r7
 801eebe:	da07      	bge.n	801eed0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eec0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801eec2:	fb05 1202 	mla	r2, r5, r2, r1
 801eec6:	1412      	asrs	r2, r2, #16
 801eec8:	d402      	bmi.n	801eed0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801eeca:	42b2      	cmp	r2, r6
 801eecc:	f2c0 80c3 	blt.w	801f056 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 801eed0:	2500      	movs	r5, #0
 801eed2:	195a      	adds	r2, r3, r5
 801eed4:	2a00      	cmp	r2, #0
 801eed6:	dc3f      	bgt.n	801ef58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801eed8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eedc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eee0:	9b01      	ldr	r3, [sp, #4]
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	f340 812a 	ble.w	801f13c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801eee8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eeec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eeee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eef2:	eeb0 6a62 	vmov.f32	s12, s5
 801eef6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eefa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eefe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef02:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ef06:	eeb0 6a43 	vmov.f32	s12, s6
 801ef0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef0e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ef12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef16:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ef2a:	ee12 2a90 	vmov	r2, s5
 801ef2e:	eef0 2a47 	vmov.f32	s5, s14
 801ef32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef36:	ee13 2a10 	vmov	r2, s6
 801ef3a:	9313      	str	r3, [sp, #76]	; 0x4c
 801ef3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef3e:	eeb0 3a67 	vmov.f32	s6, s15
 801ef42:	fb92 f3f3 	sdiv	r3, r2, r3
 801ef46:	9314      	str	r3, [sp, #80]	; 0x50
 801ef48:	9b01      	ldr	r3, [sp, #4]
 801ef4a:	9a05      	ldr	r2, [sp, #20]
 801ef4c:	3b01      	subs	r3, #1
 801ef4e:	9301      	str	r3, [sp, #4]
 801ef50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef52:	bf08      	it	eq
 801ef54:	4613      	moveq	r3, r2
 801ef56:	e788      	b.n	801ee6a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ef58:	1406      	asrs	r6, r0, #16
 801ef5a:	d42c      	bmi.n	801efb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef5c:	f8db 2008 	ldr.w	r2, [fp, #8]
 801ef60:	42b2      	cmp	r2, r6
 801ef62:	dd28      	ble.n	801efb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef64:	140f      	asrs	r7, r1, #16
 801ef66:	d426      	bmi.n	801efb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef68:	f8db 200c 	ldr.w	r2, [fp, #12]
 801ef6c:	42ba      	cmp	r2, r7
 801ef6e:	dd22      	ble.n	801efb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801ef70:	9a02      	ldr	r2, [sp, #8]
 801ef72:	fb07 6602 	mla	r6, r7, r2, r6
 801ef76:	9f03      	ldr	r7, [sp, #12]
 801ef78:	0872      	lsrs	r2, r6, #1
 801ef7a:	07f6      	lsls	r6, r6, #31
 801ef7c:	5cba      	ldrb	r2, [r7, r2]
 801ef7e:	bf54      	ite	pl
 801ef80:	f002 020f 	andpl.w	r2, r2, #15
 801ef84:	1112      	asrmi	r2, r2, #4
 801ef86:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ef8a:	b2d2      	uxtb	r2, r2
 801ef8c:	2aff      	cmp	r2, #255	; 0xff
 801ef8e:	d118      	bne.n	801efc2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ef90:	f06f 0601 	mvn.w	r6, #1
 801ef94:	f8d8 2000 	ldr.w	r2, [r8]
 801ef98:	fb06 f705 	mul.w	r7, r6, r5
 801ef9c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 801efa0:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 801efa4:	0956      	lsrs	r6, r2, #5
 801efa6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801efaa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801efae:	ea4c 0606 	orr.w	r6, ip, r6
 801efb2:	4316      	orrs	r6, r2
 801efb4:	53e6      	strh	r6, [r4, r7]
 801efb6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801efb8:	3d01      	subs	r5, #1
 801efba:	4410      	add	r0, r2
 801efbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801efbe:	4411      	add	r1, r2
 801efc0:	e787      	b.n	801eed2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801efc2:	2a00      	cmp	r2, #0
 801efc4:	d0f7      	beq.n	801efb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801efc6:	f06f 0601 	mvn.w	r6, #1
 801efca:	f8d8 c000 	ldr.w	ip, [r8]
 801efce:	fa1f f982 	uxth.w	r9, r2
 801efd2:	43d2      	mvns	r2, r2
 801efd4:	436e      	muls	r6, r5
 801efd6:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 801efda:	b2d2      	uxtb	r2, r2
 801efdc:	f834 e006 	ldrh.w	lr, [r4, r6]
 801efe0:	fb1a fa09 	smulbb	sl, sl, r9
 801efe4:	9604      	str	r6, [sp, #16]
 801efe6:	f3cc 4607 	ubfx	r6, ip, #16, #8
 801efea:	ea4f 272e 	mov.w	r7, lr, asr #8
 801efee:	fb16 f609 	smulbb	r6, r6, r9
 801eff2:	fa5f fc8c 	uxtb.w	ip, ip
 801eff6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801effa:	fb1c fc09 	smulbb	ip, ip, r9
 801effe:	fb07 6702 	mla	r7, r7, r2, r6
 801f002:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f006:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f00a:	b2bf      	uxth	r7, r7
 801f00c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f010:	fa5f fe8e 	uxtb.w	lr, lr
 801f014:	fb06 a602 	mla	r6, r6, r2, sl
 801f018:	fb0e cc02 	mla	ip, lr, r2, ip
 801f01c:	1c7a      	adds	r2, r7, #1
 801f01e:	b2b6      	uxth	r6, r6
 801f020:	fa1f fc8c 	uxth.w	ip, ip
 801f024:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f028:	9a04      	ldr	r2, [sp, #16]
 801f02a:	f10c 0a01 	add.w	sl, ip, #1
 801f02e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f032:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f036:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f03a:	ea4a 0707 	orr.w	r7, sl, r7
 801f03e:	f106 0a01 	add.w	sl, r6, #1
 801f042:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f046:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f04a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f04e:	ea47 070a 	orr.w	r7, r7, sl
 801f052:	52a7      	strh	r7, [r4, r2]
 801f054:	e7af      	b.n	801efb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f056:	f04f 0e00 	mov.w	lr, #0
 801f05a:	eba3 020e 	sub.w	r2, r3, lr
 801f05e:	2a00      	cmp	r2, #0
 801f060:	f77f af3a 	ble.w	801eed8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f064:	1402      	asrs	r2, r0, #16
 801f066:	9e02      	ldr	r6, [sp, #8]
 801f068:	140d      	asrs	r5, r1, #16
 801f06a:	fb06 2505 	mla	r5, r6, r5, r2
 801f06e:	9e03      	ldr	r6, [sp, #12]
 801f070:	086a      	lsrs	r2, r5, #1
 801f072:	07ed      	lsls	r5, r5, #31
 801f074:	5cb2      	ldrb	r2, [r6, r2]
 801f076:	bf54      	ite	pl
 801f078:	f002 020f 	andpl.w	r2, r2, #15
 801f07c:	1112      	asrmi	r2, r2, #4
 801f07e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f082:	b2d2      	uxtb	r2, r2
 801f084:	2aff      	cmp	r2, #255	; 0xff
 801f086:	d115      	bne.n	801f0b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801f088:	f8d8 5000 	ldr.w	r5, [r8]
 801f08c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 801f090:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 801f094:	096a      	lsrs	r2, r5, #5
 801f096:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f09a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f09e:	4332      	orrs	r2, r6
 801f0a0:	432a      	orrs	r2, r5
 801f0a2:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801f0a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f0a8:	f10e 0e01 	add.w	lr, lr, #1
 801f0ac:	4410      	add	r0, r2
 801f0ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f0b0:	4411      	add	r1, r2
 801f0b2:	e7d2      	b.n	801f05a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801f0b4:	2a00      	cmp	r2, #0
 801f0b6:	d0f6      	beq.n	801f0a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f0b8:	f8d8 7000 	ldr.w	r7, [r8]
 801f0bc:	fa1f f982 	uxth.w	r9, r2
 801f0c0:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801f0c4:	43d2      	mvns	r2, r2
 801f0c6:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801f0ca:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801f0ce:	ea4f 262c 	mov.w	r6, ip, asr #8
 801f0d2:	fb15 f509 	smulbb	r5, r5, r9
 801f0d6:	b2d2      	uxtb	r2, r2
 801f0d8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f0dc:	b2ff      	uxtb	r7, r7
 801f0de:	fb1a fa09 	smulbb	sl, sl, r9
 801f0e2:	fb06 5602 	mla	r6, r6, r2, r5
 801f0e6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801f0ea:	fb17 f709 	smulbb	r7, r7, r9
 801f0ee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f0f2:	b2b6      	uxth	r6, r6
 801f0f4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f0f8:	fa5f fc8c 	uxtb.w	ip, ip
 801f0fc:	fb05 a502 	mla	r5, r5, r2, sl
 801f100:	fb0c 7702 	mla	r7, ip, r2, r7
 801f104:	1c72      	adds	r2, r6, #1
 801f106:	b2ad      	uxth	r5, r5
 801f108:	b2bf      	uxth	r7, r7
 801f10a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f10e:	f107 0a01 	add.w	sl, r7, #1
 801f112:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f116:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f11a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f11e:	ea4a 0606 	orr.w	r6, sl, r6
 801f122:	f105 0a01 	add.w	sl, r5, #1
 801f126:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f12a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f12e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f132:	ea46 060a 	orr.w	r6, r6, sl
 801f136:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801f13a:	e7b4      	b.n	801f0a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f13c:	b007      	add	sp, #28
 801f13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f142:	bf00      	nop
 801f144:	200150fc 	.word	0x200150fc

0801f148 <_ZN8touchgfx8LCD16bppD1Ev>:
 801f148:	4770      	bx	lr

0801f14a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801f14a:	4770      	bx	lr

0801f14c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801f14c:	4770      	bx	lr

0801f14e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801f14e:	4770      	bx	lr

0801f150 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801f150:	4770      	bx	lr

0801f152 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f152:	4770      	bx	lr

0801f154 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f154:	4770      	bx	lr

0801f156 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f156:	4770      	bx	lr

0801f158 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f158:	4770      	bx	lr

0801f15a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f15a:	4770      	bx	lr

0801f15c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f15c:	4770      	bx	lr

0801f15e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f15e:	4770      	bx	lr

0801f160 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f160:	4770      	bx	lr

0801f162 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f162:	4770      	bx	lr

0801f164 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f164:	4770      	bx	lr

0801f166 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f166:	4770      	bx	lr

0801f168 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f168:	4770      	bx	lr

0801f16a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801f16a:	4770      	bx	lr

0801f16c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801f16c:	4770      	bx	lr

0801f16e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801f16e:	4770      	bx	lr

0801f170 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801f170:	4770      	bx	lr

0801f172 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f172:	4770      	bx	lr

0801f174 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801f174:	4770      	bx	lr

0801f176 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f176:	4770      	bx	lr

0801f178 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801f178:	4770      	bx	lr

0801f17a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801f17a:	4770      	bx	lr

0801f17c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801f17c:	4770      	bx	lr

0801f17e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801f17e:	4770      	bx	lr

0801f180 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801f180:	4770      	bx	lr

0801f182 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f186:	b088      	sub	sp, #32
 801f188:	4606      	mov	r6, r0
 801f18a:	4688      	mov	r8, r1
 801f18c:	4691      	mov	r9, r2
 801f18e:	ac08      	add	r4, sp, #32
 801f190:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801f194:	4620      	mov	r0, r4
 801f196:	f7fd fc65 	bl	801ca64 <_ZNK8touchgfx6Bitmap7getDataEv>
 801f19a:	6833      	ldr	r3, [r6, #0]
 801f19c:	4605      	mov	r5, r0
 801f19e:	4620      	mov	r0, r4
 801f1a0:	699f      	ldr	r7, [r3, #24]
 801f1a2:	f7fd fb73 	bl	801c88c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f1a6:	4682      	mov	sl, r0
 801f1a8:	4620      	mov	r0, r4
 801f1aa:	f7fd fba3 	bl	801c8f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f1ae:	9500      	str	r5, [sp, #0]
 801f1b0:	464b      	mov	r3, r9
 801f1b2:	4642      	mov	r2, r8
 801f1b4:	4631      	mov	r1, r6
 801f1b6:	e9cd a001 	strd	sl, r0, [sp, #4]
 801f1ba:	a806      	add	r0, sp, #24
 801f1bc:	47b8      	blx	r7
 801f1be:	4628      	mov	r0, r5
 801f1c0:	b008      	add	sp, #32
 801f1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801f1c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801f1c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f1cc:	2300      	movs	r3, #0
 801f1ce:	9300      	str	r3, [sp, #0]
 801f1d0:	4b3d      	ldr	r3, [pc, #244]	; (801f2c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801f1d2:	781b      	ldrb	r3, [r3, #0]
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	d137      	bne.n	801f248 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801f1d8:	4a3c      	ldr	r2, [pc, #240]	; (801f2cc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f1da:	f9b2 2000 	ldrsh.w	r2, [r2]
 801f1de:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	d132      	bne.n	801f24c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801f1e6:	4b3a      	ldr	r3, [pc, #232]	; (801f2d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f1e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f1ec:	ac02      	add	r4, sp, #8
 801f1ee:	6808      	ldr	r0, [r1, #0]
 801f1f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f1f4:	ab02      	add	r3, sp, #8
 801f1f6:	6849      	ldr	r1, [r1, #4]
 801f1f8:	4d36      	ldr	r5, [pc, #216]	; (801f2d4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801f1fa:	c303      	stmia	r3!, {r0, r1}
 801f1fc:	4669      	mov	r1, sp
 801f1fe:	4620      	mov	r0, r4
 801f200:	f7fa fcfe 	bl	8019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f204:	4668      	mov	r0, sp
 801f206:	f7fa fcd3 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f20a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f20e:	f8bd 2000 	ldrh.w	r2, [sp]
 801f212:	462f      	mov	r7, r5
 801f214:	6828      	ldr	r0, [r5, #0]
 801f216:	4413      	add	r3, r2
 801f218:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801f21c:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f220:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f224:	4413      	add	r3, r2
 801f226:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f22a:	6803      	ldr	r3, [r0, #0]
 801f22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f22e:	4798      	blx	r3
 801f230:	f010 0f01 	tst.w	r0, #1
 801f234:	d00c      	beq.n	801f250 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801f236:	6828      	ldr	r0, [r5, #0]
 801f238:	6803      	ldr	r3, [r0, #0]
 801f23a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801f23e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801f240:	4798      	blx	r3
 801f242:	b004      	add	sp, #16
 801f244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f248:	4a21      	ldr	r2, [pc, #132]	; (801f2d0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801f24a:	e7c6      	b.n	801f1da <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801f24c:	4b1f      	ldr	r3, [pc, #124]	; (801f2cc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f24e:	e7cb      	b.n	801f1e8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801f250:	6838      	ldr	r0, [r7, #0]
 801f252:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801f256:	6803      	ldr	r3, [r0, #0]
 801f258:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801f25c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801f260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f262:	4798      	blx	r3
 801f264:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f268:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801f26c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801f270:	fb16 3602 	smlabb	r6, r6, r2, r3
 801f274:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801f278:	6838      	ldr	r0, [r7, #0]
 801f27a:	6803      	ldr	r3, [r0, #0]
 801f27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f27e:	4798      	blx	r3
 801f280:	4a12      	ldr	r2, [pc, #72]	; (801f2cc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801f282:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801f286:	8813      	ldrh	r3, [r2, #0]
 801f288:	4691      	mov	r9, r2
 801f28a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801f28e:	435d      	muls	r5, r3
 801f290:	fb03 1404 	mla	r4, r3, r4, r1
 801f294:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f298:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f29c:	6838      	ldr	r0, [r7, #0]
 801f29e:	42ac      	cmp	r4, r5
 801f2a0:	6803      	ldr	r3, [r0, #0]
 801f2a2:	d20e      	bcs.n	801f2c2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801f2a4:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801f2a8:	4632      	mov	r2, r6
 801f2aa:	4643      	mov	r3, r8
 801f2ac:	4621      	mov	r1, r4
 801f2ae:	47d0      	blx	sl
 801f2b0:	f8b9 3000 	ldrh.w	r3, [r9]
 801f2b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f2b8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f2bc:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f2c0:	e7ec      	b.n	801f29c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801f2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f2c4:	4798      	blx	r3
 801f2c6:	e7bc      	b.n	801f242 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801f2c8:	200150ec 	.word	0x200150ec
 801f2cc:	200150ee 	.word	0x200150ee
 801f2d0:	200150f0 	.word	0x200150f0
 801f2d4:	200150f4 	.word	0x200150f4

0801f2d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801f2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2dc:	b08b      	sub	sp, #44	; 0x2c
 801f2de:	460f      	mov	r7, r1
 801f2e0:	4616      	mov	r6, r2
 801f2e2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801f2e6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801f2ea:	f1bb 0f00 	cmp.w	fp, #0
 801f2ee:	d049      	beq.n	801f384 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f2f0:	6810      	ldr	r0, [r2, #0]
 801f2f2:	ad06      	add	r5, sp, #24
 801f2f4:	6851      	ldr	r1, [r2, #4]
 801f2f6:	c503      	stmia	r5!, {r0, r1}
 801f2f8:	6818      	ldr	r0, [r3, #0]
 801f2fa:	ad08      	add	r5, sp, #32
 801f2fc:	6859      	ldr	r1, [r3, #4]
 801f2fe:	c503      	stmia	r5!, {r0, r1}
 801f300:	a806      	add	r0, sp, #24
 801f302:	f7fa fc55 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f306:	4631      	mov	r1, r6
 801f308:	a808      	add	r0, sp, #32
 801f30a:	f7fa fc79 	bl	8019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f30e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f312:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f316:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801f31a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801f31e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801f322:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801f326:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801f32a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801f32e:	4f5f      	ldr	r7, [pc, #380]	; (801f4ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f330:	440a      	add	r2, r1
 801f332:	6838      	ldr	r0, [r7, #0]
 801f334:	46b9      	mov	r9, r7
 801f336:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f33a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801f33e:	4413      	add	r3, r2
 801f340:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801f344:	6803      	ldr	r3, [r0, #0]
 801f346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f348:	4798      	blx	r3
 801f34a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f34e:	d01c      	beq.n	801f38a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801f350:	f010 0f04 	tst.w	r0, #4
 801f354:	d01d      	beq.n	801f392 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f356:	f8d9 0000 	ldr.w	r0, [r9]
 801f35a:	2700      	movs	r7, #0
 801f35c:	b2ad      	uxth	r5, r5
 801f35e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f362:	6801      	ldr	r1, [r0, #0]
 801f364:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f368:	f8cd b00c 	str.w	fp, [sp, #12]
 801f36c:	9501      	str	r5, [sp, #4]
 801f36e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801f372:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801f376:	9402      	str	r4, [sp, #8]
 801f378:	fa1f f488 	uxth.w	r4, r8
 801f37c:	9400      	str	r4, [sp, #0]
 801f37e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801f380:	4631      	mov	r1, r6
 801f382:	47a0      	blx	r4
 801f384:	b00b      	add	sp, #44	; 0x2c
 801f386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f38a:	b914      	cbnz	r4, 801f392 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801f38c:	f010 0f01 	tst.w	r0, #1
 801f390:	e7e0      	b.n	801f354 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801f392:	f8d9 0000 	ldr.w	r0, [r9]
 801f396:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801f39a:	6803      	ldr	r3, [r0, #0]
 801f39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f39e:	4798      	blx	r3
 801f3a0:	4b43      	ldr	r3, [pc, #268]	; (801f4b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801f3a2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801f3a6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801f3aa:	881a      	ldrh	r2, [r3, #0]
 801f3ac:	469a      	mov	sl, r3
 801f3ae:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f3b2:	fb05 f502 	mul.w	r5, r5, r2
 801f3b6:	fb02 1404 	mla	r4, r2, r4, r1
 801f3ba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f3be:	d059      	beq.n	801f474 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801f3c0:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801f3c4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f3c8:	fa1f f28b 	uxth.w	r2, fp
 801f3cc:	469e      	mov	lr, r3
 801f3ce:	fa1f f989 	uxth.w	r9, r9
 801f3d2:	42ac      	cmp	r4, r5
 801f3d4:	d264      	bcs.n	801f4a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f3d6:	eb04 0a07 	add.w	sl, r4, r7
 801f3da:	4554      	cmp	r4, sl
 801f3dc:	d23d      	bcs.n	801f45a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801f3de:	8821      	ldrh	r1, [r4, #0]
 801f3e0:	f836 3b02 	ldrh.w	r3, [r6], #2
 801f3e4:	1208      	asrs	r0, r1, #8
 801f3e6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f3ea:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f3ee:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801f3f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f3f6:	00c9      	lsls	r1, r1, #3
 801f3f8:	fb10 f009 	smulbb	r0, r0, r9
 801f3fc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f400:	b2c9      	uxtb	r1, r1
 801f402:	fb0c 0c02 	mla	ip, ip, r2, r0
 801f406:	10d8      	asrs	r0, r3, #3
 801f408:	fb1b fb09 	smulbb	fp, fp, r9
 801f40c:	00db      	lsls	r3, r3, #3
 801f40e:	fa1f fc8c 	uxth.w	ip, ip
 801f412:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f416:	fb11 f109 	smulbb	r1, r1, r9
 801f41a:	b2db      	uxtb	r3, r3
 801f41c:	fb00 b002 	mla	r0, r0, r2, fp
 801f420:	f10c 0b01 	add.w	fp, ip, #1
 801f424:	fb03 1302 	mla	r3, r3, r2, r1
 801f428:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801f42c:	b29b      	uxth	r3, r3
 801f42e:	b280      	uxth	r0, r0
 801f430:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801f434:	f103 0c01 	add.w	ip, r3, #1
 801f438:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801f43c:	1c43      	adds	r3, r0, #1
 801f43e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f442:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801f446:	0940      	lsrs	r0, r0, #5
 801f448:	ea4c 0c0b 	orr.w	ip, ip, fp
 801f44c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f450:	ea4c 0c00 	orr.w	ip, ip, r0
 801f454:	f824 cb02 	strh.w	ip, [r4], #2
 801f458:	e7bf      	b.n	801f3da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801f45a:	f8be 3000 	ldrh.w	r3, [lr]
 801f45e:	eba3 0308 	sub.w	r3, r3, r8
 801f462:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f466:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f46a:	eba3 0308 	sub.w	r3, r3, r8
 801f46e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f472:	e7ae      	b.n	801f3d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801f474:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f478:	f8d9 0000 	ldr.w	r0, [r9]
 801f47c:	42ac      	cmp	r4, r5
 801f47e:	6803      	ldr	r3, [r0, #0]
 801f480:	d20e      	bcs.n	801f4a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801f482:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801f486:	4632      	mov	r2, r6
 801f488:	463b      	mov	r3, r7
 801f48a:	4621      	mov	r1, r4
 801f48c:	47c0      	blx	r8
 801f48e:	f8ba 3000 	ldrh.w	r3, [sl]
 801f492:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f496:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f49a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f49e:	e7eb      	b.n	801f478 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801f4a0:	4b02      	ldr	r3, [pc, #8]	; (801f4ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801f4a2:	6818      	ldr	r0, [r3, #0]
 801f4a4:	6803      	ldr	r3, [r0, #0]
 801f4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4a8:	4798      	blx	r3
 801f4aa:	e76b      	b.n	801f384 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801f4ac:	200150f4 	.word	0x200150f4
 801f4b0:	200150ee 	.word	0x200150ee

0801f4b4 <_ZN8touchgfx8LCD16bppD0Ev>:
 801f4b4:	b510      	push	{r4, lr}
 801f4b6:	4604      	mov	r4, r0
 801f4b8:	2178      	movs	r1, #120	; 0x78
 801f4ba:	f008 ffe9 	bl	8028490 <_ZdlPvj>
 801f4be:	4620      	mov	r0, r4
 801f4c0:	bd10      	pop	{r4, pc}

0801f4c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f4c2:	b510      	push	{r4, lr}
 801f4c4:	4604      	mov	r4, r0
 801f4c6:	2104      	movs	r1, #4
 801f4c8:	f008 ffe2 	bl	8028490 <_ZdlPvj>
 801f4cc:	4620      	mov	r0, r4
 801f4ce:	bd10      	pop	{r4, pc}

0801f4d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f4d0:	b510      	push	{r4, lr}
 801f4d2:	4604      	mov	r4, r0
 801f4d4:	2104      	movs	r1, #4
 801f4d6:	f008 ffdb 	bl	8028490 <_ZdlPvj>
 801f4da:	4620      	mov	r0, r4
 801f4dc:	bd10      	pop	{r4, pc}

0801f4de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f4de:	b510      	push	{r4, lr}
 801f4e0:	4604      	mov	r4, r0
 801f4e2:	2104      	movs	r1, #4
 801f4e4:	f008 ffd4 	bl	8028490 <_ZdlPvj>
 801f4e8:	4620      	mov	r0, r4
 801f4ea:	bd10      	pop	{r4, pc}

0801f4ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f4ec:	b510      	push	{r4, lr}
 801f4ee:	4604      	mov	r4, r0
 801f4f0:	2104      	movs	r1, #4
 801f4f2:	f008 ffcd 	bl	8028490 <_ZdlPvj>
 801f4f6:	4620      	mov	r0, r4
 801f4f8:	bd10      	pop	{r4, pc}

0801f4fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f4fa:	b510      	push	{r4, lr}
 801f4fc:	4604      	mov	r4, r0
 801f4fe:	2104      	movs	r1, #4
 801f500:	f008 ffc6 	bl	8028490 <_ZdlPvj>
 801f504:	4620      	mov	r0, r4
 801f506:	bd10      	pop	{r4, pc}

0801f508 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801f508:	b510      	push	{r4, lr}
 801f50a:	4604      	mov	r4, r0
 801f50c:	2104      	movs	r1, #4
 801f50e:	f008 ffbf 	bl	8028490 <_ZdlPvj>
 801f512:	4620      	mov	r0, r4
 801f514:	bd10      	pop	{r4, pc}

0801f516 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f516:	b510      	push	{r4, lr}
 801f518:	4604      	mov	r4, r0
 801f51a:	2104      	movs	r1, #4
 801f51c:	f008 ffb8 	bl	8028490 <_ZdlPvj>
 801f520:	4620      	mov	r0, r4
 801f522:	bd10      	pop	{r4, pc}

0801f524 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801f524:	b510      	push	{r4, lr}
 801f526:	4604      	mov	r4, r0
 801f528:	2104      	movs	r1, #4
 801f52a:	f008 ffb1 	bl	8028490 <_ZdlPvj>
 801f52e:	4620      	mov	r0, r4
 801f530:	bd10      	pop	{r4, pc}

0801f532 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f532:	b510      	push	{r4, lr}
 801f534:	4604      	mov	r4, r0
 801f536:	2104      	movs	r1, #4
 801f538:	f008 ffaa 	bl	8028490 <_ZdlPvj>
 801f53c:	4620      	mov	r0, r4
 801f53e:	bd10      	pop	{r4, pc}

0801f540 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f540:	b510      	push	{r4, lr}
 801f542:	4604      	mov	r4, r0
 801f544:	2104      	movs	r1, #4
 801f546:	f008 ffa3 	bl	8028490 <_ZdlPvj>
 801f54a:	4620      	mov	r0, r4
 801f54c:	bd10      	pop	{r4, pc}

0801f54e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f54e:	b510      	push	{r4, lr}
 801f550:	4604      	mov	r4, r0
 801f552:	2104      	movs	r1, #4
 801f554:	f008 ff9c 	bl	8028490 <_ZdlPvj>
 801f558:	4620      	mov	r0, r4
 801f55a:	bd10      	pop	{r4, pc}

0801f55c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f55c:	b510      	push	{r4, lr}
 801f55e:	4604      	mov	r4, r0
 801f560:	2104      	movs	r1, #4
 801f562:	f008 ff95 	bl	8028490 <_ZdlPvj>
 801f566:	4620      	mov	r0, r4
 801f568:	bd10      	pop	{r4, pc}

0801f56a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801f56a:	b510      	push	{r4, lr}
 801f56c:	4604      	mov	r4, r0
 801f56e:	2104      	movs	r1, #4
 801f570:	f008 ff8e 	bl	8028490 <_ZdlPvj>
 801f574:	4620      	mov	r0, r4
 801f576:	bd10      	pop	{r4, pc}

0801f578 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801f578:	b510      	push	{r4, lr}
 801f57a:	4604      	mov	r4, r0
 801f57c:	2104      	movs	r1, #4
 801f57e:	f008 ff87 	bl	8028490 <_ZdlPvj>
 801f582:	4620      	mov	r0, r4
 801f584:	bd10      	pop	{r4, pc}

0801f586 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f586:	b510      	push	{r4, lr}
 801f588:	4604      	mov	r4, r0
 801f58a:	2104      	movs	r1, #4
 801f58c:	f008 ff80 	bl	8028490 <_ZdlPvj>
 801f590:	4620      	mov	r0, r4
 801f592:	bd10      	pop	{r4, pc}

0801f594 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f594:	b510      	push	{r4, lr}
 801f596:	4604      	mov	r4, r0
 801f598:	2104      	movs	r1, #4
 801f59a:	f008 ff79 	bl	8028490 <_ZdlPvj>
 801f59e:	4620      	mov	r0, r4
 801f5a0:	bd10      	pop	{r4, pc}

0801f5a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801f5a2:	b510      	push	{r4, lr}
 801f5a4:	4604      	mov	r4, r0
 801f5a6:	2104      	movs	r1, #4
 801f5a8:	f008 ff72 	bl	8028490 <_ZdlPvj>
 801f5ac:	4620      	mov	r0, r4
 801f5ae:	bd10      	pop	{r4, pc}

0801f5b0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801f5b0:	b510      	push	{r4, lr}
 801f5b2:	4604      	mov	r4, r0
 801f5b4:	2104      	movs	r1, #4
 801f5b6:	f008 ff6b 	bl	8028490 <_ZdlPvj>
 801f5ba:	4620      	mov	r0, r4
 801f5bc:	bd10      	pop	{r4, pc}

0801f5be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f5be:	b510      	push	{r4, lr}
 801f5c0:	4604      	mov	r4, r0
 801f5c2:	2104      	movs	r1, #4
 801f5c4:	f008 ff64 	bl	8028490 <_ZdlPvj>
 801f5c8:	4620      	mov	r0, r4
 801f5ca:	bd10      	pop	{r4, pc}

0801f5cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f5cc:	b510      	push	{r4, lr}
 801f5ce:	4604      	mov	r4, r0
 801f5d0:	2104      	movs	r1, #4
 801f5d2:	f008 ff5d 	bl	8028490 <_ZdlPvj>
 801f5d6:	4620      	mov	r0, r4
 801f5d8:	bd10      	pop	{r4, pc}

0801f5da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801f5da:	b510      	push	{r4, lr}
 801f5dc:	4604      	mov	r4, r0
 801f5de:	2104      	movs	r1, #4
 801f5e0:	f008 ff56 	bl	8028490 <_ZdlPvj>
 801f5e4:	4620      	mov	r0, r4
 801f5e6:	bd10      	pop	{r4, pc}

0801f5e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801f5e8:	b510      	push	{r4, lr}
 801f5ea:	4604      	mov	r4, r0
 801f5ec:	2104      	movs	r1, #4
 801f5ee:	f008 ff4f 	bl	8028490 <_ZdlPvj>
 801f5f2:	4620      	mov	r0, r4
 801f5f4:	bd10      	pop	{r4, pc}

0801f5f6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801f5f6:	b510      	push	{r4, lr}
 801f5f8:	4604      	mov	r4, r0
 801f5fa:	2104      	movs	r1, #4
 801f5fc:	f008 ff48 	bl	8028490 <_ZdlPvj>
 801f600:	4620      	mov	r0, r4
 801f602:	bd10      	pop	{r4, pc}

0801f604 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801f604:	b510      	push	{r4, lr}
 801f606:	4604      	mov	r4, r0
 801f608:	2104      	movs	r1, #4
 801f60a:	f008 ff41 	bl	8028490 <_ZdlPvj>
 801f60e:	4620      	mov	r0, r4
 801f610:	bd10      	pop	{r4, pc}

0801f612 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801f612:	b510      	push	{r4, lr}
 801f614:	4604      	mov	r4, r0
 801f616:	2104      	movs	r1, #4
 801f618:	f008 ff3a 	bl	8028490 <_ZdlPvj>
 801f61c:	4620      	mov	r0, r4
 801f61e:	bd10      	pop	{r4, pc}

0801f620 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801f620:	b510      	push	{r4, lr}
 801f622:	4604      	mov	r4, r0
 801f624:	2104      	movs	r1, #4
 801f626:	f008 ff33 	bl	8028490 <_ZdlPvj>
 801f62a:	4620      	mov	r0, r4
 801f62c:	bd10      	pop	{r4, pc}

0801f62e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801f62e:	b510      	push	{r4, lr}
 801f630:	4604      	mov	r4, r0
 801f632:	2104      	movs	r1, #4
 801f634:	f008 ff2c 	bl	8028490 <_ZdlPvj>
 801f638:	4620      	mov	r0, r4
 801f63a:	bd10      	pop	{r4, pc}

0801f63c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801f63c:	b510      	push	{r4, lr}
 801f63e:	4604      	mov	r4, r0
 801f640:	2104      	movs	r1, #4
 801f642:	f008 ff25 	bl	8028490 <_ZdlPvj>
 801f646:	4620      	mov	r0, r4
 801f648:	bd10      	pop	{r4, pc}
	...

0801f64c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801f64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f650:	b091      	sub	sp, #68	; 0x44
 801f652:	469b      	mov	fp, r3
 801f654:	4616      	mov	r6, r2
 801f656:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f65a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801f65e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f662:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801f666:	4604      	mov	r4, r0
 801f668:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801f66c:	4640      	mov	r0, r8
 801f66e:	460d      	mov	r5, r1
 801f670:	4659      	mov	r1, fp
 801f672:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f676:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f67a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801f67e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801f682:	f7f7 fa3f 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 801f686:	4631      	mov	r1, r6
 801f688:	4640      	mov	r0, r8
 801f68a:	f7f7 fa3b 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 801f68e:	4b74      	ldr	r3, [pc, #464]	; (801f860 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801f690:	8818      	ldrh	r0, [r3, #0]
 801f692:	4b74      	ldr	r3, [pc, #464]	; (801f864 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801f694:	b202      	sxth	r2, r0
 801f696:	8819      	ldrh	r1, [r3, #0]
 801f698:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801f69c:	b20e      	sxth	r6, r1
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	da07      	bge.n	801f6b2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801f6a2:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801f6a6:	4463      	add	r3, ip
 801f6a8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801f6ac:	2300      	movs	r3, #0
 801f6ae:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801f6b2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801f6b6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801f6ba:	1ad2      	subs	r2, r2, r3
 801f6bc:	4594      	cmp	ip, r2
 801f6be:	bfc4      	itt	gt
 801f6c0:	1ac2      	subgt	r2, r0, r3
 801f6c2:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801f6c6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801f6ca:	2a00      	cmp	r2, #0
 801f6cc:	da07      	bge.n	801f6de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801f6ce:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801f6d2:	4462      	add	r2, ip
 801f6d4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801f6d8:	2200      	movs	r2, #0
 801f6da:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801f6de:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801f6e2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801f6e6:	eba6 060a 	sub.w	r6, r6, sl
 801f6ea:	42b2      	cmp	r2, r6
 801f6ec:	bfc4      	itt	gt
 801f6ee:	eba1 020a 	subgt.w	r2, r1, sl
 801f6f2:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801f6f6:	4a5c      	ldr	r2, [pc, #368]	; (801f868 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801f6f8:	7812      	ldrb	r2, [r2, #0]
 801f6fa:	b9a2      	cbnz	r2, 801f726 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801f6fc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801f700:	4286      	cmp	r6, r0
 801f702:	4640      	mov	r0, r8
 801f704:	9303      	str	r3, [sp, #12]
 801f706:	bf14      	ite	ne
 801f708:	2600      	movne	r6, #0
 801f70a:	2601      	moveq	r6, #1
 801f70c:	f7f7 fa3d 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f710:	9b03      	ldr	r3, [sp, #12]
 801f712:	b160      	cbz	r0, 801f72e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801f714:	2300      	movs	r3, #0
 801f716:	8023      	strh	r3, [r4, #0]
 801f718:	8063      	strh	r3, [r4, #2]
 801f71a:	80a3      	strh	r3, [r4, #4]
 801f71c:	4620      	mov	r0, r4
 801f71e:	80e3      	strh	r3, [r4, #6]
 801f720:	b011      	add	sp, #68	; 0x44
 801f722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f726:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801f72a:	428e      	cmp	r6, r1
 801f72c:	e7e9      	b.n	801f702 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801f72e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801f732:	a90e      	add	r1, sp, #56	; 0x38
 801f734:	900e      	str	r0, [sp, #56]	; 0x38
 801f736:	a80c      	add	r0, sp, #48	; 0x30
 801f738:	9205      	str	r2, [sp, #20]
 801f73a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801f73e:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801f742:	9206      	str	r2, [sp, #24]
 801f744:	f8bb 2000 	ldrh.w	r2, [fp]
 801f748:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801f74c:	1a9b      	subs	r3, r3, r2
 801f74e:	b21b      	sxth	r3, r3
 801f750:	9303      	str	r3, [sp, #12]
 801f752:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801f756:	f8df b118 	ldr.w	fp, [pc, #280]	; 801f870 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801f75a:	ebaa 0a03 	sub.w	sl, sl, r3
 801f75e:	fa0f f38a 	sxth.w	r3, sl
 801f762:	9304      	str	r3, [sp, #16]
 801f764:	9b03      	ldr	r3, [sp, #12]
 801f766:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801f76a:	9b04      	ldr	r3, [sp, #16]
 801f76c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f770:	9b05      	ldr	r3, [sp, #20]
 801f772:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801f776:	9b06      	ldr	r3, [sp, #24]
 801f778:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801f77c:	f7fa fa40 	bl	8019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f780:	4640      	mov	r0, r8
 801f782:	f7fa fa15 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f786:	a80e      	add	r0, sp, #56	; 0x38
 801f788:	f7fa fa12 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f78c:	4b37      	ldr	r3, [pc, #220]	; (801f86c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801f78e:	4628      	mov	r0, r5
 801f790:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801f794:	881b      	ldrh	r3, [r3, #0]
 801f796:	9307      	str	r3, [sp, #28]
 801f798:	682b      	ldr	r3, [r5, #0]
 801f79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f79c:	4798      	blx	r3
 801f79e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801f7a2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801f7a6:	4681      	mov	r9, r0
 801f7a8:	f8db 0000 	ldr.w	r0, [fp]
 801f7ac:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801f7b0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801f7b2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801f7b6:	6803      	ldr	r3, [r0, #0]
 801f7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f7ba:	4798      	blx	r3
 801f7bc:	4607      	mov	r7, r0
 801f7be:	f8db 0000 	ldr.w	r0, [fp]
 801f7c2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801f7c6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801f7ca:	6803      	ldr	r3, [r0, #0]
 801f7cc:	9109      	str	r1, [sp, #36]	; 0x24
 801f7ce:	9208      	str	r2, [sp, #32]
 801f7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f7d2:	4798      	blx	r3
 801f7d4:	f010 0f01 	tst.w	r0, #1
 801f7d8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801f7dc:	d012      	beq.n	801f804 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801f7de:	f8db 0000 	ldr.w	r0, [fp]
 801f7e2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f7e6:	6803      	ldr	r3, [r0, #0]
 801f7e8:	9200      	str	r2, [sp, #0]
 801f7ea:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801f7ec:	462b      	mov	r3, r5
 801f7ee:	e898 0006 	ldmia.w	r8, {r1, r2}
 801f7f2:	47b0      	blx	r6
 801f7f4:	9b03      	ldr	r3, [sp, #12]
 801f7f6:	8023      	strh	r3, [r4, #0]
 801f7f8:	9b04      	ldr	r3, [sp, #16]
 801f7fa:	8063      	strh	r3, [r4, #2]
 801f7fc:	9b05      	ldr	r3, [sp, #20]
 801f7fe:	80a3      	strh	r3, [r4, #4]
 801f800:	9b06      	ldr	r3, [sp, #24]
 801f802:	e78b      	b.n	801f71c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801f804:	fb09 f202 	mul.w	r2, r9, r2
 801f808:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f80c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801f810:	440f      	add	r7, r1
 801f812:	b166      	cbz	r6, 801f82e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801f814:	9a07      	ldr	r2, [sp, #28]
 801f816:	4592      	cmp	sl, r2
 801f818:	d109      	bne.n	801f82e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801f81a:	f8db 0000 	ldr.w	r0, [fp]
 801f81e:	fb09 f303 	mul.w	r3, r9, r3
 801f822:	4629      	mov	r1, r5
 801f824:	6802      	ldr	r2, [r0, #0]
 801f826:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801f828:	463a      	mov	r2, r7
 801f82a:	47b0      	blx	r6
 801f82c:	e7e2      	b.n	801f7f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801f82e:	fb0a f303 	mul.w	r3, sl, r3
 801f832:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801f836:	f8df b038 	ldr.w	fp, [pc, #56]	; 801f870 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801f83a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801f83e:	4545      	cmp	r5, r8
 801f840:	d2d8      	bcs.n	801f7f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801f842:	f8db 0000 	ldr.w	r0, [fp]
 801f846:	4629      	mov	r1, r5
 801f848:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801f84c:	4435      	add	r5, r6
 801f84e:	6802      	ldr	r2, [r0, #0]
 801f850:	005b      	lsls	r3, r3, #1
 801f852:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801f856:	463a      	mov	r2, r7
 801f858:	47d0      	blx	sl
 801f85a:	444f      	add	r7, r9
 801f85c:	e7ef      	b.n	801f83e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801f85e:	bf00      	nop
 801f860:	200150e8 	.word	0x200150e8
 801f864:	200150ea 	.word	0x200150ea
 801f868:	200150ec 	.word	0x200150ec
 801f86c:	200150ee 	.word	0x200150ee
 801f870:	200150f4 	.word	0x200150f4

0801f874 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f874:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f876:	4606      	mov	r6, r0
 801f878:	b087      	sub	sp, #28
 801f87a:	460c      	mov	r4, r1
 801f87c:	4617      	mov	r7, r2
 801f87e:	461d      	mov	r5, r3
 801f880:	b333      	cbz	r3, 801f8d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f882:	4608      	mov	r0, r1
 801f884:	f7f7 f981 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f888:	bb10      	cbnz	r0, 801f8d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f88a:	6820      	ldr	r0, [r4, #0]
 801f88c:	ab04      	add	r3, sp, #16
 801f88e:	6861      	ldr	r1, [r4, #4]
 801f890:	4c1b      	ldr	r4, [pc, #108]	; (801f900 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801f892:	c303      	stmia	r3!, {r0, r1}
 801f894:	a804      	add	r0, sp, #16
 801f896:	f7fa f98b 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f89a:	6820      	ldr	r0, [r4, #0]
 801f89c:	6803      	ldr	r3, [r0, #0]
 801f89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f8a0:	4798      	blx	r3
 801f8a2:	2dff      	cmp	r5, #255	; 0xff
 801f8a4:	d016      	beq.n	801f8d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801f8a6:	f010 0f08 	tst.w	r0, #8
 801f8aa:	6820      	ldr	r0, [r4, #0]
 801f8ac:	d015      	beq.n	801f8da <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801f8ae:	2400      	movs	r4, #0
 801f8b0:	6801      	ldr	r1, [r0, #0]
 801f8b2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801f8b6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f8ba:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801f8be:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801f8c2:	9401      	str	r4, [sp, #4]
 801f8c4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801f8c8:	9400      	str	r4, [sp, #0]
 801f8ca:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801f8cc:	4639      	mov	r1, r7
 801f8ce:	47a0      	blx	r4
 801f8d0:	b007      	add	sp, #28
 801f8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8d4:	f010 0f02 	tst.w	r0, #2
 801f8d8:	e7e7      	b.n	801f8aa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801f8da:	6803      	ldr	r3, [r0, #0]
 801f8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f8de:	4798      	blx	r3
 801f8e0:	4b08      	ldr	r3, [pc, #32]	; (801f904 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801f8e2:	4601      	mov	r1, r0
 801f8e4:	4630      	mov	r0, r6
 801f8e6:	881a      	ldrh	r2, [r3, #0]
 801f8e8:	6833      	ldr	r3, [r6, #0]
 801f8ea:	e9cd 7500 	strd	r7, r5, [sp]
 801f8ee:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801f8f0:	ab04      	add	r3, sp, #16
 801f8f2:	47a8      	blx	r5
 801f8f4:	6820      	ldr	r0, [r4, #0]
 801f8f6:	6803      	ldr	r3, [r0, #0]
 801f8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f8fa:	4798      	blx	r3
 801f8fc:	e7e8      	b.n	801f8d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801f8fe:	bf00      	nop
 801f900:	200150f4 	.word	0x200150f4
 801f904:	200150ee 	.word	0x200150ee

0801f908 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801f908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f90c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801f910:	4688      	mov	r8, r1
 801f912:	4614      	mov	r4, r2
 801f914:	461d      	mov	r5, r3
 801f916:	9e08      	ldr	r6, [sp, #32]
 801f918:	2f00      	cmp	r7, #0
 801f91a:	f000 80ab 	beq.w	801fa74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f91e:	4618      	mov	r0, r3
 801f920:	f7f7 f933 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 801f924:	2800      	cmp	r0, #0
 801f926:	f040 80a5 	bne.w	801fa74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f92a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801f92e:	2fff      	cmp	r7, #255	; 0xff
 801f930:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801f934:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801f938:	fb04 1303 	mla	r3, r4, r3, r1
 801f93c:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801f940:	eba4 0200 	sub.w	r2, r4, r0
 801f944:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801f948:	fb04 f505 	mul.w	r5, r4, r5
 801f94c:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801f950:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801f954:	d04a      	beq.n	801f9ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801f956:	b2bc      	uxth	r4, r7
 801f958:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801f95c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801f960:	fa5f f788 	uxtb.w	r7, r8
 801f964:	b2f3      	uxtb	r3, r6
 801f966:	0040      	lsls	r0, r0, #1
 801f968:	fb0e fe04 	mul.w	lr, lr, r4
 801f96c:	4367      	muls	r7, r4
 801f96e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801f972:	4363      	muls	r3, r4
 801f974:	fa1f fc8c 	uxth.w	ip, ip
 801f978:	42a9      	cmp	r1, r5
 801f97a:	d27b      	bcs.n	801fa74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801f97c:	eb01 0900 	add.w	r9, r1, r0
 801f980:	4549      	cmp	r1, r9
 801f982:	d231      	bcs.n	801f9e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801f984:	880a      	ldrh	r2, [r1, #0]
 801f986:	1214      	asrs	r4, r2, #8
 801f988:	10d6      	asrs	r6, r2, #3
 801f98a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801f98e:	00d2      	lsls	r2, r2, #3
 801f990:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f994:	b2d2      	uxtb	r2, r2
 801f996:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801f99a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801f99e:	fb14 f40c 	smulbb	r4, r4, ip
 801f9a2:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801f9a6:	fb12 f20c 	smulbb	r2, r2, ip
 801f9aa:	fb16 f60c 	smulbb	r6, r6, ip
 801f9ae:	4474      	add	r4, lr
 801f9b0:	441a      	add	r2, r3
 801f9b2:	b2a4      	uxth	r4, r4
 801f9b4:	443e      	add	r6, r7
 801f9b6:	b292      	uxth	r2, r2
 801f9b8:	f104 0a01 	add.w	sl, r4, #1
 801f9bc:	b2b6      	uxth	r6, r6
 801f9be:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801f9c2:	f102 0a01 	add.w	sl, r2, #1
 801f9c6:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801f9ca:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801f9ce:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f9d2:	4322      	orrs	r2, r4
 801f9d4:	1c74      	adds	r4, r6, #1
 801f9d6:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801f9da:	0976      	lsrs	r6, r6, #5
 801f9dc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801f9e0:	4332      	orrs	r2, r6
 801f9e2:	f821 2b02 	strh.w	r2, [r1], #2
 801f9e6:	e7cb      	b.n	801f980 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801f9e8:	4441      	add	r1, r8
 801f9ea:	e7c5      	b.n	801f978 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801f9ec:	0973      	lsrs	r3, r6, #5
 801f9ee:	4f22      	ldr	r7, [pc, #136]	; (801fa78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801f9f0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801f9f4:	ea08 0707 	and.w	r7, r8, r7
 801f9f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f9fc:	433b      	orrs	r3, r7
 801f9fe:	07e7      	lsls	r7, r4, #31
 801fa00:	ea43 0306 	orr.w	r3, r3, r6
 801fa04:	b29b      	uxth	r3, r3
 801fa06:	d50b      	bpl.n	801fa20 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801fa08:	0040      	lsls	r0, r0, #1
 801fa0a:	0052      	lsls	r2, r2, #1
 801fa0c:	42a9      	cmp	r1, r5
 801fa0e:	d231      	bcs.n	801fa74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fa10:	180c      	adds	r4, r1, r0
 801fa12:	42a1      	cmp	r1, r4
 801fa14:	d202      	bcs.n	801fa1c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801fa16:	f821 3b02 	strh.w	r3, [r1], #2
 801fa1a:	e7fa      	b.n	801fa12 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801fa1c:	4411      	add	r1, r2
 801fa1e:	e7f5      	b.n	801fa0c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801fa20:	078e      	lsls	r6, r1, #30
 801fa22:	d008      	beq.n	801fa36 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801fa24:	0066      	lsls	r6, r4, #1
 801fa26:	460a      	mov	r2, r1
 801fa28:	42aa      	cmp	r2, r5
 801fa2a:	d202      	bcs.n	801fa32 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801fa2c:	8013      	strh	r3, [r2, #0]
 801fa2e:	4432      	add	r2, r6
 801fa30:	e7fa      	b.n	801fa28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801fa32:	3102      	adds	r1, #2
 801fa34:	3801      	subs	r0, #1
 801fa36:	07c2      	lsls	r2, r0, #31
 801fa38:	d50b      	bpl.n	801fa52 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801fa3a:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801fa3e:	0066      	lsls	r6, r4, #1
 801fa40:	3a01      	subs	r2, #1
 801fa42:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801fa46:	42aa      	cmp	r2, r5
 801fa48:	d202      	bcs.n	801fa50 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801fa4a:	8013      	strh	r3, [r2, #0]
 801fa4c:	4432      	add	r2, r6
 801fa4e:	e7fa      	b.n	801fa46 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801fa50:	3801      	subs	r0, #1
 801fa52:	b178      	cbz	r0, 801fa74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fa54:	1040      	asrs	r0, r0, #1
 801fa56:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801fa5a:	0080      	lsls	r0, r0, #2
 801fa5c:	0064      	lsls	r4, r4, #1
 801fa5e:	42a9      	cmp	r1, r5
 801fa60:	d208      	bcs.n	801fa74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801fa62:	180e      	adds	r6, r1, r0
 801fa64:	460a      	mov	r2, r1
 801fa66:	42b2      	cmp	r2, r6
 801fa68:	d202      	bcs.n	801fa70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801fa6a:	f842 3b04 	str.w	r3, [r2], #4
 801fa6e:	e7fa      	b.n	801fa66 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801fa70:	4421      	add	r1, r4
 801fa72:	e7f4      	b.n	801fa5e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801fa74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa78:	00fff800 	.word	0x00fff800

0801fa7c <_ZN8touchgfx8LCD16bppC1Ev>:
 801fa7c:	2200      	movs	r2, #0
 801fa7e:	4910      	ldr	r1, [pc, #64]	; (801fac0 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801fa80:	6042      	str	r2, [r0, #4]
 801fa82:	6001      	str	r1, [r0, #0]
 801fa84:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801fa88:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801fa8c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801fa90:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801fa94:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801fa98:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801fa9c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801faa0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801faa4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801faa8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801faac:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801fab0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801fab4:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801fab8:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801fabc:	4770      	bx	lr
 801fabe:	bf00      	nop
 801fac0:	0802e2c0 	.word	0x0802e2c0

0801fac4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801fac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fac8:	b08d      	sub	sp, #52	; 0x34
 801faca:	460d      	mov	r5, r1
 801facc:	4604      	mov	r4, r0
 801face:	4699      	mov	r9, r3
 801fad0:	6808      	ldr	r0, [r1, #0]
 801fad2:	ab08      	add	r3, sp, #32
 801fad4:	6849      	ldr	r1, [r1, #4]
 801fad6:	c303      	stmia	r3!, {r0, r1}
 801fad8:	6810      	ldr	r0, [r2, #0]
 801fada:	ab0a      	add	r3, sp, #40	; 0x28
 801fadc:	6851      	ldr	r1, [r2, #4]
 801fade:	c303      	stmia	r3!, {r0, r1}
 801fae0:	a808      	add	r0, sp, #32
 801fae2:	f7fa f865 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fae6:	4629      	mov	r1, r5
 801fae8:	a80a      	add	r0, sp, #40	; 0x28
 801faea:	4d67      	ldr	r5, [pc, #412]	; (801fc88 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801faec:	f7fa f888 	bl	8019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801faf0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801faf4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801faf8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801fafc:	6828      	ldr	r0, [r5, #0]
 801fafe:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fb02:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801fb06:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801fb0a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fb0e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801fb12:	440a      	add	r2, r1
 801fb14:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801fb18:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801fb1c:	4413      	add	r3, r2
 801fb1e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801fb22:	6803      	ldr	r3, [r0, #0]
 801fb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fb26:	4798      	blx	r3
 801fb28:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fb2c:	d119      	bne.n	801fb62 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801fb2e:	f010 0f20 	tst.w	r0, #32
 801fb32:	6828      	ldr	r0, [r5, #0]
 801fb34:	d018      	beq.n	801fb68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801fb36:	2500      	movs	r5, #0
 801fb38:	6801      	ldr	r1, [r0, #0]
 801fb3a:	b2b6      	uxth	r6, r6
 801fb3c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801fb40:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801fb44:	9601      	str	r6, [sp, #4]
 801fb46:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801fb4a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801fb4e:	9502      	str	r5, [sp, #8]
 801fb50:	fa1f f588 	uxth.w	r5, r8
 801fb54:	9500      	str	r5, [sp, #0]
 801fb56:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801fb58:	4621      	mov	r1, r4
 801fb5a:	47a8      	blx	r5
 801fb5c:	b00d      	add	sp, #52	; 0x34
 801fb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb62:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fb66:	e7e4      	b.n	801fb32 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801fb68:	6803      	ldr	r3, [r0, #0]
 801fb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fb6c:	4798      	blx	r3
 801fb6e:	4947      	ldr	r1, [pc, #284]	; (801fc8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801fb70:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801fb74:	880b      	ldrh	r3, [r1, #0]
 801fb76:	468a      	mov	sl, r1
 801fb78:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801fb7c:	fb03 5202 	mla	r2, r3, r2, r5
 801fb80:	4373      	muls	r3, r6
 801fb82:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fb86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fb8a:	9307      	str	r3, [sp, #28]
 801fb8c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801fb90:	9306      	str	r3, [sp, #24]
 801fb92:	9b07      	ldr	r3, [sp, #28]
 801fb94:	4298      	cmp	r0, r3
 801fb96:	d270      	bcs.n	801fc7a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801fb98:	9b06      	ldr	r3, [sp, #24]
 801fb9a:	4621      	mov	r1, r4
 801fb9c:	eb00 0b03 	add.w	fp, r0, r3
 801fba0:	4558      	cmp	r0, fp
 801fba2:	d25d      	bcs.n	801fc60 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801fba4:	f851 4b04 	ldr.w	r4, [r1], #4
 801fba8:	0e23      	lsrs	r3, r4, #24
 801fbaa:	d014      	beq.n	801fbd6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801fbac:	2bff      	cmp	r3, #255	; 0xff
 801fbae:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801fbb2:	d112      	bne.n	801fbda <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801fbb4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801fbb8:	d10f      	bne.n	801fbda <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801fbba:	0963      	lsrs	r3, r4, #5
 801fbbc:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801fbc0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fbc4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fbc8:	f02c 0c07 	bic.w	ip, ip, #7
 801fbcc:	ea43 0c0c 	orr.w	ip, r3, ip
 801fbd0:	ea4c 0404 	orr.w	r4, ip, r4
 801fbd4:	8004      	strh	r4, [r0, #0]
 801fbd6:	3002      	adds	r0, #2
 801fbd8:	e7e2      	b.n	801fba0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801fbda:	fb09 f303 	mul.w	r3, r9, r3
 801fbde:	8807      	ldrh	r7, [r0, #0]
 801fbe0:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801fbe4:	fa5f fc8c 	uxtb.w	ip, ip
 801fbe8:	1c5a      	adds	r2, r3, #1
 801fbea:	123e      	asrs	r6, r7, #8
 801fbec:	10fd      	asrs	r5, r7, #3
 801fbee:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801fbf2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fbf6:	00ff      	lsls	r7, r7, #3
 801fbf8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fbfc:	1212      	asrs	r2, r2, #8
 801fbfe:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fc02:	b293      	uxth	r3, r2
 801fc04:	43d2      	mvns	r2, r2
 801fc06:	b2ff      	uxtb	r7, r7
 801fc08:	fb1e fe03 	smulbb	lr, lr, r3
 801fc0c:	b2d2      	uxtb	r2, r2
 801fc0e:	fb1c fc03 	smulbb	ip, ip, r3
 801fc12:	b2e4      	uxtb	r4, r4
 801fc14:	fb06 e602 	mla	r6, r6, r2, lr
 801fc18:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801fc1c:	fb14 f403 	smulbb	r4, r4, r3
 801fc20:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801fc24:	b2b6      	uxth	r6, r6
 801fc26:	fb05 c502 	mla	r5, r5, r2, ip
 801fc2a:	fb07 4702 	mla	r7, r7, r2, r4
 801fc2e:	f106 0e01 	add.w	lr, r6, #1
 801fc32:	b2ad      	uxth	r5, r5
 801fc34:	b2bf      	uxth	r7, r7
 801fc36:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801fc3a:	f105 0c01 	add.w	ip, r5, #1
 801fc3e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801fc42:	1c7e      	adds	r6, r7, #1
 801fc44:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801fc48:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fc4c:	096d      	lsrs	r5, r5, #5
 801fc4e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fc52:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fc56:	ea46 060e 	orr.w	r6, r6, lr
 801fc5a:	432e      	orrs	r6, r5
 801fc5c:	8006      	strh	r6, [r0, #0]
 801fc5e:	e7ba      	b.n	801fbd6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801fc60:	f8ba 3000 	ldrh.w	r3, [sl]
 801fc64:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801fc68:	eba3 0308 	sub.w	r3, r3, r8
 801fc6c:	eba4 0408 	sub.w	r4, r4, r8
 801fc70:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fc74:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801fc78:	e78b      	b.n	801fb92 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801fc7a:	4b03      	ldr	r3, [pc, #12]	; (801fc88 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801fc7c:	6818      	ldr	r0, [r3, #0]
 801fc7e:	6803      	ldr	r3, [r0, #0]
 801fc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fc82:	4798      	blx	r3
 801fc84:	e76a      	b.n	801fb5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801fc86:	bf00      	nop
 801fc88:	200150f4 	.word	0x200150f4
 801fc8c:	200150ee 	.word	0x200150ee

0801fc90 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801fc90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fc94:	b085      	sub	sp, #20
 801fc96:	6810      	ldr	r0, [r2, #0]
 801fc98:	460c      	mov	r4, r1
 801fc9a:	6851      	ldr	r1, [r2, #4]
 801fc9c:	466d      	mov	r5, sp
 801fc9e:	4616      	mov	r6, r2
 801fca0:	c503      	stmia	r5!, {r0, r1}
 801fca2:	6818      	ldr	r0, [r3, #0]
 801fca4:	6859      	ldr	r1, [r3, #4]
 801fca6:	c503      	stmia	r5!, {r0, r1}
 801fca8:	4668      	mov	r0, sp
 801fcaa:	4d2e      	ldr	r5, [pc, #184]	; (801fd64 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801fcac:	f7f9 ff80 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fcb0:	4631      	mov	r1, r6
 801fcb2:	a802      	add	r0, sp, #8
 801fcb4:	4e2c      	ldr	r6, [pc, #176]	; (801fd68 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801fcb6:	f7f9 ffa3 	bl	8019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fcba:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801fcbe:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801fcc2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801fcc6:	6828      	ldr	r0, [r5, #0]
 801fcc8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fccc:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801fcd0:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801fcd4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801fcd8:	f8bd 1000 	ldrh.w	r1, [sp]
 801fcdc:	440a      	add	r2, r1
 801fcde:	f8ad 2008 	strh.w	r2, [sp, #8]
 801fce2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801fce6:	4413      	add	r3, r2
 801fce8:	f8ad 300a 	strh.w	r3, [sp, #10]
 801fcec:	6803      	ldr	r3, [r0, #0]
 801fcee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fcf0:	4798      	blx	r3
 801fcf2:	8833      	ldrh	r3, [r6, #0]
 801fcf4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801fcf8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801fcfc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801fd00:	f8df e068 	ldr.w	lr, [pc, #104]	; 801fd6c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801fd04:	fb03 1202 	mla	r2, r3, r2, r1
 801fd08:	fb08 f303 	mul.w	r3, r8, r3
 801fd0c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fd10:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801fd14:	4298      	cmp	r0, r3
 801fd16:	d21d      	bcs.n	801fd54 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801fd18:	eb00 080c 	add.w	r8, r0, ip
 801fd1c:	4540      	cmp	r0, r8
 801fd1e:	d20f      	bcs.n	801fd40 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801fd20:	f854 1b04 	ldr.w	r1, [r4], #4
 801fd24:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801fd28:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801fd2c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801fd30:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fd34:	ea42 0209 	orr.w	r2, r2, r9
 801fd38:	430a      	orrs	r2, r1
 801fd3a:	f820 2b02 	strh.w	r2, [r0], #2
 801fd3e:	e7ed      	b.n	801fd1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801fd40:	8832      	ldrh	r2, [r6, #0]
 801fd42:	1bd2      	subs	r2, r2, r7
 801fd44:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fd48:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801fd4c:	1bd2      	subs	r2, r2, r7
 801fd4e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801fd52:	e7df      	b.n	801fd14 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801fd54:	6828      	ldr	r0, [r5, #0]
 801fd56:	6803      	ldr	r3, [r0, #0]
 801fd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fd5a:	4798      	blx	r3
 801fd5c:	b005      	add	sp, #20
 801fd5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fd62:	bf00      	nop
 801fd64:	200150f4 	.word	0x200150f4
 801fd68:	200150ee 	.word	0x200150ee
 801fd6c:	fffff800 	.word	0xfffff800

0801fd70 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801fd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd74:	b08e      	sub	sp, #56	; 0x38
 801fd76:	460e      	mov	r6, r1
 801fd78:	4604      	mov	r4, r0
 801fd7a:	461d      	mov	r5, r3
 801fd7c:	6808      	ldr	r0, [r1, #0]
 801fd7e:	ab0a      	add	r3, sp, #40	; 0x28
 801fd80:	6849      	ldr	r1, [r1, #4]
 801fd82:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801ff58 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801fd86:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801ff5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801fd8a:	c303      	stmia	r3!, {r0, r1}
 801fd8c:	6810      	ldr	r0, [r2, #0]
 801fd8e:	ab0c      	add	r3, sp, #48	; 0x30
 801fd90:	6851      	ldr	r1, [r2, #4]
 801fd92:	c303      	stmia	r3!, {r0, r1}
 801fd94:	a80a      	add	r0, sp, #40	; 0x28
 801fd96:	f7f9 ff0b 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fd9a:	4631      	mov	r1, r6
 801fd9c:	a80c      	add	r0, sp, #48	; 0x30
 801fd9e:	f7f9 ff2f 	bl	8019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fda2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801fda6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801fdaa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801fdae:	f8d8 0000 	ldr.w	r0, [r8]
 801fdb2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fdb6:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801fdba:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801fdbe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fdc2:	440c      	add	r4, r1
 801fdc4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801fdc8:	440a      	add	r2, r1
 801fdca:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801fdce:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801fdd2:	4413      	add	r3, r2
 801fdd4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801fdd8:	6803      	ldr	r3, [r0, #0]
 801fdda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fddc:	4798      	blx	r3
 801fdde:	2dff      	cmp	r5, #255	; 0xff
 801fde0:	d124      	bne.n	801fe2c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801fde2:	f010 0f01 	tst.w	r0, #1
 801fde6:	f8d8 0000 	ldr.w	r0, [r8]
 801fdea:	d022      	beq.n	801fe32 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801fdec:	2100      	movs	r1, #0
 801fdee:	f04f 0e01 	mov.w	lr, #1
 801fdf2:	f8d0 c000 	ldr.w	ip, [r0]
 801fdf6:	b2b6      	uxth	r6, r6
 801fdf8:	f8cd e018 	str.w	lr, [sp, #24]
 801fdfc:	b2bf      	uxth	r7, r7
 801fdfe:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801fe02:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801fe06:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801fe0a:	f8b9 e000 	ldrh.w	lr, [r9]
 801fe0e:	9503      	str	r5, [sp, #12]
 801fe10:	9601      	str	r6, [sp, #4]
 801fe12:	9700      	str	r7, [sp, #0]
 801fe14:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801fe18:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801fe1c:	9102      	str	r1, [sp, #8]
 801fe1e:	4621      	mov	r1, r4
 801fe20:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801fe24:	47a8      	blx	r5
 801fe26:	b00e      	add	sp, #56	; 0x38
 801fe28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe2c:	f010 0f04 	tst.w	r0, #4
 801fe30:	e7d9      	b.n	801fde6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801fe32:	6803      	ldr	r3, [r0, #0]
 801fe34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe36:	4798      	blx	r3
 801fe38:	f8b9 3000 	ldrh.w	r3, [r9]
 801fe3c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801fe40:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801fe44:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801fe48:	435e      	muls	r6, r3
 801fe4a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801fe4e:	2dff      	cmp	r5, #255	; 0xff
 801fe50:	fb03 1202 	mla	r2, r3, r2, r1
 801fe54:	ebac 0c07 	sub.w	ip, ip, r7
 801fe58:	eba3 0707 	sub.w	r7, r3, r7
 801fe5c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801fe60:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801fe64:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801fe68:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801fe6c:	d049      	beq.n	801ff02 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801fe6e:	43eb      	mvns	r3, r5
 801fe70:	fa1f f985 	uxth.w	r9, r5
 801fe74:	b2db      	uxtb	r3, r3
 801fe76:	42b0      	cmp	r0, r6
 801fe78:	d266      	bcs.n	801ff48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801fe7a:	eb00 0a0e 	add.w	sl, r0, lr
 801fe7e:	4550      	cmp	r0, sl
 801fe80:	4621      	mov	r1, r4
 801fe82:	f104 0403 	add.w	r4, r4, #3
 801fe86:	d25b      	bcs.n	801ff40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801fe88:	8802      	ldrh	r2, [r0, #0]
 801fe8a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801fe8e:	ea4f 2822 	mov.w	r8, r2, asr #8
 801fe92:	fb11 f109 	smulbb	r1, r1, r9
 801fe96:	10d5      	asrs	r5, r2, #3
 801fe98:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801fe9c:	00d2      	lsls	r2, r2, #3
 801fe9e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801fea2:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801fea6:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801feaa:	fb08 1803 	mla	r8, r8, r3, r1
 801feae:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801feb2:	b2d2      	uxtb	r2, r2
 801feb4:	fb11 f109 	smulbb	r1, r1, r9
 801feb8:	fa1f f888 	uxth.w	r8, r8
 801febc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801fec0:	fb05 1503 	mla	r5, r5, r3, r1
 801fec4:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801fec8:	fb11 f109 	smulbb	r1, r1, r9
 801fecc:	b2ad      	uxth	r5, r5
 801fece:	fb02 1203 	mla	r2, r2, r3, r1
 801fed2:	f108 0101 	add.w	r1, r8, #1
 801fed6:	b292      	uxth	r2, r2
 801fed8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801fedc:	1c51      	adds	r1, r2, #1
 801fede:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801fee2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fee6:	1c69      	adds	r1, r5, #1
 801fee8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801feec:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fef0:	096d      	lsrs	r5, r5, #5
 801fef2:	ea42 0208 	orr.w	r2, r2, r8
 801fef6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fefa:	432a      	orrs	r2, r5
 801fefc:	f820 2b02 	strh.w	r2, [r0], #2
 801ff00:	e7bd      	b.n	801fe7e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801ff02:	4a14      	ldr	r2, [pc, #80]	; (801ff54 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801ff04:	42b0      	cmp	r0, r6
 801ff06:	d21f      	bcs.n	801ff48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ff08:	eb00 050e 	add.w	r5, r0, lr
 801ff0c:	42a8      	cmp	r0, r5
 801ff0e:	4621      	mov	r1, r4
 801ff10:	f104 0403 	add.w	r4, r4, #3
 801ff14:	d210      	bcs.n	801ff38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801ff16:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801ff1a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801ff1e:	00db      	lsls	r3, r3, #3
 801ff20:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801ff24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ff28:	430b      	orrs	r3, r1
 801ff2a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ff2e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801ff32:	f820 3b02 	strh.w	r3, [r0], #2
 801ff36:	e7e9      	b.n	801ff0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801ff38:	4438      	add	r0, r7
 801ff3a:	eb01 040c 	add.w	r4, r1, ip
 801ff3e:	e7e1      	b.n	801ff04 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801ff40:	4438      	add	r0, r7
 801ff42:	eb01 040c 	add.w	r4, r1, ip
 801ff46:	e796      	b.n	801fe76 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801ff48:	4b03      	ldr	r3, [pc, #12]	; (801ff58 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801ff4a:	6818      	ldr	r0, [r3, #0]
 801ff4c:	6803      	ldr	r3, [r0, #0]
 801ff4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff50:	4798      	blx	r3
 801ff52:	e768      	b.n	801fe26 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801ff54:	fffff800 	.word	0xfffff800
 801ff58:	200150f4 	.word	0x200150f4
 801ff5c:	200150ee 	.word	0x200150ee

0801ff60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ff60:	b4f0      	push	{r4, r5, r6, r7}
 801ff62:	4616      	mov	r6, r2
 801ff64:	461c      	mov	r4, r3
 801ff66:	460d      	mov	r5, r1
 801ff68:	9a04      	ldr	r2, [sp, #16]
 801ff6a:	2e01      	cmp	r6, #1
 801ff6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ff70:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801ff74:	d012      	beq.n	801ff9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801ff76:	d303      	bcc.n	801ff80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801ff78:	2e02      	cmp	r6, #2
 801ff7a:	d00a      	beq.n	801ff92 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801ff7c:	bcf0      	pop	{r4, r5, r6, r7}
 801ff7e:	4770      	bx	lr
 801ff80:	6805      	ldr	r5, [r0, #0]
 801ff82:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801ff86:	68ed      	ldr	r5, [r5, #12]
 801ff88:	4613      	mov	r3, r2
 801ff8a:	4622      	mov	r2, r4
 801ff8c:	46ac      	mov	ip, r5
 801ff8e:	bcf0      	pop	{r4, r5, r6, r7}
 801ff90:	4760      	bx	ip
 801ff92:	4621      	mov	r1, r4
 801ff94:	4628      	mov	r0, r5
 801ff96:	bcf0      	pop	{r4, r5, r6, r7}
 801ff98:	f7ff bd94 	b.w	801fac4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ff9c:	4621      	mov	r1, r4
 801ff9e:	4628      	mov	r0, r5
 801ffa0:	bcf0      	pop	{r4, r5, r6, r7}
 801ffa2:	f7ff bee5 	b.w	801fd70 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801ffa8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ffa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffac:	b093      	sub	sp, #76	; 0x4c
 801ffae:	4681      	mov	r9, r0
 801ffb0:	4688      	mov	r8, r1
 801ffb2:	6810      	ldr	r0, [r2, #0]
 801ffb4:	6851      	ldr	r1, [r2, #4]
 801ffb6:	ac0e      	add	r4, sp, #56	; 0x38
 801ffb8:	4616      	mov	r6, r2
 801ffba:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801ffbe:	4f6b      	ldr	r7, [pc, #428]	; (802016c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801ffc0:	c403      	stmia	r4!, {r0, r1}
 801ffc2:	6818      	ldr	r0, [r3, #0]
 801ffc4:	ac10      	add	r4, sp, #64	; 0x40
 801ffc6:	6859      	ldr	r1, [r3, #4]
 801ffc8:	c403      	stmia	r4!, {r0, r1}
 801ffca:	a80e      	add	r0, sp, #56	; 0x38
 801ffcc:	f7f9 fdf0 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ffd0:	4631      	mov	r1, r6
 801ffd2:	a810      	add	r0, sp, #64	; 0x40
 801ffd4:	4e66      	ldr	r6, [pc, #408]	; (8020170 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801ffd6:	f7f9 fe13 	bl	8019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ffda:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801ffde:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801ffe2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801ffe6:	6830      	ldr	r0, [r6, #0]
 801ffe8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ffec:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801fff0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801fff4:	4489      	add	r9, r1
 801fff6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801fffa:	440a      	add	r2, r1
 801fffc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020000:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020004:	4413      	add	r3, r2
 8020006:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802000a:	6803      	ldr	r3, [r0, #0]
 802000c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802000e:	4798      	blx	r3
 8020010:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020014:	6830      	ldr	r0, [r6, #0]
 8020016:	d01d      	beq.n	8020054 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8020018:	2200      	movs	r2, #0
 802001a:	6801      	ldr	r1, [r0, #0]
 802001c:	b2a4      	uxth	r4, r4
 802001e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8020022:	b2ad      	uxth	r5, r5
 8020024:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8020028:	220b      	movs	r2, #11
 802002a:	9207      	str	r2, [sp, #28]
 802002c:	883a      	ldrh	r2, [r7, #0]
 802002e:	9502      	str	r5, [sp, #8]
 8020030:	9206      	str	r2, [sp, #24]
 8020032:	2201      	movs	r2, #1
 8020034:	9401      	str	r4, [sp, #4]
 8020036:	e9cd a204 	strd	sl, r2, [sp, #16]
 802003a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 802003e:	9203      	str	r2, [sp, #12]
 8020040:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8020044:	9200      	str	r2, [sp, #0]
 8020046:	4642      	mov	r2, r8
 8020048:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 802004a:	4649      	mov	r1, r9
 802004c:	47a0      	blx	r4
 802004e:	b013      	add	sp, #76	; 0x4c
 8020050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020054:	6803      	ldr	r3, [r0, #0]
 8020056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020058:	4798      	blx	r3
 802005a:	883b      	ldrh	r3, [r7, #0]
 802005c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8020060:	f04f 0e04 	mov.w	lr, #4
 8020064:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8020068:	435d      	muls	r5, r3
 802006a:	fb03 1202 	mla	r2, r3, r2, r1
 802006e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020072:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8020076:	920c      	str	r2, [sp, #48]	; 0x30
 8020078:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 802007c:	1b12      	subs	r2, r2, r4
 802007e:	920d      	str	r2, [sp, #52]	; 0x34
 8020080:	0062      	lsls	r2, r4, #1
 8020082:	1b1c      	subs	r4, r3, r4
 8020084:	920a      	str	r2, [sp, #40]	; 0x28
 8020086:	0063      	lsls	r3, r4, #1
 8020088:	930b      	str	r3, [sp, #44]	; 0x2c
 802008a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802008c:	4298      	cmp	r0, r3
 802008e:	d266      	bcs.n	802015e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8020090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020092:	eb00 0b03 	add.w	fp, r0, r3
 8020096:	4558      	cmp	r0, fp
 8020098:	d25c      	bcs.n	8020154 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 802009a:	f819 3b01 	ldrb.w	r3, [r9], #1
 802009e:	fb1e e303 	smlabb	r3, lr, r3, lr
 80200a2:	f858 2003 	ldr.w	r2, [r8, r3]
 80200a6:	0e11      	lsrs	r1, r2, #24
 80200a8:	d012      	beq.n	80200d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80200aa:	29ff      	cmp	r1, #255	; 0xff
 80200ac:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80200b0:	d110      	bne.n	80200d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80200b2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80200b6:	d10d      	bne.n	80200d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80200b8:	0953      	lsrs	r3, r2, #5
 80200ba:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80200be:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80200c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80200c6:	f027 0707 	bic.w	r7, r7, #7
 80200ca:	431f      	orrs	r7, r3
 80200cc:	433a      	orrs	r2, r7
 80200ce:	8002      	strh	r2, [r0, #0]
 80200d0:	3002      	adds	r0, #2
 80200d2:	e7e0      	b.n	8020096 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80200d4:	fb0a f101 	mul.w	r1, sl, r1
 80200d8:	8806      	ldrh	r6, [r0, #0]
 80200da:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80200de:	b2d2      	uxtb	r2, r2
 80200e0:	1c4b      	adds	r3, r1, #1
 80200e2:	1235      	asrs	r5, r6, #8
 80200e4:	10f4      	asrs	r4, r6, #3
 80200e6:	eb03 2321 	add.w	r3, r3, r1, asr #8
 80200ea:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80200ee:	00f6      	lsls	r6, r6, #3
 80200f0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80200f4:	121b      	asrs	r3, r3, #8
 80200f6:	b2f6      	uxtb	r6, r6
 80200f8:	b299      	uxth	r1, r3
 80200fa:	43db      	mvns	r3, r3
 80200fc:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020100:	fb1c fc01 	smulbb	ip, ip, r1
 8020104:	b2db      	uxtb	r3, r3
 8020106:	fb12 f201 	smulbb	r2, r2, r1
 802010a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802010e:	fb05 c503 	mla	r5, r5, r3, ip
 8020112:	b2ff      	uxtb	r7, r7
 8020114:	fb06 2203 	mla	r2, r6, r3, r2
 8020118:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802011c:	fb17 f701 	smulbb	r7, r7, r1
 8020120:	b2ad      	uxth	r5, r5
 8020122:	b292      	uxth	r2, r2
 8020124:	fb04 7403 	mla	r4, r4, r3, r7
 8020128:	f105 0c01 	add.w	ip, r5, #1
 802012c:	1c57      	adds	r7, r2, #1
 802012e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020132:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020136:	b2a4      	uxth	r4, r4
 8020138:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802013c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8020140:	433d      	orrs	r5, r7
 8020142:	1c67      	adds	r7, r4, #1
 8020144:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8020148:	0964      	lsrs	r4, r4, #5
 802014a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802014e:	4325      	orrs	r5, r4
 8020150:	8005      	strh	r5, [r0, #0]
 8020152:	e7bd      	b.n	80200d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8020154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020156:	4418      	add	r0, r3
 8020158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802015a:	4499      	add	r9, r3
 802015c:	e795      	b.n	802008a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 802015e:	4b04      	ldr	r3, [pc, #16]	; (8020170 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8020160:	6818      	ldr	r0, [r3, #0]
 8020162:	6803      	ldr	r3, [r0, #0]
 8020164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020166:	4798      	blx	r3
 8020168:	e771      	b.n	802004e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 802016a:	bf00      	nop
 802016c:	200150ee 	.word	0x200150ee
 8020170:	200150f4 	.word	0x200150f4

08020174 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020178:	b087      	sub	sp, #28
 802017a:	4680      	mov	r8, r0
 802017c:	460d      	mov	r5, r1
 802017e:	4614      	mov	r4, r2
 8020180:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8020184:	2e00      	cmp	r6, #0
 8020186:	f000 80b9 	beq.w	80202fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 802018a:	6810      	ldr	r0, [r2, #0]
 802018c:	af02      	add	r7, sp, #8
 802018e:	6851      	ldr	r1, [r2, #4]
 8020190:	c703      	stmia	r7!, {r0, r1}
 8020192:	6818      	ldr	r0, [r3, #0]
 8020194:	af04      	add	r7, sp, #16
 8020196:	6859      	ldr	r1, [r3, #4]
 8020198:	c703      	stmia	r7!, {r0, r1}
 802019a:	a802      	add	r0, sp, #8
 802019c:	f7f9 fd08 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80201a0:	4621      	mov	r1, r4
 80201a2:	a804      	add	r0, sp, #16
 80201a4:	f7f9 fd2c 	bl	8019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80201a8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80201ac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80201b0:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80201b4:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80201b8:	fb14 2103 	smlabb	r1, r4, r3, r2
 80201bc:	eb08 0401 	add.w	r4, r8, r1
 80201c0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80201c4:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80201c8:	440a      	add	r2, r1
 80201ca:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 80201ce:	f8ad 2010 	strh.w	r2, [sp, #16]
 80201d2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80201d6:	4413      	add	r3, r2
 80201d8:	f8ad 3012 	strh.w	r3, [sp, #18]
 80201dc:	4b49      	ldr	r3, [pc, #292]	; (8020304 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80201de:	6818      	ldr	r0, [r3, #0]
 80201e0:	6803      	ldr	r3, [r0, #0]
 80201e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80201e4:	4798      	blx	r3
 80201e6:	4b48      	ldr	r3, [pc, #288]	; (8020308 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 80201e8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80201ec:	2eff      	cmp	r6, #255	; 0xff
 80201ee:	881a      	ldrh	r2, [r3, #0]
 80201f0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80201f4:	fb02 c101 	mla	r1, r2, r1, ip
 80201f8:	fb02 f207 	mul.w	r2, r2, r7
 80201fc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8020200:	f105 0104 	add.w	r1, r5, #4
 8020204:	461d      	mov	r5, r3
 8020206:	d05a      	beq.n	80202be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8020208:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 802020c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8020210:	b2b6      	uxth	r6, r6
 8020212:	9301      	str	r3, [sp, #4]
 8020214:	fa1f fe8e 	uxth.w	lr, lr
 8020218:	4282      	cmp	r2, r0
 802021a:	d96a      	bls.n	80202f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 802021c:	eb00 0b0a 	add.w	fp, r0, sl
 8020220:	4583      	cmp	fp, r0
 8020222:	d940      	bls.n	80202a6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8020224:	8805      	ldrh	r5, [r0, #0]
 8020226:	f814 3b01 	ldrb.w	r3, [r4], #1
 802022a:	122f      	asrs	r7, r5, #8
 802022c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8020230:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020234:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020238:	00ed      	lsls	r5, r5, #3
 802023a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802023e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020242:	fb17 f70e 	smulbb	r7, r7, lr
 8020246:	b2ed      	uxtb	r5, r5
 8020248:	fb19 f90e 	smulbb	r9, r9, lr
 802024c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020250:	fb15 f50e 	smulbb	r5, r5, lr
 8020254:	fb0c 7c06 	mla	ip, ip, r6, r7
 8020258:	10df      	asrs	r7, r3, #3
 802025a:	00db      	lsls	r3, r3, #3
 802025c:	fa1f fc8c 	uxth.w	ip, ip
 8020260:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020264:	b2db      	uxtb	r3, r3
 8020266:	fb07 9706 	mla	r7, r7, r6, r9
 802026a:	f10c 0901 	add.w	r9, ip, #1
 802026e:	fb03 5306 	mla	r3, r3, r6, r5
 8020272:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8020276:	b29b      	uxth	r3, r3
 8020278:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 802027c:	b2bf      	uxth	r7, r7
 802027e:	f103 0c01 	add.w	ip, r3, #1
 8020282:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020286:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802028a:	ea4c 0c09 	orr.w	ip, ip, r9
 802028e:	f107 0901 	add.w	r9, r7, #1
 8020292:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8020296:	097f      	lsrs	r7, r7, #5
 8020298:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802029c:	ea4c 0c07 	orr.w	ip, ip, r7
 80202a0:	f820 cb02 	strh.w	ip, [r0], #2
 80202a4:	e7bc      	b.n	8020220 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80202a6:	9b01      	ldr	r3, [sp, #4]
 80202a8:	881b      	ldrh	r3, [r3, #0]
 80202aa:	eba3 0308 	sub.w	r3, r3, r8
 80202ae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80202b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80202b6:	eba3 0308 	sub.w	r3, r3, r8
 80202ba:	441c      	add	r4, r3
 80202bc:	e7ac      	b.n	8020218 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80202be:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80202c2:	4282      	cmp	r2, r0
 80202c4:	d915      	bls.n	80202f2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80202c6:	eb00 060a 	add.w	r6, r0, sl
 80202ca:	4286      	cmp	r6, r0
 80202cc:	d906      	bls.n	80202dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 80202ce:	f814 3b01 	ldrb.w	r3, [r4], #1
 80202d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80202d6:	f820 3b02 	strh.w	r3, [r0], #2
 80202da:	e7f6      	b.n	80202ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 80202dc:	882b      	ldrh	r3, [r5, #0]
 80202de:	eba3 0308 	sub.w	r3, r3, r8
 80202e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80202e6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80202ea:	eba3 0308 	sub.w	r3, r3, r8
 80202ee:	441c      	add	r4, r3
 80202f0:	e7e7      	b.n	80202c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 80202f2:	4b04      	ldr	r3, [pc, #16]	; (8020304 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80202f4:	6818      	ldr	r0, [r3, #0]
 80202f6:	6803      	ldr	r3, [r0, #0]
 80202f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80202fa:	4798      	blx	r3
 80202fc:	b007      	add	sp, #28
 80202fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020302:	bf00      	nop
 8020304:	200150f4 	.word	0x200150f4
 8020308:	200150ee 	.word	0x200150ee

0802030c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802030c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020310:	b091      	sub	sp, #68	; 0x44
 8020312:	4680      	mov	r8, r0
 8020314:	460f      	mov	r7, r1
 8020316:	4614      	mov	r4, r2
 8020318:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 802031c:	2d00      	cmp	r5, #0
 802031e:	d051      	beq.n	80203c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020320:	6810      	ldr	r0, [r2, #0]
 8020322:	ae0c      	add	r6, sp, #48	; 0x30
 8020324:	6851      	ldr	r1, [r2, #4]
 8020326:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8020528 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 802032a:	c603      	stmia	r6!, {r0, r1}
 802032c:	6818      	ldr	r0, [r3, #0]
 802032e:	ae0e      	add	r6, sp, #56	; 0x38
 8020330:	6859      	ldr	r1, [r3, #4]
 8020332:	c603      	stmia	r6!, {r0, r1}
 8020334:	a80c      	add	r0, sp, #48	; 0x30
 8020336:	f7f9 fc3b 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802033a:	4621      	mov	r1, r4
 802033c:	a80e      	add	r0, sp, #56	; 0x38
 802033e:	f7f9 fc5f 	bl	8019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020342:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020346:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 802034a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802034e:	f8d9 0000 	ldr.w	r0, [r9]
 8020352:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020356:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 802035a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 802035e:	eb08 0401 	add.w	r4, r8, r1
 8020362:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020366:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 802052c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 802036a:	440a      	add	r2, r1
 802036c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020370:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020374:	4413      	add	r3, r2
 8020376:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 802037a:	6803      	ldr	r3, [r0, #0]
 802037c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802037e:	4798      	blx	r3
 8020380:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020384:	f8d9 0000 	ldr.w	r0, [r9]
 8020388:	d01f      	beq.n	80203ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 802038a:	2200      	movs	r2, #0
 802038c:	6801      	ldr	r1, [r0, #0]
 802038e:	b2b6      	uxth	r6, r6
 8020390:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8020394:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8020398:	220b      	movs	r2, #11
 802039a:	9207      	str	r2, [sp, #28]
 802039c:	f8b8 2000 	ldrh.w	r2, [r8]
 80203a0:	9601      	str	r6, [sp, #4]
 80203a2:	9206      	str	r2, [sp, #24]
 80203a4:	2201      	movs	r2, #1
 80203a6:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80203aa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80203ae:	9203      	str	r2, [sp, #12]
 80203b0:	fa1f f28a 	uxth.w	r2, sl
 80203b4:	9202      	str	r2, [sp, #8]
 80203b6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80203ba:	9200      	str	r2, [sp, #0]
 80203bc:	463a      	mov	r2, r7
 80203be:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80203c0:	4621      	mov	r1, r4
 80203c2:	47a8      	blx	r5
 80203c4:	b011      	add	sp, #68	; 0x44
 80203c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203ca:	6803      	ldr	r3, [r0, #0]
 80203cc:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80203d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80203d2:	4798      	blx	r3
 80203d4:	f8b8 2000 	ldrh.w	r2, [r8]
 80203d8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80203dc:	2dff      	cmp	r5, #255	; 0xff
 80203de:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80203e2:	fb0a fa02 	mul.w	sl, sl, r2
 80203e6:	fb02 1303 	mla	r3, r2, r3, r1
 80203ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80203ee:	d062      	beq.n	80204b6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80203f0:	ea6f 0c05 	mvn.w	ip, r5
 80203f4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80203f8:	b2ad      	uxth	r5, r5
 80203fa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80203fe:	fa5f fc8c 	uxtb.w	ip, ip
 8020402:	930a      	str	r3, [sp, #40]	; 0x28
 8020404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020406:	4298      	cmp	r0, r3
 8020408:	f080 8085 	bcs.w	8020516 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 802040c:	eb00 0b09 	add.w	fp, r0, r9
 8020410:	4558      	cmp	r0, fp
 8020412:	d246      	bcs.n	80204a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8020414:	f814 eb01 	ldrb.w	lr, [r4], #1
 8020418:	2303      	movs	r3, #3
 802041a:	2204      	movs	r2, #4
 802041c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8020420:	8803      	ldrh	r3, [r0, #0]
 8020422:	eb07 0a0e 	add.w	sl, r7, lr
 8020426:	1219      	asrs	r1, r3, #8
 8020428:	10da      	asrs	r2, r3, #3
 802042a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802042e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8020432:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020436:	00db      	lsls	r3, r3, #3
 8020438:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802043c:	fb18 f805 	smulbb	r8, r8, r5
 8020440:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020444:	fb1e fe05 	smulbb	lr, lr, r5
 8020448:	b2db      	uxtb	r3, r3
 802044a:	fb01 810c 	mla	r1, r1, ip, r8
 802044e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8020452:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020456:	fb18 f805 	smulbb	r8, r8, r5
 802045a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802045e:	b289      	uxth	r1, r1
 8020460:	fb02 820c 	mla	r2, r2, ip, r8
 8020464:	fb03 e30c 	mla	r3, r3, ip, lr
 8020468:	f101 0801 	add.w	r8, r1, #1
 802046c:	b292      	uxth	r2, r2
 802046e:	b29b      	uxth	r3, r3
 8020470:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8020474:	f102 0801 	add.w	r8, r2, #1
 8020478:	f103 0e01 	add.w	lr, r3, #1
 802047c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8020480:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8020484:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8020488:	ea4f 1858 	mov.w	r8, r8, lsr #5
 802048c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8020490:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020494:	ea4e 0101 	orr.w	r1, lr, r1
 8020498:	ea41 0108 	orr.w	r1, r1, r8
 802049c:	f820 1b02 	strh.w	r1, [r0], #2
 80204a0:	e7b6      	b.n	8020410 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80204a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204a4:	881b      	ldrh	r3, [r3, #0]
 80204a6:	1b9b      	subs	r3, r3, r6
 80204a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80204ac:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80204b0:	1b9b      	subs	r3, r3, r6
 80204b2:	441c      	add	r4, r3
 80204b4:	e7a6      	b.n	8020404 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80204b6:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80204ba:	2203      	movs	r2, #3
 80204bc:	2504      	movs	r5, #4
 80204be:	4919      	ldr	r1, [pc, #100]	; (8020524 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80204c0:	4550      	cmp	r0, sl
 80204c2:	d228      	bcs.n	8020516 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80204c4:	eb00 0c09 	add.w	ip, r0, r9
 80204c8:	4560      	cmp	r0, ip
 80204ca:	4623      	mov	r3, r4
 80204cc:	d219      	bcs.n	8020502 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80204ce:	f893 e000 	ldrb.w	lr, [r3]
 80204d2:	3401      	adds	r4, #1
 80204d4:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80204d8:	eb07 0b0e 	add.w	fp, r7, lr
 80204dc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80204e0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80204e4:	f89b b001 	ldrb.w	fp, [fp, #1]
 80204e8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80204ec:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80204f0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80204f4:	ea43 030b 	orr.w	r3, r3, fp
 80204f8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 80204fc:	f820 3b02 	strh.w	r3, [r0], #2
 8020500:	e7e2      	b.n	80204c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8020502:	f8b8 3000 	ldrh.w	r3, [r8]
 8020506:	1b9b      	subs	r3, r3, r6
 8020508:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802050c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020510:	1b9b      	subs	r3, r3, r6
 8020512:	441c      	add	r4, r3
 8020514:	e7d4      	b.n	80204c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8020516:	4b04      	ldr	r3, [pc, #16]	; (8020528 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8020518:	6818      	ldr	r0, [r3, #0]
 802051a:	6803      	ldr	r3, [r0, #0]
 802051c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802051e:	4798      	blx	r3
 8020520:	e750      	b.n	80203c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8020522:	bf00      	nop
 8020524:	fffff800 	.word	0xfffff800
 8020528:	200150f4 	.word	0x200150f4
 802052c:	200150ee 	.word	0x200150ee

08020530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020530:	b430      	push	{r4, r5}
 8020532:	780d      	ldrb	r5, [r1, #0]
 8020534:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8020538:	2d01      	cmp	r5, #1
 802053a:	d00a      	beq.n	8020552 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 802053c:	d305      	bcc.n	802054a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 802053e:	2d02      	cmp	r5, #2
 8020540:	d10b      	bne.n	802055a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8020542:	9402      	str	r4, [sp, #8]
 8020544:	bc30      	pop	{r4, r5}
 8020546:	f7ff be15 	b.w	8020174 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 802054a:	9402      	str	r4, [sp, #8]
 802054c:	bc30      	pop	{r4, r5}
 802054e:	f7ff bd2b 	b.w	801ffa8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020552:	9402      	str	r4, [sp, #8]
 8020554:	bc30      	pop	{r4, r5}
 8020556:	f7ff bed9 	b.w	802030c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 802055a:	bc30      	pop	{r4, r5}
 802055c:	4770      	bx	lr
	...

08020560 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8020560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020564:	b087      	sub	sp, #28
 8020566:	4604      	mov	r4, r0
 8020568:	460e      	mov	r6, r1
 802056a:	6810      	ldr	r0, [r2, #0]
 802056c:	6851      	ldr	r1, [r2, #4]
 802056e:	ad02      	add	r5, sp, #8
 8020570:	4617      	mov	r7, r2
 8020572:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8020576:	f8df 9230 	ldr.w	r9, [pc, #560]	; 80207a8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 802057a:	c503      	stmia	r5!, {r0, r1}
 802057c:	6818      	ldr	r0, [r3, #0]
 802057e:	ad04      	add	r5, sp, #16
 8020580:	6859      	ldr	r1, [r3, #4]
 8020582:	c503      	stmia	r5!, {r0, r1}
 8020584:	a802      	add	r0, sp, #8
 8020586:	f7f9 fb13 	bl	8019bb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802058a:	4639      	mov	r1, r7
 802058c:	a804      	add	r0, sp, #16
 802058e:	f7f9 fb37 	bl	8019c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020592:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020596:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802059a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802059e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80205a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80205a6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80205aa:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80205ae:	440e      	add	r6, r1
 80205b0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80205b4:	440a      	add	r2, r1
 80205b6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80205ba:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80205be:	4413      	add	r3, r2
 80205c0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80205c4:	4b77      	ldr	r3, [pc, #476]	; (80207a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80205c6:	6818      	ldr	r0, [r3, #0]
 80205c8:	6803      	ldr	r3, [r0, #0]
 80205ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80205cc:	4798      	blx	r3
 80205ce:	f8b9 b000 	ldrh.w	fp, [r9]
 80205d2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80205d6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80205da:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80205de:	fb05 f50b 	mul.w	r5, r5, fp
 80205e2:	fb0b 2303 	mla	r3, fp, r3, r2
 80205e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80205ea:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80205ee:	9300      	str	r3, [sp, #0]
 80205f0:	d069      	beq.n	80206c6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80205f2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80205f6:	4558      	cmp	r0, fp
 80205f8:	f080 80cc 	bcs.w	8020794 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80205fc:	9b00      	ldr	r3, [sp, #0]
 80205fe:	4631      	mov	r1, r6
 8020600:	18c3      	adds	r3, r0, r3
 8020602:	9301      	str	r3, [sp, #4]
 8020604:	9b01      	ldr	r3, [sp, #4]
 8020606:	4298      	cmp	r0, r3
 8020608:	d24f      	bcs.n	80206aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802060a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802060e:	2a00      	cmp	r2, #0
 8020610:	d048      	beq.n	80206a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8020612:	fb0a f202 	mul.w	r2, sl, r2
 8020616:	1c53      	adds	r3, r2, #1
 8020618:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802061c:	121b      	asrs	r3, r3, #8
 802061e:	d041      	beq.n	80206a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8020620:	8802      	ldrh	r2, [r0, #0]
 8020622:	b29e      	uxth	r6, r3
 8020624:	f8b4 c000 	ldrh.w	ip, [r4]
 8020628:	43db      	mvns	r3, r3
 802062a:	1215      	asrs	r5, r2, #8
 802062c:	b2db      	uxtb	r3, r3
 802062e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020632:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020636:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802063a:	fb15 f503 	smulbb	r5, r5, r3
 802063e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020642:	00d2      	lsls	r2, r2, #3
 8020644:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8020648:	fb07 5706 	mla	r7, r7, r6, r5
 802064c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020650:	b2d2      	uxtb	r2, r2
 8020652:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020656:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802065a:	fb1e fe03 	smulbb	lr, lr, r3
 802065e:	b2bf      	uxth	r7, r7
 8020660:	fb12 f203 	smulbb	r2, r2, r3
 8020664:	fa5f fc8c 	uxtb.w	ip, ip
 8020668:	fb05 e506 	mla	r5, r5, r6, lr
 802066c:	f107 0e01 	add.w	lr, r7, #1
 8020670:	fb0c 2c06 	mla	ip, ip, r6, r2
 8020674:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8020678:	fa1f fc8c 	uxth.w	ip, ip
 802067c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8020680:	b2ad      	uxth	r5, r5
 8020682:	f10c 0701 	add.w	r7, ip, #1
 8020686:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802068a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802068e:	ea47 070e 	orr.w	r7, r7, lr
 8020692:	f105 0e01 	add.w	lr, r5, #1
 8020696:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802069a:	096d      	lsrs	r5, r5, #5
 802069c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80206a0:	432f      	orrs	r7, r5
 80206a2:	8007      	strh	r7, [r0, #0]
 80206a4:	3002      	adds	r0, #2
 80206a6:	3402      	adds	r4, #2
 80206a8:	e7ac      	b.n	8020604 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80206aa:	f8b9 3000 	ldrh.w	r3, [r9]
 80206ae:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80206b2:	eba3 0308 	sub.w	r3, r3, r8
 80206b6:	eba6 0608 	sub.w	r6, r6, r8
 80206ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80206be:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80206c2:	440e      	add	r6, r1
 80206c4:	e797      	b.n	80205f6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80206c6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80206ca:	42a8      	cmp	r0, r5
 80206cc:	d262      	bcs.n	8020794 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80206ce:	9b00      	ldr	r3, [sp, #0]
 80206d0:	4631      	mov	r1, r6
 80206d2:	eb00 0b03 	add.w	fp, r0, r3
 80206d6:	4558      	cmp	r0, fp
 80206d8:	d24e      	bcs.n	8020778 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80206da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80206de:	b12b      	cbz	r3, 80206ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80206e0:	2bff      	cmp	r3, #255	; 0xff
 80206e2:	f8b4 e000 	ldrh.w	lr, [r4]
 80206e6:	d104      	bne.n	80206f2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80206e8:	f8a0 e000 	strh.w	lr, [r0]
 80206ec:	3002      	adds	r0, #2
 80206ee:	3402      	adds	r4, #2
 80206f0:	e7f1      	b.n	80206d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80206f2:	8802      	ldrh	r2, [r0, #0]
 80206f4:	b29f      	uxth	r7, r3
 80206f6:	43db      	mvns	r3, r3
 80206f8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80206fc:	1216      	asrs	r6, r2, #8
 80206fe:	b2db      	uxtb	r3, r3
 8020700:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020704:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020708:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 802070c:	00d2      	lsls	r2, r2, #3
 802070e:	fb16 f603 	smulbb	r6, r6, r3
 8020712:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020716:	b2d2      	uxtb	r2, r2
 8020718:	fb0c 6c07 	mla	ip, ip, r7, r6
 802071c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020720:	fb1a fa03 	smulbb	sl, sl, r3
 8020724:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020728:	fa1f fc8c 	uxth.w	ip, ip
 802072c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020730:	fb12 f303 	smulbb	r3, r2, r3
 8020734:	fa5f fe8e 	uxtb.w	lr, lr
 8020738:	fb06 a607 	mla	r6, r6, r7, sl
 802073c:	f10c 0201 	add.w	r2, ip, #1
 8020740:	fb0e 3307 	mla	r3, lr, r7, r3
 8020744:	b2b6      	uxth	r6, r6
 8020746:	b29b      	uxth	r3, r3
 8020748:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 802074c:	f106 0a01 	add.w	sl, r6, #1
 8020750:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8020754:	f103 0c01 	add.w	ip, r3, #1
 8020758:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 802075c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020760:	0976      	lsrs	r6, r6, #5
 8020762:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8020766:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802076a:	ea4c 0c02 	orr.w	ip, ip, r2
 802076e:	ea4c 0c06 	orr.w	ip, ip, r6
 8020772:	f8a0 c000 	strh.w	ip, [r0]
 8020776:	e7b9      	b.n	80206ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8020778:	f8b9 3000 	ldrh.w	r3, [r9]
 802077c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8020780:	eba3 0308 	sub.w	r3, r3, r8
 8020784:	eba6 0608 	sub.w	r6, r6, r8
 8020788:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802078c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8020790:	440e      	add	r6, r1
 8020792:	e79a      	b.n	80206ca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8020794:	4b03      	ldr	r3, [pc, #12]	; (80207a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8020796:	6818      	ldr	r0, [r3, #0]
 8020798:	6803      	ldr	r3, [r0, #0]
 802079a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802079c:	4798      	blx	r3
 802079e:	b007      	add	sp, #28
 80207a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207a4:	200150f4 	.word	0x200150f4
 80207a8:	200150ee 	.word	0x200150ee

080207ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80207ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80207b0:	b089      	sub	sp, #36	; 0x24
 80207b2:	4682      	mov	sl, r0
 80207b4:	460f      	mov	r7, r1
 80207b6:	4691      	mov	r9, r2
 80207b8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80207bc:	4698      	mov	r8, r3
 80207be:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80207c0:	2e00      	cmp	r6, #0
 80207c2:	d036      	beq.n	8020832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80207c4:	4608      	mov	r0, r1
 80207c6:	f7fc f861 	bl	801c88c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80207ca:	4605      	mov	r5, r0
 80207cc:	4638      	mov	r0, r7
 80207ce:	f7fc f891 	bl	801c8f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80207d2:	f8ad 000e 	strh.w	r0, [sp, #14]
 80207d6:	4638      	mov	r0, r7
 80207d8:	f8ad 9008 	strh.w	r9, [sp, #8]
 80207dc:	f8ad 500c 	strh.w	r5, [sp, #12]
 80207e0:	f8ad 800a 	strh.w	r8, [sp, #10]
 80207e4:	f7fc f93e 	bl	801ca64 <_ZNK8touchgfx6Bitmap7getDataEv>
 80207e8:	4605      	mov	r5, r0
 80207ea:	4638      	mov	r0, r7
 80207ec:	f7fc f96a 	bl	801cac4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80207f0:	4681      	mov	r9, r0
 80207f2:	4638      	mov	r0, r7
 80207f4:	f7fc f9ba 	bl	801cb6c <_ZNK8touchgfx6Bitmap9getFormatEv>
 80207f8:	280b      	cmp	r0, #11
 80207fa:	d81a      	bhi.n	8020832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80207fc:	e8df f000 	tbb	[pc, r0]
 8020800:	1906aebd 	.word	0x1906aebd
 8020804:	19191919 	.word	0x19191919
 8020808:	b5191919 	.word	0xb5191919
 802080c:	4bb0      	ldr	r3, [pc, #704]	; (8020ad0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 802080e:	6818      	ldr	r0, [r3, #0]
 8020810:	6803      	ldr	r3, [r0, #0]
 8020812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020814:	4798      	blx	r3
 8020816:	2eff      	cmp	r6, #255	; 0xff
 8020818:	d121      	bne.n	802085e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 802081a:	0683      	lsls	r3, r0, #26
 802081c:	d41f      	bmi.n	802085e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 802081e:	4638      	mov	r0, r7
 8020820:	f7fc f8e8 	bl	801c9f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020824:	b940      	cbnz	r0, 8020838 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8020826:	4623      	mov	r3, r4
 8020828:	aa02      	add	r2, sp, #8
 802082a:	4629      	mov	r1, r5
 802082c:	4650      	mov	r0, sl
 802082e:	f7ff fa2f 	bl	801fc90 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8020832:	b009      	add	sp, #36	; 0x24
 8020834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020838:	f10d 0818 	add.w	r8, sp, #24
 802083c:	4639      	mov	r1, r7
 802083e:	af04      	add	r7, sp, #16
 8020840:	4640      	mov	r0, r8
 8020842:	f7fc f88b 	bl	801c95c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8020846:	e898 0003 	ldmia.w	r8, {r0, r1}
 802084a:	e887 0003 	stmia.w	r7, {r0, r1}
 802084e:	4638      	mov	r0, r7
 8020850:	4621      	mov	r1, r4
 8020852:	f7f6 f957 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 8020856:	4638      	mov	r0, r7
 8020858:	f7f6 f997 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 802085c:	b130      	cbz	r0, 802086c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 802085e:	4633      	mov	r3, r6
 8020860:	4622      	mov	r2, r4
 8020862:	a902      	add	r1, sp, #8
 8020864:	4628      	mov	r0, r5
 8020866:	f7ff f92d 	bl	801fac4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802086a:	e7e2      	b.n	8020832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 802086c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8020870:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020874:	4293      	cmp	r3, r2
 8020876:	dd12      	ble.n	802089e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8020878:	1a9b      	subs	r3, r3, r2
 802087a:	f9b4 0000 	ldrsh.w	r0, [r4]
 802087e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020882:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020886:	4628      	mov	r0, r5
 8020888:	f8ad 201a 	strh.w	r2, [sp, #26]
 802088c:	4642      	mov	r2, r8
 802088e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020892:	a902      	add	r1, sp, #8
 8020894:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020898:	4633      	mov	r3, r6
 802089a:	f7ff f913 	bl	801fac4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802089e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80208a2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80208a6:	4293      	cmp	r3, r2
 80208a8:	dd12      	ble.n	80208d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 80208aa:	1a9b      	subs	r3, r3, r2
 80208ac:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80208b0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80208b4:	f8ad 2018 	strh.w	r2, [sp, #24]
 80208b8:	4642      	mov	r2, r8
 80208ba:	f8ad 001a 	strh.w	r0, [sp, #26]
 80208be:	4628      	mov	r0, r5
 80208c0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80208c4:	23ff      	movs	r3, #255	; 0xff
 80208c6:	f8ad 101e 	strh.w	r1, [sp, #30]
 80208ca:	a902      	add	r1, sp, #8
 80208cc:	f7ff f8fa 	bl	801fac4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80208d0:	463b      	mov	r3, r7
 80208d2:	aa02      	add	r2, sp, #8
 80208d4:	4629      	mov	r1, r5
 80208d6:	4650      	mov	r0, sl
 80208d8:	f7ff f9da 	bl	801fc90 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80208dc:	88a2      	ldrh	r2, [r4, #4]
 80208de:	8823      	ldrh	r3, [r4, #0]
 80208e0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80208e4:	4413      	add	r3, r2
 80208e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80208ea:	440a      	add	r2, r1
 80208ec:	b29b      	uxth	r3, r3
 80208ee:	b292      	uxth	r2, r2
 80208f0:	b218      	sxth	r0, r3
 80208f2:	b211      	sxth	r1, r2
 80208f4:	4288      	cmp	r0, r1
 80208f6:	dd12      	ble.n	802091e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 80208f8:	1a9b      	subs	r3, r3, r2
 80208fa:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80208fe:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8020902:	4642      	mov	r2, r8
 8020904:	f8ad 1018 	strh.w	r1, [sp, #24]
 8020908:	a902      	add	r1, sp, #8
 802090a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802090e:	23ff      	movs	r3, #255	; 0xff
 8020910:	f8ad 001e 	strh.w	r0, [sp, #30]
 8020914:	4628      	mov	r0, r5
 8020916:	f8ad 601a 	strh.w	r6, [sp, #26]
 802091a:	f7ff f8d3 	bl	801fac4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802091e:	88e2      	ldrh	r2, [r4, #6]
 8020920:	8863      	ldrh	r3, [r4, #2]
 8020922:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020926:	4413      	add	r3, r2
 8020928:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802092c:	440a      	add	r2, r1
 802092e:	b29b      	uxth	r3, r3
 8020930:	b292      	uxth	r2, r2
 8020932:	b218      	sxth	r0, r3
 8020934:	b211      	sxth	r1, r2
 8020936:	4288      	cmp	r0, r1
 8020938:	f77f af7b 	ble.w	8020832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 802093c:	1a9b      	subs	r3, r3, r2
 802093e:	f9b4 6000 	ldrsh.w	r6, [r4]
 8020942:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020946:	4642      	mov	r2, r8
 8020948:	f8ad 301e 	strh.w	r3, [sp, #30]
 802094c:	23ff      	movs	r3, #255	; 0xff
 802094e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8020952:	f8ad 101a 	strh.w	r1, [sp, #26]
 8020956:	f8ad 001c 	strh.w	r0, [sp, #28]
 802095a:	e782      	b.n	8020862 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 802095c:	4633      	mov	r3, r6
 802095e:	4622      	mov	r2, r4
 8020960:	a902      	add	r1, sp, #8
 8020962:	4628      	mov	r0, r5
 8020964:	f7ff fa04 	bl	801fd70 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8020968:	e763      	b.n	8020832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 802096a:	9600      	str	r6, [sp, #0]
 802096c:	4623      	mov	r3, r4
 802096e:	aa02      	add	r2, sp, #8
 8020970:	4649      	mov	r1, r9
 8020972:	4628      	mov	r0, r5
 8020974:	f7ff fddc 	bl	8020530 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020978:	e75b      	b.n	8020832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 802097a:	4638      	mov	r0, r7
 802097c:	f7fc f83a 	bl	801c9f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020980:	b950      	cbnz	r0, 8020998 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8020982:	f8da 3000 	ldr.w	r3, [sl]
 8020986:	aa02      	add	r2, sp, #8
 8020988:	4629      	mov	r1, r5
 802098a:	e9cd 6000 	strd	r6, r0, [sp]
 802098e:	4650      	mov	r0, sl
 8020990:	68de      	ldr	r6, [r3, #12]
 8020992:	4623      	mov	r3, r4
 8020994:	47b0      	blx	r6
 8020996:	e74c      	b.n	8020832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8020998:	f10d 0818 	add.w	r8, sp, #24
 802099c:	4639      	mov	r1, r7
 802099e:	af04      	add	r7, sp, #16
 80209a0:	4640      	mov	r0, r8
 80209a2:	f7fb ffdb 	bl	801c95c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80209a6:	e898 0003 	ldmia.w	r8, {r0, r1}
 80209aa:	e887 0003 	stmia.w	r7, {r0, r1}
 80209ae:	4638      	mov	r0, r7
 80209b0:	4621      	mov	r1, r4
 80209b2:	f7f6 f8a7 	bl	8016b04 <_ZN8touchgfx4RectaNERKS0_>
 80209b6:	4638      	mov	r0, r7
 80209b8:	f7f6 f8e7 	bl	8016b8a <_ZNK8touchgfx4Rect7isEmptyEv>
 80209bc:	b138      	cbz	r0, 80209ce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 80209be:	4623      	mov	r3, r4
 80209c0:	9600      	str	r6, [sp, #0]
 80209c2:	aa02      	add	r2, sp, #8
 80209c4:	4649      	mov	r1, r9
 80209c6:	4628      	mov	r0, r5
 80209c8:	f7ff fdca 	bl	8020560 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80209cc:	e731      	b.n	8020832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80209ce:	f8da 3000 	ldr.w	r3, [sl]
 80209d2:	aa02      	add	r2, sp, #8
 80209d4:	4629      	mov	r1, r5
 80209d6:	e9cd 6000 	strd	r6, r0, [sp]
 80209da:	4650      	mov	r0, sl
 80209dc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80209e0:	463b      	mov	r3, r7
 80209e2:	47d8      	blx	fp
 80209e4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80209e8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80209ec:	4293      	cmp	r3, r2
 80209ee:	dd13      	ble.n	8020a18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 80209f0:	f9b4 0000 	ldrsh.w	r0, [r4]
 80209f4:	1a9b      	subs	r3, r3, r2
 80209f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80209fa:	f8ad 0018 	strh.w	r0, [sp, #24]
 80209fe:	4628      	mov	r0, r5
 8020a00:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020a04:	aa02      	add	r2, sp, #8
 8020a06:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020a0a:	4649      	mov	r1, r9
 8020a0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020a10:	4643      	mov	r3, r8
 8020a12:	9600      	str	r6, [sp, #0]
 8020a14:	f7ff fda4 	bl	8020560 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020a18:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020a1c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020a20:	4293      	cmp	r3, r2
 8020a22:	dd13      	ble.n	8020a4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 8020a24:	1a9b      	subs	r3, r3, r2
 8020a26:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8020a2a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8020a2e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020a32:	aa02      	add	r2, sp, #8
 8020a34:	f8ad 001a 	strh.w	r0, [sp, #26]
 8020a38:	4628      	mov	r0, r5
 8020a3a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020a3e:	4643      	mov	r3, r8
 8020a40:	f8ad 101e 	strh.w	r1, [sp, #30]
 8020a44:	4649      	mov	r1, r9
 8020a46:	9600      	str	r6, [sp, #0]
 8020a48:	f7ff fd8a 	bl	8020560 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020a4c:	88a2      	ldrh	r2, [r4, #4]
 8020a4e:	8823      	ldrh	r3, [r4, #0]
 8020a50:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8020a54:	4413      	add	r3, r2
 8020a56:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020a5a:	440a      	add	r2, r1
 8020a5c:	b29b      	uxth	r3, r3
 8020a5e:	b292      	uxth	r2, r2
 8020a60:	b218      	sxth	r0, r3
 8020a62:	b211      	sxth	r1, r2
 8020a64:	4288      	cmp	r0, r1
 8020a66:	dd13      	ble.n	8020a90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8020a68:	1a9b      	subs	r3, r3, r2
 8020a6a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8020a6e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8020a72:	aa02      	add	r2, sp, #8
 8020a74:	f8ad 1018 	strh.w	r1, [sp, #24]
 8020a78:	4649      	mov	r1, r9
 8020a7a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020a7e:	4643      	mov	r3, r8
 8020a80:	f8ad 001e 	strh.w	r0, [sp, #30]
 8020a84:	4628      	mov	r0, r5
 8020a86:	9600      	str	r6, [sp, #0]
 8020a88:	f8ad 701a 	strh.w	r7, [sp, #26]
 8020a8c:	f7ff fd68 	bl	8020560 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020a90:	88e2      	ldrh	r2, [r4, #6]
 8020a92:	8863      	ldrh	r3, [r4, #2]
 8020a94:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8020a98:	4413      	add	r3, r2
 8020a9a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8020a9e:	440a      	add	r2, r1
 8020aa0:	b29b      	uxth	r3, r3
 8020aa2:	b292      	uxth	r2, r2
 8020aa4:	b218      	sxth	r0, r3
 8020aa6:	b211      	sxth	r1, r2
 8020aa8:	4288      	cmp	r0, r1
 8020aaa:	f77f aec2 	ble.w	8020832 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8020aae:	f9b4 7000 	ldrsh.w	r7, [r4]
 8020ab2:	1a9b      	subs	r3, r3, r2
 8020ab4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8020ab8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020abc:	4643      	mov	r3, r8
 8020abe:	f8ad 7018 	strh.w	r7, [sp, #24]
 8020ac2:	f8ad 101a 	strh.w	r1, [sp, #26]
 8020ac6:	f8ad 001c 	strh.w	r0, [sp, #28]
 8020aca:	9600      	str	r6, [sp, #0]
 8020acc:	e779      	b.n	80209c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8020ace:	bf00      	nop
 8020ad0:	200150f4 	.word	0x200150f4

08020ad4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8020ad4:	b180      	cbz	r0, 8020af8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8020ad6:	2903      	cmp	r1, #3
 8020ad8:	d81c      	bhi.n	8020b14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020ada:	e8df f001 	tbb	[pc, r1]
 8020ade:	1d02      	.short	0x1d02
 8020ae0:	1f08      	.short	0x1f08
 8020ae2:	4b10      	ldr	r3, [pc, #64]	; (8020b24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020ae4:	8818      	ldrh	r0, [r3, #0]
 8020ae6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020aea:	4240      	negs	r0, r0
 8020aec:	4770      	bx	lr
 8020aee:	4b0d      	ldr	r3, [pc, #52]	; (8020b24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8020af0:	8818      	ldrh	r0, [r3, #0]
 8020af2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020af6:	4770      	bx	lr
 8020af8:	2903      	cmp	r1, #3
 8020afa:	d80b      	bhi.n	8020b14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020afc:	a301      	add	r3, pc, #4	; (adr r3, 8020b04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8020afe:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020b02:	bf00      	nop
 8020b04:	08020b19 	.word	0x08020b19
 8020b08:	08020aef 	.word	0x08020aef
 8020b0c:	08020b1d 	.word	0x08020b1d
 8020b10:	08020ae3 	.word	0x08020ae3
 8020b14:	2000      	movs	r0, #0
 8020b16:	4770      	bx	lr
 8020b18:	2001      	movs	r0, #1
 8020b1a:	4770      	bx	lr
 8020b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8020b20:	4770      	bx	lr
 8020b22:	bf00      	nop
 8020b24:	200150ee 	.word	0x200150ee

08020b28 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8020b28:	b180      	cbz	r0, 8020b4c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8020b2a:	2903      	cmp	r1, #3
 8020b2c:	d81c      	bhi.n	8020b68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8020b2e:	e8df f001 	tbb	[pc, r1]
 8020b32:	021d      	.short	0x021d
 8020b34:	071f      	.short	0x071f
 8020b36:	4b10      	ldr	r3, [pc, #64]	; (8020b78 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020b38:	8818      	ldrh	r0, [r3, #0]
 8020b3a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020b3e:	4770      	bx	lr
 8020b40:	4b0d      	ldr	r3, [pc, #52]	; (8020b78 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020b42:	8818      	ldrh	r0, [r3, #0]
 8020b44:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020b48:	4240      	negs	r0, r0
 8020b4a:	4770      	bx	lr
 8020b4c:	2903      	cmp	r1, #3
 8020b4e:	d80b      	bhi.n	8020b68 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8020b50:	a301      	add	r3, pc, #4	; (adr r3, 8020b58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8020b52:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020b56:	bf00      	nop
 8020b58:	08020b37 	.word	0x08020b37
 8020b5c:	08020b71 	.word	0x08020b71
 8020b60:	08020b41 	.word	0x08020b41
 8020b64:	08020b6d 	.word	0x08020b6d
 8020b68:	2000      	movs	r0, #0
 8020b6a:	4770      	bx	lr
 8020b6c:	2001      	movs	r0, #1
 8020b6e:	4770      	bx	lr
 8020b70:	f04f 30ff 	mov.w	r0, #4294967295
 8020b74:	4770      	bx	lr
 8020b76:	bf00      	nop
 8020b78:	200150ee 	.word	0x200150ee

08020b7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b80:	b099      	sub	sp, #100	; 0x64
 8020b82:	910b      	str	r1, [sp, #44]	; 0x2c
 8020b84:	a914      	add	r1, sp, #80	; 0x50
 8020b86:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8020b8a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8020b8e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8020b92:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8020b96:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8020b9a:	e881 000c 	stmia.w	r1, {r2, r3}
 8020b9e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8020ba2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8020ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8020ba8:	f891 900d 	ldrb.w	r9, [r1, #13]
 8020bac:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020bb0:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8020bb4:	9310      	str	r3, [sp, #64]	; 0x40
 8020bb6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8020bba:	930c      	str	r3, [sp, #48]	; 0x30
 8020bbc:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8020bc0:	798f      	ldrb	r7, [r1, #6]
 8020bc2:	431f      	orrs	r7, r3
 8020bc4:	f000 8195 	beq.w	8020ef2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020bc8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8020bcc:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8020bd0:	f891 9007 	ldrb.w	r9, [r1, #7]
 8020bd4:	ea59 0903 	orrs.w	r9, r9, r3
 8020bd8:	f000 818b 	beq.w	8020ef2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020bdc:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020be0:	b29b      	uxth	r3, r3
 8020be2:	2d00      	cmp	r5, #0
 8020be4:	f000 812e 	beq.w	8020e44 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8020be8:	1aed      	subs	r5, r5, r3
 8020bea:	b2ad      	uxth	r5, r5
 8020bec:	042b      	lsls	r3, r5, #16
 8020bee:	d502      	bpl.n	8020bf6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8020bf0:	1b64      	subs	r4, r4, r5
 8020bf2:	2500      	movs	r5, #0
 8020bf4:	b224      	sxth	r4, r4
 8020bf6:	f9b2 1000 	ldrsh.w	r1, [r2]
 8020bfa:	a814      	add	r0, sp, #80	; 0x50
 8020bfc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8020c00:	428c      	cmp	r4, r1
 8020c02:	b28b      	uxth	r3, r1
 8020c04:	bfbf      	itttt	lt
 8020c06:	18ed      	addlt	r5, r5, r3
 8020c08:	1b2c      	sublt	r4, r5, r4
 8020c0a:	b2a5      	uxthlt	r5, r4
 8020c0c:	460c      	movlt	r4, r1
 8020c0e:	8891      	ldrh	r1, [r2, #4]
 8020c10:	440b      	add	r3, r1
 8020c12:	4621      	mov	r1, r4
 8020c14:	b21b      	sxth	r3, r3
 8020c16:	930f      	str	r3, [sp, #60]	; 0x3c
 8020c18:	88d3      	ldrh	r3, [r2, #6]
 8020c1a:	8852      	ldrh	r2, [r2, #2]
 8020c1c:	4413      	add	r3, r2
 8020c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c20:	b21b      	sxth	r3, r3
 8020c22:	930d      	str	r3, [sp, #52]	; 0x34
 8020c24:	4bbd      	ldr	r3, [pc, #756]	; (8020f1c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8020c26:	f893 b000 	ldrb.w	fp, [r3]
 8020c2a:	f10b 3cff 	add.w	ip, fp, #4294967295
 8020c2e:	f1dc 0300 	rsbs	r3, ip, #0
 8020c32:	eb43 030c 	adc.w	r3, r3, ip
 8020c36:	930e      	str	r3, [sp, #56]	; 0x38
 8020c38:	4653      	mov	r3, sl
 8020c3a:	f7f8 fe34 	bl	80198a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8020c3e:	4621      	mov	r1, r4
 8020c40:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8020c44:	4653      	mov	r3, sl
 8020c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020c48:	a814      	add	r0, sp, #80	; 0x50
 8020c4a:	f7f8 fe49 	bl	80198e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8020c4e:	a918      	add	r1, sp, #96	; 0x60
 8020c50:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8020c54:	a817      	add	r0, sp, #92	; 0x5c
 8020c56:	f7f8 ff69 	bl	8019b2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8020c5a:	f1ba 0f00 	cmp.w	sl, #0
 8020c5e:	f040 80f4 	bne.w	8020e4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8020c62:	f1bb 0f01 	cmp.w	fp, #1
 8020c66:	f040 80f8 	bne.w	8020e5a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8020c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c6c:	2b00      	cmp	r3, #0
 8020c6e:	f040 8145 	bne.w	8020efc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8020c72:	b2ba      	uxth	r2, r7
 8020c74:	b905      	cbnz	r5, 8020c78 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8020c76:	b16e      	cbz	r6, 8020c94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8020c78:	fb06 5302 	mla	r3, r6, r2, r5
 8020c7c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8020c7e:	4631      	mov	r1, r6
 8020c80:	fb08 f303 	mul.w	r3, r8, r3
 8020c84:	f003 0607 	and.w	r6, r3, #7
 8020c88:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8020c8c:	9328      	str	r3, [sp, #160]	; 0xa0
 8020c8e:	eba9 0301 	sub.w	r3, r9, r1
 8020c92:	930a      	str	r3, [sp, #40]	; 0x28
 8020c94:	4651      	mov	r1, sl
 8020c96:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020c98:	f7ff ff1c 	bl	8020ad4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8020c9c:	4681      	mov	r9, r0
 8020c9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020ca0:	f7ff ff42 	bl	8020b28 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8020ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ca6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020ca8:	4683      	mov	fp, r0
 8020caa:	eba3 0a01 	sub.w	sl, r3, r1
 8020cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020cb0:	459a      	cmp	sl, r3
 8020cb2:	bfa8      	it	ge
 8020cb4:	469a      	movge	sl, r3
 8020cb6:	f1ba 0f00 	cmp.w	sl, #0
 8020cba:	f340 811a 	ble.w	8020ef2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020cbe:	1b64      	subs	r4, r4, r5
 8020cc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020cc2:	1b1c      	subs	r4, r3, r4
 8020cc4:	42bc      	cmp	r4, r7
 8020cc6:	bfd4      	ite	le
 8020cc8:	ebc5 0504 	rsble	r5, r5, r4
 8020ccc:	ebc5 0507 	rsbgt	r5, r5, r7
 8020cd0:	2d00      	cmp	r5, #0
 8020cd2:	f340 810e 	ble.w	8020ef2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020cd6:	1b52      	subs	r2, r2, r5
 8020cd8:	fb08 f302 	mul.w	r3, r8, r2
 8020cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8020cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	f040 8116 	bne.w	8020f12 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8020ce6:	4b8e      	ldr	r3, [pc, #568]	; (8020f20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8020ce8:	6818      	ldr	r0, [r3, #0]
 8020cea:	6803      	ldr	r3, [r0, #0]
 8020cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020cee:	4798      	blx	r3
 8020cf0:	2301      	movs	r3, #1
 8020cf2:	4a8c      	ldr	r2, [pc, #560]	; (8020f24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8020cf4:	fa03 f308 	lsl.w	r3, r3, r8
 8020cf8:	8811      	ldrh	r1, [r2, #0]
 8020cfa:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8020cfe:	3b01      	subs	r3, #1
 8020d00:	b2db      	uxtb	r3, r3
 8020d02:	930e      	str	r3, [sp, #56]	; 0x38
 8020d04:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8020d08:	fb01 2303 	mla	r3, r1, r3, r2
 8020d0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020d10:	930a      	str	r3, [sp, #40]	; 0x28
 8020d12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d14:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8020d18:	9313      	str	r3, [sp, #76]	; 0x4c
 8020d1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d1c:	0a19      	lsrs	r1, r3, #8
 8020d1e:	b2cb      	uxtb	r3, r1
 8020d20:	9312      	str	r3, [sp, #72]	; 0x48
 8020d22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d24:	b2db      	uxtb	r3, r3
 8020d26:	9311      	str	r3, [sp, #68]	; 0x44
 8020d28:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d2a:	095a      	lsrs	r2, r3, #5
 8020d2c:	4b7e      	ldr	r3, [pc, #504]	; (8020f28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8020d2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020d32:	400b      	ands	r3, r1
 8020d34:	4313      	orrs	r3, r2
 8020d36:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8020d38:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020d3c:	4313      	orrs	r3, r2
 8020d3e:	b29b      	uxth	r3, r3
 8020d40:	9310      	str	r3, [sp, #64]	; 0x40
 8020d42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d44:	781a      	ldrb	r2, [r3, #0]
 8020d46:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8020d4a:	fb05 b919 	mls	r9, r5, r9, fp
 8020d4e:	4132      	asrs	r2, r6
 8020d50:	fb03 fb05 	mul.w	fp, r3, r5
 8020d54:	930d      	str	r3, [sp, #52]	; 0x34
 8020d56:	b2d2      	uxtb	r2, r2
 8020d58:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8020d5c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8020d60:	f0c0 80f5 	bcc.w	8020f4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8020d64:	46ae      	mov	lr, r5
 8020d66:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8020d6a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8020d6e:	f0c0 80dd 	bcc.w	8020f2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8020d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020d74:	4013      	ands	r3, r2
 8020d76:	d055      	beq.n	8020e24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8020d78:	20ff      	movs	r0, #255	; 0xff
 8020d7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8020d7c:	fb90 f1f1 	sdiv	r1, r0, r1
 8020d80:	434b      	muls	r3, r1
 8020d82:	2bfe      	cmp	r3, #254	; 0xfe
 8020d84:	dd03      	ble.n	8020d8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8020d86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020d88:	4281      	cmp	r1, r0
 8020d8a:	f000 80c4 	beq.w	8020f16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8020d8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020d90:	f8bc 4000 	ldrh.w	r4, [ip]
 8020d94:	fb11 f303 	smulbb	r3, r1, r3
 8020d98:	1220      	asrs	r0, r4, #8
 8020d9a:	b29b      	uxth	r3, r3
 8020d9c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020da0:	1c59      	adds	r1, r3, #1
 8020da2:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8020da6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8020daa:	10e1      	asrs	r1, r4, #3
 8020dac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020db0:	00e4      	lsls	r4, r4, #3
 8020db2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020db6:	b29f      	uxth	r7, r3
 8020db8:	43db      	mvns	r3, r3
 8020dba:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8020dbe:	b2db      	uxtb	r3, r3
 8020dc0:	b2e4      	uxtb	r4, r4
 8020dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8020dc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020dc6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020dca:	fb13 f907 	smulbb	r9, r3, r7
 8020dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dd0:	fb00 9003 	mla	r0, r0, r3, r9
 8020dd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020dd6:	fb13 f907 	smulbb	r9, r3, r7
 8020dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ddc:	b280      	uxth	r0, r0
 8020dde:	fb01 9103 	mla	r1, r1, r3, r9
 8020de2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020de4:	fb13 f707 	smulbb	r7, r3, r7
 8020de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dea:	b289      	uxth	r1, r1
 8020dec:	fb04 7403 	mla	r4, r4, r3, r7
 8020df0:	1c43      	adds	r3, r0, #1
 8020df2:	b2a4      	uxth	r4, r4
 8020df4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020df8:	f104 0901 	add.w	r9, r4, #1
 8020dfc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020e00:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8020e04:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8020e08:	ea49 0000 	orr.w	r0, r9, r0
 8020e0c:	f101 0901 	add.w	r9, r1, #1
 8020e10:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8020e14:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020e18:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020e1c:	ea40 0009 	orr.w	r0, r0, r9
 8020e20:	f8ac 0000 	strh.w	r0, [ip]
 8020e24:	4446      	add	r6, r8
 8020e26:	b2b6      	uxth	r6, r6
 8020e28:	2e07      	cmp	r6, #7
 8020e2a:	bf89      	itett	hi
 8020e2c:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8020e2e:	fa42 f208 	asrls.w	r2, r2, r8
 8020e32:	2600      	movhi	r6, #0
 8020e34:	785a      	ldrbhi	r2, [r3, #1]
 8020e36:	bf8a      	itet	hi
 8020e38:	3301      	addhi	r3, #1
 8020e3a:	b2d2      	uxtbls	r2, r2
 8020e3c:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8020e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020e40:	449c      	add	ip, r3
 8020e42:	e792      	b.n	8020d6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8020e44:	441c      	add	r4, r3
 8020e46:	b224      	sxth	r4, r4
 8020e48:	e6d5      	b.n	8020bf6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8020e4a:	f1ba 0f01 	cmp.w	sl, #1
 8020e4e:	f47f af0c 	bne.w	8020c6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020e52:	f1bb 0f01 	cmp.w	fp, #1
 8020e56:	f47f af08 	bne.w	8020c6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020e5a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8020f20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8020e5e:	f8db 0000 	ldr.w	r0, [fp]
 8020e62:	6803      	ldr	r3, [r0, #0]
 8020e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e66:	4798      	blx	r3
 8020e68:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8020e6c:	465a      	mov	r2, fp
 8020e6e:	d006      	beq.n	8020e7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8020e70:	f1b8 0f04 	cmp.w	r8, #4
 8020e74:	d140      	bne.n	8020ef8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8020e76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020e78:	3300      	adds	r3, #0
 8020e7a:	bf18      	it	ne
 8020e7c:	2301      	movne	r3, #1
 8020e7e:	0580      	lsls	r0, r0, #22
 8020e80:	d56e      	bpl.n	8020f60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8020e82:	f1b8 0f08 	cmp.w	r8, #8
 8020e86:	d16b      	bne.n	8020f60 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	bf0c      	ite	eq
 8020e8c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8020e90:	f44f 7180 	movne.w	r1, #256	; 0x100
 8020e94:	2d00      	cmp	r5, #0
 8020e96:	f47f aee8 	bne.w	8020c6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020e9a:	2e00      	cmp	r6, #0
 8020e9c:	f47f aee5 	bne.w	8020c6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020ea0:	19e3      	adds	r3, r4, r7
 8020ea2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8020ea4:	4283      	cmp	r3, r0
 8020ea6:	f73f aee0 	bgt.w	8020c6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020eac:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020eae:	444b      	add	r3, r9
 8020eb0:	4283      	cmp	r3, r0
 8020eb2:	f73f aeda 	bgt.w	8020c6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020eb6:	b2bf      	uxth	r7, r7
 8020eb8:	f1b8 0f08 	cmp.w	r8, #8
 8020ebc:	6810      	ldr	r0, [r2, #0]
 8020ebe:	f04f 0500 	mov.w	r5, #0
 8020ec2:	bf18      	it	ne
 8020ec4:	3701      	addne	r7, #1
 8020ec6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8020eca:	6804      	ldr	r4, [r0, #0]
 8020ecc:	bf18      	it	ne
 8020ece:	f027 0701 	bicne.w	r7, r7, #1
 8020ed2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8020ed6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8020eda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020edc:	bf18      	it	ne
 8020ede:	b2bf      	uxthne	r7, r7
 8020ee0:	9104      	str	r1, [sp, #16]
 8020ee2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8020ee4:	e9cd 7900 	strd	r7, r9, [sp]
 8020ee8:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8020eec:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020eee:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8020ef0:	47a0      	blx	r4
 8020ef2:	b019      	add	sp, #100	; 0x64
 8020ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ef8:	2300      	movs	r3, #0
 8020efa:	e7c0      	b.n	8020e7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8020efc:	2208      	movs	r2, #8
 8020efe:	fb92 f3f8 	sdiv	r3, r2, r8
 8020f02:	1e5a      	subs	r2, r3, #1
 8020f04:	443a      	add	r2, r7
 8020f06:	fb92 f2f3 	sdiv	r2, r2, r3
 8020f0a:	fb12 f203 	smulbb	r2, r2, r3
 8020f0e:	b292      	uxth	r2, r2
 8020f10:	e6b0      	b.n	8020c74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8020f12:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020f14:	e6ec      	b.n	8020cf0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8020f16:	9810      	ldr	r0, [sp, #64]	; 0x40
 8020f18:	e782      	b.n	8020e20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8020f1a:	bf00      	nop
 8020f1c:	200150ec 	.word	0x200150ec
 8020f20:	200150f4 	.word	0x200150f4
 8020f24:	200150ee 	.word	0x200150ee
 8020f28:	00fff800 	.word	0x00fff800
 8020f2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020f2e:	b153      	cbz	r3, 8020f46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8020f30:	441e      	add	r6, r3
 8020f32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020f34:	b2b6      	uxth	r6, r6
 8020f36:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8020f3a:	f006 0607 	and.w	r6, r6, #7
 8020f3e:	781a      	ldrb	r2, [r3, #0]
 8020f40:	9328      	str	r3, [sp, #160]	; 0xa0
 8020f42:	4132      	asrs	r2, r6
 8020f44:	b2d2      	uxtb	r2, r2
 8020f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f48:	445b      	add	r3, fp
 8020f4a:	930a      	str	r3, [sp, #40]	; 0x28
 8020f4c:	e706      	b.n	8020d5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8020f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f50:	2b00      	cmp	r3, #0
 8020f52:	d1ce      	bne.n	8020ef2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020f54:	4b05      	ldr	r3, [pc, #20]	; (8020f6c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8020f56:	6818      	ldr	r0, [r3, #0]
 8020f58:	6803      	ldr	r3, [r0, #0]
 8020f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f5c:	4798      	blx	r3
 8020f5e:	e7c8      	b.n	8020ef2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8020f60:	2b00      	cmp	r3, #0
 8020f62:	f43f ae82 	beq.w	8020c6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8020f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8020f6a:	e793      	b.n	8020e94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8020f6c:	200150f4 	.word	0x200150f4

08020f70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8020f70:	b538      	push	{r3, r4, r5, lr}
 8020f72:	4c15      	ldr	r4, [pc, #84]	; (8020fc8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8020f74:	4605      	mov	r5, r0
 8020f76:	7823      	ldrb	r3, [r4, #0]
 8020f78:	f3bf 8f5b 	dmb	ish
 8020f7c:	07da      	lsls	r2, r3, #31
 8020f7e:	d40b      	bmi.n	8020f98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020f80:	4620      	mov	r0, r4
 8020f82:	f007 fa87 	bl	8028494 <__cxa_guard_acquire>
 8020f86:	b138      	cbz	r0, 8020f98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8020f88:	4620      	mov	r0, r4
 8020f8a:	f007 fa8f 	bl	80284ac <__cxa_guard_release>
 8020f8e:	4a0f      	ldr	r2, [pc, #60]	; (8020fcc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020f90:	490f      	ldr	r1, [pc, #60]	; (8020fd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8020f92:	4810      	ldr	r0, [pc, #64]	; (8020fd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020f94:	f007 fa77 	bl	8028486 <__aeabi_atexit>
 8020f98:	4c0f      	ldr	r4, [pc, #60]	; (8020fd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8020f9a:	7823      	ldrb	r3, [r4, #0]
 8020f9c:	f3bf 8f5b 	dmb	ish
 8020fa0:	07db      	lsls	r3, r3, #31
 8020fa2:	d40b      	bmi.n	8020fbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020fa4:	4620      	mov	r0, r4
 8020fa6:	f007 fa75 	bl	8028494 <__cxa_guard_acquire>
 8020faa:	b138      	cbz	r0, 8020fbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8020fac:	4620      	mov	r0, r4
 8020fae:	f007 fa7d 	bl	80284ac <__cxa_guard_release>
 8020fb2:	4a06      	ldr	r2, [pc, #24]	; (8020fcc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8020fb4:	4909      	ldr	r1, [pc, #36]	; (8020fdc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8020fb6:	480a      	ldr	r0, [pc, #40]	; (8020fe0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020fb8:	f007 fa65 	bl	8028486 <__aeabi_atexit>
 8020fbc:	4b05      	ldr	r3, [pc, #20]	; (8020fd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8020fbe:	612b      	str	r3, [r5, #16]
 8020fc0:	4b07      	ldr	r3, [pc, #28]	; (8020fe0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8020fc2:	616b      	str	r3, [r5, #20]
 8020fc4:	bd38      	pop	{r3, r4, r5, pc}
 8020fc6:	bf00      	nop
 8020fc8:	200151c0 	.word	0x200151c0
 8020fcc:	20000000 	.word	0x20000000
 8020fd0:	0801f17d 	.word	0x0801f17d
 8020fd4:	20000088 	.word	0x20000088
 8020fd8:	200151c4 	.word	0x200151c4
 8020fdc:	0801f17b 	.word	0x0801f17b
 8020fe0:	2000008c 	.word	0x2000008c

08020fe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8020fe4:	b538      	push	{r3, r4, r5, lr}
 8020fe6:	4c15      	ldr	r4, [pc, #84]	; (802103c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8020fe8:	4605      	mov	r5, r0
 8020fea:	7823      	ldrb	r3, [r4, #0]
 8020fec:	f3bf 8f5b 	dmb	ish
 8020ff0:	07da      	lsls	r2, r3, #31
 8020ff2:	d40b      	bmi.n	802100c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020ff4:	4620      	mov	r0, r4
 8020ff6:	f007 fa4d 	bl	8028494 <__cxa_guard_acquire>
 8020ffa:	b138      	cbz	r0, 802100c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8020ffc:	4620      	mov	r0, r4
 8020ffe:	f007 fa55 	bl	80284ac <__cxa_guard_release>
 8021002:	4a0f      	ldr	r2, [pc, #60]	; (8021040 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021004:	490f      	ldr	r1, [pc, #60]	; (8021044 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8021006:	4810      	ldr	r0, [pc, #64]	; (8021048 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021008:	f007 fa3d 	bl	8028486 <__aeabi_atexit>
 802100c:	4c0f      	ldr	r4, [pc, #60]	; (802104c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802100e:	7823      	ldrb	r3, [r4, #0]
 8021010:	f3bf 8f5b 	dmb	ish
 8021014:	07db      	lsls	r3, r3, #31
 8021016:	d40b      	bmi.n	8021030 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021018:	4620      	mov	r0, r4
 802101a:	f007 fa3b 	bl	8028494 <__cxa_guard_acquire>
 802101e:	b138      	cbz	r0, 8021030 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8021020:	4620      	mov	r0, r4
 8021022:	f007 fa43 	bl	80284ac <__cxa_guard_release>
 8021026:	4a06      	ldr	r2, [pc, #24]	; (8021040 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021028:	4909      	ldr	r1, [pc, #36]	; (8021050 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802102a:	480a      	ldr	r0, [pc, #40]	; (8021054 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802102c:	f007 fa2b 	bl	8028486 <__aeabi_atexit>
 8021030:	4b05      	ldr	r3, [pc, #20]	; (8021048 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021032:	60ab      	str	r3, [r5, #8]
 8021034:	4b07      	ldr	r3, [pc, #28]	; (8021054 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8021036:	60eb      	str	r3, [r5, #12]
 8021038:	bd38      	pop	{r3, r4, r5, pc}
 802103a:	bf00      	nop
 802103c:	20015198 	.word	0x20015198
 8021040:	20000000 	.word	0x20000000
 8021044:	0801f181 	.word	0x0801f181
 8021048:	20000060 	.word	0x20000060
 802104c:	2001519c 	.word	0x2001519c
 8021050:	0801f17f 	.word	0x0801f17f
 8021054:	20000064 	.word	0x20000064

08021058 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8021058:	b510      	push	{r4, lr}
 802105a:	4604      	mov	r4, r0
 802105c:	f7ff ff88 	bl	8020f70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8021060:	4620      	mov	r0, r4
 8021062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021066:	f7ff bfbd 	b.w	8020fe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0802106c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802106c:	b538      	push	{r3, r4, r5, lr}
 802106e:	4c15      	ldr	r4, [pc, #84]	; (80210c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021070:	4605      	mov	r5, r0
 8021072:	7823      	ldrb	r3, [r4, #0]
 8021074:	f3bf 8f5b 	dmb	ish
 8021078:	07da      	lsls	r2, r3, #31
 802107a:	d40b      	bmi.n	8021094 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802107c:	4620      	mov	r0, r4
 802107e:	f007 fa09 	bl	8028494 <__cxa_guard_acquire>
 8021082:	b138      	cbz	r0, 8021094 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021084:	4620      	mov	r0, r4
 8021086:	f007 fa11 	bl	80284ac <__cxa_guard_release>
 802108a:	4a0f      	ldr	r2, [pc, #60]	; (80210c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802108c:	490f      	ldr	r1, [pc, #60]	; (80210cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802108e:	4810      	ldr	r0, [pc, #64]	; (80210d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021090:	f007 f9f9 	bl	8028486 <__aeabi_atexit>
 8021094:	4c0f      	ldr	r4, [pc, #60]	; (80210d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021096:	7823      	ldrb	r3, [r4, #0]
 8021098:	f3bf 8f5b 	dmb	ish
 802109c:	07db      	lsls	r3, r3, #31
 802109e:	d40b      	bmi.n	80210b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80210a0:	4620      	mov	r0, r4
 80210a2:	f007 f9f7 	bl	8028494 <__cxa_guard_acquire>
 80210a6:	b138      	cbz	r0, 80210b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80210a8:	4620      	mov	r0, r4
 80210aa:	f007 f9ff 	bl	80284ac <__cxa_guard_release>
 80210ae:	4a06      	ldr	r2, [pc, #24]	; (80210c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80210b0:	4909      	ldr	r1, [pc, #36]	; (80210d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80210b2:	480a      	ldr	r0, [pc, #40]	; (80210dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80210b4:	f007 f9e7 	bl	8028486 <__aeabi_atexit>
 80210b8:	4b05      	ldr	r3, [pc, #20]	; (80210d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80210ba:	622b      	str	r3, [r5, #32]
 80210bc:	4b07      	ldr	r3, [pc, #28]	; (80210dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80210be:	626b      	str	r3, [r5, #36]	; 0x24
 80210c0:	bd38      	pop	{r3, r4, r5, pc}
 80210c2:	bf00      	nop
 80210c4:	200151c8 	.word	0x200151c8
 80210c8:	20000000 	.word	0x20000000
 80210cc:	0801f175 	.word	0x0801f175
 80210d0:	20000090 	.word	0x20000090
 80210d4:	200151cc 	.word	0x200151cc
 80210d8:	0801f173 	.word	0x0801f173
 80210dc:	20000094 	.word	0x20000094

080210e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80210e0:	b538      	push	{r3, r4, r5, lr}
 80210e2:	4c15      	ldr	r4, [pc, #84]	; (8021138 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80210e4:	4605      	mov	r5, r0
 80210e6:	7823      	ldrb	r3, [r4, #0]
 80210e8:	f3bf 8f5b 	dmb	ish
 80210ec:	07da      	lsls	r2, r3, #31
 80210ee:	d40b      	bmi.n	8021108 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80210f0:	4620      	mov	r0, r4
 80210f2:	f007 f9cf 	bl	8028494 <__cxa_guard_acquire>
 80210f6:	b138      	cbz	r0, 8021108 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80210f8:	4620      	mov	r0, r4
 80210fa:	f007 f9d7 	bl	80284ac <__cxa_guard_release>
 80210fe:	4a0f      	ldr	r2, [pc, #60]	; (802113c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021100:	490f      	ldr	r1, [pc, #60]	; (8021140 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021102:	4810      	ldr	r0, [pc, #64]	; (8021144 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021104:	f007 f9bf 	bl	8028486 <__aeabi_atexit>
 8021108:	4c0f      	ldr	r4, [pc, #60]	; (8021148 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802110a:	7823      	ldrb	r3, [r4, #0]
 802110c:	f3bf 8f5b 	dmb	ish
 8021110:	07db      	lsls	r3, r3, #31
 8021112:	d40b      	bmi.n	802112c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8021114:	4620      	mov	r0, r4
 8021116:	f007 f9bd 	bl	8028494 <__cxa_guard_acquire>
 802111a:	b138      	cbz	r0, 802112c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802111c:	4620      	mov	r0, r4
 802111e:	f007 f9c5 	bl	80284ac <__cxa_guard_release>
 8021122:	4a06      	ldr	r2, [pc, #24]	; (802113c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021124:	4909      	ldr	r1, [pc, #36]	; (802114c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8021126:	480a      	ldr	r0, [pc, #40]	; (8021150 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021128:	f007 f9ad 	bl	8028486 <__aeabi_atexit>
 802112c:	4b05      	ldr	r3, [pc, #20]	; (8021144 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802112e:	61ab      	str	r3, [r5, #24]
 8021130:	4b07      	ldr	r3, [pc, #28]	; (8021150 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8021132:	61eb      	str	r3, [r5, #28]
 8021134:	bd38      	pop	{r3, r4, r5, pc}
 8021136:	bf00      	nop
 8021138:	200151a0 	.word	0x200151a0
 802113c:	20000000 	.word	0x20000000
 8021140:	0801f179 	.word	0x0801f179
 8021144:	20000068 	.word	0x20000068
 8021148:	200151a4 	.word	0x200151a4
 802114c:	0801f177 	.word	0x0801f177
 8021150:	2000006c 	.word	0x2000006c

08021154 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8021154:	b510      	push	{r4, lr}
 8021156:	4604      	mov	r4, r0
 8021158:	f7ff ff88 	bl	802106c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802115c:	4620      	mov	r0, r4
 802115e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021162:	f7ff bfbd 	b.w	80210e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08021168 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8021168:	b538      	push	{r3, r4, r5, lr}
 802116a:	4c15      	ldr	r4, [pc, #84]	; (80211c0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 802116c:	4605      	mov	r5, r0
 802116e:	7823      	ldrb	r3, [r4, #0]
 8021170:	f3bf 8f5b 	dmb	ish
 8021174:	07da      	lsls	r2, r3, #31
 8021176:	d40b      	bmi.n	8021190 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021178:	4620      	mov	r0, r4
 802117a:	f007 f98b 	bl	8028494 <__cxa_guard_acquire>
 802117e:	b138      	cbz	r0, 8021190 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021180:	4620      	mov	r0, r4
 8021182:	f007 f993 	bl	80284ac <__cxa_guard_release>
 8021186:	4a0f      	ldr	r2, [pc, #60]	; (80211c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8021188:	490f      	ldr	r1, [pc, #60]	; (80211c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802118a:	4810      	ldr	r0, [pc, #64]	; (80211cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802118c:	f007 f97b 	bl	8028486 <__aeabi_atexit>
 8021190:	4c0f      	ldr	r4, [pc, #60]	; (80211d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8021192:	7823      	ldrb	r3, [r4, #0]
 8021194:	f3bf 8f5b 	dmb	ish
 8021198:	07db      	lsls	r3, r3, #31
 802119a:	d40b      	bmi.n	80211b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802119c:	4620      	mov	r0, r4
 802119e:	f007 f979 	bl	8028494 <__cxa_guard_acquire>
 80211a2:	b138      	cbz	r0, 80211b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80211a4:	4620      	mov	r0, r4
 80211a6:	f007 f981 	bl	80284ac <__cxa_guard_release>
 80211aa:	4a06      	ldr	r2, [pc, #24]	; (80211c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80211ac:	4909      	ldr	r1, [pc, #36]	; (80211d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80211ae:	480a      	ldr	r0, [pc, #40]	; (80211d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80211b0:	f007 f969 	bl	8028486 <__aeabi_atexit>
 80211b4:	4b05      	ldr	r3, [pc, #20]	; (80211cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80211b6:	632b      	str	r3, [r5, #48]	; 0x30
 80211b8:	4b07      	ldr	r3, [pc, #28]	; (80211d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80211ba:	636b      	str	r3, [r5, #52]	; 0x34
 80211bc:	bd38      	pop	{r3, r4, r5, pc}
 80211be:	bf00      	nop
 80211c0:	200151d8 	.word	0x200151d8
 80211c4:	20000000 	.word	0x20000000
 80211c8:	0801f16d 	.word	0x0801f16d
 80211cc:	200000a0 	.word	0x200000a0
 80211d0:	200151dc 	.word	0x200151dc
 80211d4:	0801f16b 	.word	0x0801f16b
 80211d8:	200000a4 	.word	0x200000a4

080211dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80211dc:	b538      	push	{r3, r4, r5, lr}
 80211de:	4c15      	ldr	r4, [pc, #84]	; (8021234 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80211e0:	4605      	mov	r5, r0
 80211e2:	7823      	ldrb	r3, [r4, #0]
 80211e4:	f3bf 8f5b 	dmb	ish
 80211e8:	07da      	lsls	r2, r3, #31
 80211ea:	d40b      	bmi.n	8021204 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80211ec:	4620      	mov	r0, r4
 80211ee:	f007 f951 	bl	8028494 <__cxa_guard_acquire>
 80211f2:	b138      	cbz	r0, 8021204 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80211f4:	4620      	mov	r0, r4
 80211f6:	f007 f959 	bl	80284ac <__cxa_guard_release>
 80211fa:	4a0f      	ldr	r2, [pc, #60]	; (8021238 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80211fc:	490f      	ldr	r1, [pc, #60]	; (802123c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80211fe:	4810      	ldr	r0, [pc, #64]	; (8021240 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8021200:	f007 f941 	bl	8028486 <__aeabi_atexit>
 8021204:	4c0f      	ldr	r4, [pc, #60]	; (8021244 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8021206:	7823      	ldrb	r3, [r4, #0]
 8021208:	f3bf 8f5b 	dmb	ish
 802120c:	07db      	lsls	r3, r3, #31
 802120e:	d40b      	bmi.n	8021228 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021210:	4620      	mov	r0, r4
 8021212:	f007 f93f 	bl	8028494 <__cxa_guard_acquire>
 8021216:	b138      	cbz	r0, 8021228 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8021218:	4620      	mov	r0, r4
 802121a:	f007 f947 	bl	80284ac <__cxa_guard_release>
 802121e:	4a06      	ldr	r2, [pc, #24]	; (8021238 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8021220:	4909      	ldr	r1, [pc, #36]	; (8021248 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8021222:	480a      	ldr	r0, [pc, #40]	; (802124c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8021224:	f007 f92f 	bl	8028486 <__aeabi_atexit>
 8021228:	4b05      	ldr	r3, [pc, #20]	; (8021240 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802122a:	62ab      	str	r3, [r5, #40]	; 0x28
 802122c:	4b07      	ldr	r3, [pc, #28]	; (802124c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802122e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021230:	bd38      	pop	{r3, r4, r5, pc}
 8021232:	bf00      	nop
 8021234:	200151a8 	.word	0x200151a8
 8021238:	20000000 	.word	0x20000000
 802123c:	0801f171 	.word	0x0801f171
 8021240:	20000070 	.word	0x20000070
 8021244:	200151ac 	.word	0x200151ac
 8021248:	0801f16f 	.word	0x0801f16f
 802124c:	20000074 	.word	0x20000074

08021250 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021250:	b510      	push	{r4, lr}
 8021252:	4604      	mov	r4, r0
 8021254:	f7ff ff88 	bl	8021168 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021258:	4620      	mov	r0, r4
 802125a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802125e:	f7ff bfbd 	b.w	80211dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08021264 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8021264:	b538      	push	{r3, r4, r5, lr}
 8021266:	4c15      	ldr	r4, [pc, #84]	; (80212bc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021268:	4605      	mov	r5, r0
 802126a:	7823      	ldrb	r3, [r4, #0]
 802126c:	f3bf 8f5b 	dmb	ish
 8021270:	07da      	lsls	r2, r3, #31
 8021272:	d40b      	bmi.n	802128c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8021274:	4620      	mov	r0, r4
 8021276:	f007 f90d 	bl	8028494 <__cxa_guard_acquire>
 802127a:	b138      	cbz	r0, 802128c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802127c:	4620      	mov	r0, r4
 802127e:	f007 f915 	bl	80284ac <__cxa_guard_release>
 8021282:	4a0f      	ldr	r2, [pc, #60]	; (80212c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8021284:	490f      	ldr	r1, [pc, #60]	; (80212c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8021286:	4810      	ldr	r0, [pc, #64]	; (80212c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8021288:	f007 f8fd 	bl	8028486 <__aeabi_atexit>
 802128c:	4c0f      	ldr	r4, [pc, #60]	; (80212cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802128e:	7823      	ldrb	r3, [r4, #0]
 8021290:	f3bf 8f5b 	dmb	ish
 8021294:	07db      	lsls	r3, r3, #31
 8021296:	d40b      	bmi.n	80212b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8021298:	4620      	mov	r0, r4
 802129a:	f007 f8fb 	bl	8028494 <__cxa_guard_acquire>
 802129e:	b138      	cbz	r0, 80212b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80212a0:	4620      	mov	r0, r4
 80212a2:	f007 f903 	bl	80284ac <__cxa_guard_release>
 80212a6:	4a06      	ldr	r2, [pc, #24]	; (80212c0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80212a8:	4909      	ldr	r1, [pc, #36]	; (80212d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80212aa:	480a      	ldr	r0, [pc, #40]	; (80212d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80212ac:	f007 f8eb 	bl	8028486 <__aeabi_atexit>
 80212b0:	4b05      	ldr	r3, [pc, #20]	; (80212c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80212b2:	652b      	str	r3, [r5, #80]	; 0x50
 80212b4:	4b07      	ldr	r3, [pc, #28]	; (80212d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80212b6:	656b      	str	r3, [r5, #84]	; 0x54
 80212b8:	bd38      	pop	{r3, r4, r5, pc}
 80212ba:	bf00      	nop
 80212bc:	200151e0 	.word	0x200151e0
 80212c0:	20000000 	.word	0x20000000
 80212c4:	0801f15d 	.word	0x0801f15d
 80212c8:	200000a8 	.word	0x200000a8
 80212cc:	200151e4 	.word	0x200151e4
 80212d0:	0801f15b 	.word	0x0801f15b
 80212d4:	200000ac 	.word	0x200000ac

080212d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80212d8:	b538      	push	{r3, r4, r5, lr}
 80212da:	4c15      	ldr	r4, [pc, #84]	; (8021330 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80212dc:	4605      	mov	r5, r0
 80212de:	7823      	ldrb	r3, [r4, #0]
 80212e0:	f3bf 8f5b 	dmb	ish
 80212e4:	07da      	lsls	r2, r3, #31
 80212e6:	d40b      	bmi.n	8021300 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80212e8:	4620      	mov	r0, r4
 80212ea:	f007 f8d3 	bl	8028494 <__cxa_guard_acquire>
 80212ee:	b138      	cbz	r0, 8021300 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80212f0:	4620      	mov	r0, r4
 80212f2:	f007 f8db 	bl	80284ac <__cxa_guard_release>
 80212f6:	4a0f      	ldr	r2, [pc, #60]	; (8021334 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80212f8:	490f      	ldr	r1, [pc, #60]	; (8021338 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80212fa:	4810      	ldr	r0, [pc, #64]	; (802133c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80212fc:	f007 f8c3 	bl	8028486 <__aeabi_atexit>
 8021300:	4c0f      	ldr	r4, [pc, #60]	; (8021340 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8021302:	7823      	ldrb	r3, [r4, #0]
 8021304:	f3bf 8f5b 	dmb	ish
 8021308:	07db      	lsls	r3, r3, #31
 802130a:	d40b      	bmi.n	8021324 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 802130c:	4620      	mov	r0, r4
 802130e:	f007 f8c1 	bl	8028494 <__cxa_guard_acquire>
 8021312:	b138      	cbz	r0, 8021324 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021314:	4620      	mov	r0, r4
 8021316:	f007 f8c9 	bl	80284ac <__cxa_guard_release>
 802131a:	4a06      	ldr	r2, [pc, #24]	; (8021334 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802131c:	4909      	ldr	r1, [pc, #36]	; (8021344 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802131e:	480a      	ldr	r0, [pc, #40]	; (8021348 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021320:	f007 f8b1 	bl	8028486 <__aeabi_atexit>
 8021324:	4b05      	ldr	r3, [pc, #20]	; (802133c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021326:	64ab      	str	r3, [r5, #72]	; 0x48
 8021328:	4b07      	ldr	r3, [pc, #28]	; (8021348 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802132a:	64eb      	str	r3, [r5, #76]	; 0x4c
 802132c:	bd38      	pop	{r3, r4, r5, pc}
 802132e:	bf00      	nop
 8021330:	200151e8 	.word	0x200151e8
 8021334:	20000000 	.word	0x20000000
 8021338:	0801f161 	.word	0x0801f161
 802133c:	200000b0 	.word	0x200000b0
 8021340:	200151ec 	.word	0x200151ec
 8021344:	0801f15f 	.word	0x0801f15f
 8021348:	200000b4 	.word	0x200000b4

0802134c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 802134c:	b538      	push	{r3, r4, r5, lr}
 802134e:	4c15      	ldr	r4, [pc, #84]	; (80213a4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8021350:	4605      	mov	r5, r0
 8021352:	7823      	ldrb	r3, [r4, #0]
 8021354:	f3bf 8f5b 	dmb	ish
 8021358:	07da      	lsls	r2, r3, #31
 802135a:	d40b      	bmi.n	8021374 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802135c:	4620      	mov	r0, r4
 802135e:	f007 f899 	bl	8028494 <__cxa_guard_acquire>
 8021362:	b138      	cbz	r0, 8021374 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021364:	4620      	mov	r0, r4
 8021366:	f007 f8a1 	bl	80284ac <__cxa_guard_release>
 802136a:	4a0f      	ldr	r2, [pc, #60]	; (80213a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 802136c:	490f      	ldr	r1, [pc, #60]	; (80213ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 802136e:	4810      	ldr	r0, [pc, #64]	; (80213b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021370:	f007 f889 	bl	8028486 <__aeabi_atexit>
 8021374:	4c0f      	ldr	r4, [pc, #60]	; (80213b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8021376:	7823      	ldrb	r3, [r4, #0]
 8021378:	f3bf 8f5b 	dmb	ish
 802137c:	07db      	lsls	r3, r3, #31
 802137e:	d40b      	bmi.n	8021398 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021380:	4620      	mov	r0, r4
 8021382:	f007 f887 	bl	8028494 <__cxa_guard_acquire>
 8021386:	b138      	cbz	r0, 8021398 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8021388:	4620      	mov	r0, r4
 802138a:	f007 f88f 	bl	80284ac <__cxa_guard_release>
 802138e:	4a06      	ldr	r2, [pc, #24]	; (80213a8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021390:	4909      	ldr	r1, [pc, #36]	; (80213b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8021392:	480a      	ldr	r0, [pc, #40]	; (80213bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8021394:	f007 f877 	bl	8028486 <__aeabi_atexit>
 8021398:	4b05      	ldr	r3, [pc, #20]	; (80213b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802139a:	642b      	str	r3, [r5, #64]	; 0x40
 802139c:	4b07      	ldr	r3, [pc, #28]	; (80213bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802139e:	646b      	str	r3, [r5, #68]	; 0x44
 80213a0:	bd38      	pop	{r3, r4, r5, pc}
 80213a2:	bf00      	nop
 80213a4:	200151b0 	.word	0x200151b0
 80213a8:	20000000 	.word	0x20000000
 80213ac:	0801f165 	.word	0x0801f165
 80213b0:	20000078 	.word	0x20000078
 80213b4:	200151b4 	.word	0x200151b4
 80213b8:	0801f163 	.word	0x0801f163
 80213bc:	2000007c 	.word	0x2000007c

080213c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80213c0:	b538      	push	{r3, r4, r5, lr}
 80213c2:	4c15      	ldr	r4, [pc, #84]	; (8021418 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80213c4:	4605      	mov	r5, r0
 80213c6:	7823      	ldrb	r3, [r4, #0]
 80213c8:	f3bf 8f5b 	dmb	ish
 80213cc:	07da      	lsls	r2, r3, #31
 80213ce:	d40b      	bmi.n	80213e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80213d0:	4620      	mov	r0, r4
 80213d2:	f007 f85f 	bl	8028494 <__cxa_guard_acquire>
 80213d6:	b138      	cbz	r0, 80213e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80213d8:	4620      	mov	r0, r4
 80213da:	f007 f867 	bl	80284ac <__cxa_guard_release>
 80213de:	4a0f      	ldr	r2, [pc, #60]	; (802141c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80213e0:	490f      	ldr	r1, [pc, #60]	; (8021420 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80213e2:	4810      	ldr	r0, [pc, #64]	; (8021424 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80213e4:	f007 f84f 	bl	8028486 <__aeabi_atexit>
 80213e8:	4c0f      	ldr	r4, [pc, #60]	; (8021428 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80213ea:	7823      	ldrb	r3, [r4, #0]
 80213ec:	f3bf 8f5b 	dmb	ish
 80213f0:	07db      	lsls	r3, r3, #31
 80213f2:	d40b      	bmi.n	802140c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80213f4:	4620      	mov	r0, r4
 80213f6:	f007 f84d 	bl	8028494 <__cxa_guard_acquire>
 80213fa:	b138      	cbz	r0, 802140c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80213fc:	4620      	mov	r0, r4
 80213fe:	f007 f855 	bl	80284ac <__cxa_guard_release>
 8021402:	4a06      	ldr	r2, [pc, #24]	; (802141c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021404:	4909      	ldr	r1, [pc, #36]	; (802142c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8021406:	480a      	ldr	r0, [pc, #40]	; (8021430 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021408:	f007 f83d 	bl	8028486 <__aeabi_atexit>
 802140c:	4b05      	ldr	r3, [pc, #20]	; (8021424 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802140e:	63ab      	str	r3, [r5, #56]	; 0x38
 8021410:	4b07      	ldr	r3, [pc, #28]	; (8021430 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021412:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021414:	bd38      	pop	{r3, r4, r5, pc}
 8021416:	bf00      	nop
 8021418:	200151d0 	.word	0x200151d0
 802141c:	20000000 	.word	0x20000000
 8021420:	0801f169 	.word	0x0801f169
 8021424:	20000098 	.word	0x20000098
 8021428:	200151d4 	.word	0x200151d4
 802142c:	0801f167 	.word	0x0801f167
 8021430:	2000009c 	.word	0x2000009c

08021434 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8021434:	b510      	push	{r4, lr}
 8021436:	4604      	mov	r4, r0
 8021438:	f7ff ff14 	bl	8021264 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 802143c:	4620      	mov	r0, r4
 802143e:	f7ff ff85 	bl	802134c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8021442:	4620      	mov	r0, r4
 8021444:	f7ff ff48 	bl	80212d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8021448:	4620      	mov	r0, r4
 802144a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802144e:	f7ff bfb7 	b.w	80213c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08021454 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021454:	b538      	push	{r3, r4, r5, lr}
 8021456:	4c15      	ldr	r4, [pc, #84]	; (80214ac <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8021458:	4605      	mov	r5, r0
 802145a:	7823      	ldrb	r3, [r4, #0]
 802145c:	f3bf 8f5b 	dmb	ish
 8021460:	07da      	lsls	r2, r3, #31
 8021462:	d40b      	bmi.n	802147c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021464:	4620      	mov	r0, r4
 8021466:	f007 f815 	bl	8028494 <__cxa_guard_acquire>
 802146a:	b138      	cbz	r0, 802147c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802146c:	4620      	mov	r0, r4
 802146e:	f007 f81d 	bl	80284ac <__cxa_guard_release>
 8021472:	4a0f      	ldr	r2, [pc, #60]	; (80214b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021474:	490f      	ldr	r1, [pc, #60]	; (80214b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8021476:	4810      	ldr	r0, [pc, #64]	; (80214b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8021478:	f007 f805 	bl	8028486 <__aeabi_atexit>
 802147c:	4c0f      	ldr	r4, [pc, #60]	; (80214bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 802147e:	7823      	ldrb	r3, [r4, #0]
 8021480:	f3bf 8f5b 	dmb	ish
 8021484:	07db      	lsls	r3, r3, #31
 8021486:	d40b      	bmi.n	80214a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021488:	4620      	mov	r0, r4
 802148a:	f007 f803 	bl	8028494 <__cxa_guard_acquire>
 802148e:	b138      	cbz	r0, 80214a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8021490:	4620      	mov	r0, r4
 8021492:	f007 f80b 	bl	80284ac <__cxa_guard_release>
 8021496:	4a06      	ldr	r2, [pc, #24]	; (80214b0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8021498:	4909      	ldr	r1, [pc, #36]	; (80214c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802149a:	480a      	ldr	r0, [pc, #40]	; (80214c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802149c:	f006 fff3 	bl	8028486 <__aeabi_atexit>
 80214a0:	4b05      	ldr	r3, [pc, #20]	; (80214b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80214a2:	662b      	str	r3, [r5, #96]	; 0x60
 80214a4:	4b07      	ldr	r3, [pc, #28]	; (80214c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80214a6:	666b      	str	r3, [r5, #100]	; 0x64
 80214a8:	bd38      	pop	{r3, r4, r5, pc}
 80214aa:	bf00      	nop
 80214ac:	200151b8 	.word	0x200151b8
 80214b0:	20000000 	.word	0x20000000
 80214b4:	0801f155 	.word	0x0801f155
 80214b8:	20000080 	.word	0x20000080
 80214bc:	200151bc 	.word	0x200151bc
 80214c0:	0801f153 	.word	0x0801f153
 80214c4:	20000084 	.word	0x20000084

080214c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80214c8:	b538      	push	{r3, r4, r5, lr}
 80214ca:	4c15      	ldr	r4, [pc, #84]	; (8021520 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80214cc:	4605      	mov	r5, r0
 80214ce:	7823      	ldrb	r3, [r4, #0]
 80214d0:	f3bf 8f5b 	dmb	ish
 80214d4:	07da      	lsls	r2, r3, #31
 80214d6:	d40b      	bmi.n	80214f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80214d8:	4620      	mov	r0, r4
 80214da:	f006 ffdb 	bl	8028494 <__cxa_guard_acquire>
 80214de:	b138      	cbz	r0, 80214f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80214e0:	4620      	mov	r0, r4
 80214e2:	f006 ffe3 	bl	80284ac <__cxa_guard_release>
 80214e6:	4a0f      	ldr	r2, [pc, #60]	; (8021524 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80214e8:	490f      	ldr	r1, [pc, #60]	; (8021528 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80214ea:	4810      	ldr	r0, [pc, #64]	; (802152c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80214ec:	f006 ffcb 	bl	8028486 <__aeabi_atexit>
 80214f0:	4c0f      	ldr	r4, [pc, #60]	; (8021530 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80214f2:	7823      	ldrb	r3, [r4, #0]
 80214f4:	f3bf 8f5b 	dmb	ish
 80214f8:	07db      	lsls	r3, r3, #31
 80214fa:	d40b      	bmi.n	8021514 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80214fc:	4620      	mov	r0, r4
 80214fe:	f006 ffc9 	bl	8028494 <__cxa_guard_acquire>
 8021502:	b138      	cbz	r0, 8021514 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8021504:	4620      	mov	r0, r4
 8021506:	f006 ffd1 	bl	80284ac <__cxa_guard_release>
 802150a:	4a06      	ldr	r2, [pc, #24]	; (8021524 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802150c:	4909      	ldr	r1, [pc, #36]	; (8021534 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802150e:	480a      	ldr	r0, [pc, #40]	; (8021538 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8021510:	f006 ffb9 	bl	8028486 <__aeabi_atexit>
 8021514:	4b05      	ldr	r3, [pc, #20]	; (802152c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8021516:	65ab      	str	r3, [r5, #88]	; 0x58
 8021518:	4b07      	ldr	r3, [pc, #28]	; (8021538 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802151a:	65eb      	str	r3, [r5, #92]	; 0x5c
 802151c:	bd38      	pop	{r3, r4, r5, pc}
 802151e:	bf00      	nop
 8021520:	20015190 	.word	0x20015190
 8021524:	20000000 	.word	0x20000000
 8021528:	0801f159 	.word	0x0801f159
 802152c:	20000058 	.word	0x20000058
 8021530:	20015194 	.word	0x20015194
 8021534:	0801f157 	.word	0x0801f157
 8021538:	2000005c 	.word	0x2000005c

0802153c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 802153c:	b510      	push	{r4, lr}
 802153e:	4604      	mov	r4, r0
 8021540:	f7ff ff88 	bl	8021454 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021544:	4620      	mov	r0, r4
 8021546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802154a:	f7ff bfbd 	b.w	80214c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08021550 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8021550:	b538      	push	{r3, r4, r5, lr}
 8021552:	4c15      	ldr	r4, [pc, #84]	; (80215a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021554:	4605      	mov	r5, r0
 8021556:	7823      	ldrb	r3, [r4, #0]
 8021558:	f3bf 8f5b 	dmb	ish
 802155c:	07da      	lsls	r2, r3, #31
 802155e:	d40b      	bmi.n	8021578 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021560:	4620      	mov	r0, r4
 8021562:	f006 ff97 	bl	8028494 <__cxa_guard_acquire>
 8021566:	b138      	cbz	r0, 8021578 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021568:	4620      	mov	r0, r4
 802156a:	f006 ff9f 	bl	80284ac <__cxa_guard_release>
 802156e:	4a0f      	ldr	r2, [pc, #60]	; (80215ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021570:	490f      	ldr	r1, [pc, #60]	; (80215b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8021572:	4810      	ldr	r0, [pc, #64]	; (80215b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021574:	f006 ff87 	bl	8028486 <__aeabi_atexit>
 8021578:	4c0f      	ldr	r4, [pc, #60]	; (80215b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 802157a:	7823      	ldrb	r3, [r4, #0]
 802157c:	f3bf 8f5b 	dmb	ish
 8021580:	07db      	lsls	r3, r3, #31
 8021582:	d40b      	bmi.n	802159c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021584:	4620      	mov	r0, r4
 8021586:	f006 ff85 	bl	8028494 <__cxa_guard_acquire>
 802158a:	b138      	cbz	r0, 802159c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802158c:	4620      	mov	r0, r4
 802158e:	f006 ff8d 	bl	80284ac <__cxa_guard_release>
 8021592:	4a06      	ldr	r2, [pc, #24]	; (80215ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021594:	4909      	ldr	r1, [pc, #36]	; (80215bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021596:	480a      	ldr	r0, [pc, #40]	; (80215c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021598:	f006 ff75 	bl	8028486 <__aeabi_atexit>
 802159c:	4b05      	ldr	r3, [pc, #20]	; (80215b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802159e:	672b      	str	r3, [r5, #112]	; 0x70
 80215a0:	4b07      	ldr	r3, [pc, #28]	; (80215c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80215a2:	676b      	str	r3, [r5, #116]	; 0x74
 80215a4:	bd38      	pop	{r3, r4, r5, pc}
 80215a6:	bf00      	nop
 80215a8:	20015188 	.word	0x20015188
 80215ac:	20000000 	.word	0x20000000
 80215b0:	0801f14d 	.word	0x0801f14d
 80215b4:	20000050 	.word	0x20000050
 80215b8:	2001518c 	.word	0x2001518c
 80215bc:	0801f14b 	.word	0x0801f14b
 80215c0:	20000054 	.word	0x20000054

080215c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80215c4:	b538      	push	{r3, r4, r5, lr}
 80215c6:	4c15      	ldr	r4, [pc, #84]	; (802161c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80215c8:	4605      	mov	r5, r0
 80215ca:	7823      	ldrb	r3, [r4, #0]
 80215cc:	f3bf 8f5b 	dmb	ish
 80215d0:	07da      	lsls	r2, r3, #31
 80215d2:	d40b      	bmi.n	80215ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80215d4:	4620      	mov	r0, r4
 80215d6:	f006 ff5d 	bl	8028494 <__cxa_guard_acquire>
 80215da:	b138      	cbz	r0, 80215ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80215dc:	4620      	mov	r0, r4
 80215de:	f006 ff65 	bl	80284ac <__cxa_guard_release>
 80215e2:	4a0f      	ldr	r2, [pc, #60]	; (8021620 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80215e4:	490f      	ldr	r1, [pc, #60]	; (8021624 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80215e6:	4810      	ldr	r0, [pc, #64]	; (8021628 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80215e8:	f006 ff4d 	bl	8028486 <__aeabi_atexit>
 80215ec:	4c0f      	ldr	r4, [pc, #60]	; (802162c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80215ee:	7823      	ldrb	r3, [r4, #0]
 80215f0:	f3bf 8f5b 	dmb	ish
 80215f4:	07db      	lsls	r3, r3, #31
 80215f6:	d40b      	bmi.n	8021610 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80215f8:	4620      	mov	r0, r4
 80215fa:	f006 ff4b 	bl	8028494 <__cxa_guard_acquire>
 80215fe:	b138      	cbz	r0, 8021610 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8021600:	4620      	mov	r0, r4
 8021602:	f006 ff53 	bl	80284ac <__cxa_guard_release>
 8021606:	4a06      	ldr	r2, [pc, #24]	; (8021620 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8021608:	4909      	ldr	r1, [pc, #36]	; (8021630 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802160a:	480a      	ldr	r0, [pc, #40]	; (8021634 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802160c:	f006 ff3b 	bl	8028486 <__aeabi_atexit>
 8021610:	4b05      	ldr	r3, [pc, #20]	; (8021628 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8021612:	66ab      	str	r3, [r5, #104]	; 0x68
 8021614:	4b07      	ldr	r3, [pc, #28]	; (8021634 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8021616:	66eb      	str	r3, [r5, #108]	; 0x6c
 8021618:	bd38      	pop	{r3, r4, r5, pc}
 802161a:	bf00      	nop
 802161c:	20015180 	.word	0x20015180
 8021620:	20000000 	.word	0x20000000
 8021624:	0801f151 	.word	0x0801f151
 8021628:	20000048 	.word	0x20000048
 802162c:	20015184 	.word	0x20015184
 8021630:	0801f14f 	.word	0x0801f14f
 8021634:	2000004c 	.word	0x2000004c

08021638 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8021638:	b510      	push	{r4, lr}
 802163a:	4604      	mov	r4, r0
 802163c:	f7ff ff88 	bl	8021550 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8021640:	4620      	mov	r0, r4
 8021642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021646:	f7ff bfbd 	b.w	80215c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0802164a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 802164a:	b510      	push	{r4, lr}
 802164c:	4604      	mov	r4, r0
 802164e:	f7ff fff3 	bl	8021638 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8021652:	4620      	mov	r0, r4
 8021654:	f7ff ff72 	bl	802153c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8021658:	4620      	mov	r0, r4
 802165a:	f7ff fdf9 	bl	8021250 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 802165e:	4620      	mov	r0, r4
 8021660:	f7ff fcfa 	bl	8021058 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8021664:	4620      	mov	r0, r4
 8021666:	f7ff fd75 	bl	8021154 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 802166a:	4620      	mov	r0, r4
 802166c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021670:	f7ff bee0 	b.w	8021434 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08021674 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8021674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021678:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 802167c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8021680:	2d00      	cmp	r5, #0
 8021682:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8021686:	fb05 4c0e 	mla	ip, r5, lr, r4
 802168a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 802168e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8021692:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8021696:	eb02 0a0c 	add.w	sl, r2, ip
 802169a:	8808      	ldrh	r0, [r1, #0]
 802169c:	f2c0 80b0 	blt.w	8021800 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80216a0:	45ab      	cmp	fp, r5
 80216a2:	f340 80ad 	ble.w	8021800 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80216a6:	2c00      	cmp	r4, #0
 80216a8:	f2c0 80a8 	blt.w	80217fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80216ac:	45a6      	cmp	lr, r4
 80216ae:	f340 80a5 	ble.w	80217fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80216b2:	f812 200c 	ldrb.w	r2, [r2, ip]
 80216b6:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 80216ba:	1c62      	adds	r2, r4, #1
 80216bc:	f100 80a3 	bmi.w	8021806 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80216c0:	4596      	cmp	lr, r2
 80216c2:	f340 80a0 	ble.w	8021806 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80216c6:	f1b9 0f00 	cmp.w	r9, #0
 80216ca:	f000 809c 	beq.w	8021806 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80216ce:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80216d2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80216d6:	3501      	adds	r5, #1
 80216d8:	f100 8099 	bmi.w	802180e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80216dc:	45ab      	cmp	fp, r5
 80216de:	f340 8096 	ble.w	802180e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80216e2:	2f00      	cmp	r7, #0
 80216e4:	f000 8093 	beq.w	802180e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80216e8:	2c00      	cmp	r4, #0
 80216ea:	f2c0 808e 	blt.w	802180a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80216ee:	45a6      	cmp	lr, r4
 80216f0:	f340 808b 	ble.w	802180a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80216f4:	f81a 200e 	ldrb.w	r2, [sl, lr]
 80216f8:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 80216fc:	3401      	adds	r4, #1
 80216fe:	f100 8089 	bmi.w	8021814 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021702:	45a6      	cmp	lr, r4
 8021704:	f340 8086 	ble.w	8021814 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021708:	f1b9 0f00 	cmp.w	r9, #0
 802170c:	f000 8082 	beq.w	8021814 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8021710:	44d6      	add	lr, sl
 8021712:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8021716:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802171a:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802171e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8021722:	fb19 fe07 	smulbb	lr, r9, r7
 8021726:	f1c7 0210 	rsb	r2, r7, #16
 802172a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802172e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8021732:	eba2 0209 	sub.w	r2, r2, r9
 8021736:	ea44 0808 	orr.w	r8, r4, r8
 802173a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 802173e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021742:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8021746:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802174a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 802174e:	ea44 0c0c 	orr.w	ip, r4, ip
 8021752:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8021756:	fb04 f40c 	mul.w	r4, r4, ip
 802175a:	fb02 4808 	mla	r8, r2, r8, r4
 802175e:	041a      	lsls	r2, r3, #16
 8021760:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021764:	b2b4      	uxth	r4, r6
 8021766:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802176a:	43f6      	mvns	r6, r6
 802176c:	4313      	orrs	r3, r2
 802176e:	042a      	lsls	r2, r5, #16
 8021770:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021774:	b2f6      	uxtb	r6, r6
 8021776:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802177a:	fb0e 8303 	mla	r3, lr, r3, r8
 802177e:	432a      	orrs	r2, r5
 8021780:	fb07 3202 	mla	r2, r7, r2, r3
 8021784:	10c7      	asrs	r7, r0, #3
 8021786:	0d53      	lsrs	r3, r2, #21
 8021788:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802178c:	0952      	lsrs	r2, r2, #5
 802178e:	fb17 f706 	smulbb	r7, r7, r6
 8021792:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021796:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802179a:	431a      	orrs	r2, r3
 802179c:	b293      	uxth	r3, r2
 802179e:	1202      	asrs	r2, r0, #8
 80217a0:	121d      	asrs	r5, r3, #8
 80217a2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80217a6:	00c0      	lsls	r0, r0, #3
 80217a8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80217ac:	fb12 f206 	smulbb	r2, r2, r6
 80217b0:	b2c0      	uxtb	r0, r0
 80217b2:	fb05 2504 	mla	r5, r5, r4, r2
 80217b6:	10da      	asrs	r2, r3, #3
 80217b8:	fb10 f006 	smulbb	r0, r0, r6
 80217bc:	00db      	lsls	r3, r3, #3
 80217be:	b2ad      	uxth	r5, r5
 80217c0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80217c4:	b2db      	uxtb	r3, r3
 80217c6:	fb02 7204 	mla	r2, r2, r4, r7
 80217ca:	fb03 0004 	mla	r0, r3, r4, r0
 80217ce:	1c6b      	adds	r3, r5, #1
 80217d0:	b292      	uxth	r2, r2
 80217d2:	b280      	uxth	r0, r0
 80217d4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80217d8:	1c43      	adds	r3, r0, #1
 80217da:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80217de:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80217e2:	1c50      	adds	r0, r2, #1
 80217e4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80217e8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80217ec:	0952      	lsrs	r2, r2, #5
 80217ee:	432b      	orrs	r3, r5
 80217f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80217f4:	4313      	orrs	r3, r2
 80217f6:	800b      	strh	r3, [r1, #0]
 80217f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217fc:	4680      	mov	r8, r0
 80217fe:	e75c      	b.n	80216ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8021800:	4684      	mov	ip, r0
 8021802:	4680      	mov	r8, r0
 8021804:	e767      	b.n	80216d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8021806:	4684      	mov	ip, r0
 8021808:	e765      	b.n	80216d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802180a:	4605      	mov	r5, r0
 802180c:	e776      	b.n	80216fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 802180e:	4603      	mov	r3, r0
 8021810:	4605      	mov	r5, r0
 8021812:	e782      	b.n	802171a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8021814:	4603      	mov	r3, r0
 8021816:	e780      	b.n	802171a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08021818 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802181c:	b099      	sub	sp, #100	; 0x64
 802181e:	9215      	str	r2, [sp, #84]	; 0x54
 8021820:	9309      	str	r3, [sp, #36]	; 0x24
 8021822:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8021824:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8021828:	9016      	str	r0, [sp, #88]	; 0x58
 802182a:	930d      	str	r3, [sp, #52]	; 0x34
 802182c:	6850      	ldr	r0, [r2, #4]
 802182e:	910c      	str	r1, [sp, #48]	; 0x30
 8021830:	6812      	ldr	r2, [r2, #0]
 8021832:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8021836:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 802183a:	fb00 1303 	mla	r3, r0, r3, r1
 802183e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8021842:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021844:	681b      	ldr	r3, [r3, #0]
 8021846:	930b      	str	r3, [sp, #44]	; 0x2c
 8021848:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802184a:	685e      	ldr	r6, [r3, #4]
 802184c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802184e:	3604      	adds	r6, #4
 8021850:	43db      	mvns	r3, r3
 8021852:	b2db      	uxtb	r3, r3
 8021854:	930a      	str	r3, [sp, #40]	; 0x28
 8021856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021858:	2b00      	cmp	r3, #0
 802185a:	dc03      	bgt.n	8021864 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802185c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802185e:	2b00      	cmp	r3, #0
 8021860:	f340 8225 	ble.w	8021cae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8021864:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021866:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802186a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802186e:	1e48      	subs	r0, r1, #1
 8021870:	1e57      	subs	r7, r2, #1
 8021872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021874:	2b00      	cmp	r3, #0
 8021876:	f340 80e3 	ble.w	8021a40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802187a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 802187e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8021882:	d406      	bmi.n	8021892 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021884:	4584      	cmp	ip, r0
 8021886:	da04      	bge.n	8021892 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8021888:	2b00      	cmp	r3, #0
 802188a:	db02      	blt.n	8021892 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802188c:	42bb      	cmp	r3, r7
 802188e:	f2c0 80d8 	blt.w	8021a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021892:	f11c 0c01 	adds.w	ip, ip, #1
 8021896:	f100 80c9 	bmi.w	8021a2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802189a:	4561      	cmp	r1, ip
 802189c:	f2c0 80c6 	blt.w	8021a2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80218a0:	3301      	adds	r3, #1
 80218a2:	f100 80c3 	bmi.w	8021a2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80218a6:	429a      	cmp	r2, r3
 80218a8:	f2c0 80c0 	blt.w	8021a2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80218ac:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80218b0:	4647      	mov	r7, r8
 80218b2:	f1bb 0f00 	cmp.w	fp, #0
 80218b6:	f340 80e3 	ble.w	8021a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80218ba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80218bc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80218c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80218c2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80218c6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80218ca:	ea5f 422a 	movs.w	r2, sl, asr #16
 80218ce:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80218d2:	689b      	ldr	r3, [r3, #8]
 80218d4:	f100 8121 	bmi.w	8021b1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80218d8:	f103 39ff 	add.w	r9, r3, #4294967295
 80218dc:	454a      	cmp	r2, r9
 80218de:	f280 811c 	bge.w	8021b1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80218e2:	f1bc 0f00 	cmp.w	ip, #0
 80218e6:	f2c0 8118 	blt.w	8021b1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80218ea:	f10e 39ff 	add.w	r9, lr, #4294967295
 80218ee:	45cc      	cmp	ip, r9
 80218f0:	f280 8113 	bge.w	8021b1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80218f4:	b21b      	sxth	r3, r3
 80218f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80218f8:	fb0c 2203 	mla	r2, ip, r3, r2
 80218fc:	eb04 0902 	add.w	r9, r4, r2
 8021900:	5ca2      	ldrb	r2, [r4, r2]
 8021902:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8021906:	2800      	cmp	r0, #0
 8021908:	f000 80fe 	beq.w	8021b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 802190c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021910:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8021914:	9211      	str	r2, [sp, #68]	; 0x44
 8021916:	b151      	cbz	r1, 802192e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021918:	eb09 0203 	add.w	r2, r9, r3
 802191c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021920:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021924:	930f      	str	r3, [sp, #60]	; 0x3c
 8021926:	7853      	ldrb	r3, [r2, #1]
 8021928:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802192c:	9312      	str	r3, [sp, #72]	; 0x48
 802192e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021930:	fb10 f201 	smulbb	r2, r0, r1
 8021934:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021936:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802193a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802193e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8021942:	10d2      	asrs	r2, r2, #3
 8021944:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021948:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 802194c:	ea4c 0c03 	orr.w	ip, ip, r3
 8021950:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021952:	041b      	lsls	r3, r3, #16
 8021954:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021958:	4323      	orrs	r3, r4
 802195a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802195c:	4353      	muls	r3, r2
 802195e:	fb09 330c 	mla	r3, r9, ip, r3
 8021962:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021966:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802196a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802196e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021972:	f1c1 0c10 	rsb	ip, r1, #16
 8021976:	ebac 0c00 	sub.w	ip, ip, r0
 802197a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802197e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021982:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021988:	0418      	lsls	r0, r3, #16
 802198a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802198e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021992:	4318      	orrs	r0, r3
 8021994:	fb02 c200 	mla	r2, r2, r0, ip
 8021998:	8838      	ldrh	r0, [r7, #0]
 802199a:	0d53      	lsrs	r3, r2, #21
 802199c:	0952      	lsrs	r2, r2, #5
 802199e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80219a2:	1201      	asrs	r1, r0, #8
 80219a4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80219a8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80219ac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80219b0:	00c0      	lsls	r0, r0, #3
 80219b2:	431a      	orrs	r2, r3
 80219b4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80219b8:	fb11 f104 	smulbb	r1, r1, r4
 80219bc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80219c0:	b292      	uxth	r2, r2
 80219c2:	fb1e fe04 	smulbb	lr, lr, r4
 80219c6:	b2c0      	uxtb	r0, r0
 80219c8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80219cc:	fb10 f004 	smulbb	r0, r0, r4
 80219d0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80219d4:	fb0c 1c03 	mla	ip, ip, r3, r1
 80219d8:	10d1      	asrs	r1, r2, #3
 80219da:	00d2      	lsls	r2, r2, #3
 80219dc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80219e0:	fa1f fc8c 	uxth.w	ip, ip
 80219e4:	b2d2      	uxtb	r2, r2
 80219e6:	fb01 e103 	mla	r1, r1, r3, lr
 80219ea:	fb02 0303 	mla	r3, r2, r3, r0
 80219ee:	b289      	uxth	r1, r1
 80219f0:	b29a      	uxth	r2, r3
 80219f2:	f10c 0301 	add.w	r3, ip, #1
 80219f6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80219fa:	1c53      	adds	r3, r2, #1
 80219fc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021a00:	1c4a      	adds	r2, r1, #1
 8021a02:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021a06:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021a0a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021a0e:	0949      	lsrs	r1, r1, #5
 8021a10:	ea43 030c 	orr.w	r3, r3, ip
 8021a14:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021a18:	430b      	orrs	r3, r1
 8021a1a:	803b      	strh	r3, [r7, #0]
 8021a1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021a1e:	3702      	adds	r7, #2
 8021a20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021a24:	449a      	add	sl, r3
 8021a26:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021a28:	441d      	add	r5, r3
 8021a2a:	e742      	b.n	80218b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8021a2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021a2e:	f108 0802 	add.w	r8, r8, #2
 8021a32:	449a      	add	sl, r3
 8021a34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021a36:	441d      	add	r5, r3
 8021a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a3a:	3b01      	subs	r3, #1
 8021a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8021a3e:	e718      	b.n	8021872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8021a40:	d023      	beq.n	8021a8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8021a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a44:	9825      	ldr	r0, [sp, #148]	; 0x94
 8021a46:	3b01      	subs	r3, #1
 8021a48:	fb00 a003 	mla	r0, r0, r3, sl
 8021a4c:	1400      	asrs	r0, r0, #16
 8021a4e:	f53f af2d 	bmi.w	80218ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021a52:	3901      	subs	r1, #1
 8021a54:	4288      	cmp	r0, r1
 8021a56:	f6bf af29 	bge.w	80218ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021a5a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8021a5c:	fb01 5303 	mla	r3, r1, r3, r5
 8021a60:	141b      	asrs	r3, r3, #16
 8021a62:	f53f af23 	bmi.w	80218ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021a66:	3a01      	subs	r2, #1
 8021a68:	4293      	cmp	r3, r2
 8021a6a:	f6bf af1f 	bge.w	80218ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8021a6e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8021a72:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8021a76:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8021a7a:	f1be 0f00 	cmp.w	lr, #0
 8021a7e:	dc6c      	bgt.n	8021b5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8021a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021a82:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021a86:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8021a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	f340 810e 	ble.w	8021cae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8021a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021a96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021a98:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021a9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021aa0:	eef0 6a62 	vmov.f32	s13, s5
 8021aa4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021aa8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021aac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021ab0:	ee16 aa90 	vmov	sl, s13
 8021ab4:	eef0 6a43 	vmov.f32	s13, s6
 8021ab8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021abc:	ee16 5a90 	vmov	r5, s13
 8021ac0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ac4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021ac8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021acc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021ad0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021ad4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021ad8:	ee12 2a90 	vmov	r2, s5
 8021adc:	eef0 2a47 	vmov.f32	s5, s14
 8021ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ae4:	ee13 2a10 	vmov	r2, s6
 8021ae8:	9325      	str	r3, [sp, #148]	; 0x94
 8021aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021aec:	eeb0 3a67 	vmov.f32	s6, s15
 8021af0:	fb92 f3f3 	sdiv	r3, r2, r3
 8021af4:	9326      	str	r3, [sp, #152]	; 0x98
 8021af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021af8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8021afa:	3b01      	subs	r3, #1
 8021afc:	930c      	str	r3, [sp, #48]	; 0x30
 8021afe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8021b00:	bf08      	it	eq
 8021b02:	4613      	moveq	r3, r2
 8021b04:	9309      	str	r3, [sp, #36]	; 0x24
 8021b06:	e6a6      	b.n	8021856 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021b08:	2900      	cmp	r1, #0
 8021b0a:	f43f af10 	beq.w	802192e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021b0e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021b12:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8021b18:	e709      	b.n	802192e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8021b1a:	f112 0901 	adds.w	r9, r2, #1
 8021b1e:	f53f af7d 	bmi.w	8021a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021b22:	454b      	cmp	r3, r9
 8021b24:	f6ff af7a 	blt.w	8021a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021b28:	f11c 0901 	adds.w	r9, ip, #1
 8021b2c:	f53f af76 	bmi.w	8021a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021b30:	45ce      	cmp	lr, r9
 8021b32:	f6ff af73 	blt.w	8021a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021b36:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021b38:	b21b      	sxth	r3, r3
 8021b3a:	9202      	str	r2, [sp, #8]
 8021b3c:	fa0f f28e 	sxth.w	r2, lr
 8021b40:	9300      	str	r3, [sp, #0]
 8021b42:	4633      	mov	r3, r6
 8021b44:	9201      	str	r2, [sp, #4]
 8021b46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021b48:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021b4c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8021b50:	4639      	mov	r1, r7
 8021b52:	9816      	ldr	r0, [sp, #88]	; 0x58
 8021b54:	f7ff fd8e 	bl	8021674 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8021b58:	e760      	b.n	8021a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021b5a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021b5c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8021b60:	1429      	asrs	r1, r5, #16
 8021b62:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8021b64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021b68:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8021b6c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021b70:	fb03 2101 	mla	r1, r3, r1, r2
 8021b74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021b76:	440a      	add	r2, r1
 8021b78:	5c61      	ldrb	r1, [r4, r1]
 8021b7a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8021b7e:	f1bc 0f00 	cmp.w	ip, #0
 8021b82:	f000 808c 	beq.w	8021c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8021b86:	7857      	ldrb	r7, [r2, #1]
 8021b88:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8021b8c:	9413      	str	r4, [sp, #76]	; 0x4c
 8021b8e:	b140      	cbz	r0, 8021ba2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021b90:	18d7      	adds	r7, r2, r3
 8021b92:	5cd3      	ldrb	r3, [r2, r3]
 8021b94:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021b98:	9310      	str	r3, [sp, #64]	; 0x40
 8021b9a:	787b      	ldrb	r3, [r7, #1]
 8021b9c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021ba0:	9314      	str	r3, [sp, #80]	; 0x50
 8021ba2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021ba4:	fb1c f200 	smulbb	r2, ip, r0
 8021ba8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021baa:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021bae:	041f      	lsls	r7, r3, #16
 8021bb0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021bb4:	10d2      	asrs	r2, r2, #3
 8021bb6:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8021bba:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8021bbe:	431f      	orrs	r7, r3
 8021bc0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8021bc4:	9317      	str	r3, [sp, #92]	; 0x5c
 8021bc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021bc8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8021bca:	041b      	lsls	r3, r3, #16
 8021bcc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021bd0:	ea43 030b 	orr.w	r3, r3, fp
 8021bd4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8021bd8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021bdc:	4353      	muls	r3, r2
 8021bde:	fb04 3707 	mla	r7, r4, r7, r3
 8021be2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8021be6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021be8:	ea43 0b01 	orr.w	fp, r3, r1
 8021bec:	f1c0 0110 	rsb	r1, r0, #16
 8021bf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021bf2:	eba1 0c0c 	sub.w	ip, r1, ip
 8021bf6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021bfa:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8021bfe:	fb0c 770b 	mla	r7, ip, fp, r7
 8021c02:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021c06:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8021c0a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021c0e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8021c12:	fb02 770c 	mla	r7, r2, ip, r7
 8021c16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021c18:	0d79      	lsrs	r1, r7, #21
 8021c1a:	8812      	ldrh	r2, [r2, #0]
 8021c1c:	097f      	lsrs	r7, r7, #5
 8021c1e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021c22:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021c26:	430f      	orrs	r7, r1
 8021c28:	1211      	asrs	r1, r2, #8
 8021c2a:	b2bb      	uxth	r3, r7
 8021c2c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021c30:	10d7      	asrs	r7, r2, #3
 8021c32:	fb11 f104 	smulbb	r1, r1, r4
 8021c36:	1218      	asrs	r0, r3, #8
 8021c38:	00d2      	lsls	r2, r2, #3
 8021c3a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021c3e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021c42:	fb17 f704 	smulbb	r7, r7, r4
 8021c46:	b2d2      	uxtb	r2, r2
 8021c48:	fb00 1009 	mla	r0, r0, r9, r1
 8021c4c:	10d9      	asrs	r1, r3, #3
 8021c4e:	fb12 f204 	smulbb	r2, r2, r4
 8021c52:	00db      	lsls	r3, r3, #3
 8021c54:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021c58:	b280      	uxth	r0, r0
 8021c5a:	b2db      	uxtb	r3, r3
 8021c5c:	fb01 7109 	mla	r1, r1, r9, r7
 8021c60:	fb03 2309 	mla	r3, r3, r9, r2
 8021c64:	1c42      	adds	r2, r0, #1
 8021c66:	b289      	uxth	r1, r1
 8021c68:	b29b      	uxth	r3, r3
 8021c6a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021c6e:	1c4f      	adds	r7, r1, #1
 8021c70:	1c5a      	adds	r2, r3, #1
 8021c72:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8021c76:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8021c7a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021c80:	0949      	lsrs	r1, r1, #5
 8021c82:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021c86:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021c8a:	4310      	orrs	r0, r2
 8021c8c:	4308      	orrs	r0, r1
 8021c8e:	f823 0b02 	strh.w	r0, [r3], #2
 8021c92:	930e      	str	r3, [sp, #56]	; 0x38
 8021c94:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021c96:	449a      	add	sl, r3
 8021c98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021c9a:	441d      	add	r5, r3
 8021c9c:	e6ed      	b.n	8021a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8021c9e:	2800      	cmp	r0, #0
 8021ca0:	f43f af7f 	beq.w	8021ba2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021ca4:	5cd3      	ldrb	r3, [r2, r3]
 8021ca6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8021caa:	9310      	str	r3, [sp, #64]	; 0x40
 8021cac:	e779      	b.n	8021ba2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8021cae:	b019      	add	sp, #100	; 0x64
 8021cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021cb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8021cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021cb8:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8021cbc:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8021cc0:	f1b8 0f00 	cmp.w	r8, #0
 8021cc4:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8021cc8:	fb08 470e 	mla	r7, r8, lr, r4
 8021ccc:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8021cd0:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8021cd4:	eb02 0907 	add.w	r9, r2, r7
 8021cd8:	8808      	ldrh	r0, [r1, #0]
 8021cda:	db67      	blt.n	8021dac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8021cdc:	45c2      	cmp	sl, r8
 8021cde:	dd65      	ble.n	8021dac <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8021ce0:	2c00      	cmp	r4, #0
 8021ce2:	db61      	blt.n	8021da8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8021ce4:	45a6      	cmp	lr, r4
 8021ce6:	dd5f      	ble.n	8021da8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8021ce8:	5dd2      	ldrb	r2, [r2, r7]
 8021cea:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8021cee:	1c62      	adds	r2, r4, #1
 8021cf0:	d45f      	bmi.n	8021db2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8021cf2:	4596      	cmp	lr, r2
 8021cf4:	dd5d      	ble.n	8021db2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8021cf6:	2d00      	cmp	r5, #0
 8021cf8:	d05b      	beq.n	8021db2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8021cfa:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021cfe:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8021d02:	f118 0801 	adds.w	r8, r8, #1
 8021d06:	d458      	bmi.n	8021dba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8021d08:	45c2      	cmp	sl, r8
 8021d0a:	dd56      	ble.n	8021dba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8021d0c:	2e00      	cmp	r6, #0
 8021d0e:	d054      	beq.n	8021dba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8021d10:	2c00      	cmp	r4, #0
 8021d12:	db50      	blt.n	8021db6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8021d14:	45a6      	cmp	lr, r4
 8021d16:	dd4e      	ble.n	8021db6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8021d18:	f819 200e 	ldrb.w	r2, [r9, lr]
 8021d1c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021d20:	3401      	adds	r4, #1
 8021d22:	d407      	bmi.n	8021d34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021d24:	45a6      	cmp	lr, r4
 8021d26:	dd05      	ble.n	8021d34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021d28:	b125      	cbz	r5, 8021d34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8021d2a:	44ce      	add	lr, r9
 8021d2c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8021d30:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8021d34:	fb15 f406 	smulbb	r4, r5, r6
 8021d38:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8021d3c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8021d40:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021d44:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021d48:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8021d4c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021d50:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8021d54:	ea43 0c0c 	orr.w	ip, r3, ip
 8021d58:	f1c6 0310 	rsb	r3, r6, #16
 8021d5c:	ea4e 0707 	orr.w	r7, lr, r7
 8021d60:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8021d64:	1b5b      	subs	r3, r3, r5
 8021d66:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8021d6a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021d6e:	437d      	muls	r5, r7
 8021d70:	fb03 5c0c 	mla	ip, r3, ip, r5
 8021d74:	0403      	lsls	r3, r0, #16
 8021d76:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021d7a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021d7e:	4318      	orrs	r0, r3
 8021d80:	0413      	lsls	r3, r2, #16
 8021d82:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021d86:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021d8a:	fb04 c000 	mla	r0, r4, r0, ip
 8021d8e:	4313      	orrs	r3, r2
 8021d90:	fb06 0003 	mla	r0, r6, r3, r0
 8021d94:	0d43      	lsrs	r3, r0, #21
 8021d96:	0940      	lsrs	r0, r0, #5
 8021d98:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021d9c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8021da0:	4318      	orrs	r0, r3
 8021da2:	8008      	strh	r0, [r1, #0]
 8021da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021da8:	4684      	mov	ip, r0
 8021daa:	e7a0      	b.n	8021cee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8021dac:	4607      	mov	r7, r0
 8021dae:	4684      	mov	ip, r0
 8021db0:	e7a7      	b.n	8021d02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8021db2:	4607      	mov	r7, r0
 8021db4:	e7a5      	b.n	8021d02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8021db6:	4602      	mov	r2, r0
 8021db8:	e7b2      	b.n	8021d20 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8021dba:	4602      	mov	r2, r0
 8021dbc:	e7ba      	b.n	8021d34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08021dbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dc2:	b093      	sub	sp, #76	; 0x4c
 8021dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021dc8:	920f      	str	r2, [sp, #60]	; 0x3c
 8021dca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021dcc:	9010      	str	r0, [sp, #64]	; 0x40
 8021dce:	9108      	str	r1, [sp, #32]
 8021dd0:	6850      	ldr	r0, [r2, #4]
 8021dd2:	9306      	str	r3, [sp, #24]
 8021dd4:	6812      	ldr	r2, [r2, #0]
 8021dd6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8021dda:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8021dde:	fb00 1303 	mla	r3, r0, r3, r1
 8021de2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8021de6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021de8:	681b      	ldr	r3, [r3, #0]
 8021dea:	9307      	str	r3, [sp, #28]
 8021dec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021dee:	685f      	ldr	r7, [r3, #4]
 8021df0:	3704      	adds	r7, #4
 8021df2:	9b08      	ldr	r3, [sp, #32]
 8021df4:	2b00      	cmp	r3, #0
 8021df6:	dc03      	bgt.n	8021e00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8021df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021dfa:	2b00      	cmp	r3, #0
 8021dfc:	f340 81b2 	ble.w	8022164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021e00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e02:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021e06:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021e0a:	1e48      	subs	r0, r1, #1
 8021e0c:	f102 3cff 	add.w	ip, r2, #4294967295
 8021e10:	9b06      	ldr	r3, [sp, #24]
 8021e12:	2b00      	cmp	r3, #0
 8021e14:	f340 80a9 	ble.w	8021f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8021e18:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8021e1c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021e20:	d406      	bmi.n	8021e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021e22:	4586      	cmp	lr, r0
 8021e24:	da04      	bge.n	8021e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021e26:	2b00      	cmp	r3, #0
 8021e28:	db02      	blt.n	8021e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021e2a:	4563      	cmp	r3, ip
 8021e2c:	f2c0 809e 	blt.w	8021f6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8021e30:	f11e 0e01 	adds.w	lr, lr, #1
 8021e34:	f100 808f 	bmi.w	8021f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021e38:	4571      	cmp	r1, lr
 8021e3a:	f2c0 808c 	blt.w	8021f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021e3e:	3301      	adds	r3, #1
 8021e40:	f100 8089 	bmi.w	8021f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021e44:	429a      	cmp	r2, r3
 8021e46:	f2c0 8086 	blt.w	8021f56 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8021e4a:	f8dd b018 	ldr.w	fp, [sp, #24]
 8021e4e:	46c8      	mov	r8, r9
 8021e50:	f1bb 0f00 	cmp.w	fp, #0
 8021e54:	f340 80a6 	ble.w	8021fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021e58:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021e5a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021e5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e60:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021e64:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021e68:	1422      	asrs	r2, r4, #16
 8021e6a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021e6e:	689b      	ldr	r3, [r3, #8]
 8021e70:	f100 80e3 	bmi.w	802203a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021e74:	f103 3aff 	add.w	sl, r3, #4294967295
 8021e78:	4552      	cmp	r2, sl
 8021e7a:	f280 80de 	bge.w	802203a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021e7e:	f1bc 0f00 	cmp.w	ip, #0
 8021e82:	f2c0 80da 	blt.w	802203a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021e86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8021e8a:	45d4      	cmp	ip, sl
 8021e8c:	f280 80d5 	bge.w	802203a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021e90:	b21b      	sxth	r3, r3
 8021e92:	9d07      	ldr	r5, [sp, #28]
 8021e94:	fb0c 2203 	mla	r2, ip, r3, r2
 8021e98:	eb05 0a02 	add.w	sl, r5, r2
 8021e9c:	5caa      	ldrb	r2, [r5, r2]
 8021e9e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8021ea2:	2800      	cmp	r0, #0
 8021ea4:	f000 80c0 	beq.w	8022028 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8021ea8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8021eac:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8021eb0:	920b      	str	r2, [sp, #44]	; 0x2c
 8021eb2:	b151      	cbz	r1, 8021eca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8021eb4:	eb0a 0203 	add.w	r2, sl, r3
 8021eb8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8021ebc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8021ec2:	7853      	ldrb	r3, [r2, #1]
 8021ec4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8021eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ecc:	fb10 f201 	smulbb	r2, r0, r1
 8021ed0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021ed2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021ed6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021eda:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021ede:	10d2      	asrs	r2, r2, #3
 8021ee0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021ee4:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8021ee8:	ea4c 0c03 	orr.w	ip, ip, r3
 8021eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021eee:	041b      	lsls	r3, r3, #16
 8021ef0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021ef4:	432b      	orrs	r3, r5
 8021ef6:	4353      	muls	r3, r2
 8021ef8:	fb0a 330c 	mla	r3, sl, ip, r3
 8021efc:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021f00:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021f04:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021f08:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021f0c:	f1c1 0c10 	rsb	ip, r1, #16
 8021f10:	ebac 0c00 	sub.w	ip, ip, r0
 8021f14:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021f18:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021f1c:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f22:	0418      	lsls	r0, r3, #16
 8021f24:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021f28:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021f2c:	4318      	orrs	r0, r3
 8021f2e:	fb02 c200 	mla	r2, r2, r0, ip
 8021f32:	0d53      	lsrs	r3, r2, #21
 8021f34:	0952      	lsrs	r2, r2, #5
 8021f36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021f3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021f3e:	431a      	orrs	r2, r3
 8021f40:	f8a8 2000 	strh.w	r2, [r8]
 8021f44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021f46:	f108 0802 	add.w	r8, r8, #2
 8021f4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021f4e:	441c      	add	r4, r3
 8021f50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f52:	441e      	add	r6, r3
 8021f54:	e77c      	b.n	8021e50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021f56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021f58:	f109 0902 	add.w	r9, r9, #2
 8021f5c:	441c      	add	r4, r3
 8021f5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f60:	441e      	add	r6, r3
 8021f62:	9b06      	ldr	r3, [sp, #24]
 8021f64:	3b01      	subs	r3, #1
 8021f66:	9306      	str	r3, [sp, #24]
 8021f68:	e752      	b.n	8021e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021f6a:	d020      	beq.n	8021fae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021f6c:	9b06      	ldr	r3, [sp, #24]
 8021f6e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021f70:	3b01      	subs	r3, #1
 8021f72:	fb00 4003 	mla	r0, r0, r3, r4
 8021f76:	1400      	asrs	r0, r0, #16
 8021f78:	f53f af67 	bmi.w	8021e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021f7c:	3901      	subs	r1, #1
 8021f7e:	4288      	cmp	r0, r1
 8021f80:	f6bf af63 	bge.w	8021e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021f84:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021f86:	fb01 6303 	mla	r3, r1, r3, r6
 8021f8a:	141b      	asrs	r3, r3, #16
 8021f8c:	f53f af5d 	bmi.w	8021e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021f90:	3a01      	subs	r2, #1
 8021f92:	4293      	cmp	r3, r2
 8021f94:	f6bf af59 	bge.w	8021e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021f98:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8021f9c:	46ca      	mov	sl, r9
 8021f9e:	f1b8 0f00 	cmp.w	r8, #0
 8021fa2:	dc67      	bgt.n	8022074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8021fa4:	9b06      	ldr	r3, [sp, #24]
 8021fa6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021faa:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8021fae:	9b08      	ldr	r3, [sp, #32]
 8021fb0:	2b00      	cmp	r3, #0
 8021fb2:	f340 80d7 	ble.w	8022164 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8021fb6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021fba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021fbc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021fc0:	eeb0 6a62 	vmov.f32	s12, s5
 8021fc4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021fc8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021fcc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021fd0:	ee16 4a10 	vmov	r4, s12
 8021fd4:	eeb0 6a43 	vmov.f32	s12, s6
 8021fd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021fdc:	ee16 6a10 	vmov	r6, s12
 8021fe0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021fe4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021fe8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021fec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021ff0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021ff4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021ff8:	ee12 2a90 	vmov	r2, s5
 8021ffc:	eef0 2a47 	vmov.f32	s5, s14
 8022000:	fb92 f3f3 	sdiv	r3, r2, r3
 8022004:	ee13 2a10 	vmov	r2, s6
 8022008:	931f      	str	r3, [sp, #124]	; 0x7c
 802200a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802200c:	eeb0 3a67 	vmov.f32	s6, s15
 8022010:	fb92 f3f3 	sdiv	r3, r2, r3
 8022014:	9320      	str	r3, [sp, #128]	; 0x80
 8022016:	9b08      	ldr	r3, [sp, #32]
 8022018:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802201a:	3b01      	subs	r3, #1
 802201c:	9308      	str	r3, [sp, #32]
 802201e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022020:	bf08      	it	eq
 8022022:	4613      	moveq	r3, r2
 8022024:	9306      	str	r3, [sp, #24]
 8022026:	e6e4      	b.n	8021df2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022028:	2900      	cmp	r1, #0
 802202a:	f43f af4e 	beq.w	8021eca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802202e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022032:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022036:	9309      	str	r3, [sp, #36]	; 0x24
 8022038:	e747      	b.n	8021eca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802203a:	f112 0a01 	adds.w	sl, r2, #1
 802203e:	d481      	bmi.n	8021f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022040:	4553      	cmp	r3, sl
 8022042:	f6ff af7f 	blt.w	8021f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022046:	f11c 0a01 	adds.w	sl, ip, #1
 802204a:	f53f af7b 	bmi.w	8021f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802204e:	45d6      	cmp	lr, sl
 8022050:	f6ff af78 	blt.w	8021f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022054:	b21b      	sxth	r3, r3
 8022056:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 802205a:	fa0f f28e 	sxth.w	r2, lr
 802205e:	9300      	str	r3, [sp, #0]
 8022060:	463b      	mov	r3, r7
 8022062:	9201      	str	r2, [sp, #4]
 8022064:	9a07      	ldr	r2, [sp, #28]
 8022066:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802206a:	4641      	mov	r1, r8
 802206c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802206e:	f7ff fe21 	bl	8021cb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8022072:	e767      	b.n	8021f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8022074:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022076:	1422      	asrs	r2, r4, #16
 8022078:	1431      	asrs	r1, r6, #16
 802207a:	9d07      	ldr	r5, [sp, #28]
 802207c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022080:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8022084:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022088:	fb03 2101 	mla	r1, r3, r1, r2
 802208c:	9a07      	ldr	r2, [sp, #28]
 802208e:	440a      	add	r2, r1
 8022090:	5c69      	ldrb	r1, [r5, r1]
 8022092:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8022096:	f1be 0f00 	cmp.w	lr, #0
 802209a:	d05c      	beq.n	8022156 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802209c:	f892 c001 	ldrb.w	ip, [r2, #1]
 80220a0:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80220a4:	950d      	str	r5, [sp, #52]	; 0x34
 80220a6:	b150      	cbz	r0, 80220be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80220a8:	eb02 0c03 	add.w	ip, r2, r3
 80220ac:	5cd3      	ldrb	r3, [r2, r3]
 80220ae:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80220b2:	930a      	str	r3, [sp, #40]	; 0x28
 80220b4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80220b8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80220bc:	930e      	str	r3, [sp, #56]	; 0x38
 80220be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80220c0:	fb1e f200 	smulbb	r2, lr, r0
 80220c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80220c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80220ca:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80220ce:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80220d2:	10d2      	asrs	r2, r2, #3
 80220d4:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80220d8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80220dc:	ea4c 0c03 	orr.w	ip, ip, r3
 80220e0:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80220e4:	9311      	str	r3, [sp, #68]	; 0x44
 80220e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80220e8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80220ea:	041b      	lsls	r3, r3, #16
 80220ec:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80220f0:	ea43 030b 	orr.w	r3, r3, fp
 80220f4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80220f8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80220fc:	4353      	muls	r3, r2
 80220fe:	fb05 3c0c 	mla	ip, r5, ip, r3
 8022102:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022106:	ea43 0b01 	orr.w	fp, r3, r1
 802210a:	f1c0 0110 	rsb	r1, r0, #16
 802210e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022110:	eba1 0e0e 	sub.w	lr, r1, lr
 8022114:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8022118:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802211c:	fb0e cc0b 	mla	ip, lr, fp, ip
 8022120:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8022124:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8022128:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802212c:	ea4b 0e0e 	orr.w	lr, fp, lr
 8022130:	fb02 cc0e 	mla	ip, r2, lr, ip
 8022134:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8022138:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802213c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022140:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022144:	ea43 0c0c 	orr.w	ip, r3, ip
 8022148:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802214a:	441c      	add	r4, r3
 802214c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802214e:	f82a cb02 	strh.w	ip, [sl], #2
 8022152:	441e      	add	r6, r3
 8022154:	e723      	b.n	8021f9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8022156:	2800      	cmp	r0, #0
 8022158:	d0b1      	beq.n	80220be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 802215a:	5cd3      	ldrb	r3, [r2, r3]
 802215c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022160:	930a      	str	r3, [sp, #40]	; 0x28
 8022162:	e7ac      	b.n	80220be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8022164:	b013      	add	sp, #76	; 0x4c
 8022166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802216a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802216a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802216e:	880d      	ldrh	r5, [r1, #0]
 8022170:	b087      	sub	sp, #28
 8022172:	10ef      	asrs	r7, r5, #3
 8022174:	9103      	str	r1, [sp, #12]
 8022176:	ea4f 2a25 	mov.w	sl, r5, asr #8
 802217a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 802217e:	00ed      	lsls	r5, r5, #3
 8022180:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022184:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8022188:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 802218c:	b2ed      	uxtb	r5, r5
 802218e:	9701      	str	r7, [sp, #4]
 8022190:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8022194:	9502      	str	r5, [sp, #8]
 8022196:	9d01      	ldr	r5, [sp, #4]
 8022198:	9902      	ldr	r1, [sp, #8]
 802219a:	022d      	lsls	r5, r5, #8
 802219c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 80221a0:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 80221a4:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80221a8:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80221ac:	430d      	orrs	r5, r1
 80221ae:	fb06 0709 	mla	r7, r6, r9, r0
 80221b2:	2e00      	cmp	r6, #0
 80221b4:	9505      	str	r5, [sp, #20]
 80221b6:	eb02 0c07 	add.w	ip, r2, r7
 80221ba:	f2c0 80b6 	blt.w	802232a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80221be:	45b3      	cmp	fp, r6
 80221c0:	f340 80b3 	ble.w	802232a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 80221c4:	2800      	cmp	r0, #0
 80221c6:	f2c0 80ae 	blt.w	8022326 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80221ca:	4581      	cmp	r9, r0
 80221cc:	f340 80ab 	ble.w	8022326 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 80221d0:	5dd7      	ldrb	r7, [r2, r7]
 80221d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80221d6:	441f      	add	r7, r3
 80221d8:	1c42      	adds	r2, r0, #1
 80221da:	f100 80a9 	bmi.w	8022330 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80221de:	4591      	cmp	r9, r2
 80221e0:	f340 80a6 	ble.w	8022330 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80221e4:	2c00      	cmp	r4, #0
 80221e6:	f000 80a3 	beq.w	8022330 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 80221ea:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80221ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80221f2:	441d      	add	r5, r3
 80221f4:	3601      	adds	r6, #1
 80221f6:	f100 809f 	bmi.w	8022338 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 80221fa:	45b3      	cmp	fp, r6
 80221fc:	f340 809c 	ble.w	8022338 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022200:	f1be 0f00 	cmp.w	lr, #0
 8022204:	f000 8098 	beq.w	8022338 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8022208:	2800      	cmp	r0, #0
 802220a:	f2c0 8093 	blt.w	8022334 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802220e:	4581      	cmp	r9, r0
 8022210:	f340 8090 	ble.w	8022334 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8022214:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8022218:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802221c:	441e      	add	r6, r3
 802221e:	3001      	adds	r0, #1
 8022220:	f100 808d 	bmi.w	802233e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022224:	4581      	cmp	r9, r0
 8022226:	f340 808a 	ble.w	802233e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802222a:	2c00      	cmp	r4, #0
 802222c:	f000 8087 	beq.w	802233e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8022230:	44e1      	add	r9, ip
 8022232:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022236:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802223a:	4413      	add	r3, r2
 802223c:	b2a4      	uxth	r4, r4
 802223e:	f897 c002 	ldrb.w	ip, [r7, #2]
 8022242:	fa1f fe8e 	uxth.w	lr, lr
 8022246:	9901      	ldr	r1, [sp, #4]
 8022248:	fb04 fb0e 	mul.w	fp, r4, lr
 802224c:	0124      	lsls	r4, r4, #4
 802224e:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8022252:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8022256:	eba4 040b 	sub.w	r4, r4, fp
 802225a:	fa1f f08e 	uxth.w	r0, lr
 802225e:	b2a2      	uxth	r2, r4
 8022260:	78ac      	ldrb	r4, [r5, #2]
 8022262:	eba9 0900 	sub.w	r9, r9, r0
 8022266:	fa1f fe88 	uxth.w	lr, r8
 802226a:	4354      	muls	r4, r2
 802226c:	ea6f 0808 	mvn.w	r8, r8
 8022270:	fa1f f989 	uxth.w	r9, r9
 8022274:	fa5f f888 	uxtb.w	r8, r8
 8022278:	fb09 440c 	mla	r4, r9, ip, r4
 802227c:	f896 c002 	ldrb.w	ip, [r6, #2]
 8022280:	fb1a fa08 	smulbb	sl, sl, r8
 8022284:	fb00 440c 	mla	r4, r0, ip, r4
 8022288:	f893 c002 	ldrb.w	ip, [r3, #2]
 802228c:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8022290:	787c      	ldrb	r4, [r7, #1]
 8022292:	783f      	ldrb	r7, [r7, #0]
 8022294:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022298:	fb0c ac0e 	mla	ip, ip, lr, sl
 802229c:	f895 a001 	ldrb.w	sl, [r5, #1]
 80222a0:	782d      	ldrb	r5, [r5, #0]
 80222a2:	fb02 fa0a 	mul.w	sl, r2, sl
 80222a6:	fa1f fc8c 	uxth.w	ip, ip
 80222aa:	436a      	muls	r2, r5
 80222ac:	7835      	ldrb	r5, [r6, #0]
 80222ae:	fb09 aa04 	mla	sl, r9, r4, sl
 80222b2:	7874      	ldrb	r4, [r6, #1]
 80222b4:	fb09 2207 	mla	r2, r9, r7, r2
 80222b8:	fb00 aa04 	mla	sl, r0, r4, sl
 80222bc:	785c      	ldrb	r4, [r3, #1]
 80222be:	fb00 2005 	mla	r0, r0, r5, r2
 80222c2:	781b      	ldrb	r3, [r3, #0]
 80222c4:	fb0b a404 	mla	r4, fp, r4, sl
 80222c8:	fb11 fa08 	smulbb	sl, r1, r8
 80222cc:	fb0b 0b03 	mla	fp, fp, r3, r0
 80222d0:	9b02      	ldr	r3, [sp, #8]
 80222d2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80222d6:	fb13 f808 	smulbb	r8, r3, r8
 80222da:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80222de:	fb04 a40e 	mla	r4, r4, lr, sl
 80222e2:	f10c 0301 	add.w	r3, ip, #1
 80222e6:	fb0b 8e0e 	mla	lr, fp, lr, r8
 80222ea:	b2a4      	uxth	r4, r4
 80222ec:	fa1f fe8e 	uxth.w	lr, lr
 80222f0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80222f4:	f104 0a01 	add.w	sl, r4, #1
 80222f8:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 80222fc:	f10e 0c01 	add.w	ip, lr, #1
 8022300:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022304:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022308:	0964      	lsrs	r4, r4, #5
 802230a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802230e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8022312:	ea4c 0c03 	orr.w	ip, ip, r3
 8022316:	9b03      	ldr	r3, [sp, #12]
 8022318:	ea4c 0c04 	orr.w	ip, ip, r4
 802231c:	f8a3 c000 	strh.w	ip, [r3]
 8022320:	b007      	add	sp, #28
 8022322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022326:	af05      	add	r7, sp, #20
 8022328:	e756      	b.n	80221d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802232a:	ad05      	add	r5, sp, #20
 802232c:	462f      	mov	r7, r5
 802232e:	e761      	b.n	80221f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022330:	ad05      	add	r5, sp, #20
 8022332:	e75f      	b.n	80221f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8022334:	ae05      	add	r6, sp, #20
 8022336:	e772      	b.n	802221e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8022338:	ab05      	add	r3, sp, #20
 802233a:	461e      	mov	r6, r3
 802233c:	e77e      	b.n	802223c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 802233e:	ab05      	add	r3, sp, #20
 8022340:	e77c      	b.n	802223c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08022342 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022342:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022346:	b095      	sub	sp, #84	; 0x54
 8022348:	9212      	str	r2, [sp, #72]	; 0x48
 802234a:	9309      	str	r3, [sp, #36]	; 0x24
 802234c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802234e:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8022352:	9013      	str	r0, [sp, #76]	; 0x4c
 8022354:	930f      	str	r3, [sp, #60]	; 0x3c
 8022356:	6850      	ldr	r0, [r2, #4]
 8022358:	910e      	str	r1, [sp, #56]	; 0x38
 802235a:	6812      	ldr	r2, [r2, #0]
 802235c:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8022360:	fb00 1303 	mla	r3, r0, r3, r1
 8022364:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022368:	930a      	str	r3, [sp, #40]	; 0x28
 802236a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802236c:	681b      	ldr	r3, [r3, #0]
 802236e:	930d      	str	r3, [sp, #52]	; 0x34
 8022370:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022372:	685c      	ldr	r4, [r3, #4]
 8022374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022376:	3404      	adds	r4, #4
 8022378:	43db      	mvns	r3, r3
 802237a:	b2db      	uxtb	r3, r3
 802237c:	930b      	str	r3, [sp, #44]	; 0x2c
 802237e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022380:	2b00      	cmp	r3, #0
 8022382:	dc03      	bgt.n	802238c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022384:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022386:	2b00      	cmp	r3, #0
 8022388:	f340 8255 	ble.w	8022836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802238c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802238e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022392:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022396:	1e48      	subs	r0, r1, #1
 8022398:	1e55      	subs	r5, r2, #1
 802239a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802239c:	2b00      	cmp	r3, #0
 802239e:	f340 80f9 	ble.w	8022594 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80223a2:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80223a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80223a6:	1436      	asrs	r6, r6, #16
 80223a8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80223ac:	d406      	bmi.n	80223bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80223ae:	4286      	cmp	r6, r0
 80223b0:	da04      	bge.n	80223bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80223b2:	2b00      	cmp	r3, #0
 80223b4:	db02      	blt.n	80223bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80223b6:	42ab      	cmp	r3, r5
 80223b8:	f2c0 80ed 	blt.w	8022596 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80223bc:	3601      	adds	r6, #1
 80223be:	f100 80da 	bmi.w	8022576 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80223c2:	42b1      	cmp	r1, r6
 80223c4:	f2c0 80d7 	blt.w	8022576 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80223c8:	3301      	adds	r3, #1
 80223ca:	f100 80d4 	bmi.w	8022576 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80223ce:	429a      	cmp	r2, r3
 80223d0:	f2c0 80d1 	blt.w	8022576 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80223d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223d6:	9311      	str	r3, [sp, #68]	; 0x44
 80223d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223da:	930c      	str	r3, [sp, #48]	; 0x30
 80223dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80223de:	2b00      	cmp	r3, #0
 80223e0:	f340 80fa 	ble.w	80225d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80223e4:	9826      	ldr	r0, [sp, #152]	; 0x98
 80223e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80223e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80223ea:	68c6      	ldr	r6, [r0, #12]
 80223ec:	141d      	asrs	r5, r3, #16
 80223ee:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80223f0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80223f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80223f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80223f8:	1400      	asrs	r0, r0, #16
 80223fa:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80223fe:	6892      	ldr	r2, [r2, #8]
 8022400:	f100 813e 	bmi.w	8022680 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022404:	1e57      	subs	r7, r2, #1
 8022406:	42b8      	cmp	r0, r7
 8022408:	f280 813a 	bge.w	8022680 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802240c:	2d00      	cmp	r5, #0
 802240e:	f2c0 8137 	blt.w	8022680 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022412:	1e77      	subs	r7, r6, #1
 8022414:	42bd      	cmp	r5, r7
 8022416:	f280 8133 	bge.w	8022680 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802241a:	b212      	sxth	r2, r2
 802241c:	fb05 0002 	mla	r0, r5, r2, r0
 8022420:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022422:	f815 a000 	ldrb.w	sl, [r5, r0]
 8022426:	182e      	adds	r6, r5, r0
 8022428:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802242c:	eb04 050a 	add.w	r5, r4, sl
 8022430:	2b00      	cmp	r3, #0
 8022432:	f000 8117 	beq.w	8022664 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022436:	f896 c001 	ldrb.w	ip, [r6, #1]
 802243a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802243e:	44a4      	add	ip, r4
 8022440:	2900      	cmp	r1, #0
 8022442:	f000 8117 	beq.w	8022674 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022446:	18b0      	adds	r0, r6, r2
 8022448:	5cb2      	ldrb	r2, [r6, r2]
 802244a:	7840      	ldrb	r0, [r0, #1]
 802244c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022450:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022454:	4422      	add	r2, r4
 8022456:	4420      	add	r0, r4
 8022458:	b29b      	uxth	r3, r3
 802245a:	f89c 7002 	ldrb.w	r7, [ip, #2]
 802245e:	b289      	uxth	r1, r1
 8022460:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022464:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022466:	fb03 f901 	mul.w	r9, r3, r1
 802246a:	011b      	lsls	r3, r3, #4
 802246c:	f8b6 e000 	ldrh.w	lr, [r6]
 8022470:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022474:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8022478:	eba3 0309 	sub.w	r3, r3, r9
 802247c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8022480:	b289      	uxth	r1, r1
 8022482:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8022486:	b29b      	uxth	r3, r3
 8022488:	eba8 0801 	sub.w	r8, r8, r1
 802248c:	435f      	muls	r7, r3
 802248e:	fa1f f888 	uxth.w	r8, r8
 8022492:	9310      	str	r3, [sp, #64]	; 0x40
 8022494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022496:	fb08 770b 	mla	r7, r8, fp, r7
 802249a:	f892 b002 	ldrb.w	fp, [r2, #2]
 802249e:	fb01 770b 	mla	r7, r1, fp, r7
 80224a2:	f890 b002 	ldrb.w	fp, [r0, #2]
 80224a6:	fb09 770b 	mla	r7, r9, fp, r7
 80224aa:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80224ae:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80224b2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80224b6:	fb1b fb03 	smulbb	fp, fp, r3
 80224ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80224bc:	fb07 b706 	mla	r7, r7, r6, fp
 80224c0:	f895 b001 	ldrb.w	fp, [r5, #1]
 80224c4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80224c8:	f89c c000 	ldrb.w	ip, [ip]
 80224cc:	b2bf      	uxth	r7, r7
 80224ce:	435d      	muls	r5, r3
 80224d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80224d2:	fb08 550b 	mla	r5, r8, fp, r5
 80224d6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80224da:	fb01 550b 	mla	r5, r1, fp, r5
 80224de:	f890 b001 	ldrb.w	fp, [r0, #1]
 80224e2:	fb09 550b 	mla	r5, r9, fp, r5
 80224e6:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80224ea:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80224ee:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80224f2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80224f6:	fa5f fe8e 	uxtb.w	lr, lr
 80224fa:	fb1b fb03 	smulbb	fp, fp, r3
 80224fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022500:	fb03 f30c 	mul.w	r3, r3, ip
 8022504:	f892 c000 	ldrb.w	ip, [r2]
 8022508:	fb05 b506 	mla	r5, r5, r6, fp
 802250c:	fb08 330a 	mla	r3, r8, sl, r3
 8022510:	b2ad      	uxth	r5, r5
 8022512:	fb01 330c 	mla	r3, r1, ip, r3
 8022516:	f890 c000 	ldrb.w	ip, [r0]
 802251a:	f105 0b01 	add.w	fp, r5, #1
 802251e:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022524:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8022528:	fb1e fe03 	smulbb	lr, lr, r3
 802252c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8022530:	1c7b      	adds	r3, r7, #1
 8022532:	096d      	lsrs	r5, r5, #5
 8022534:	fb0c e606 	mla	r6, ip, r6, lr
 8022538:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802253c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022540:	b2b6      	uxth	r6, r6
 8022542:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8022546:	1c77      	adds	r7, r6, #1
 8022548:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802254c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022550:	431f      	orrs	r7, r3
 8022552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022554:	433d      	orrs	r5, r7
 8022556:	801d      	strh	r5, [r3, #0]
 8022558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802255a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802255c:	3302      	adds	r3, #2
 802255e:	930c      	str	r3, [sp, #48]	; 0x30
 8022560:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022562:	4413      	add	r3, r2
 8022564:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022566:	931f      	str	r3, [sp, #124]	; 0x7c
 8022568:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802256a:	4413      	add	r3, r2
 802256c:	9320      	str	r3, [sp, #128]	; 0x80
 802256e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022570:	3b01      	subs	r3, #1
 8022572:	9311      	str	r3, [sp, #68]	; 0x44
 8022574:	e732      	b.n	80223dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022576:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022578:	9e21      	ldr	r6, [sp, #132]	; 0x84
 802257a:	4433      	add	r3, r6
 802257c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 802257e:	931f      	str	r3, [sp, #124]	; 0x7c
 8022580:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022582:	4433      	add	r3, r6
 8022584:	9320      	str	r3, [sp, #128]	; 0x80
 8022586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022588:	3b01      	subs	r3, #1
 802258a:	9309      	str	r3, [sp, #36]	; 0x24
 802258c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802258e:	3302      	adds	r3, #2
 8022590:	930a      	str	r3, [sp, #40]	; 0x28
 8022592:	e702      	b.n	802239a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022594:	d027      	beq.n	80225e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8022596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022598:	9821      	ldr	r0, [sp, #132]	; 0x84
 802259a:	3b01      	subs	r3, #1
 802259c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 802259e:	fb00 5003 	mla	r0, r0, r3, r5
 80225a2:	1400      	asrs	r0, r0, #16
 80225a4:	f53f af16 	bmi.w	80223d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80225a8:	3901      	subs	r1, #1
 80225aa:	4288      	cmp	r0, r1
 80225ac:	f6bf af12 	bge.w	80223d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80225b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80225b2:	9820      	ldr	r0, [sp, #128]	; 0x80
 80225b4:	fb01 0303 	mla	r3, r1, r3, r0
 80225b8:	141b      	asrs	r3, r3, #16
 80225ba:	f53f af0b 	bmi.w	80223d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80225be:	3a01      	subs	r2, #1
 80225c0:	4293      	cmp	r3, r2
 80225c2:	f6bf af07 	bge.w	80223d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80225c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225c8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80225cc:	9311      	str	r3, [sp, #68]	; 0x44
 80225ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80225d0:	930c      	str	r3, [sp, #48]	; 0x30
 80225d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80225d4:	2b00      	cmp	r3, #0
 80225d6:	dc70      	bgt.n	80226ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80225d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80225da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80225dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80225e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80225e4:	930a      	str	r3, [sp, #40]	; 0x28
 80225e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80225e8:	2b00      	cmp	r3, #0
 80225ea:	f340 8124 	ble.w	8022836 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80225ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80225f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80225f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80225f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80225fc:	eef0 6a62 	vmov.f32	s13, s5
 8022600:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022604:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022608:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802260c:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8022610:	eef0 6a43 	vmov.f32	s13, s6
 8022614:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022618:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 802261c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022620:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022624:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022628:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802262c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022630:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022634:	ee12 2a90 	vmov	r2, s5
 8022638:	eef0 2a47 	vmov.f32	s5, s14
 802263c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022640:	ee13 2a10 	vmov	r2, s6
 8022644:	9321      	str	r3, [sp, #132]	; 0x84
 8022646:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022648:	eeb0 3a67 	vmov.f32	s6, s15
 802264c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022650:	9322      	str	r3, [sp, #136]	; 0x88
 8022652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022656:	3b01      	subs	r3, #1
 8022658:	930e      	str	r3, [sp, #56]	; 0x38
 802265a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802265c:	bf08      	it	eq
 802265e:	4613      	moveq	r3, r2
 8022660:	9309      	str	r3, [sp, #36]	; 0x24
 8022662:	e68c      	b.n	802237e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022664:	b149      	cbz	r1, 802267a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8022666:	5cb2      	ldrb	r2, [r6, r2]
 8022668:	4628      	mov	r0, r5
 802266a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802266e:	4422      	add	r2, r4
 8022670:	46ac      	mov	ip, r5
 8022672:	e6f1      	b.n	8022458 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022674:	4628      	mov	r0, r5
 8022676:	462a      	mov	r2, r5
 8022678:	e6ee      	b.n	8022458 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802267a:	4628      	mov	r0, r5
 802267c:	462a      	mov	r2, r5
 802267e:	e7f7      	b.n	8022670 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8022680:	1c47      	adds	r7, r0, #1
 8022682:	f53f af69 	bmi.w	8022558 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022686:	42ba      	cmp	r2, r7
 8022688:	f6ff af66 	blt.w	8022558 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802268c:	1c6f      	adds	r7, r5, #1
 802268e:	f53f af63 	bmi.w	8022558 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022692:	42be      	cmp	r6, r7
 8022694:	f6ff af60 	blt.w	8022558 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022698:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802269a:	b236      	sxth	r6, r6
 802269c:	b212      	sxth	r2, r2
 802269e:	9002      	str	r0, [sp, #8]
 80226a0:	9601      	str	r6, [sp, #4]
 80226a2:	9200      	str	r2, [sp, #0]
 80226a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80226a6:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80226aa:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80226ae:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80226b2:	4623      	mov	r3, r4
 80226b4:	f7ff fd59 	bl	802216a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80226b8:	e74e      	b.n	8022558 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80226ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80226bc:	9820      	ldr	r0, [sp, #128]	; 0x80
 80226be:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80226c2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80226c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80226c6:	1400      	asrs	r0, r0, #16
 80226c8:	142d      	asrs	r5, r5, #16
 80226ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80226cc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80226d0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80226d4:	fb02 5000 	mla	r0, r2, r0, r5
 80226d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80226da:	f815 9000 	ldrb.w	r9, [r5, r0]
 80226de:	182e      	adds	r6, r5, r0
 80226e0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80226e4:	eb04 0509 	add.w	r5, r4, r9
 80226e8:	2b00      	cmp	r3, #0
 80226ea:	f000 8096 	beq.w	802281a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80226ee:	7877      	ldrb	r7, [r6, #1]
 80226f0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80226f4:	4427      	add	r7, r4
 80226f6:	2900      	cmp	r1, #0
 80226f8:	f000 8097 	beq.w	802282a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 80226fc:	18b0      	adds	r0, r6, r2
 80226fe:	5cb2      	ldrb	r2, [r6, r2]
 8022700:	7840      	ldrb	r0, [r0, #1]
 8022702:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802270a:	4422      	add	r2, r4
 802270c:	4420      	add	r0, r4
 802270e:	b29b      	uxth	r3, r3
 8022710:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022712:	b289      	uxth	r1, r1
 8022714:	f895 b002 	ldrb.w	fp, [r5, #2]
 8022718:	f8b6 c000 	ldrh.w	ip, [r6]
 802271c:	fb03 f801 	mul.w	r8, r3, r1
 8022720:	011b      	lsls	r3, r3, #4
 8022722:	78be      	ldrb	r6, [r7, #2]
 8022724:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8022728:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802272c:	eba3 0308 	sub.w	r3, r3, r8
 8022730:	f814 9009 	ldrb.w	r9, [r4, r9]
 8022734:	b289      	uxth	r1, r1
 8022736:	b29b      	uxth	r3, r3
 8022738:	ebae 0e01 	sub.w	lr, lr, r1
 802273c:	435e      	muls	r6, r3
 802273e:	fa1f fe8e 	uxth.w	lr, lr
 8022742:	9310      	str	r3, [sp, #64]	; 0x40
 8022744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022746:	fb0e 660b 	mla	r6, lr, fp, r6
 802274a:	f892 b002 	ldrb.w	fp, [r2, #2]
 802274e:	fb01 660b 	mla	r6, r1, fp, r6
 8022752:	f890 b002 	ldrb.w	fp, [r0, #2]
 8022756:	fb08 660b 	mla	r6, r8, fp, r6
 802275a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 802275e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8022762:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022766:	fb1b fb03 	smulbb	fp, fp, r3
 802276a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802276c:	fb06 b60a 	mla	r6, r6, sl, fp
 8022770:	f895 b001 	ldrb.w	fp, [r5, #1]
 8022774:	787d      	ldrb	r5, [r7, #1]
 8022776:	783f      	ldrb	r7, [r7, #0]
 8022778:	b2b6      	uxth	r6, r6
 802277a:	435d      	muls	r5, r3
 802277c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802277e:	fb0e 550b 	mla	r5, lr, fp, r5
 8022782:	f892 b001 	ldrb.w	fp, [r2, #1]
 8022786:	fb01 550b 	mla	r5, r1, fp, r5
 802278a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802278e:	fb08 550b 	mla	r5, r8, fp, r5
 8022792:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8022796:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802279a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802279e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80227a2:	fa5f fc8c 	uxtb.w	ip, ip
 80227a6:	fb1b fb03 	smulbb	fp, fp, r3
 80227aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80227ac:	437b      	muls	r3, r7
 80227ae:	7817      	ldrb	r7, [r2, #0]
 80227b0:	fb05 b50a 	mla	r5, r5, sl, fp
 80227b4:	fb0e 3309 	mla	r3, lr, r9, r3
 80227b8:	b2ad      	uxth	r5, r5
 80227ba:	fb01 3307 	mla	r3, r1, r7, r3
 80227be:	7807      	ldrb	r7, [r0, #0]
 80227c0:	f105 0b01 	add.w	fp, r5, #1
 80227c4:	fb08 3707 	mla	r7, r8, r7, r3
 80227c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80227ca:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80227ce:	fb1c fc03 	smulbb	ip, ip, r3
 80227d2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80227d6:	1c73      	adds	r3, r6, #1
 80227d8:	096d      	lsrs	r5, r5, #5
 80227da:	fb07 c70a 	mla	r7, r7, sl, ip
 80227de:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80227e2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80227e6:	b2bf      	uxth	r7, r7
 80227e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80227ea:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80227ee:	1c7a      	adds	r2, r7, #1
 80227f0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80227f4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80227f8:	4316      	orrs	r6, r2
 80227fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80227fc:	432e      	orrs	r6, r5
 80227fe:	f823 6b02 	strh.w	r6, [r3], #2
 8022802:	930c      	str	r3, [sp, #48]	; 0x30
 8022804:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022806:	4413      	add	r3, r2
 8022808:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802280a:	931f      	str	r3, [sp, #124]	; 0x7c
 802280c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802280e:	4413      	add	r3, r2
 8022810:	9320      	str	r3, [sp, #128]	; 0x80
 8022812:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022814:	3b01      	subs	r3, #1
 8022816:	9311      	str	r3, [sp, #68]	; 0x44
 8022818:	e6db      	b.n	80225d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802281a:	b149      	cbz	r1, 8022830 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 802281c:	5cb2      	ldrb	r2, [r6, r2]
 802281e:	4628      	mov	r0, r5
 8022820:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022824:	4422      	add	r2, r4
 8022826:	462f      	mov	r7, r5
 8022828:	e771      	b.n	802270e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802282a:	4628      	mov	r0, r5
 802282c:	462a      	mov	r2, r5
 802282e:	e76e      	b.n	802270e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022830:	4628      	mov	r0, r5
 8022832:	462a      	mov	r2, r5
 8022834:	e7f7      	b.n	8022826 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8022836:	b015      	add	sp, #84	; 0x54
 8022838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802283c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 802283c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022840:	880f      	ldrh	r7, [r1, #0]
 8022842:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022846:	023c      	lsls	r4, r7, #8
 8022848:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802284c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8022850:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8022854:	017c      	lsls	r4, r7, #5
 8022856:	00ff      	lsls	r7, r7, #3
 8022858:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802285c:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8022860:	b2ff      	uxtb	r7, r7
 8022862:	ea4b 0404 	orr.w	r4, fp, r4
 8022866:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 802286a:	4327      	orrs	r7, r4
 802286c:	fb05 ca0e 	mla	sl, r5, lr, ip
 8022870:	2d00      	cmp	r5, #0
 8022872:	9701      	str	r7, [sp, #4]
 8022874:	eb02 080a 	add.w	r8, r2, sl
 8022878:	db7e      	blt.n	8022978 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 802287a:	45a9      	cmp	r9, r5
 802287c:	dd7c      	ble.n	8022978 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 802287e:	f1bc 0f00 	cmp.w	ip, #0
 8022882:	db77      	blt.n	8022974 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022884:	45e6      	cmp	lr, ip
 8022886:	dd75      	ble.n	8022974 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8022888:	f812 700a 	ldrb.w	r7, [r2, sl]
 802288c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022890:	441f      	add	r7, r3
 8022892:	f11c 0201 	adds.w	r2, ip, #1
 8022896:	d472      	bmi.n	802297e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8022898:	4596      	cmp	lr, r2
 802289a:	dd70      	ble.n	802297e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 802289c:	2800      	cmp	r0, #0
 802289e:	d06e      	beq.n	802297e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80228a0:	f898 4001 	ldrb.w	r4, [r8, #1]
 80228a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80228a8:	441c      	add	r4, r3
 80228aa:	3501      	adds	r5, #1
 80228ac:	d46b      	bmi.n	8022986 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80228ae:	45a9      	cmp	r9, r5
 80228b0:	dd69      	ble.n	8022986 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80228b2:	2e00      	cmp	r6, #0
 80228b4:	d067      	beq.n	8022986 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80228b6:	f1bc 0f00 	cmp.w	ip, #0
 80228ba:	db62      	blt.n	8022982 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80228bc:	45e6      	cmp	lr, ip
 80228be:	dd60      	ble.n	8022982 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80228c0:	f818 500e 	ldrb.w	r5, [r8, lr]
 80228c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80228c8:	441d      	add	r5, r3
 80228ca:	f11c 0201 	adds.w	r2, ip, #1
 80228ce:	d45d      	bmi.n	802298c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80228d0:	4596      	cmp	lr, r2
 80228d2:	dd5b      	ble.n	802298c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80228d4:	2800      	cmp	r0, #0
 80228d6:	d059      	beq.n	802298c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80228d8:	44c6      	add	lr, r8
 80228da:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80228de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80228e2:	4413      	add	r3, r2
 80228e4:	b280      	uxth	r0, r0
 80228e6:	f897 e002 	ldrb.w	lr, [r7, #2]
 80228ea:	b2b2      	uxth	r2, r6
 80228ec:	f897 9000 	ldrb.w	r9, [r7]
 80228f0:	787f      	ldrb	r7, [r7, #1]
 80228f2:	fb00 f602 	mul.w	r6, r0, r2
 80228f6:	0100      	lsls	r0, r0, #4
 80228f8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80228fc:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8022900:	1b80      	subs	r0, r0, r6
 8022902:	fa1f fc82 	uxth.w	ip, r2
 8022906:	b282      	uxth	r2, r0
 8022908:	78a0      	ldrb	r0, [r4, #2]
 802290a:	eba8 080c 	sub.w	r8, r8, ip
 802290e:	4350      	muls	r0, r2
 8022910:	fa1f f888 	uxth.w	r8, r8
 8022914:	fb08 0e0e 	mla	lr, r8, lr, r0
 8022918:	78a8      	ldrb	r0, [r5, #2]
 802291a:	fb0c e000 	mla	r0, ip, r0, lr
 802291e:	f893 e002 	ldrb.w	lr, [r3, #2]
 8022922:	fb06 0e0e 	mla	lr, r6, lr, r0
 8022926:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 802292a:	f894 e000 	ldrb.w	lr, [r4]
 802292e:	fb02 fe0e 	mul.w	lr, r2, lr
 8022932:	fb08 e909 	mla	r9, r8, r9, lr
 8022936:	f895 e000 	ldrb.w	lr, [r5]
 802293a:	fb0c 990e 	mla	r9, ip, lr, r9
 802293e:	f893 e000 	ldrb.w	lr, [r3]
 8022942:	785b      	ldrb	r3, [r3, #1]
 8022944:	fb06 9e0e 	mla	lr, r6, lr, r9
 8022948:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802294c:	ea4e 0e00 	orr.w	lr, lr, r0
 8022950:	7860      	ldrb	r0, [r4, #1]
 8022952:	4350      	muls	r0, r2
 8022954:	786a      	ldrb	r2, [r5, #1]
 8022956:	fb08 0007 	mla	r0, r8, r7, r0
 802295a:	fb0c 0202 	mla	r2, ip, r2, r0
 802295e:	fb06 2303 	mla	r3, r6, r3, r2
 8022962:	095b      	lsrs	r3, r3, #5
 8022964:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022968:	ea4e 0303 	orr.w	r3, lr, r3
 802296c:	800b      	strh	r3, [r1, #0]
 802296e:	b003      	add	sp, #12
 8022970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022974:	af01      	add	r7, sp, #4
 8022976:	e78c      	b.n	8022892 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8022978:	ac01      	add	r4, sp, #4
 802297a:	4627      	mov	r7, r4
 802297c:	e795      	b.n	80228aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802297e:	ac01      	add	r4, sp, #4
 8022980:	e793      	b.n	80228aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8022982:	ad01      	add	r5, sp, #4
 8022984:	e7a1      	b.n	80228ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8022986:	ab01      	add	r3, sp, #4
 8022988:	461d      	mov	r5, r3
 802298a:	e7ab      	b.n	80228e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 802298c:	ab01      	add	r3, sp, #4
 802298e:	e7a9      	b.n	80228e4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08022990 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022994:	b08f      	sub	sp, #60	; 0x3c
 8022996:	920c      	str	r2, [sp, #48]	; 0x30
 8022998:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802299a:	900d      	str	r0, [sp, #52]	; 0x34
 802299c:	910a      	str	r1, [sp, #40]	; 0x28
 802299e:	6850      	ldr	r0, [r2, #4]
 80229a0:	9306      	str	r3, [sp, #24]
 80229a2:	6812      	ldr	r2, [r2, #0]
 80229a4:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 80229a8:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 80229ac:	fb00 1303 	mla	r3, r0, r3, r1
 80229b0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80229b4:	9307      	str	r3, [sp, #28]
 80229b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229b8:	681b      	ldr	r3, [r3, #0]
 80229ba:	9308      	str	r3, [sp, #32]
 80229bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229be:	685c      	ldr	r4, [r3, #4]
 80229c0:	3404      	adds	r4, #4
 80229c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229c4:	2b00      	cmp	r3, #0
 80229c6:	dc03      	bgt.n	80229d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80229c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	f340 81d5 	ble.w	8022d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80229d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80229d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80229d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80229da:	1e48      	subs	r0, r1, #1
 80229dc:	1e56      	subs	r6, r2, #1
 80229de:	9b06      	ldr	r3, [sp, #24]
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	f340 80b6 	ble.w	8022b52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80229e6:	ea5f 472b 	movs.w	r7, fp, asr #16
 80229ea:	ea4f 4325 	mov.w	r3, r5, asr #16
 80229ee:	d406      	bmi.n	80229fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80229f0:	4287      	cmp	r7, r0
 80229f2:	da04      	bge.n	80229fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80229f4:	2b00      	cmp	r3, #0
 80229f6:	db02      	blt.n	80229fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80229f8:	42b3      	cmp	r3, r6
 80229fa:	f2c0 80ab 	blt.w	8022b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80229fe:	3701      	adds	r7, #1
 8022a00:	f100 809c 	bmi.w	8022b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022a04:	42b9      	cmp	r1, r7
 8022a06:	f2c0 8099 	blt.w	8022b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022a0a:	3301      	adds	r3, #1
 8022a0c:	f100 8096 	bmi.w	8022b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022a10:	429a      	cmp	r2, r3
 8022a12:	f2c0 8093 	blt.w	8022b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022a16:	9b06      	ldr	r3, [sp, #24]
 8022a18:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a1a:	9b07      	ldr	r3, [sp, #28]
 8022a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8022a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	f340 80b4 	ble.w	8022b8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8022a26:	9820      	ldr	r0, [sp, #128]	; 0x80
 8022a28:	142e      	asrs	r6, r5, #16
 8022a2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022a2c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022a30:	68c7      	ldr	r7, [r0, #12]
 8022a32:	ea5f 402b 	movs.w	r0, fp, asr #16
 8022a36:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022a3a:	6892      	ldr	r2, [r2, #8]
 8022a3c:	f100 80fb 	bmi.w	8022c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022a40:	f102 3cff 	add.w	ip, r2, #4294967295
 8022a44:	4560      	cmp	r0, ip
 8022a46:	f280 80f6 	bge.w	8022c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022a4a:	2e00      	cmp	r6, #0
 8022a4c:	f2c0 80f3 	blt.w	8022c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022a50:	f107 3cff 	add.w	ip, r7, #4294967295
 8022a54:	4566      	cmp	r6, ip
 8022a56:	f280 80ee 	bge.w	8022c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8022a5a:	b212      	sxth	r2, r2
 8022a5c:	fb06 0002 	mla	r0, r6, r2, r0
 8022a60:	9e08      	ldr	r6, [sp, #32]
 8022a62:	1837      	adds	r7, r6, r0
 8022a64:	5c30      	ldrb	r0, [r6, r0]
 8022a66:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8022a6a:	eb04 0c08 	add.w	ip, r4, r8
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	f000 80d3 	beq.w	8022c1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8022a74:	787e      	ldrb	r6, [r7, #1]
 8022a76:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022a7a:	4426      	add	r6, r4
 8022a7c:	2900      	cmp	r1, #0
 8022a7e:	f000 80d4 	beq.w	8022c2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8022a82:	18b8      	adds	r0, r7, r2
 8022a84:	5cba      	ldrb	r2, [r7, r2]
 8022a86:	7840      	ldrb	r0, [r0, #1]
 8022a88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022a8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022a90:	4422      	add	r2, r4
 8022a92:	4420      	add	r0, r4
 8022a94:	b29b      	uxth	r3, r3
 8022a96:	78b7      	ldrb	r7, [r6, #2]
 8022a98:	b289      	uxth	r1, r1
 8022a9a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022a9e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022aa2:	fb03 f901 	mul.w	r9, r3, r1
 8022aa6:	011b      	lsls	r3, r3, #4
 8022aa8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022aac:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022ab0:	eba3 0309 	sub.w	r3, r3, r9
 8022ab4:	b289      	uxth	r1, r1
 8022ab6:	b29b      	uxth	r3, r3
 8022ab8:	ebae 0e01 	sub.w	lr, lr, r1
 8022abc:	435f      	muls	r7, r3
 8022abe:	fa1f fe8e 	uxth.w	lr, lr
 8022ac2:	fb0e 770a 	mla	r7, lr, sl, r7
 8022ac6:	f892 a002 	ldrb.w	sl, [r2, #2]
 8022aca:	fb01 770a 	mla	r7, r1, sl, r7
 8022ace:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022ad2:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022ad6:	f814 7008 	ldrb.w	r7, [r4, r8]
 8022ada:	f896 8000 	ldrb.w	r8, [r6]
 8022ade:	7876      	ldrb	r6, [r6, #1]
 8022ae0:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8022ae4:	fb03 f808 	mul.w	r8, r3, r8
 8022ae8:	4373      	muls	r3, r6
 8022aea:	fb0e 8807 	mla	r8, lr, r7, r8
 8022aee:	7817      	ldrb	r7, [r2, #0]
 8022af0:	fb0e 330c 	mla	r3, lr, ip, r3
 8022af4:	fb01 8807 	mla	r8, r1, r7, r8
 8022af8:	7807      	ldrb	r7, [r0, #0]
 8022afa:	fb09 8707 	mla	r7, r9, r7, r8
 8022afe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022b02:	ea47 070a 	orr.w	r7, r7, sl
 8022b06:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022b0a:	fb01 310a 	mla	r1, r1, sl, r3
 8022b0e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b14:	fb09 1a0a 	mla	sl, r9, sl, r1
 8022b18:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022b1c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022b20:	ea47 070a 	orr.w	r7, r7, sl
 8022b24:	801f      	strh	r7, [r3, #0]
 8022b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b28:	3302      	adds	r3, #2
 8022b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8022b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022b2e:	449b      	add	fp, r3
 8022b30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022b32:	441d      	add	r5, r3
 8022b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022b36:	3b01      	subs	r3, #1
 8022b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b3a:	e770      	b.n	8022a1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022b3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022b3e:	449b      	add	fp, r3
 8022b40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022b42:	441d      	add	r5, r3
 8022b44:	9b06      	ldr	r3, [sp, #24]
 8022b46:	3b01      	subs	r3, #1
 8022b48:	9306      	str	r3, [sp, #24]
 8022b4a:	9b07      	ldr	r3, [sp, #28]
 8022b4c:	3302      	adds	r3, #2
 8022b4e:	9307      	str	r3, [sp, #28]
 8022b50:	e745      	b.n	80229de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8022b52:	d023      	beq.n	8022b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022b54:	9b06      	ldr	r3, [sp, #24]
 8022b56:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022b58:	3b01      	subs	r3, #1
 8022b5a:	fb00 b003 	mla	r0, r0, r3, fp
 8022b5e:	1400      	asrs	r0, r0, #16
 8022b60:	f53f af59 	bmi.w	8022a16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022b64:	3901      	subs	r1, #1
 8022b66:	4288      	cmp	r0, r1
 8022b68:	f6bf af55 	bge.w	8022a16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022b6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022b6e:	fb01 5303 	mla	r3, r1, r3, r5
 8022b72:	141b      	asrs	r3, r3, #16
 8022b74:	f53f af4f 	bmi.w	8022a16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022b78:	3a01      	subs	r2, #1
 8022b7a:	4293      	cmp	r3, r2
 8022b7c:	f6bf af4b 	bge.w	8022a16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8022b80:	9b06      	ldr	r3, [sp, #24]
 8022b82:	9309      	str	r3, [sp, #36]	; 0x24
 8022b84:	9b07      	ldr	r3, [sp, #28]
 8022b86:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b8a:	2b00      	cmp	r3, #0
 8022b8c:	dc70      	bgt.n	8022c70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8022b8e:	9b06      	ldr	r3, [sp, #24]
 8022b90:	9a07      	ldr	r2, [sp, #28]
 8022b92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022b96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8022b9a:	9307      	str	r3, [sp, #28]
 8022b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b9e:	2b00      	cmp	r3, #0
 8022ba0:	f340 80eb 	ble.w	8022d7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8022ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022ba8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022baa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022bae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022bb2:	eef0 6a62 	vmov.f32	s13, s5
 8022bb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022bba:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022bbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022bc2:	ee16 ba90 	vmov	fp, s13
 8022bc6:	eef0 6a43 	vmov.f32	s13, s6
 8022bca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022bce:	ee16 5a90 	vmov	r5, s13
 8022bd2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022bd6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022bda:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022bde:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022be2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022be6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022bea:	ee12 2a90 	vmov	r2, s5
 8022bee:	eef0 2a47 	vmov.f32	s5, s14
 8022bf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bf6:	ee13 2a10 	vmov	r2, s6
 8022bfa:	931b      	str	r3, [sp, #108]	; 0x6c
 8022bfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022bfe:	eeb0 3a67 	vmov.f32	s6, s15
 8022c02:	fb92 f3f3 	sdiv	r3, r2, r3
 8022c06:	931c      	str	r3, [sp, #112]	; 0x70
 8022c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022c0c:	3b01      	subs	r3, #1
 8022c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8022c10:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022c12:	bf08      	it	eq
 8022c14:	4613      	moveq	r3, r2
 8022c16:	9306      	str	r3, [sp, #24]
 8022c18:	e6d3      	b.n	80229c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8022c1a:	b149      	cbz	r1, 8022c30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8022c1c:	5cba      	ldrb	r2, [r7, r2]
 8022c1e:	4660      	mov	r0, ip
 8022c20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c24:	4422      	add	r2, r4
 8022c26:	4666      	mov	r6, ip
 8022c28:	e734      	b.n	8022a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8022c2a:	4660      	mov	r0, ip
 8022c2c:	4662      	mov	r2, ip
 8022c2e:	e731      	b.n	8022a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8022c30:	4660      	mov	r0, ip
 8022c32:	4662      	mov	r2, ip
 8022c34:	e7f7      	b.n	8022c26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022c36:	f110 0c01 	adds.w	ip, r0, #1
 8022c3a:	f53f af74 	bmi.w	8022b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022c3e:	4562      	cmp	r2, ip
 8022c40:	f6ff af71 	blt.w	8022b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022c44:	f116 0c01 	adds.w	ip, r6, #1
 8022c48:	f53f af6d 	bmi.w	8022b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022c4c:	4567      	cmp	r7, ip
 8022c4e:	f6ff af6a 	blt.w	8022b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022c52:	b23f      	sxth	r7, r7
 8022c54:	b212      	sxth	r2, r2
 8022c56:	9701      	str	r7, [sp, #4]
 8022c58:	9200      	str	r2, [sp, #0]
 8022c5a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8022c5e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8022c62:	4623      	mov	r3, r4
 8022c64:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022c66:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022c6a:	f7ff fde7 	bl	802283c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8022c6e:	e75a      	b.n	8022b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8022c70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022c72:	ea4f 462b 	mov.w	r6, fp, asr #16
 8022c76:	1428      	asrs	r0, r5, #16
 8022c78:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8022c7c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022c80:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022c84:	fb02 6000 	mla	r0, r2, r0, r6
 8022c88:	9e08      	ldr	r6, [sp, #32]
 8022c8a:	f816 8000 	ldrb.w	r8, [r6, r0]
 8022c8e:	1837      	adds	r7, r6, r0
 8022c90:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022c94:	eb04 0c08 	add.w	ip, r4, r8
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d060      	beq.n	8022d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8022c9c:	787e      	ldrb	r6, [r7, #1]
 8022c9e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022ca2:	4426      	add	r6, r4
 8022ca4:	2900      	cmp	r1, #0
 8022ca6:	d062      	beq.n	8022d6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8022ca8:	18b8      	adds	r0, r7, r2
 8022caa:	5cba      	ldrb	r2, [r7, r2]
 8022cac:	7840      	ldrb	r0, [r0, #1]
 8022cae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022cb2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022cb6:	4422      	add	r2, r4
 8022cb8:	4420      	add	r0, r4
 8022cba:	b29b      	uxth	r3, r3
 8022cbc:	78b7      	ldrb	r7, [r6, #2]
 8022cbe:	b289      	uxth	r1, r1
 8022cc0:	f89c a002 	ldrb.w	sl, [ip, #2]
 8022cc4:	f89c c001 	ldrb.w	ip, [ip, #1]
 8022cc8:	fb03 f901 	mul.w	r9, r3, r1
 8022ccc:	011b      	lsls	r3, r3, #4
 8022cce:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8022cd2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8022cd6:	eba3 0309 	sub.w	r3, r3, r9
 8022cda:	b289      	uxth	r1, r1
 8022cdc:	b29b      	uxth	r3, r3
 8022cde:	ebae 0e01 	sub.w	lr, lr, r1
 8022ce2:	435f      	muls	r7, r3
 8022ce4:	fa1f fe8e 	uxth.w	lr, lr
 8022ce8:	fb0e 770a 	mla	r7, lr, sl, r7
 8022cec:	f892 a002 	ldrb.w	sl, [r2, #2]
 8022cf0:	fb01 770a 	mla	r7, r1, sl, r7
 8022cf4:	f890 a002 	ldrb.w	sl, [r0, #2]
 8022cf8:	fb09 7a0a 	mla	sl, r9, sl, r7
 8022cfc:	f814 7008 	ldrb.w	r7, [r4, r8]
 8022d00:	f896 8000 	ldrb.w	r8, [r6]
 8022d04:	7876      	ldrb	r6, [r6, #1]
 8022d06:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8022d0a:	fb03 f808 	mul.w	r8, r3, r8
 8022d0e:	4373      	muls	r3, r6
 8022d10:	7856      	ldrb	r6, [r2, #1]
 8022d12:	fb0e 8807 	mla	r8, lr, r7, r8
 8022d16:	7817      	ldrb	r7, [r2, #0]
 8022d18:	fb0e 330c 	mla	r3, lr, ip, r3
 8022d1c:	fb01 8807 	mla	r8, r1, r7, r8
 8022d20:	7807      	ldrb	r7, [r0, #0]
 8022d22:	fb01 3306 	mla	r3, r1, r6, r3
 8022d26:	fb09 8707 	mla	r7, r9, r7, r8
 8022d2a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022d2e:	ea47 070a 	orr.w	r7, r7, sl
 8022d32:	f890 a001 	ldrb.w	sl, [r0, #1]
 8022d36:	fb09 3a0a 	mla	sl, r9, sl, r3
 8022d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022d3c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022d40:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022d44:	ea47 070a 	orr.w	r7, r7, sl
 8022d48:	f823 7b02 	strh.w	r7, [r3], #2
 8022d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022d50:	449b      	add	fp, r3
 8022d52:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022d54:	441d      	add	r5, r3
 8022d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d58:	3b01      	subs	r3, #1
 8022d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8022d5c:	e714      	b.n	8022b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8022d5e:	b149      	cbz	r1, 8022d74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8022d60:	5cba      	ldrb	r2, [r7, r2]
 8022d62:	4660      	mov	r0, ip
 8022d64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022d68:	4422      	add	r2, r4
 8022d6a:	4666      	mov	r6, ip
 8022d6c:	e7a5      	b.n	8022cba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8022d6e:	4660      	mov	r0, ip
 8022d70:	4662      	mov	r2, ip
 8022d72:	e7a2      	b.n	8022cba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8022d74:	4660      	mov	r0, ip
 8022d76:	4662      	mov	r2, ip
 8022d78:	e7f7      	b.n	8022d6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 8022d7a:	b00f      	add	sp, #60	; 0x3c
 8022d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022d80 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8022d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d84:	b085      	sub	sp, #20
 8022d86:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8022d8a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8022d8e:	9102      	str	r1, [sp, #8]
 8022d90:	2c00      	cmp	r4, #0
 8022d92:	fb04 710c 	mla	r1, r4, ip, r7
 8022d96:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8022d9a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8022d9e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8022da2:	eb02 0e01 	add.w	lr, r2, r1
 8022da6:	f2c0 8122 	blt.w	8022fee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8022daa:	45a0      	cmp	r8, r4
 8022dac:	f340 811f 	ble.w	8022fee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8022db0:	2f00      	cmp	r7, #0
 8022db2:	f2c0 811a 	blt.w	8022fea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8022db6:	45bc      	cmp	ip, r7
 8022db8:	f340 8117 	ble.w	8022fea <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8022dbc:	5c52      	ldrb	r2, [r2, r1]
 8022dbe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8022dc2:	1c7a      	adds	r2, r7, #1
 8022dc4:	f100 8116 	bmi.w	8022ff4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8022dc8:	4594      	cmp	ip, r2
 8022dca:	f340 8113 	ble.w	8022ff4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8022dce:	2e00      	cmp	r6, #0
 8022dd0:	f000 8112 	beq.w	8022ff8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8022dd4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022dd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022ddc:	3401      	adds	r4, #1
 8022dde:	f100 810f 	bmi.w	8023000 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8022de2:	45a0      	cmp	r8, r4
 8022de4:	f340 810c 	ble.w	8023000 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8022de8:	2800      	cmp	r0, #0
 8022dea:	f000 810c 	beq.w	8023006 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8022dee:	2f00      	cmp	r7, #0
 8022df0:	f2c0 8104 	blt.w	8022ffc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8022df4:	45bc      	cmp	ip, r7
 8022df6:	f340 8101 	ble.w	8022ffc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8022dfa:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8022dfe:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8022e02:	3701      	adds	r7, #1
 8022e04:	f100 8102 	bmi.w	802300c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8022e08:	45bc      	cmp	ip, r7
 8022e0a:	f340 80ff 	ble.w	802300c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8022e0e:	2e00      	cmp	r6, #0
 8022e10:	f000 80fe 	beq.w	8023010 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8022e14:	44f4      	add	ip, lr
 8022e16:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8022e1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8022e1e:	b2b6      	uxth	r6, r6
 8022e20:	b280      	uxth	r0, r0
 8022e22:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8022e26:	fb00 fe06 	mul.w	lr, r0, r6
 8022e2a:	0136      	lsls	r6, r6, #4
 8022e2c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8022e30:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8022e34:	eba6 070e 	sub.w	r7, r6, lr
 8022e38:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8022e3c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8022e40:	b280      	uxth	r0, r0
 8022e42:	b2bf      	uxth	r7, r7
 8022e44:	1a1b      	subs	r3, r3, r0
 8022e46:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8022e4a:	fb0a f607 	mul.w	r6, sl, r7
 8022e4e:	b29b      	uxth	r3, r3
 8022e50:	fb0b 6603 	mla	r6, fp, r3, r6
 8022e54:	fb00 6609 	mla	r6, r0, r9, r6
 8022e58:	fb0e 6608 	mla	r6, lr, r8, r6
 8022e5c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8022e60:	9600      	str	r6, [sp, #0]
 8022e62:	2e00      	cmp	r6, #0
 8022e64:	f000 80be 	beq.w	8022fe4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8022e68:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022e6c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8022e70:	9e02      	ldr	r6, [sp, #8]
 8022e72:	fb0b fc0c 	mul.w	ip, fp, ip
 8022e76:	fb0b f505 	mul.w	r5, fp, r5
 8022e7a:	8836      	ldrh	r6, [r6, #0]
 8022e7c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8022e80:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022e84:	9501      	str	r5, [sp, #4]
 8022e86:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8022e8a:	44dc      	add	ip, fp
 8022e8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e90:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8022e94:	9503      	str	r5, [sp, #12]
 8022e96:	9d01      	ldr	r5, [sp, #4]
 8022e98:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8022e9c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022ea0:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8022ea4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022ea8:	fb0a fc0c 	mul.w	ip, sl, ip
 8022eac:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8022eb0:	fb0a fa01 	mul.w	sl, sl, r1
 8022eb4:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8022eb8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022ebc:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8022ec0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022ec4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8022ec8:	4465      	add	r5, ip
 8022eca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022ece:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022ed2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022ed6:	fb09 fc0c 	mul.w	ip, r9, ip
 8022eda:	0a2d      	lsrs	r5, r5, #8
 8022edc:	fb09 f904 	mul.w	r9, r9, r4
 8022ee0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022ee4:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8022ee8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8022eec:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8022ef0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022ef4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8022ef8:	437d      	muls	r5, r7
 8022efa:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8022efe:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8022f02:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022f06:	4461      	add	r1, ip
 8022f08:	fb08 f404 	mul.w	r4, r8, r4
 8022f0c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022f10:	fb08 f802 	mul.w	r8, r8, r2
 8022f14:	0a09      	lsrs	r1, r1, #8
 8022f16:	0a22      	lsrs	r2, r4, #8
 8022f18:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8022f1c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8022f20:	fb07 f70a 	mul.w	r7, r7, sl
 8022f24:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022f28:	4414      	add	r4, r2
 8022f2a:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8022f2e:	0a24      	lsrs	r4, r4, #8
 8022f30:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8022f34:	9a03      	ldr	r2, [sp, #12]
 8022f36:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8022f3a:	fb02 5503 	mla	r5, r2, r3, r5
 8022f3e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8022f42:	9a00      	ldr	r2, [sp, #0]
 8022f44:	fb04 540e 	mla	r4, r4, lr, r5
 8022f48:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8022f4c:	1235      	asrs	r5, r6, #8
 8022f4e:	fb01 4100 	mla	r1, r1, r0, r4
 8022f52:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022f56:	0a09      	lsrs	r1, r1, #8
 8022f58:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8022f5c:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8022f60:	fb03 7101 	mla	r1, r3, r1, r7
 8022f64:	fb0e 1e08 	mla	lr, lr, r8, r1
 8022f68:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8022f6c:	fb00 e101 	mla	r1, r0, r1, lr
 8022f70:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8022f74:	b287      	uxth	r7, r0
 8022f76:	0a09      	lsrs	r1, r1, #8
 8022f78:	437a      	muls	r2, r7
 8022f7a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8022f7e:	1c53      	adds	r3, r2, #1
 8022f80:	4321      	orrs	r1, r4
 8022f82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022f86:	0c0a      	lsrs	r2, r1, #16
 8022f88:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8022f8c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8022f90:	b2c8      	uxtb	r0, r1
 8022f92:	fb12 f207 	smulbb	r2, r2, r7
 8022f96:	fb14 f407 	smulbb	r4, r4, r7
 8022f9a:	b2db      	uxtb	r3, r3
 8022f9c:	fb10 f007 	smulbb	r0, r0, r7
 8022fa0:	fb05 2503 	mla	r5, r5, r3, r2
 8022fa4:	10f2      	asrs	r2, r6, #3
 8022fa6:	00f6      	lsls	r6, r6, #3
 8022fa8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022fac:	b2ad      	uxth	r5, r5
 8022fae:	b2f6      	uxtb	r6, r6
 8022fb0:	fb02 4203 	mla	r2, r2, r3, r4
 8022fb4:	fb06 0303 	mla	r3, r6, r3, r0
 8022fb8:	b294      	uxth	r4, r2
 8022fba:	b299      	uxth	r1, r3
 8022fbc:	1c6b      	adds	r3, r5, #1
 8022fbe:	1c62      	adds	r2, r4, #1
 8022fc0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022fc4:	1c4b      	adds	r3, r1, #1
 8022fc6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8022fca:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8022fce:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022fd2:	0952      	lsrs	r2, r2, #5
 8022fd4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022fd8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022fdc:	432b      	orrs	r3, r5
 8022fde:	4313      	orrs	r3, r2
 8022fe0:	9a02      	ldr	r2, [sp, #8]
 8022fe2:	8013      	strh	r3, [r2, #0]
 8022fe4:	b005      	add	sp, #20
 8022fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fea:	2500      	movs	r5, #0
 8022fec:	e6e9      	b.n	8022dc2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8022fee:	2100      	movs	r1, #0
 8022ff0:	460d      	mov	r5, r1
 8022ff2:	e6f3      	b.n	8022ddc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8022ff4:	2100      	movs	r1, #0
 8022ff6:	e6f1      	b.n	8022ddc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8022ff8:	4631      	mov	r1, r6
 8022ffa:	e6ef      	b.n	8022ddc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8022ffc:	2400      	movs	r4, #0
 8022ffe:	e700      	b.n	8022e02 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8023000:	2200      	movs	r2, #0
 8023002:	4614      	mov	r4, r2
 8023004:	e70b      	b.n	8022e1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023006:	4602      	mov	r2, r0
 8023008:	4604      	mov	r4, r0
 802300a:	e708      	b.n	8022e1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802300c:	2200      	movs	r2, #0
 802300e:	e706      	b.n	8022e1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8023010:	4632      	mov	r2, r6
 8023012:	e704      	b.n	8022e1e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08023014 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023018:	b09f      	sub	sp, #124	; 0x7c
 802301a:	921b      	str	r2, [sp, #108]	; 0x6c
 802301c:	9309      	str	r3, [sp, #36]	; 0x24
 802301e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8023020:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8023024:	901d      	str	r0, [sp, #116]	; 0x74
 8023026:	931c      	str	r3, [sp, #112]	; 0x70
 8023028:	6850      	ldr	r0, [r2, #4]
 802302a:	9119      	str	r1, [sp, #100]	; 0x64
 802302c:	6812      	ldr	r2, [r2, #0]
 802302e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8023030:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8023034:	fb00 1303 	mla	r3, r0, r3, r1
 8023038:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802303c:	930c      	str	r3, [sp, #48]	; 0x30
 802303e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023040:	681b      	ldr	r3, [r3, #0]
 8023042:	9312      	str	r3, [sp, #72]	; 0x48
 8023044:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023046:	685e      	ldr	r6, [r3, #4]
 8023048:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 802304c:	3604      	adds	r6, #4
 802304e:	930d      	str	r3, [sp, #52]	; 0x34
 8023050:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023052:	2b00      	cmp	r3, #0
 8023054:	dc03      	bgt.n	802305e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023058:	2b00      	cmp	r3, #0
 802305a:	f340 8387 	ble.w	802376c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 802305e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8023060:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023064:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023068:	1e48      	subs	r0, r1, #1
 802306a:	1e57      	subs	r7, r2, #1
 802306c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802306e:	2b00      	cmp	r3, #0
 8023070:	f340 8194 	ble.w	802339c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8023074:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023076:	142b      	asrs	r3, r5, #16
 8023078:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802307c:	d406      	bmi.n	802308c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802307e:	4584      	cmp	ip, r0
 8023080:	da04      	bge.n	802308c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023082:	2b00      	cmp	r3, #0
 8023084:	db02      	blt.n	802308c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8023086:	42bb      	cmp	r3, r7
 8023088:	f2c0 8189 	blt.w	802339e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802308c:	f11c 0c01 	adds.w	ip, ip, #1
 8023090:	f100 8177 	bmi.w	8023382 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8023094:	4561      	cmp	r1, ip
 8023096:	f2c0 8174 	blt.w	8023382 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802309a:	3301      	adds	r3, #1
 802309c:	f100 8171 	bmi.w	8023382 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80230a0:	429a      	cmp	r2, r3
 80230a2:	f2c0 816e 	blt.w	8023382 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80230a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80230a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80230aa:	931a      	str	r3, [sp, #104]	; 0x68
 80230ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80230ae:	2b00      	cmp	r3, #0
 80230b0:	f340 8193 	ble.w	80233da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80230b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80230b6:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80230ba:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80230be:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80230c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80230c4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80230c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80230ca:	141b      	asrs	r3, r3, #16
 80230cc:	f100 81d6 	bmi.w	802347c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80230d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80230d4:	4543      	cmp	r3, r8
 80230d6:	f280 81d1 	bge.w	802347c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80230da:	f1bc 0f00 	cmp.w	ip, #0
 80230de:	f2c0 81cd 	blt.w	802347c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80230e2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80230e6:	45c4      	cmp	ip, r8
 80230e8:	f280 81c8 	bge.w	802347c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 80230ec:	b200      	sxth	r0, r0
 80230ee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80230f0:	fb0c 3300 	mla	r3, ip, r0, r3
 80230f4:	eb04 0803 	add.w	r8, r4, r3
 80230f8:	5ce3      	ldrb	r3, [r4, r3]
 80230fa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80230fe:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023102:	2a00      	cmp	r2, #0
 8023104:	f000 81af 	beq.w	8023466 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023108:	f898 c001 	ldrb.w	ip, [r8, #1]
 802310c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023110:	940e      	str	r4, [sp, #56]	; 0x38
 8023112:	0e24      	lsrs	r4, r4, #24
 8023114:	9415      	str	r4, [sp, #84]	; 0x54
 8023116:	b179      	cbz	r1, 8023138 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8023118:	eb08 0c00 	add.w	ip, r8, r0
 802311c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023120:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023124:	900a      	str	r0, [sp, #40]	; 0x28
 8023126:	0e00      	lsrs	r0, r0, #24
 8023128:	9013      	str	r0, [sp, #76]	; 0x4c
 802312a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802312e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023132:	900f      	str	r0, [sp, #60]	; 0x3c
 8023134:	0e00      	lsrs	r0, r0, #24
 8023136:	9016      	str	r0, [sp, #88]	; 0x58
 8023138:	b292      	uxth	r2, r2
 802313a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802313c:	b289      	uxth	r1, r1
 802313e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023140:	fb02 f901 	mul.w	r9, r2, r1
 8023144:	0112      	lsls	r2, r2, #4
 8023146:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802314a:	eba2 0809 	sub.w	r8, r2, r9
 802314e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023152:	b289      	uxth	r1, r1
 8023154:	fa1f f888 	uxth.w	r8, r8
 8023158:	1a52      	subs	r2, r2, r1
 802315a:	fb08 f000 	mul.w	r0, r8, r0
 802315e:	b292      	uxth	r2, r2
 8023160:	fb02 000e 	mla	r0, r2, lr, r0
 8023164:	fb01 0004 	mla	r0, r1, r4, r0
 8023168:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802316a:	fb09 0004 	mla	r0, r9, r4, r0
 802316e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023172:	2800      	cmp	r0, #0
 8023174:	f000 80fa 	beq.w	802336c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023178:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802317c:	d01b      	beq.n	80231b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802317e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023182:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023186:	fb0e fa0a 	mul.w	sl, lr, sl
 802318a:	fb0e fe03 	mul.w	lr, lr, r3
 802318e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023192:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023196:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802319a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802319e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80231a2:	4453      	add	r3, sl
 80231a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80231a8:	0a1b      	lsrs	r3, r3, #8
 80231aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80231ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80231b2:	ea43 030c 	orr.w	r3, r3, ip
 80231b6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80231b8:	2cff      	cmp	r4, #255	; 0xff
 80231ba:	d021      	beq.n	8023200 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80231bc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80231be:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80231c2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80231c4:	fb04 fb0b 	mul.w	fp, r4, fp
 80231c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80231ca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80231ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80231d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80231d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80231d8:	fb04 fa0a 	mul.w	sl, r4, sl
 80231dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80231e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80231e4:	44de      	add	lr, fp
 80231e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80231ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80231ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80231f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80231fa:	ea4e 040a 	orr.w	r4, lr, sl
 80231fe:	940e      	str	r4, [sp, #56]	; 0x38
 8023200:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023202:	2cff      	cmp	r4, #255	; 0xff
 8023204:	d021      	beq.n	802324a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8023206:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023208:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802320c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802320e:	fb04 fb0b 	mul.w	fp, r4, fp
 8023212:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023214:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023218:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802321a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802321e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023222:	fb04 fa0a 	mul.w	sl, r4, sl
 8023226:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802322a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802322e:	44de      	add	lr, fp
 8023230:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023234:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023238:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802323c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023240:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023244:	ea4e 040a 	orr.w	r4, lr, sl
 8023248:	940a      	str	r4, [sp, #40]	; 0x28
 802324a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802324c:	2cff      	cmp	r4, #255	; 0xff
 802324e:	d021      	beq.n	8023294 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8023250:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023252:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023256:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023258:	fb04 fb0b 	mul.w	fp, r4, fp
 802325c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802325e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023262:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023264:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023268:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802326c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023270:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023274:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023278:	44de      	add	lr, fp
 802327a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802327e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023282:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023286:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802328a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802328e:	ea4e 040a 	orr.w	r4, lr, sl
 8023292:	940f      	str	r4, [sp, #60]	; 0x3c
 8023294:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023296:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802329a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802329e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80232a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80232a4:	fb08 fc0c 	mul.w	ip, r8, ip
 80232a8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80232ac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80232b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80232b2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80232b6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80232ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80232bc:	fb09 cc0e 	mla	ip, r9, lr, ip
 80232c0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80232c4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80232c6:	fb08 f80e 	mul.w	r8, r8, lr
 80232ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80232ce:	fb02 8303 	mla	r3, r2, r3, r8
 80232d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80232d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80232d8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80232dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80232de:	fb01 330a 	mla	r3, r1, sl, r3
 80232e2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80232e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80232e8:	fb09 3901 	mla	r9, r9, r1, r3
 80232ec:	883b      	ldrh	r3, [r7, #0]
 80232ee:	4342      	muls	r2, r0
 80232f0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80232f4:	1c50      	adds	r0, r2, #1
 80232f6:	1219      	asrs	r1, r3, #8
 80232f8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80232fc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023300:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023304:	ea4c 0c09 	orr.w	ip, ip, r9
 8023308:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802330c:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8023310:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8023314:	b2c0      	uxtb	r0, r0
 8023316:	fb12 f204 	smulbb	r2, r2, r4
 802331a:	fa5f fc8c 	uxtb.w	ip, ip
 802331e:	fb1e fe04 	smulbb	lr, lr, r4
 8023322:	fb01 2100 	mla	r1, r1, r0, r2
 8023326:	10da      	asrs	r2, r3, #3
 8023328:	fb1c fc04 	smulbb	ip, ip, r4
 802332c:	00db      	lsls	r3, r3, #3
 802332e:	b289      	uxth	r1, r1
 8023330:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023334:	b2db      	uxtb	r3, r3
 8023336:	fb02 e200 	mla	r2, r2, r0, lr
 802333a:	fb03 c300 	mla	r3, r3, r0, ip
 802333e:	b292      	uxth	r2, r2
 8023340:	fa1f fc83 	uxth.w	ip, r3
 8023344:	1c4b      	adds	r3, r1, #1
 8023346:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802334a:	f10c 0301 	add.w	r3, ip, #1
 802334e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8023352:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023356:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802335a:	430b      	orrs	r3, r1
 802335c:	1c51      	adds	r1, r2, #1
 802335e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8023362:	0952      	lsrs	r2, r2, #5
 8023364:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023368:	4313      	orrs	r3, r2
 802336a:	803b      	strh	r3, [r7, #0]
 802336c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802336e:	3702      	adds	r7, #2
 8023370:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023372:	441a      	add	r2, r3
 8023374:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023376:	441d      	add	r5, r3
 8023378:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802337a:	9229      	str	r2, [sp, #164]	; 0xa4
 802337c:	3b01      	subs	r3, #1
 802337e:	931a      	str	r3, [sp, #104]	; 0x68
 8023380:	e694      	b.n	80230ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8023382:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023384:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8023386:	441c      	add	r4, r3
 8023388:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802338a:	441d      	add	r5, r3
 802338c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802338e:	9429      	str	r4, [sp, #164]	; 0xa4
 8023390:	3b01      	subs	r3, #1
 8023392:	9309      	str	r3, [sp, #36]	; 0x24
 8023394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023396:	3302      	adds	r3, #2
 8023398:	930c      	str	r3, [sp, #48]	; 0x30
 802339a:	e667      	b.n	802306c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802339c:	d024      	beq.n	80233e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 802339e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233a0:	982b      	ldr	r0, [sp, #172]	; 0xac
 80233a2:	3b01      	subs	r3, #1
 80233a4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80233a6:	fb00 4003 	mla	r0, r0, r3, r4
 80233aa:	1400      	asrs	r0, r0, #16
 80233ac:	f53f ae7b 	bmi.w	80230a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80233b0:	3901      	subs	r1, #1
 80233b2:	4288      	cmp	r0, r1
 80233b4:	f6bf ae77 	bge.w	80230a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80233b8:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80233ba:	fb01 5303 	mla	r3, r1, r3, r5
 80233be:	141b      	asrs	r3, r3, #16
 80233c0:	f53f ae71 	bmi.w	80230a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80233c4:	3a01      	subs	r2, #1
 80233c6:	4293      	cmp	r3, r2
 80233c8:	f6bf ae6d 	bge.w	80230a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80233cc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80233d0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80233d4:	f1bb 0f00 	cmp.w	fp, #0
 80233d8:	dc70      	bgt.n	80234bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 80233da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233dc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80233e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233e2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80233e6:	930c      	str	r3, [sp, #48]	; 0x30
 80233e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80233ea:	2b00      	cmp	r3, #0
 80233ec:	f340 81be 	ble.w	802376c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80233f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80233f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80233fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80233fe:	eef0 6a62 	vmov.f32	s13, s5
 8023402:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023406:	ee31 1a05 	vadd.f32	s2, s2, s10
 802340a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802340e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8023412:	eef0 6a43 	vmov.f32	s13, s6
 8023416:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802341a:	ee16 5a90 	vmov	r5, s13
 802341e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023422:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023426:	ee77 2a62 	vsub.f32	s5, s14, s5
 802342a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802342e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023432:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023436:	ee12 2a90 	vmov	r2, s5
 802343a:	eef0 2a47 	vmov.f32	s5, s14
 802343e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023442:	ee13 2a10 	vmov	r2, s6
 8023446:	932b      	str	r3, [sp, #172]	; 0xac
 8023448:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802344a:	eeb0 3a67 	vmov.f32	s6, s15
 802344e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023452:	932c      	str	r3, [sp, #176]	; 0xb0
 8023454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023456:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023458:	3b01      	subs	r3, #1
 802345a:	9319      	str	r3, [sp, #100]	; 0x64
 802345c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802345e:	bf08      	it	eq
 8023460:	4613      	moveq	r3, r2
 8023462:	9309      	str	r3, [sp, #36]	; 0x24
 8023464:	e5f4      	b.n	8023050 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023466:	2900      	cmp	r1, #0
 8023468:	f43f ae66 	beq.w	8023138 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802346c:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023470:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8023474:	900a      	str	r0, [sp, #40]	; 0x28
 8023476:	0e00      	lsrs	r0, r0, #24
 8023478:	9013      	str	r0, [sp, #76]	; 0x4c
 802347a:	e65d      	b.n	8023138 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802347c:	f113 0801 	adds.w	r8, r3, #1
 8023480:	f53f af74 	bmi.w	802336c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023484:	4540      	cmp	r0, r8
 8023486:	f6ff af71 	blt.w	802336c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802348a:	f11c 0801 	adds.w	r8, ip, #1
 802348e:	f53f af6d 	bmi.w	802336c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023492:	45c6      	cmp	lr, r8
 8023494:	f6ff af6a 	blt.w	802336c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023498:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802349a:	b200      	sxth	r0, r0
 802349c:	9302      	str	r3, [sp, #8]
 802349e:	fa0f f38e 	sxth.w	r3, lr
 80234a2:	9000      	str	r0, [sp, #0]
 80234a4:	9301      	str	r3, [sp, #4]
 80234a6:	4633      	mov	r3, r6
 80234a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80234aa:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80234ae:	e9cd c203 	strd	ip, r2, [sp, #12]
 80234b2:	4639      	mov	r1, r7
 80234b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80234b6:	f7ff fc63 	bl	8022d80 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80234ba:	e757      	b.n	802336c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80234bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80234be:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80234c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80234c4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80234c8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80234ca:	1427      	asrs	r7, r4, #16
 80234cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80234ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80234d2:	142b      	asrs	r3, r5, #16
 80234d4:	fb01 7303 	mla	r3, r1, r3, r7
 80234d8:	18e7      	adds	r7, r4, r3
 80234da:	5ce3      	ldrb	r3, [r4, r3]
 80234dc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80234e0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80234e4:	2a00      	cmp	r2, #0
 80234e6:	f000 8137 	beq.w	8023758 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 80234ea:	f897 e001 	ldrb.w	lr, [r7, #1]
 80234ee:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80234f2:	9410      	str	r4, [sp, #64]	; 0x40
 80234f4:	0e24      	lsrs	r4, r4, #24
 80234f6:	9417      	str	r4, [sp, #92]	; 0x5c
 80234f8:	b170      	cbz	r0, 8023518 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 80234fa:	eb07 0e01 	add.w	lr, r7, r1
 80234fe:	5c79      	ldrb	r1, [r7, r1]
 8023500:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023504:	910b      	str	r1, [sp, #44]	; 0x2c
 8023506:	0e09      	lsrs	r1, r1, #24
 8023508:	9114      	str	r1, [sp, #80]	; 0x50
 802350a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802350e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023512:	9111      	str	r1, [sp, #68]	; 0x44
 8023514:	0e09      	lsrs	r1, r1, #24
 8023516:	9118      	str	r1, [sp, #96]	; 0x60
 8023518:	b292      	uxth	r2, r2
 802351a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802351c:	b280      	uxth	r0, r0
 802351e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023520:	fb02 f800 	mul.w	r8, r2, r0
 8023524:	0112      	lsls	r2, r2, #4
 8023526:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802352a:	eba2 0e08 	sub.w	lr, r2, r8
 802352e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023532:	b280      	uxth	r0, r0
 8023534:	fa1f fe8e 	uxth.w	lr, lr
 8023538:	1a12      	subs	r2, r2, r0
 802353a:	fb0e f101 	mul.w	r1, lr, r1
 802353e:	b292      	uxth	r2, r2
 8023540:	fb02 110c 	mla	r1, r2, ip, r1
 8023544:	fb00 1104 	mla	r1, r0, r4, r1
 8023548:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802354a:	fb08 1104 	mla	r1, r8, r4, r1
 802354e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023552:	2900      	cmp	r1, #0
 8023554:	f000 80f5 	beq.w	8023742 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8023558:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802355c:	d019      	beq.n	8023592 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 802355e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023562:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023566:	fb0c fa0a 	mul.w	sl, ip, sl
 802356a:	fb0c fc03 	mul.w	ip, ip, r3
 802356e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023572:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023576:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802357a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802357e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023582:	4453      	add	r3, sl
 8023584:	0a3f      	lsrs	r7, r7, #8
 8023586:	0a1b      	lsrs	r3, r3, #8
 8023588:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802358c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023590:	433b      	orrs	r3, r7
 8023592:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023594:	2cff      	cmp	r4, #255	; 0xff
 8023596:	d020      	beq.n	80235da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8023598:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802359a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802359e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80235a0:	4367      	muls	r7, r4
 80235a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80235a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80235a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80235ac:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80235ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80235b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80235b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80235ba:	44bc      	add	ip, r7
 80235bc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80235c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80235c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80235c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80235cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80235d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80235d4:	ea4c 040a 	orr.w	r4, ip, sl
 80235d8:	9410      	str	r4, [sp, #64]	; 0x40
 80235da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80235dc:	2cff      	cmp	r4, #255	; 0xff
 80235de:	d020      	beq.n	8023622 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 80235e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80235e2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80235e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80235e8:	4367      	muls	r7, r4
 80235ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80235ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80235f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80235f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80235f6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80235fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80235fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8023602:	44bc      	add	ip, r7
 8023604:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023608:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802360c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023610:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023614:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023618:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802361c:	ea4c 040a 	orr.w	r4, ip, sl
 8023620:	940b      	str	r4, [sp, #44]	; 0x2c
 8023622:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023624:	2cff      	cmp	r4, #255	; 0xff
 8023626:	d020      	beq.n	802366a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8023628:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802362a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802362e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8023630:	4367      	muls	r7, r4
 8023632:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023634:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023638:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802363c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802363e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023642:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023646:	fb04 fa0a 	mul.w	sl, r4, sl
 802364a:	44bc      	add	ip, r7
 802364c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023650:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023654:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023658:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802365c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023660:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023664:	ea4c 040a 	orr.w	r4, ip, sl
 8023668:	9411      	str	r4, [sp, #68]	; 0x44
 802366a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802366c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8023670:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023674:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023678:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802367a:	fb0e f707 	mul.w	r7, lr, r7
 802367e:	fb02 770c 	mla	r7, r2, ip, r7
 8023682:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023686:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023688:	fb00 770c 	mla	r7, r0, ip, r7
 802368c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023690:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023692:	fb08 770c 	mla	r7, r8, ip, r7
 8023696:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802369a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802369c:	fb0e fe0c 	mul.w	lr, lr, ip
 80236a0:	0a3f      	lsrs	r7, r7, #8
 80236a2:	fb02 e303 	mla	r3, r2, r3, lr
 80236a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80236a8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80236ac:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80236b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80236b2:	fb00 330a 	mla	r3, r0, sl, r3
 80236b6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80236ba:	f8b9 0000 	ldrh.w	r0, [r9]
 80236be:	fb08 3c0c 	mla	ip, r8, ip, r3
 80236c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80236c4:	1202      	asrs	r2, r0, #8
 80236c6:	434b      	muls	r3, r1
 80236c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80236cc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80236d0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80236d4:	1c59      	adds	r1, r3, #1
 80236d6:	ea47 070c 	orr.w	r7, r7, ip
 80236da:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80236de:	0c3b      	lsrs	r3, r7, #16
 80236e0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80236e4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80236e8:	b2ff      	uxtb	r7, r7
 80236ea:	fb13 f304 	smulbb	r3, r3, r4
 80236ee:	b2c9      	uxtb	r1, r1
 80236f0:	fb1c fc04 	smulbb	ip, ip, r4
 80236f4:	fb02 3201 	mla	r2, r2, r1, r3
 80236f8:	10c3      	asrs	r3, r0, #3
 80236fa:	fb17 f704 	smulbb	r7, r7, r4
 80236fe:	00c0      	lsls	r0, r0, #3
 8023700:	b292      	uxth	r2, r2
 8023702:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8023706:	b2c0      	uxtb	r0, r0
 8023708:	fb03 c301 	mla	r3, r3, r1, ip
 802370c:	f102 0c01 	add.w	ip, r2, #1
 8023710:	fb00 7001 	mla	r0, r0, r1, r7
 8023714:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023718:	b280      	uxth	r0, r0
 802371a:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 802371e:	b29b      	uxth	r3, r3
 8023720:	1c42      	adds	r2, r0, #1
 8023722:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8023726:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802372a:	ea42 020c 	orr.w	r2, r2, ip
 802372e:	f103 0c01 	add.w	ip, r3, #1
 8023732:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8023736:	095b      	lsrs	r3, r3, #5
 8023738:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802373c:	431a      	orrs	r2, r3
 802373e:	f8a9 2000 	strh.w	r2, [r9]
 8023742:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8023744:	f109 0902 	add.w	r9, r9, #2
 8023748:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802374a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802374e:	441a      	add	r2, r3
 8023750:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023752:	9229      	str	r2, [sp, #164]	; 0xa4
 8023754:	441d      	add	r5, r3
 8023756:	e63d      	b.n	80233d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023758:	2800      	cmp	r0, #0
 802375a:	f43f aedd 	beq.w	8023518 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802375e:	5c79      	ldrb	r1, [r7, r1]
 8023760:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023764:	910b      	str	r1, [sp, #44]	; 0x2c
 8023766:	0e09      	lsrs	r1, r1, #24
 8023768:	9114      	str	r1, [sp, #80]	; 0x50
 802376a:	e6d5      	b.n	8023518 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802376c:	b01f      	add	sp, #124	; 0x7c
 802376e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023772 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8023772:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023776:	b089      	sub	sp, #36	; 0x24
 8023778:	9101      	str	r1, [sp, #4]
 802377a:	9801      	ldr	r0, [sp, #4]
 802377c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8023780:	8800      	ldrh	r0, [r0, #0]
 8023782:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8023786:	1206      	asrs	r6, r0, #8
 8023788:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 802378c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8023790:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023794:	9602      	str	r6, [sp, #8]
 8023796:	10c6      	asrs	r6, r0, #3
 8023798:	00c0      	lsls	r0, r0, #3
 802379a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802379e:	b2c0      	uxtb	r0, r0
 80237a0:	9603      	str	r6, [sp, #12]
 80237a2:	9004      	str	r0, [sp, #16]
 80237a4:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 80237a8:	fb07 100c 	mla	r0, r7, ip, r1
 80237ac:	2f00      	cmp	r7, #0
 80237ae:	eb02 0e00 	add.w	lr, r2, r0
 80237b2:	f2c0 810a 	blt.w	80239ca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80237b6:	45b8      	cmp	r8, r7
 80237b8:	f340 8107 	ble.w	80239ca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80237bc:	2900      	cmp	r1, #0
 80237be:	f2c0 8102 	blt.w	80239c6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80237c2:	458c      	cmp	ip, r1
 80237c4:	f340 80ff 	ble.w	80239c6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80237c8:	5c12      	ldrb	r2, [r2, r0]
 80237ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80237ce:	1c4a      	adds	r2, r1, #1
 80237d0:	f100 80fe 	bmi.w	80239d0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80237d4:	4594      	cmp	ip, r2
 80237d6:	f340 80fb 	ble.w	80239d0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80237da:	2d00      	cmp	r5, #0
 80237dc:	f000 80fa 	beq.w	80239d4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 80237e0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80237e4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80237e8:	3701      	adds	r7, #1
 80237ea:	f100 80f7 	bmi.w	80239dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80237ee:	45b8      	cmp	r8, r7
 80237f0:	f340 80f4 	ble.w	80239dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80237f4:	2c00      	cmp	r4, #0
 80237f6:	f000 80f4 	beq.w	80239e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 80237fa:	2900      	cmp	r1, #0
 80237fc:	eb0e 020c 	add.w	r2, lr, ip
 8023800:	f2c0 80ea 	blt.w	80239d8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8023804:	458c      	cmp	ip, r1
 8023806:	f340 80e7 	ble.w	80239d8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 802380a:	f81e 700c 	ldrb.w	r7, [lr, ip]
 802380e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8023812:	3101      	adds	r1, #1
 8023814:	f100 80e8 	bmi.w	80239e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8023818:	458c      	cmp	ip, r1
 802381a:	f340 80e5 	ble.w	80239e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802381e:	2d00      	cmp	r5, #0
 8023820:	f000 80e4 	beq.w	80239ec <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8023824:	7852      	ldrb	r2, [r2, #1]
 8023826:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802382a:	0e0b      	lsrs	r3, r1, #24
 802382c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8023830:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8023834:	9300      	str	r3, [sp, #0]
 8023836:	b2a4      	uxth	r4, r4
 8023838:	b2ab      	uxth	r3, r5
 802383a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 802383e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8023842:	fb03 f904 	mul.w	r9, r3, r4
 8023846:	011b      	lsls	r3, r3, #4
 8023848:	fb0a f505 	mul.w	r5, sl, r5
 802384c:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8023850:	eba3 0e09 	sub.w	lr, r3, r9
 8023854:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8023858:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802385c:	0a28      	lsrs	r0, r5, #8
 802385e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8023862:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023866:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802386a:	fb0a f303 	mul.w	r3, sl, r3
 802386e:	fb08 f707 	mul.w	r7, r8, r7
 8023872:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8023876:	4405      	add	r5, r0
 8023878:	fb08 fc0c 	mul.w	ip, r8, ip
 802387c:	b2a4      	uxth	r4, r4
 802387e:	0a2d      	lsrs	r5, r5, #8
 8023880:	fa1f fe8e 	uxth.w	lr, lr
 8023884:	1b12      	subs	r2, r2, r4
 8023886:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 802388a:	b292      	uxth	r2, r2
 802388c:	9005      	str	r0, [sp, #20]
 802388e:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8023892:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023896:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802389a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802389e:	0a1b      	lsrs	r3, r3, #8
 80238a0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80238a4:	9306      	str	r3, [sp, #24]
 80238a6:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 80238aa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238ae:	4460      	add	r0, ip
 80238b0:	fb0b f303 	mul.w	r3, fp, r3
 80238b4:	fb0b f606 	mul.w	r6, fp, r6
 80238b8:	0a00      	lsrs	r0, r0, #8
 80238ba:	0a1d      	lsrs	r5, r3, #8
 80238bc:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80238c0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80238c4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80238c8:	441d      	add	r5, r3
 80238ca:	f506 7380 	add.w	r3, r6, #256	; 0x100
 80238ce:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80238d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80238d6:	0a2d      	lsrs	r5, r5, #8
 80238d8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80238dc:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 80238e0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80238e4:	0a36      	lsrs	r6, r6, #8
 80238e6:	0a1b      	lsrs	r3, r3, #8
 80238e8:	fb05 f50e 	mul.w	r5, r5, lr
 80238ec:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80238f0:	9307      	str	r3, [sp, #28]
 80238f2:	0e0b      	lsrs	r3, r1, #24
 80238f4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80238f8:	fb0e f606 	mul.w	r6, lr, r6
 80238fc:	435f      	muls	r7, r3
 80238fe:	4359      	muls	r1, r3
 8023900:	9b05      	ldr	r3, [sp, #20]
 8023902:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023906:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802390a:	fb03 5502 	mla	r5, r3, r2, r5
 802390e:	9b06      	ldr	r3, [sp, #24]
 8023910:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023914:	fb0e fe0b 	mul.w	lr, lr, fp
 8023918:	44bc      	add	ip, r7
 802391a:	f501 7780 	add.w	r7, r1, #256	; 0x100
 802391e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023922:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023926:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802392a:	0a09      	lsrs	r1, r1, #8
 802392c:	fb0c 5509 	mla	r5, ip, r9, r5
 8023930:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8023934:	fb00 5504 	mla	r5, r0, r4, r5
 8023938:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802393c:	9b07      	ldr	r3, [sp, #28]
 802393e:	fb02 6000 	mla	r0, r2, r0, r6
 8023942:	0a2d      	lsrs	r5, r5, #8
 8023944:	fb02 e20a 	mla	r2, r2, sl, lr
 8023948:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802394c:	fb09 0001 	mla	r0, r9, r1, r0
 8023950:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023954:	fb04 0003 	mla	r0, r4, r3, r0
 8023958:	9b00      	ldr	r3, [sp, #0]
 802395a:	fb04 2408 	mla	r4, r4, r8, r2
 802395e:	9a04      	ldr	r2, [sp, #16]
 8023960:	0a00      	lsrs	r0, r0, #8
 8023962:	fb09 4903 	mla	r9, r9, r3, r4
 8023966:	9b02      	ldr	r3, [sp, #8]
 8023968:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802396c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8023970:	4305      	orrs	r5, r0
 8023972:	fa5f f989 	uxtb.w	r9, r9
 8023976:	fb03 f109 	mul.w	r1, r3, r9
 802397a:	9b03      	ldr	r3, [sp, #12]
 802397c:	fb03 f309 	mul.w	r3, r3, r9
 8023980:	fb02 f909 	mul.w	r9, r2, r9
 8023984:	1c4a      	adds	r2, r1, #1
 8023986:	1c58      	adds	r0, r3, #1
 8023988:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802398c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023990:	0c2a      	lsrs	r2, r5, #16
 8023992:	0a2b      	lsrs	r3, r5, #8
 8023994:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8023998:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802399c:	0212      	lsls	r2, r2, #8
 802399e:	00db      	lsls	r3, r3, #3
 80239a0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80239a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80239a8:	4313      	orrs	r3, r2
 80239aa:	f109 0201 	add.w	r2, r9, #1
 80239ae:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80239b2:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80239b6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80239ba:	431d      	orrs	r5, r3
 80239bc:	9b01      	ldr	r3, [sp, #4]
 80239be:	801d      	strh	r5, [r3, #0]
 80239c0:	b009      	add	sp, #36	; 0x24
 80239c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80239c6:	2000      	movs	r0, #0
 80239c8:	e701      	b.n	80237ce <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 80239ca:	2600      	movs	r6, #0
 80239cc:	4630      	mov	r0, r6
 80239ce:	e70b      	b.n	80237e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80239d0:	2600      	movs	r6, #0
 80239d2:	e709      	b.n	80237e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80239d4:	462e      	mov	r6, r5
 80239d6:	e707      	b.n	80237e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80239d8:	2700      	movs	r7, #0
 80239da:	e71a      	b.n	8023812 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 80239dc:	2100      	movs	r1, #0
 80239de:	460f      	mov	r7, r1
 80239e0:	e723      	b.n	802382a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80239e2:	4621      	mov	r1, r4
 80239e4:	4627      	mov	r7, r4
 80239e6:	e720      	b.n	802382a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80239e8:	2100      	movs	r1, #0
 80239ea:	e71e      	b.n	802382a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80239ec:	4629      	mov	r1, r5
 80239ee:	e71c      	b.n	802382a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

080239f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80239f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239f4:	b09b      	sub	sp, #108	; 0x6c
 80239f6:	9218      	str	r2, [sp, #96]	; 0x60
 80239f8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80239fa:	9019      	str	r0, [sp, #100]	; 0x64
 80239fc:	9116      	str	r1, [sp, #88]	; 0x58
 80239fe:	6850      	ldr	r0, [r2, #4]
 8023a00:	9307      	str	r3, [sp, #28]
 8023a02:	6812      	ldr	r2, [r2, #0]
 8023a04:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8023a06:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8023a0a:	fb00 1303 	mla	r3, r0, r3, r1
 8023a0e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023a12:	930a      	str	r3, [sp, #40]	; 0x28
 8023a14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023a16:	681b      	ldr	r3, [r3, #0]
 8023a18:	930f      	str	r3, [sp, #60]	; 0x3c
 8023a1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023a1c:	685e      	ldr	r6, [r3, #4]
 8023a1e:	3604      	adds	r6, #4
 8023a20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023a22:	2b00      	cmp	r3, #0
 8023a24:	dc03      	bgt.n	8023a2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023a26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023a28:	2b00      	cmp	r3, #0
 8023a2a:	f340 8373 	ble.w	8024114 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8023a2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023a30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023a34:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023a38:	1e48      	subs	r0, r1, #1
 8023a3a:	1e57      	subs	r7, r2, #1
 8023a3c:	9b07      	ldr	r3, [sp, #28]
 8023a3e:	2b00      	cmp	r3, #0
 8023a40:	f340 818f 	ble.w	8023d62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023a44:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023a46:	142b      	asrs	r3, r5, #16
 8023a48:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8023a4c:	d406      	bmi.n	8023a5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023a4e:	4584      	cmp	ip, r0
 8023a50:	da04      	bge.n	8023a5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023a52:	2b00      	cmp	r3, #0
 8023a54:	db02      	blt.n	8023a5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023a56:	42bb      	cmp	r3, r7
 8023a58:	f2c0 8184 	blt.w	8023d64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8023a5c:	f11c 0c01 	adds.w	ip, ip, #1
 8023a60:	f100 8172 	bmi.w	8023d48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023a64:	4561      	cmp	r1, ip
 8023a66:	f2c0 816f 	blt.w	8023d48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023a6a:	3301      	adds	r3, #1
 8023a6c:	f100 816c 	bmi.w	8023d48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023a70:	429a      	cmp	r2, r3
 8023a72:	f2c0 8169 	blt.w	8023d48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8023a76:	9b07      	ldr	r3, [sp, #28]
 8023a78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023a7a:	9317      	str	r3, [sp, #92]	; 0x5c
 8023a7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023a7e:	2b00      	cmp	r3, #0
 8023a80:	f340 818e 	ble.w	8023da0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8023a84:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023a86:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023a8a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023a8e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023a92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023a94:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8023a98:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023a9a:	141b      	asrs	r3, r3, #16
 8023a9c:	f100 81d1 	bmi.w	8023e42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023aa0:	f101 38ff 	add.w	r8, r1, #4294967295
 8023aa4:	4543      	cmp	r3, r8
 8023aa6:	f280 81cc 	bge.w	8023e42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023aaa:	f1bc 0f00 	cmp.w	ip, #0
 8023aae:	f2c0 81c8 	blt.w	8023e42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023ab2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8023ab6:	45c4      	cmp	ip, r8
 8023ab8:	f280 81c3 	bge.w	8023e42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8023abc:	b209      	sxth	r1, r1
 8023abe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023ac0:	fb0c 3301 	mla	r3, ip, r1, r3
 8023ac4:	eb04 0803 	add.w	r8, r4, r3
 8023ac8:	5ce3      	ldrb	r3, [r4, r3]
 8023aca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023ace:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8023ad2:	2a00      	cmp	r2, #0
 8023ad4:	f000 81aa 	beq.w	8023e2c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8023ad8:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023adc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8023ae0:	940b      	str	r4, [sp, #44]	; 0x2c
 8023ae2:	0e24      	lsrs	r4, r4, #24
 8023ae4:	9412      	str	r4, [sp, #72]	; 0x48
 8023ae6:	b178      	cbz	r0, 8023b08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023ae8:	eb08 0c01 	add.w	ip, r8, r1
 8023aec:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023af0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023af4:	9108      	str	r1, [sp, #32]
 8023af6:	0e09      	lsrs	r1, r1, #24
 8023af8:	9110      	str	r1, [sp, #64]	; 0x40
 8023afa:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8023afe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023b02:	910c      	str	r1, [sp, #48]	; 0x30
 8023b04:	0e09      	lsrs	r1, r1, #24
 8023b06:	9113      	str	r1, [sp, #76]	; 0x4c
 8023b08:	b292      	uxth	r2, r2
 8023b0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8023b0c:	b280      	uxth	r0, r0
 8023b0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023b10:	fb02 f900 	mul.w	r9, r2, r0
 8023b14:	0112      	lsls	r2, r2, #4
 8023b16:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8023b1a:	eba2 0809 	sub.w	r8, r2, r9
 8023b1e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023b22:	b280      	uxth	r0, r0
 8023b24:	fa1f f888 	uxth.w	r8, r8
 8023b28:	1a12      	subs	r2, r2, r0
 8023b2a:	fb08 f101 	mul.w	r1, r8, r1
 8023b2e:	b292      	uxth	r2, r2
 8023b30:	fb02 110e 	mla	r1, r2, lr, r1
 8023b34:	fb00 1104 	mla	r1, r0, r4, r1
 8023b38:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023b3a:	fb09 1104 	mla	r1, r9, r4, r1
 8023b3e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023b42:	2900      	cmp	r1, #0
 8023b44:	f000 80f5 	beq.w	8023d32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023b48:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023b4c:	d01b      	beq.n	8023b86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8023b4e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023b52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023b56:	fb0e fa0a 	mul.w	sl, lr, sl
 8023b5a:	fb0e fe03 	mul.w	lr, lr, r3
 8023b5e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023b62:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023b66:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023b6a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b6e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023b72:	4453      	add	r3, sl
 8023b74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023b78:	0a1b      	lsrs	r3, r3, #8
 8023b7a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023b7e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023b82:	ea43 030c 	orr.w	r3, r3, ip
 8023b86:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b88:	2cff      	cmp	r4, #255	; 0xff
 8023b8a:	d021      	beq.n	8023bd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8023b8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b8e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023b92:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023b94:	fb04 fb0b 	mul.w	fp, r4, fp
 8023b98:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023b9a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023b9e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023ba0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023ba4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023ba8:	fb04 fa0a 	mul.w	sl, r4, sl
 8023bac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bb0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023bb4:	44de      	add	lr, fp
 8023bb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023bba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023bbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023bc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bc6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023bca:	ea4e 040a 	orr.w	r4, lr, sl
 8023bce:	940b      	str	r4, [sp, #44]	; 0x2c
 8023bd0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023bd2:	2cff      	cmp	r4, #255	; 0xff
 8023bd4:	d021      	beq.n	8023c1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023bd6:	9c08      	ldr	r4, [sp, #32]
 8023bd8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023bdc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023bde:	fb04 fb0b 	mul.w	fp, r4, fp
 8023be2:	9c08      	ldr	r4, [sp, #32]
 8023be4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023be8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023bea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023bee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023bf2:	fb04 fa0a 	mul.w	sl, r4, sl
 8023bf6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023bfa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023bfe:	44de      	add	lr, fp
 8023c00:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c10:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c14:	ea4e 040a 	orr.w	r4, lr, sl
 8023c18:	9408      	str	r4, [sp, #32]
 8023c1a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c1c:	2cff      	cmp	r4, #255	; 0xff
 8023c1e:	d021      	beq.n	8023c64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8023c20:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023c22:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8023c26:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c28:	fb04 fb0b 	mul.w	fp, r4, fp
 8023c2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023c2e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023c32:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8023c34:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8023c38:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c3c:	fb04 fa0a 	mul.w	sl, r4, sl
 8023c40:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c44:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023c48:	44de      	add	lr, fp
 8023c4a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8023c4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023c56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023c5a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023c5e:	ea4e 040a 	orr.w	r4, lr, sl
 8023c62:	940c      	str	r4, [sp, #48]	; 0x30
 8023c64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023c66:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023c6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c6e:	43c9      	mvns	r1, r1
 8023c70:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023c74:	9c08      	ldr	r4, [sp, #32]
 8023c76:	fb08 fc0c 	mul.w	ip, r8, ip
 8023c7a:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023c7e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023c82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023c84:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023c88:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023c8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023c8e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8023c92:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023c96:	fb08 f80e 	mul.w	r8, r8, lr
 8023c9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023c9e:	fa5f fe81 	uxtb.w	lr, r1
 8023ca2:	fb02 8303 	mla	r3, r2, r3, r8
 8023ca6:	9a08      	ldr	r2, [sp, #32]
 8023ca8:	f8b7 8000 	ldrh.w	r8, [r7]
 8023cac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023cb0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8023cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023cb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8023cba:	fb00 330a 	mla	r3, r0, sl, r3
 8023cbe:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8023cc2:	ea4f 2228 	mov.w	r2, r8, asr #8
 8023cc6:	fb09 3900 	mla	r9, r9, r0, r3
 8023cca:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8023cce:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023cd2:	b2c9      	uxtb	r1, r1
 8023cd4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023cd8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8023cdc:	fb02 f20e 	mul.w	r2, r2, lr
 8023ce0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8023ce4:	fb00 f00e 	mul.w	r0, r0, lr
 8023ce8:	1c53      	adds	r3, r2, #1
 8023cea:	fb01 f10e 	mul.w	r1, r1, lr
 8023cee:	ea4c 0c09 	orr.w	ip, ip, r9
 8023cf2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023cf6:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8023cfa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023cfe:	4a60      	ldr	r2, [pc, #384]	; (8023e80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8023d00:	b2db      	uxtb	r3, r3
 8023d02:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8023d06:	1c43      	adds	r3, r0, #1
 8023d08:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023d0c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8023d10:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023d14:	00db      	lsls	r3, r3, #3
 8023d16:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023d1a:	4313      	orrs	r3, r2
 8023d1c:	1c4a      	adds	r2, r1, #1
 8023d1e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023d22:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8023d26:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8023d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8023d2e:	f8a7 c000 	strh.w	ip, [r7]
 8023d32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023d34:	3702      	adds	r7, #2
 8023d36:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023d38:	441a      	add	r2, r3
 8023d3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d3c:	441d      	add	r5, r3
 8023d3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023d40:	9225      	str	r2, [sp, #148]	; 0x94
 8023d42:	3b01      	subs	r3, #1
 8023d44:	9317      	str	r3, [sp, #92]	; 0x5c
 8023d46:	e699      	b.n	8023a7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023d48:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023d4a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023d4c:	441c      	add	r4, r3
 8023d4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023d50:	441d      	add	r5, r3
 8023d52:	9b07      	ldr	r3, [sp, #28]
 8023d54:	9425      	str	r4, [sp, #148]	; 0x94
 8023d56:	3b01      	subs	r3, #1
 8023d58:	9307      	str	r3, [sp, #28]
 8023d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d5c:	3302      	adds	r3, #2
 8023d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8023d60:	e66c      	b.n	8023a3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8023d62:	d024      	beq.n	8023dae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8023d64:	9b07      	ldr	r3, [sp, #28]
 8023d66:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023d68:	3b01      	subs	r3, #1
 8023d6a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023d6c:	fb00 4003 	mla	r0, r0, r3, r4
 8023d70:	1400      	asrs	r0, r0, #16
 8023d72:	f53f ae80 	bmi.w	8023a76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023d76:	3901      	subs	r1, #1
 8023d78:	4288      	cmp	r0, r1
 8023d7a:	f6bf ae7c 	bge.w	8023a76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023d7e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023d80:	fb01 5303 	mla	r3, r1, r3, r5
 8023d84:	141b      	asrs	r3, r3, #16
 8023d86:	f53f ae76 	bmi.w	8023a76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023d8a:	3a01      	subs	r2, #1
 8023d8c:	4293      	cmp	r3, r2
 8023d8e:	f6bf ae72 	bge.w	8023a76 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023d92:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8023d96:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8023d9a:	f1bb 0f00 	cmp.w	fp, #0
 8023d9e:	dc71      	bgt.n	8023e84 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8023da0:	9b07      	ldr	r3, [sp, #28]
 8023da2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023da8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023dac:	930a      	str	r3, [sp, #40]	; 0x28
 8023dae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023db0:	2b00      	cmp	r3, #0
 8023db2:	f340 81af 	ble.w	8024114 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8023db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023dba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023dbc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023dc0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023dc4:	eef0 6a62 	vmov.f32	s13, s5
 8023dc8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023dcc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023dd0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023dd4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8023dd8:	eef0 6a43 	vmov.f32	s13, s6
 8023ddc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023de0:	ee16 5a90 	vmov	r5, s13
 8023de4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023de8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023dec:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023df0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023df4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023df8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023dfc:	ee12 2a90 	vmov	r2, s5
 8023e00:	eef0 2a47 	vmov.f32	s5, s14
 8023e04:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e08:	ee13 2a10 	vmov	r2, s6
 8023e0c:	9327      	str	r3, [sp, #156]	; 0x9c
 8023e0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e10:	eeb0 3a67 	vmov.f32	s6, s15
 8023e14:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e18:	9328      	str	r3, [sp, #160]	; 0xa0
 8023e1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023e1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023e1e:	3b01      	subs	r3, #1
 8023e20:	9316      	str	r3, [sp, #88]	; 0x58
 8023e22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023e24:	bf08      	it	eq
 8023e26:	4613      	moveq	r3, r2
 8023e28:	9307      	str	r3, [sp, #28]
 8023e2a:	e5f9      	b.n	8023a20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8023e2c:	2800      	cmp	r0, #0
 8023e2e:	f43f ae6b 	beq.w	8023b08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023e32:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023e36:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023e3a:	9108      	str	r1, [sp, #32]
 8023e3c:	0e09      	lsrs	r1, r1, #24
 8023e3e:	9110      	str	r1, [sp, #64]	; 0x40
 8023e40:	e662      	b.n	8023b08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8023e42:	f113 0801 	adds.w	r8, r3, #1
 8023e46:	f53f af74 	bmi.w	8023d32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023e4a:	4541      	cmp	r1, r8
 8023e4c:	f6ff af71 	blt.w	8023d32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023e50:	f11c 0801 	adds.w	r8, ip, #1
 8023e54:	f53f af6d 	bmi.w	8023d32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023e58:	45c6      	cmp	lr, r8
 8023e5a:	f6ff af6a 	blt.w	8023d32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023e5e:	b209      	sxth	r1, r1
 8023e60:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8023e64:	fa0f f38e 	sxth.w	r3, lr
 8023e68:	9100      	str	r1, [sp, #0]
 8023e6a:	4639      	mov	r1, r7
 8023e6c:	9301      	str	r3, [sp, #4]
 8023e6e:	4633      	mov	r3, r6
 8023e70:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8023e74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023e76:	9819      	ldr	r0, [sp, #100]	; 0x64
 8023e78:	f7ff fc7b 	bl	8023772 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8023e7c:	e759      	b.n	8023d32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8023e7e:	bf00      	nop
 8023e80:	fffff800 	.word	0xfffff800
 8023e84:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023e86:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023e8a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8023e8c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8023e90:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8023e92:	1427      	asrs	r7, r4, #16
 8023e94:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8023e96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e9a:	142b      	asrs	r3, r5, #16
 8023e9c:	fb01 7303 	mla	r3, r1, r3, r7
 8023ea0:	18e7      	adds	r7, r4, r3
 8023ea2:	5ce3      	ldrb	r3, [r4, r3]
 8023ea4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023ea8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8023eac:	2a00      	cmp	r2, #0
 8023eae:	f000 8127 	beq.w	8024100 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8023eb2:	f897 e001 	ldrb.w	lr, [r7, #1]
 8023eb6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8023eba:	940d      	str	r4, [sp, #52]	; 0x34
 8023ebc:	0e24      	lsrs	r4, r4, #24
 8023ebe:	9414      	str	r4, [sp, #80]	; 0x50
 8023ec0:	b170      	cbz	r0, 8023ee0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8023ec2:	eb07 0e01 	add.w	lr, r7, r1
 8023ec6:	5c79      	ldrb	r1, [r7, r1]
 8023ec8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8023ece:	0e09      	lsrs	r1, r1, #24
 8023ed0:	9111      	str	r1, [sp, #68]	; 0x44
 8023ed2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8023ed6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8023eda:	910e      	str	r1, [sp, #56]	; 0x38
 8023edc:	0e09      	lsrs	r1, r1, #24
 8023ede:	9115      	str	r1, [sp, #84]	; 0x54
 8023ee0:	b292      	uxth	r2, r2
 8023ee2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023ee4:	b280      	uxth	r0, r0
 8023ee6:	fb02 f800 	mul.w	r8, r2, r0
 8023eea:	0112      	lsls	r2, r2, #4
 8023eec:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8023ef0:	eba2 0e08 	sub.w	lr, r2, r8
 8023ef4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8023ef8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023efa:	b280      	uxth	r0, r0
 8023efc:	fa1f fe8e 	uxth.w	lr, lr
 8023f00:	1a09      	subs	r1, r1, r0
 8023f02:	fb0e f202 	mul.w	r2, lr, r2
 8023f06:	b289      	uxth	r1, r1
 8023f08:	fb01 220c 	mla	r2, r1, ip, r2
 8023f0c:	fb00 2204 	mla	r2, r0, r4, r2
 8023f10:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023f12:	fb08 2204 	mla	r2, r8, r4, r2
 8023f16:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023f1a:	2a00      	cmp	r2, #0
 8023f1c:	f000 80e5 	beq.w	80240ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8023f20:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8023f24:	d019      	beq.n	8023f5a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8023f26:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8023f2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023f2e:	fb0c fa0a 	mul.w	sl, ip, sl
 8023f32:	fb0c fc03 	mul.w	ip, ip, r3
 8023f36:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8023f3a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8023f3e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8023f42:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f46:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023f4a:	4453      	add	r3, sl
 8023f4c:	0a3f      	lsrs	r7, r7, #8
 8023f4e:	0a1b      	lsrs	r3, r3, #8
 8023f50:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023f54:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023f58:	433b      	orrs	r3, r7
 8023f5a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023f5c:	2cff      	cmp	r4, #255	; 0xff
 8023f5e:	d020      	beq.n	8023fa2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8023f60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023f62:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023f66:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023f68:	4367      	muls	r7, r4
 8023f6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023f6c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023f70:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023f74:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023f76:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023f7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f7e:	fb04 fa0a 	mul.w	sl, r4, sl
 8023f82:	44bc      	add	ip, r7
 8023f84:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023f88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023f8c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023f90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023f94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023f98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023f9c:	ea4c 040a 	orr.w	r4, ip, sl
 8023fa0:	940d      	str	r4, [sp, #52]	; 0x34
 8023fa2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023fa4:	2cff      	cmp	r4, #255	; 0xff
 8023fa6:	d020      	beq.n	8023fea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8023fa8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023faa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023fae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023fb0:	4367      	muls	r7, r4
 8023fb2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023fb4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8023fb8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023fbc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8023fbe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8023fc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fc6:	fb04 fa0a 	mul.w	sl, r4, sl
 8023fca:	44bc      	add	ip, r7
 8023fcc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8023fd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023fd4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8023fd8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023fdc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023fe0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023fe4:	ea4c 040a 	orr.w	r4, ip, sl
 8023fe8:	9409      	str	r4, [sp, #36]	; 0x24
 8023fea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023fec:	2cff      	cmp	r4, #255	; 0xff
 8023fee:	d020      	beq.n	8024032 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8023ff0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023ff2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8023ff6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8023ff8:	4367      	muls	r7, r4
 8023ffa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023ffc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024000:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024004:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024006:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802400a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802400e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024012:	44bc      	add	ip, r7
 8024014:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024018:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802401c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024020:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024024:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024028:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802402c:	ea4c 040a 	orr.w	r4, ip, sl
 8024030:	940e      	str	r4, [sp, #56]	; 0x38
 8024032:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024034:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024038:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802403c:	43d2      	mvns	r2, r2
 802403e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024042:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8024044:	b2d2      	uxtb	r2, r2
 8024046:	fb0e f707 	mul.w	r7, lr, r7
 802404a:	fb01 770c 	mla	r7, r1, ip, r7
 802404e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024052:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024054:	fb00 770c 	mla	r7, r0, ip, r7
 8024058:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802405c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802405e:	fb08 770c 	mla	r7, r8, ip, r7
 8024062:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024066:	fb0e fe0c 	mul.w	lr, lr, ip
 802406a:	0a3f      	lsrs	r7, r7, #8
 802406c:	fb01 e303 	mla	r3, r1, r3, lr
 8024070:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024072:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024076:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802407a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802407c:	fb00 330a 	mla	r3, r0, sl, r3
 8024080:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8024084:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024088:	f8b9 3000 	ldrh.w	r3, [r9]
 802408c:	1218      	asrs	r0, r3, #8
 802408e:	10d9      	asrs	r1, r3, #3
 8024090:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024094:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024098:	00db      	lsls	r3, r3, #3
 802409a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802409e:	4350      	muls	r0, r2
 80240a0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80240a4:	b2db      	uxtb	r3, r3
 80240a6:	4351      	muls	r1, r2
 80240a8:	ea47 070c 	orr.w	r7, r7, ip
 80240ac:	4353      	muls	r3, r2
 80240ae:	1c42      	adds	r2, r0, #1
 80240b0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80240b4:	0c3a      	lsrs	r2, r7, #16
 80240b6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80240ba:	4a18      	ldr	r2, [pc, #96]	; (802411c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 80240bc:	b2c0      	uxtb	r0, r0
 80240be:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80240c2:	1c4a      	adds	r2, r1, #1
 80240c4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80240c8:	0a3a      	lsrs	r2, r7, #8
 80240ca:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80240ce:	00c9      	lsls	r1, r1, #3
 80240d0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80240d4:	4301      	orrs	r1, r0
 80240d6:	1c58      	adds	r0, r3, #1
 80240d8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80240dc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80240e0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80240e4:	4308      	orrs	r0, r1
 80240e6:	f8a9 0000 	strh.w	r0, [r9]
 80240ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80240ec:	f109 0902 	add.w	r9, r9, #2
 80240f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80240f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80240f6:	441a      	add	r2, r3
 80240f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80240fa:	9225      	str	r2, [sp, #148]	; 0x94
 80240fc:	441d      	add	r5, r3
 80240fe:	e64c      	b.n	8023d9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8024100:	2800      	cmp	r0, #0
 8024102:	f43f aeed 	beq.w	8023ee0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024106:	5c79      	ldrb	r1, [r7, r1]
 8024108:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802410c:	9109      	str	r1, [sp, #36]	; 0x24
 802410e:	0e09      	lsrs	r1, r1, #24
 8024110:	9111      	str	r1, [sp, #68]	; 0x44
 8024112:	e6e5      	b.n	8023ee0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8024114:	b01b      	add	sp, #108	; 0x6c
 8024116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802411a:	bf00      	nop
 802411c:	fffff800 	.word	0xfffff800

08024120 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8024120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024124:	b085      	sub	sp, #20
 8024126:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802412a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802412e:	2800      	cmp	r0, #0
 8024130:	9103      	str	r1, [sp, #12]
 8024132:	fb00 7406 	mla	r4, r0, r6, r7
 8024136:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802413a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802413e:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8024142:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8024146:	eb03 0904 	add.w	r9, r3, r4
 802414a:	9501      	str	r5, [sp, #4]
 802414c:	f2c0 8150 	blt.w	80243f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024150:	4583      	cmp	fp, r0
 8024152:	f340 814d 	ble.w	80243f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8024156:	2f00      	cmp	r7, #0
 8024158:	f2c0 8146 	blt.w	80243e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 802415c:	42be      	cmp	r6, r7
 802415e:	f340 8143 	ble.w	80243e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8024162:	f813 c004 	ldrb.w	ip, [r3, r4]
 8024166:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 802416a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 802416e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024172:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8024176:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802417a:	4355      	muls	r5, r2
 802417c:	fb0c f203 	mul.w	r2, ip, r3
 8024180:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8024184:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8024188:	441d      	add	r5, r3
 802418a:	f102 0320 	add.w	r3, r2, #32
 802418e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024192:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8024196:	0a1b      	lsrs	r3, r3, #8
 8024198:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802419c:	431c      	orrs	r4, r3
 802419e:	1c7b      	adds	r3, r7, #1
 80241a0:	f100 812b 	bmi.w	80243fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80241a4:	429e      	cmp	r6, r3
 80241a6:	f340 8128 	ble.w	80243fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80241aa:	2900      	cmp	r1, #0
 80241ac:	f000 8128 	beq.w	8024400 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 80241b0:	9a01      	ldr	r2, [sp, #4]
 80241b2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80241b6:	8855      	ldrh	r5, [r2, #2]
 80241b8:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80241bc:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80241c0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80241c4:	fb08 f802 	mul.w	r8, r8, r2
 80241c8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80241cc:	435d      	muls	r5, r3
 80241ce:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80241d2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80241d6:	44d0      	add	r8, sl
 80241d8:	f105 0a20 	add.w	sl, r5, #32
 80241dc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80241e0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80241e4:	0a2d      	lsrs	r5, r5, #8
 80241e6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80241ea:	432a      	orrs	r2, r5
 80241ec:	3001      	adds	r0, #1
 80241ee:	f100 810d 	bmi.w	802440c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80241f2:	4583      	cmp	fp, r0
 80241f4:	f340 810a 	ble.w	802440c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 80241f8:	f1be 0f00 	cmp.w	lr, #0
 80241fc:	f000 810b 	beq.w	8024416 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8024200:	2f00      	cmp	r7, #0
 8024202:	f2c0 8100 	blt.w	8024406 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8024206:	42be      	cmp	r6, r7
 8024208:	f340 80fd 	ble.w	8024406 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802420c:	9801      	ldr	r0, [sp, #4]
 802420e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024212:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024216:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802421a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802421e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8024222:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8024226:	fb0a fa00 	mul.w	sl, sl, r0
 802422a:	fb05 f808 	mul.w	r8, r5, r8
 802422e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8024232:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8024236:	4482      	add	sl, r0
 8024238:	f108 0020 	add.w	r0, r8, #32
 802423c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024240:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8024244:	0a00      	lsrs	r0, r0, #8
 8024246:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802424a:	ea4b 0b00 	orr.w	fp, fp, r0
 802424e:	3701      	adds	r7, #1
 8024250:	f100 80e6 	bmi.w	8024420 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8024254:	42be      	cmp	r6, r7
 8024256:	f340 80e3 	ble.w	8024420 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 802425a:	2900      	cmp	r1, #0
 802425c:	f000 80e3 	beq.w	8024426 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8024260:	3601      	adds	r6, #1
 8024262:	9801      	ldr	r0, [sp, #4]
 8024264:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024268:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 802426c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024270:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8024274:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024278:	fb09 f906 	mul.w	r9, r9, r6
 802427c:	fb07 f800 	mul.w	r8, r7, r0
 8024280:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8024284:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8024288:	f609 0901 	addw	r9, r9, #2049	; 0x801
 802428c:	44d1      	add	r9, sl
 802428e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8024292:	f108 0020 	add.w	r0, r8, #32
 8024296:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802429a:	0a00      	lsrs	r0, r0, #8
 802429c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80242a0:	4330      	orrs	r0, r6
 80242a2:	b28e      	uxth	r6, r1
 80242a4:	fa1f f98e 	uxth.w	r9, lr
 80242a8:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80242ac:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80242b0:	fb06 f809 	mul.w	r8, r6, r9
 80242b4:	0136      	lsls	r6, r6, #4
 80242b6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80242ba:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80242be:	9601      	str	r6, [sp, #4]
 80242c0:	ea4a 0404 	orr.w	r4, sl, r4
 80242c4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80242c8:	fa1f f689 	uxth.w	r6, r9
 80242cc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80242d0:	fb11 f90e 	smulbb	r9, r1, lr
 80242d4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80242d8:	9602      	str	r6, [sp, #8]
 80242da:	4626      	mov	r6, r4
 80242dc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80242e0:	f1ce 0410 	rsb	r4, lr, #16
 80242e4:	ea4a 0202 	orr.w	r2, sl, r2
 80242e8:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80242ec:	1a64      	subs	r4, r4, r1
 80242ee:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80242f2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80242f6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80242fa:	434a      	muls	r2, r1
 80242fc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8024300:	ea4a 0000 	orr.w	r0, sl, r0
 8024304:	9903      	ldr	r1, [sp, #12]
 8024306:	fb04 2406 	mla	r4, r4, r6, r2
 802430a:	9e02      	ldr	r6, [sp, #8]
 802430c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024310:	fb09 4200 	mla	r2, r9, r0, r4
 8024314:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8024318:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802431c:	8808      	ldrh	r0, [r1, #0]
 802431e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024322:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8024326:	ea44 0b0b 	orr.w	fp, r4, fp
 802432a:	9c01      	ldr	r4, [sp, #4]
 802432c:	b289      	uxth	r1, r1
 802432e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8024332:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8024336:	1ba4      	subs	r4, r4, r6
 8024338:	9e01      	ldr	r6, [sp, #4]
 802433a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802433e:	eba6 0608 	sub.w	r6, r6, r8
 8024342:	b2a4      	uxth	r4, r4
 8024344:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024348:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802434c:	b2b6      	uxth	r6, r6
 802434e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024352:	4373      	muls	r3, r6
 8024354:	ea42 0e0e 	orr.w	lr, r2, lr
 8024358:	fb0c 3304 	mla	r3, ip, r4, r3
 802435c:	9c02      	ldr	r4, [sp, #8]
 802435e:	fa1f f28e 	uxth.w	r2, lr
 8024362:	fb04 3505 	mla	r5, r4, r5, r3
 8024366:	10d4      	asrs	r4, r2, #3
 8024368:	fb08 5707 	mla	r7, r8, r7, r5
 802436c:	1215      	asrs	r5, r2, #8
 802436e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8024372:	00d2      	lsls	r2, r2, #3
 8024374:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024378:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802437c:	b2d2      	uxtb	r2, r2
 802437e:	434f      	muls	r7, r1
 8024380:	1c7b      	adds	r3, r7, #1
 8024382:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024386:	1203      	asrs	r3, r0, #8
 8024388:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 802438c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024390:	b2ff      	uxtb	r7, r7
 8024392:	fb13 f307 	smulbb	r3, r3, r7
 8024396:	fb05 3501 	mla	r5, r5, r1, r3
 802439a:	10c3      	asrs	r3, r0, #3
 802439c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80243a0:	b2ad      	uxth	r5, r5
 80243a2:	fb13 f307 	smulbb	r3, r3, r7
 80243a6:	fb04 3401 	mla	r4, r4, r1, r3
 80243aa:	00c3      	lsls	r3, r0, #3
 80243ac:	b2db      	uxtb	r3, r3
 80243ae:	b2a4      	uxth	r4, r4
 80243b0:	fb13 f307 	smulbb	r3, r3, r7
 80243b4:	fb02 3101 	mla	r1, r2, r1, r3
 80243b8:	1c6b      	adds	r3, r5, #1
 80243ba:	1c62      	adds	r2, r4, #1
 80243bc:	b289      	uxth	r1, r1
 80243be:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80243c2:	1c4b      	adds	r3, r1, #1
 80243c4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80243c8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80243cc:	9a03      	ldr	r2, [sp, #12]
 80243ce:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80243d2:	0964      	lsrs	r4, r4, #5
 80243d4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80243d8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80243dc:	432b      	orrs	r3, r5
 80243de:	4323      	orrs	r3, r4
 80243e0:	8013      	strh	r3, [r2, #0]
 80243e2:	b005      	add	sp, #20
 80243e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243e8:	f04f 0c00 	mov.w	ip, #0
 80243ec:	4664      	mov	r4, ip
 80243ee:	e6d6      	b.n	802419e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80243f0:	2300      	movs	r3, #0
 80243f2:	469c      	mov	ip, r3
 80243f4:	461a      	mov	r2, r3
 80243f6:	461c      	mov	r4, r3
 80243f8:	e6f8      	b.n	80241ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 80243fa:	2300      	movs	r3, #0
 80243fc:	461a      	mov	r2, r3
 80243fe:	e6f5      	b.n	80241ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024400:	460b      	mov	r3, r1
 8024402:	460a      	mov	r2, r1
 8024404:	e6f2      	b.n	80241ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8024406:	2500      	movs	r5, #0
 8024408:	46ab      	mov	fp, r5
 802440a:	e720      	b.n	802424e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 802440c:	2700      	movs	r7, #0
 802440e:	463d      	mov	r5, r7
 8024410:	4638      	mov	r0, r7
 8024412:	46bb      	mov	fp, r7
 8024414:	e745      	b.n	80242a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024416:	4677      	mov	r7, lr
 8024418:	4675      	mov	r5, lr
 802441a:	4670      	mov	r0, lr
 802441c:	46f3      	mov	fp, lr
 802441e:	e740      	b.n	80242a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024420:	2700      	movs	r7, #0
 8024422:	4638      	mov	r0, r7
 8024424:	e73d      	b.n	80242a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8024426:	460f      	mov	r7, r1
 8024428:	4608      	mov	r0, r1
 802442a:	e73a      	b.n	80242a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0802442c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024430:	b097      	sub	sp, #92	; 0x5c
 8024432:	9214      	str	r2, [sp, #80]	; 0x50
 8024434:	9308      	str	r3, [sp, #32]
 8024436:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024438:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802443c:	9015      	str	r0, [sp, #84]	; 0x54
 802443e:	9312      	str	r3, [sp, #72]	; 0x48
 8024440:	6850      	ldr	r0, [r2, #4]
 8024442:	9111      	str	r1, [sp, #68]	; 0x44
 8024444:	6812      	ldr	r2, [r2, #0]
 8024446:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802444a:	fb00 1303 	mla	r3, r0, r3, r1
 802444e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024452:	9309      	str	r3, [sp, #36]	; 0x24
 8024454:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024456:	681b      	ldr	r3, [r3, #0]
 8024458:	930b      	str	r3, [sp, #44]	; 0x2c
 802445a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802445c:	685b      	ldr	r3, [r3, #4]
 802445e:	930c      	str	r3, [sp, #48]	; 0x30
 8024460:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8024464:	930a      	str	r3, [sp, #40]	; 0x28
 8024466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024468:	2b00      	cmp	r3, #0
 802446a:	dc03      	bgt.n	8024474 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802446c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802446e:	2b00      	cmp	r3, #0
 8024470:	f340 83cd 	ble.w	8024c0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024474:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024476:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802447a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802447e:	1e48      	subs	r0, r1, #1
 8024480:	1e55      	subs	r5, r2, #1
 8024482:	9b08      	ldr	r3, [sp, #32]
 8024484:	2b00      	cmp	r3, #0
 8024486:	f340 81a5 	ble.w	80247d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802448a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 802448c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802448e:	1436      	asrs	r6, r6, #16
 8024490:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024494:	d406      	bmi.n	80244a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8024496:	4286      	cmp	r6, r0
 8024498:	da04      	bge.n	80244a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802449a:	2b00      	cmp	r3, #0
 802449c:	db02      	blt.n	80244a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802449e:	42ab      	cmp	r3, r5
 80244a0:	f2c0 8199 	blt.w	80247d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80244a4:	3601      	adds	r6, #1
 80244a6:	f100 8186 	bmi.w	80247b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80244aa:	42b1      	cmp	r1, r6
 80244ac:	f2c0 8183 	blt.w	80247b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80244b0:	3301      	adds	r3, #1
 80244b2:	f100 8180 	bmi.w	80247b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80244b6:	429a      	cmp	r2, r3
 80244b8:	f2c0 817d 	blt.w	80247b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80244bc:	9b08      	ldr	r3, [sp, #32]
 80244be:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80244c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80244c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80244c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80244c8:	2b00      	cmp	r3, #0
 80244ca:	f340 81a6 	ble.w	802481a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80244ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80244d0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80244d2:	1418      	asrs	r0, r3, #16
 80244d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80244d6:	142d      	asrs	r5, r5, #16
 80244d8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80244dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80244de:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80244e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80244e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80244e8:	f100 81fa 	bmi.w	80248e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80244ec:	f102 3eff 	add.w	lr, r2, #4294967295
 80244f0:	4575      	cmp	r5, lr
 80244f2:	f280 81f5 	bge.w	80248e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80244f6:	2800      	cmp	r0, #0
 80244f8:	f2c0 81f2 	blt.w	80248e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80244fc:	f103 3eff 	add.w	lr, r3, #4294967295
 8024500:	4570      	cmp	r0, lr
 8024502:	f280 81ed 	bge.w	80248e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8024506:	b212      	sxth	r2, r2
 8024508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802450a:	fa1f fe81 	uxth.w	lr, r1
 802450e:	fb00 5002 	mla	r0, r0, r2, r5
 8024512:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024516:	eb03 0a00 	add.w	sl, r3, r0
 802451a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802451e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8024522:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024526:	b29b      	uxth	r3, r3
 8024528:	f1bc 0f00 	cmp.w	ip, #0
 802452c:	f000 81bb 	beq.w	80248a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8024530:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024534:	eb0a 0b02 	add.w	fp, sl, r2
 8024538:	fa1f fa8c 	uxth.w	sl, ip
 802453c:	940d      	str	r4, [sp, #52]	; 0x34
 802453e:	fb0a fe0e 	mul.w	lr, sl, lr
 8024542:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024546:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802454a:	eba5 050e 	sub.w	r5, r5, lr
 802454e:	940e      	str	r4, [sp, #56]	; 0x38
 8024550:	fa1f fa8a 	uxth.w	sl, sl
 8024554:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024556:	b2ad      	uxth	r5, r5
 8024558:	eba3 030a 	sub.w	r3, r3, sl
 802455c:	fb08 f505 	mul.w	r5, r8, r5
 8024560:	b29b      	uxth	r3, r3
 8024562:	fb09 5303 	mla	r3, r9, r3, r5
 8024566:	fb0a 3304 	mla	r3, sl, r4, r3
 802456a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802456c:	fb0e 3304 	mla	r3, lr, r4, r3
 8024570:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024574:	2b00      	cmp	r3, #0
 8024576:	f000 8111 	beq.w	802479c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802457a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802457c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024580:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8024584:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024588:	f000 8192 	beq.w	80248b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 802458c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024590:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024594:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024598:	fb0a fe0e 	mul.w	lr, sl, lr
 802459c:	fb09 f000 	mul.w	r0, r9, r0
 80245a0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80245a4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80245a8:	f100 0b20 	add.w	fp, r0, #32
 80245ac:	44ce      	add	lr, r9
 80245ae:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80245b2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80245b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80245ba:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80245be:	ea4e 0909 	orr.w	r9, lr, r9
 80245c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80245c6:	8868      	ldrh	r0, [r5, #2]
 80245c8:	d019      	beq.n	80245fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80245ca:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80245ce:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80245d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80245d6:	fb0a fe0e 	mul.w	lr, sl, lr
 80245da:	fb08 f800 	mul.w	r8, r8, r0
 80245de:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80245e2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80245e6:	f108 0b20 	add.w	fp, r8, #32
 80245ea:	4486      	add	lr, r0
 80245ec:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80245f0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80245f4:	0a00      	lsrs	r0, r0, #8
 80245f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80245fa:	ea4e 0000 	orr.w	r0, lr, r0
 80245fe:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024602:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024606:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802460a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802460e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024612:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024616:	ea4e 0909 	orr.w	r9, lr, r9
 802461a:	ea4a 0000 	orr.w	r0, sl, r0
 802461e:	f1bc 0f00 	cmp.w	ip, #0
 8024622:	f000 8147 	beq.w	80248b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8024626:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802462a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802462c:	3a01      	subs	r2, #1
 802462e:	2cff      	cmp	r4, #255	; 0xff
 8024630:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024634:	f102 0202 	add.w	r2, r2, #2
 8024638:	eb05 0e02 	add.w	lr, r5, r2
 802463c:	5aaa      	ldrh	r2, [r5, r2]
 802463e:	d018      	beq.n	8024672 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8024640:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8024644:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024648:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802464c:	fb04 fa02 	mul.w	sl, r4, r2
 8024650:	fb08 f805 	mul.w	r8, r8, r5
 8024654:	f10a 0520 	add.w	r5, sl, #32
 8024658:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802465c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024660:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8024664:	4442      	add	r2, r8
 8024666:	0a2d      	lsrs	r5, r5, #8
 8024668:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 802466c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024670:	432a      	orrs	r2, r5
 8024672:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024674:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024678:	2cff      	cmp	r4, #255	; 0xff
 802467a:	d01a      	beq.n	80246b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 802467c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8024680:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024684:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024688:	fb04 fa05 	mul.w	sl, r4, r5
 802468c:	fb08 f80e 	mul.w	r8, r8, lr
 8024690:	f10a 0e20 	add.w	lr, sl, #32
 8024694:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8024698:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802469c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80246a0:	4445      	add	r5, r8
 80246a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246a6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80246aa:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80246ae:	ea45 050e 	orr.w	r5, r5, lr
 80246b2:	fb1c fe01 	smulbb	lr, ip, r1
 80246b6:	f1cc 0810 	rsb	r8, ip, #16
 80246ba:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80246be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80246c2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80246c6:	eba8 0801 	sub.w	r8, r8, r1
 80246ca:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80246ce:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80246d2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80246d6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80246da:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80246de:	ea4a 0202 	orr.w	r2, sl, r2
 80246e2:	4341      	muls	r1, r0
 80246e4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80246e8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80246ec:	fb09 1108 	mla	r1, r9, r8, r1
 80246f0:	ea4b 0505 	orr.w	r5, fp, r5
 80246f4:	fb0c 1102 	mla	r1, ip, r2, r1
 80246f8:	fb0e 1e05 	mla	lr, lr, r5, r1
 80246fc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024700:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024704:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024708:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802470c:	ea42 0e0e 	orr.w	lr, r2, lr
 8024710:	fa1f f28e 	uxth.w	r2, lr
 8024714:	2bff      	cmp	r3, #255	; 0xff
 8024716:	d103      	bne.n	8024720 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8024718:	9912      	ldr	r1, [sp, #72]	; 0x48
 802471a:	29ff      	cmp	r1, #255	; 0xff
 802471c:	f000 80de 	beq.w	80248dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8024720:	990a      	ldr	r1, [sp, #40]	; 0x28
 8024722:	1215      	asrs	r5, r2, #8
 8024724:	8838      	ldrh	r0, [r7, #0]
 8024726:	434b      	muls	r3, r1
 8024728:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802472c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802472e:	f103 0c01 	add.w	ip, r3, #1
 8024732:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8024736:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802473a:	fa5f fc83 	uxtb.w	ip, r3
 802473e:	1203      	asrs	r3, r0, #8
 8024740:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024744:	fb13 f30c 	smulbb	r3, r3, ip
 8024748:	fb05 3501 	mla	r5, r5, r1, r3
 802474c:	10c3      	asrs	r3, r0, #3
 802474e:	10d1      	asrs	r1, r2, #3
 8024750:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024754:	00d2      	lsls	r2, r2, #3
 8024756:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802475a:	b2ad      	uxth	r5, r5
 802475c:	fb13 f30c 	smulbb	r3, r3, ip
 8024760:	b2d2      	uxtb	r2, r2
 8024762:	fb01 3104 	mla	r1, r1, r4, r3
 8024766:	00c3      	lsls	r3, r0, #3
 8024768:	b2db      	uxtb	r3, r3
 802476a:	b289      	uxth	r1, r1
 802476c:	fb13 f30c 	smulbb	r3, r3, ip
 8024770:	fb02 3304 	mla	r3, r2, r4, r3
 8024774:	b29a      	uxth	r2, r3
 8024776:	1c6b      	adds	r3, r5, #1
 8024778:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802477c:	1c53      	adds	r3, r2, #1
 802477e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024782:	1c4a      	adds	r2, r1, #1
 8024784:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024788:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802478c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024790:	0949      	lsrs	r1, r1, #5
 8024792:	432b      	orrs	r3, r5
 8024794:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024798:	430b      	orrs	r3, r1
 802479a:	803b      	strh	r3, [r7, #0]
 802479c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802479e:	3702      	adds	r7, #2
 80247a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80247a2:	4413      	add	r3, r2
 80247a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80247a6:	9321      	str	r3, [sp, #132]	; 0x84
 80247a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247aa:	441a      	add	r2, r3
 80247ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80247ae:	3b01      	subs	r3, #1
 80247b0:	9222      	str	r2, [sp, #136]	; 0x88
 80247b2:	9313      	str	r3, [sp, #76]	; 0x4c
 80247b4:	e687      	b.n	80244c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80247b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80247b8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80247ba:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80247bc:	4433      	add	r3, r6
 80247be:	9321      	str	r3, [sp, #132]	; 0x84
 80247c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80247c2:	441c      	add	r4, r3
 80247c4:	9b08      	ldr	r3, [sp, #32]
 80247c6:	3b01      	subs	r3, #1
 80247c8:	9422      	str	r4, [sp, #136]	; 0x88
 80247ca:	9308      	str	r3, [sp, #32]
 80247cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247ce:	3302      	adds	r3, #2
 80247d0:	9309      	str	r3, [sp, #36]	; 0x24
 80247d2:	e656      	b.n	8024482 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80247d4:	d028      	beq.n	8024828 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80247d6:	9b08      	ldr	r3, [sp, #32]
 80247d8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80247da:	3b01      	subs	r3, #1
 80247dc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80247de:	fb00 5003 	mla	r0, r0, r3, r5
 80247e2:	1400      	asrs	r0, r0, #16
 80247e4:	f53f ae6a 	bmi.w	80244bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80247e8:	3901      	subs	r1, #1
 80247ea:	4288      	cmp	r0, r1
 80247ec:	f6bf ae66 	bge.w	80244bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80247f0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80247f2:	9822      	ldr	r0, [sp, #136]	; 0x88
 80247f4:	fb01 0303 	mla	r3, r1, r3, r0
 80247f8:	141b      	asrs	r3, r3, #16
 80247fa:	f53f ae5f 	bmi.w	80244bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80247fe:	3a01      	subs	r2, #1
 8024800:	4293      	cmp	r3, r2
 8024802:	f6bf ae5b 	bge.w	80244bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024806:	9b08      	ldr	r3, [sp, #32]
 8024808:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802480c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8024810:	9313      	str	r3, [sp, #76]	; 0x4c
 8024812:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024814:	2b00      	cmp	r3, #0
 8024816:	f300 8082 	bgt.w	802491e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802481a:	9b08      	ldr	r3, [sp, #32]
 802481c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024822:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024826:	9309      	str	r3, [sp, #36]	; 0x24
 8024828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802482a:	2b00      	cmp	r3, #0
 802482c:	f340 81ef 	ble.w	8024c0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8024830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024834:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024836:	ee30 0a04 	vadd.f32	s0, s0, s8
 802483a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802483e:	eef0 6a62 	vmov.f32	s13, s5
 8024842:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024846:	ee31 1a05 	vadd.f32	s2, s2, s10
 802484a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802484e:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8024852:	eef0 6a43 	vmov.f32	s13, s6
 8024856:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802485a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802485e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024862:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024866:	ee77 2a62 	vsub.f32	s5, s14, s5
 802486a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802486e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024872:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024876:	ee12 2a90 	vmov	r2, s5
 802487a:	eef0 2a47 	vmov.f32	s5, s14
 802487e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024882:	ee13 2a10 	vmov	r2, s6
 8024886:	9323      	str	r3, [sp, #140]	; 0x8c
 8024888:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802488a:	eeb0 3a67 	vmov.f32	s6, s15
 802488e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024892:	9324      	str	r3, [sp, #144]	; 0x90
 8024894:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024896:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024898:	3b01      	subs	r3, #1
 802489a:	9311      	str	r3, [sp, #68]	; 0x44
 802489c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802489e:	bf08      	it	eq
 80248a0:	4613      	moveq	r3, r2
 80248a2:	9308      	str	r3, [sp, #32]
 80248a4:	e5df      	b.n	8024466 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80248a6:	fb08 f505 	mul.w	r5, r8, r5
 80248aa:	fb09 5303 	mla	r3, r9, r3, r5
 80248ae:	e65f      	b.n	8024570 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80248b0:	4681      	mov	r9, r0
 80248b2:	e686      	b.n	80245c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80248b4:	f1c1 0210 	rsb	r2, r1, #16
 80248b8:	4341      	muls	r1, r0
 80248ba:	fb09 1902 	mla	r9, r9, r2, r1
 80248be:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80248c2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80248c6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80248ca:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80248ce:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80248d2:	ea42 0909 	orr.w	r9, r2, r9
 80248d6:	fa1f f289 	uxth.w	r2, r9
 80248da:	e71b      	b.n	8024714 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80248dc:	803a      	strh	r2, [r7, #0]
 80248de:	e75d      	b.n	802479c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80248e0:	f115 0e01 	adds.w	lr, r5, #1
 80248e4:	f53f af5a 	bmi.w	802479c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80248e8:	4572      	cmp	r2, lr
 80248ea:	f6ff af57 	blt.w	802479c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80248ee:	f110 0e01 	adds.w	lr, r0, #1
 80248f2:	f53f af53 	bmi.w	802479c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80248f6:	4573      	cmp	r3, lr
 80248f8:	f6ff af50 	blt.w	802479c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80248fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80248fe:	b21b      	sxth	r3, r3
 8024900:	b212      	sxth	r2, r2
 8024902:	9502      	str	r5, [sp, #8]
 8024904:	9301      	str	r3, [sp, #4]
 8024906:	9200      	str	r2, [sp, #0]
 8024908:	e9cd 0103 	strd	r0, r1, [sp, #12]
 802490c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8024910:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8024914:	4639      	mov	r1, r7
 8024916:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024918:	f7ff fc02 	bl	8024120 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 802491c:	e73e      	b.n	802479c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802491e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024920:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024926:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802492a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802492c:	fa1f fc82 	uxth.w	ip, r2
 8024930:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024936:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802493a:	141f      	asrs	r7, r3, #16
 802493c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802493e:	141b      	asrs	r3, r3, #16
 8024940:	fb01 3707 	mla	r7, r1, r7, r3
 8024944:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024946:	eb03 0a07 	add.w	sl, r3, r7
 802494a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802494e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8024952:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024956:	b29b      	uxth	r3, r3
 8024958:	2d00      	cmp	r5, #0
 802495a:	f000 813d 	beq.w	8024bd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 802495e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8024962:	eb0a 0b01 	add.w	fp, sl, r1
 8024966:	fa1f fa85 	uxth.w	sl, r5
 802496a:	940f      	str	r4, [sp, #60]	; 0x3c
 802496c:	fb0a fc0c 	mul.w	ip, sl, ip
 8024970:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024974:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8024978:	eba0 000c 	sub.w	r0, r0, ip
 802497c:	9410      	str	r4, [sp, #64]	; 0x40
 802497e:	fa1f fa8a 	uxth.w	sl, sl
 8024982:	b280      	uxth	r0, r0
 8024984:	eba3 030a 	sub.w	r3, r3, sl
 8024988:	fb08 f000 	mul.w	r0, r8, r0
 802498c:	b29b      	uxth	r3, r3
 802498e:	fb09 0303 	mla	r3, r9, r3, r0
 8024992:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024994:	fb0a 3300 	mla	r3, sl, r0, r3
 8024998:	fb0c 3304 	mla	r3, ip, r4, r3
 802499c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80249a0:	2b00      	cmp	r3, #0
 80249a2:	f000 810b 	beq.w	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 80249a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80249a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80249ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80249ae:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80249b2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80249b6:	f000 8114 	beq.w	8024be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 80249ba:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80249be:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80249c2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80249c6:	fb0a fc0c 	mul.w	ip, sl, ip
 80249ca:	fb09 f707 	mul.w	r7, r9, r7
 80249ce:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80249d2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80249d6:	f107 0b20 	add.w	fp, r7, #32
 80249da:	44cc      	add	ip, r9
 80249dc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80249e0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80249e4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80249e8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80249ec:	ea4c 0909 	orr.w	r9, ip, r9
 80249f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80249f4:	8847      	ldrh	r7, [r0, #2]
 80249f6:	d019      	beq.n	8024a2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 80249f8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80249fc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024a00:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024a04:	fb0a fc0c 	mul.w	ip, sl, ip
 8024a08:	fb08 f807 	mul.w	r8, r8, r7
 8024a0c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8024a10:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8024a14:	f108 0b20 	add.w	fp, r8, #32
 8024a18:	44bc      	add	ip, r7
 8024a1a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8024a1e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8024a22:	0a3f      	lsrs	r7, r7, #8
 8024a24:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024a28:	ea4c 0707 	orr.w	r7, ip, r7
 8024a2c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8024a30:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024a34:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8024a38:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8024a3c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024a40:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024a44:	ea4c 0909 	orr.w	r9, ip, r9
 8024a48:	ea4a 0707 	orr.w	r7, sl, r7
 8024a4c:	2d00      	cmp	r5, #0
 8024a4e:	f000 80ca 	beq.w	8024be6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8024a52:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8024a56:	3901      	subs	r1, #1
 8024a58:	0049      	lsls	r1, r1, #1
 8024a5a:	3102      	adds	r1, #2
 8024a5c:	eb00 0c01 	add.w	ip, r0, r1
 8024a60:	5a41      	ldrh	r1, [r0, r1]
 8024a62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8024a64:	28ff      	cmp	r0, #255	; 0xff
 8024a66:	d019      	beq.n	8024a9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8024a68:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8024a6c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024a6e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024a72:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024a76:	fb04 fa01 	mul.w	sl, r4, r1
 8024a7a:	fb08 f800 	mul.w	r8, r8, r0
 8024a7e:	f10a 0020 	add.w	r0, sl, #32
 8024a82:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8024a86:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024a8a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024a8e:	4441      	add	r1, r8
 8024a90:	0a00      	lsrs	r0, r0, #8
 8024a92:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8024a96:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024a9a:	4301      	orrs	r1, r0
 8024a9c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024a9e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8024aa2:	2cff      	cmp	r4, #255	; 0xff
 8024aa4:	d01a      	beq.n	8024adc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8024aa6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8024aaa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024aae:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024ab2:	fb04 fa00 	mul.w	sl, r4, r0
 8024ab6:	fb08 f80c 	mul.w	r8, r8, ip
 8024aba:	f10a 0c20 	add.w	ip, sl, #32
 8024abe:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8024ac2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024ac6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8024aca:	4440      	add	r0, r8
 8024acc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ad0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8024ad4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024ad8:	ea40 000c 	orr.w	r0, r0, ip
 8024adc:	fb15 fc02 	smulbb	ip, r5, r2
 8024ae0:	f1c5 0810 	rsb	r8, r5, #16
 8024ae4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8024ae8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8024aec:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8024af0:	eba8 0802 	sub.w	r8, r8, r2
 8024af4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024af8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024afc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8024b00:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024b04:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8024b08:	ea4a 0101 	orr.w	r1, sl, r1
 8024b0c:	437a      	muls	r2, r7
 8024b0e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8024b12:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024b16:	fb09 2208 	mla	r2, r9, r8, r2
 8024b1a:	ea4b 0000 	orr.w	r0, fp, r0
 8024b1e:	fb05 2201 	mla	r2, r5, r1, r2
 8024b22:	fb0c 2200 	mla	r2, ip, r0, r2
 8024b26:	0d57      	lsrs	r7, r2, #21
 8024b28:	0952      	lsrs	r2, r2, #5
 8024b2a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024b2e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024b32:	433a      	orrs	r2, r7
 8024b34:	2bff      	cmp	r3, #255	; 0xff
 8024b36:	b292      	uxth	r2, r2
 8024b38:	d102      	bne.n	8024b40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8024b3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024b3c:	29ff      	cmp	r1, #255	; 0xff
 8024b3e:	d063      	beq.n	8024c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8024b40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8024b42:	1215      	asrs	r5, r2, #8
 8024b44:	f8be 1000 	ldrh.w	r1, [lr]
 8024b48:	4343      	muls	r3, r0
 8024b4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024b4c:	10cf      	asrs	r7, r1, #3
 8024b4e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024b52:	1c58      	adds	r0, r3, #1
 8024b54:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024b58:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8024b5c:	1208      	asrs	r0, r1, #8
 8024b5e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8024b62:	00c9      	lsls	r1, r1, #3
 8024b64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024b68:	b2db      	uxtb	r3, r3
 8024b6a:	b2c9      	uxtb	r1, r1
 8024b6c:	fb10 f003 	smulbb	r0, r0, r3
 8024b70:	fb11 f103 	smulbb	r1, r1, r3
 8024b74:	fb05 0504 	mla	r5, r5, r4, r0
 8024b78:	10d0      	asrs	r0, r2, #3
 8024b7a:	fb17 f703 	smulbb	r7, r7, r3
 8024b7e:	00d2      	lsls	r2, r2, #3
 8024b80:	b2ad      	uxth	r5, r5
 8024b82:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024b86:	b2d2      	uxtb	r2, r2
 8024b88:	fb00 7004 	mla	r0, r0, r4, r7
 8024b8c:	1c6b      	adds	r3, r5, #1
 8024b8e:	fb02 1204 	mla	r2, r2, r4, r1
 8024b92:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024b96:	b292      	uxth	r2, r2
 8024b98:	b280      	uxth	r0, r0
 8024b9a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024b9e:	1c57      	adds	r7, r2, #1
 8024ba0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024ba4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024ba8:	433d      	orrs	r5, r7
 8024baa:	1c47      	adds	r7, r0, #1
 8024bac:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8024bb0:	097f      	lsrs	r7, r7, #5
 8024bb2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8024bb6:	433d      	orrs	r5, r7
 8024bb8:	f8ae 5000 	strh.w	r5, [lr]
 8024bbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024bbe:	f10e 0e02 	add.w	lr, lr, #2
 8024bc2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024bc4:	4413      	add	r3, r2
 8024bc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024bc8:	9321      	str	r3, [sp, #132]	; 0x84
 8024bca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024bcc:	441a      	add	r2, r3
 8024bce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024bd0:	3b01      	subs	r3, #1
 8024bd2:	9222      	str	r2, [sp, #136]	; 0x88
 8024bd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8024bd6:	e61c      	b.n	8024812 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8024bd8:	fb08 f000 	mul.w	r0, r8, r0
 8024bdc:	fb09 0303 	mla	r3, r9, r3, r0
 8024be0:	e6dc      	b.n	802499c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8024be2:	46b9      	mov	r9, r7
 8024be4:	e704      	b.n	80249f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8024be6:	f1c2 0110 	rsb	r1, r2, #16
 8024bea:	437a      	muls	r2, r7
 8024bec:	fb09 2901 	mla	r9, r9, r1, r2
 8024bf0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024bf4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8024bf8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8024bfc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024c00:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024c04:	4302      	orrs	r2, r0
 8024c06:	e795      	b.n	8024b34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8024c08:	f8ae 2000 	strh.w	r2, [lr]
 8024c0c:	e7d6      	b.n	8024bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8024c0e:	b017      	add	sp, #92	; 0x5c
 8024c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024c14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8024c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c18:	b085      	sub	sp, #20
 8024c1a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8024c1e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8024c22:	2800      	cmp	r0, #0
 8024c24:	9103      	str	r1, [sp, #12]
 8024c26:	fb00 7406 	mla	r4, r0, r6, r7
 8024c2a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8024c2e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8024c32:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8024c36:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8024c3a:	eb02 0904 	add.w	r9, r2, r4
 8024c3e:	9501      	str	r5, [sp, #4]
 8024c40:	f2c0 8141 	blt.w	8024ec6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8024c44:	4583      	cmp	fp, r0
 8024c46:	f340 813e 	ble.w	8024ec6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8024c4a:	2f00      	cmp	r7, #0
 8024c4c:	f2c0 8137 	blt.w	8024ebe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8024c50:	42be      	cmp	r6, r7
 8024c52:	f340 8134 	ble.w	8024ebe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8024c56:	f812 c004 	ldrb.w	ip, [r2, r4]
 8024c5a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8024c5e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8024c62:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024c66:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8024c6a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c6e:	4355      	muls	r5, r2
 8024c70:	fb0c f203 	mul.w	r2, ip, r3
 8024c74:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8024c78:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8024c7c:	441d      	add	r5, r3
 8024c7e:	f102 0320 	add.w	r3, r2, #32
 8024c82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024c86:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8024c8a:	0a1b      	lsrs	r3, r3, #8
 8024c8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024c90:	431c      	orrs	r4, r3
 8024c92:	1c7b      	adds	r3, r7, #1
 8024c94:	f100 811c 	bmi.w	8024ed0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8024c98:	429e      	cmp	r6, r3
 8024c9a:	f340 8119 	ble.w	8024ed0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8024c9e:	2900      	cmp	r1, #0
 8024ca0:	f000 8119 	beq.w	8024ed6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8024ca4:	9a01      	ldr	r2, [sp, #4]
 8024ca6:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024caa:	8855      	ldrh	r5, [r2, #2]
 8024cac:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8024cb0:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8024cb4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024cb8:	fb08 f802 	mul.w	r8, r8, r2
 8024cbc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8024cc0:	435d      	muls	r5, r3
 8024cc2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8024cc6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024cca:	44d0      	add	r8, sl
 8024ccc:	f105 0a20 	add.w	sl, r5, #32
 8024cd0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8024cd4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8024cd8:	0a2d      	lsrs	r5, r5, #8
 8024cda:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024cde:	432a      	orrs	r2, r5
 8024ce0:	3001      	adds	r0, #1
 8024ce2:	f100 80fe 	bmi.w	8024ee2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8024ce6:	4583      	cmp	fp, r0
 8024ce8:	f340 80fb 	ble.w	8024ee2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8024cec:	f1be 0f00 	cmp.w	lr, #0
 8024cf0:	f000 80fc 	beq.w	8024eec <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8024cf4:	2f00      	cmp	r7, #0
 8024cf6:	f2c0 80f1 	blt.w	8024edc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8024cfa:	42be      	cmp	r6, r7
 8024cfc:	f340 80ee 	ble.w	8024edc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8024d00:	9801      	ldr	r0, [sp, #4]
 8024d02:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024d06:	f819 5006 	ldrb.w	r5, [r9, r6]
 8024d0a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8024d0e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8024d12:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8024d16:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8024d1a:	fb0a fa00 	mul.w	sl, sl, r0
 8024d1e:	fb05 f808 	mul.w	r8, r5, r8
 8024d22:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8024d26:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8024d2a:	4482      	add	sl, r0
 8024d2c:	f108 0020 	add.w	r0, r8, #32
 8024d30:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024d34:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8024d38:	0a00      	lsrs	r0, r0, #8
 8024d3a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d3e:	ea4b 0b00 	orr.w	fp, fp, r0
 8024d42:	3701      	adds	r7, #1
 8024d44:	f100 80d7 	bmi.w	8024ef6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8024d48:	42be      	cmp	r6, r7
 8024d4a:	f340 80d4 	ble.w	8024ef6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8024d4e:	2900      	cmp	r1, #0
 8024d50:	f000 80d4 	beq.w	8024efc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8024d54:	3601      	adds	r6, #1
 8024d56:	9801      	ldr	r0, [sp, #4]
 8024d58:	f819 7006 	ldrb.w	r7, [r9, r6]
 8024d5c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8024d60:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024d64:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8024d68:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d6c:	fb09 f906 	mul.w	r9, r9, r6
 8024d70:	fb07 f800 	mul.w	r8, r7, r0
 8024d74:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8024d78:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8024d7c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8024d80:	44d1      	add	r9, sl
 8024d82:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8024d86:	f108 0020 	add.w	r0, r8, #32
 8024d8a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024d8e:	0a00      	lsrs	r0, r0, #8
 8024d90:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024d94:	4330      	orrs	r0, r6
 8024d96:	b28e      	uxth	r6, r1
 8024d98:	fa1f f98e 	uxth.w	r9, lr
 8024d9c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8024da0:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024da4:	fb06 f809 	mul.w	r8, r6, r9
 8024da8:	0136      	lsls	r6, r6, #4
 8024daa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024dae:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8024db2:	9601      	str	r6, [sp, #4]
 8024db4:	ea4a 0404 	orr.w	r4, sl, r4
 8024db8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024dbc:	fa1f f689 	uxth.w	r6, r9
 8024dc0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024dc4:	fb11 f90e 	smulbb	r9, r1, lr
 8024dc8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024dcc:	9602      	str	r6, [sp, #8]
 8024dce:	4626      	mov	r6, r4
 8024dd0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8024dd4:	f1ce 0410 	rsb	r4, lr, #16
 8024dd8:	ea4a 0202 	orr.w	r2, sl, r2
 8024ddc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024de0:	1a64      	subs	r4, r4, r1
 8024de2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8024de6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024dea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024dee:	434a      	muls	r2, r1
 8024df0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8024df4:	ea4a 0000 	orr.w	r0, sl, r0
 8024df8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8024dfc:	fb04 2406 	mla	r4, r4, r6, r2
 8024e00:	9903      	ldr	r1, [sp, #12]
 8024e02:	fb09 4200 	mla	r2, r9, r0, r4
 8024e06:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8024e0a:	9801      	ldr	r0, [sp, #4]
 8024e0c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8024e10:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8024e14:	8809      	ldrh	r1, [r1, #0]
 8024e16:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8024e1a:	ea44 0b0b 	orr.w	fp, r4, fp
 8024e1e:	9c02      	ldr	r4, [sp, #8]
 8024e20:	1b00      	subs	r0, r0, r4
 8024e22:	9c01      	ldr	r4, [sp, #4]
 8024e24:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8024e28:	eba4 0608 	sub.w	r6, r4, r8
 8024e2c:	b280      	uxth	r0, r0
 8024e2e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8024e32:	b2b6      	uxth	r6, r6
 8024e34:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024e38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024e3c:	4373      	muls	r3, r6
 8024e3e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024e42:	fb0c 3300 	mla	r3, ip, r0, r3
 8024e46:	9802      	ldr	r0, [sp, #8]
 8024e48:	ea42 0e0e 	orr.w	lr, r2, lr
 8024e4c:	fb00 3505 	mla	r5, r0, r5, r3
 8024e50:	120b      	asrs	r3, r1, #8
 8024e52:	10c8      	asrs	r0, r1, #3
 8024e54:	fb08 5707 	mla	r7, r8, r7, r5
 8024e58:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8024e5c:	00c9      	lsls	r1, r1, #3
 8024e5e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024e62:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8024e66:	fa1f f28e 	uxth.w	r2, lr
 8024e6a:	b2c9      	uxtb	r1, r1
 8024e6c:	b2ff      	uxtb	r7, r7
 8024e6e:	437b      	muls	r3, r7
 8024e70:	4378      	muls	r0, r7
 8024e72:	434f      	muls	r7, r1
 8024e74:	1c59      	adds	r1, r3, #1
 8024e76:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024e7a:	1213      	asrs	r3, r2, #8
 8024e7c:	f023 0307 	bic.w	r3, r3, #7
 8024e80:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8024e84:	1c41      	adds	r1, r0, #1
 8024e86:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8024e8a:	10d1      	asrs	r1, r2, #3
 8024e8c:	021b      	lsls	r3, r3, #8
 8024e8e:	f021 0103 	bic.w	r1, r1, #3
 8024e92:	00d2      	lsls	r2, r2, #3
 8024e94:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8024e98:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024e9c:	00c9      	lsls	r1, r1, #3
 8024e9e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024ea2:	430b      	orrs	r3, r1
 8024ea4:	1c79      	adds	r1, r7, #1
 8024ea6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8024eaa:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024eae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024eb2:	431a      	orrs	r2, r3
 8024eb4:	9b03      	ldr	r3, [sp, #12]
 8024eb6:	801a      	strh	r2, [r3, #0]
 8024eb8:	b005      	add	sp, #20
 8024eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ebe:	f04f 0c00 	mov.w	ip, #0
 8024ec2:	4664      	mov	r4, ip
 8024ec4:	e6e5      	b.n	8024c92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8024ec6:	2300      	movs	r3, #0
 8024ec8:	469c      	mov	ip, r3
 8024eca:	461a      	mov	r2, r3
 8024ecc:	461c      	mov	r4, r3
 8024ece:	e707      	b.n	8024ce0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8024ed0:	2300      	movs	r3, #0
 8024ed2:	461a      	mov	r2, r3
 8024ed4:	e704      	b.n	8024ce0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8024ed6:	460b      	mov	r3, r1
 8024ed8:	460a      	mov	r2, r1
 8024eda:	e701      	b.n	8024ce0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8024edc:	2500      	movs	r5, #0
 8024ede:	46ab      	mov	fp, r5
 8024ee0:	e72f      	b.n	8024d42 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8024ee2:	2700      	movs	r7, #0
 8024ee4:	463d      	mov	r5, r7
 8024ee6:	4638      	mov	r0, r7
 8024ee8:	46bb      	mov	fp, r7
 8024eea:	e754      	b.n	8024d96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8024eec:	4677      	mov	r7, lr
 8024eee:	4675      	mov	r5, lr
 8024ef0:	4670      	mov	r0, lr
 8024ef2:	46f3      	mov	fp, lr
 8024ef4:	e74f      	b.n	8024d96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8024ef6:	2700      	movs	r7, #0
 8024ef8:	4638      	mov	r0, r7
 8024efa:	e74c      	b.n	8024d96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8024efc:	460f      	mov	r7, r1
 8024efe:	4608      	mov	r0, r1
 8024f00:	e749      	b.n	8024d96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08024f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f08:	b093      	sub	sp, #76	; 0x4c
 8024f0a:	9210      	str	r2, [sp, #64]	; 0x40
 8024f0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024f0e:	9011      	str	r0, [sp, #68]	; 0x44
 8024f10:	910e      	str	r1, [sp, #56]	; 0x38
 8024f12:	6850      	ldr	r0, [r2, #4]
 8024f14:	9306      	str	r3, [sp, #24]
 8024f16:	6812      	ldr	r2, [r2, #0]
 8024f18:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8024f1c:	fb00 1303 	mla	r3, r0, r3, r1
 8024f20:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024f24:	9307      	str	r3, [sp, #28]
 8024f26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f28:	681b      	ldr	r3, [r3, #0]
 8024f2a:	9308      	str	r3, [sp, #32]
 8024f2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f2e:	685b      	ldr	r3, [r3, #4]
 8024f30:	9309      	str	r3, [sp, #36]	; 0x24
 8024f32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024f34:	2b00      	cmp	r3, #0
 8024f36:	dc03      	bgt.n	8024f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024f38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024f3a:	2b00      	cmp	r3, #0
 8024f3c:	f340 83b6 	ble.w	80256ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8024f40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024f42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024f46:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024f4a:	1e48      	subs	r0, r1, #1
 8024f4c:	1e55      	subs	r5, r2, #1
 8024f4e:	9b06      	ldr	r3, [sp, #24]
 8024f50:	2b00      	cmp	r3, #0
 8024f52:	f340 8165 	ble.w	8025220 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8024f56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8024f58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024f5a:	1436      	asrs	r6, r6, #16
 8024f5c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024f60:	d406      	bmi.n	8024f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024f62:	4286      	cmp	r6, r0
 8024f64:	da04      	bge.n	8024f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024f66:	2b00      	cmp	r3, #0
 8024f68:	db02      	blt.n	8024f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024f6a:	42ab      	cmp	r3, r5
 8024f6c:	f2c0 8159 	blt.w	8025222 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8024f70:	3601      	adds	r6, #1
 8024f72:	f100 8146 	bmi.w	8025202 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024f76:	42b1      	cmp	r1, r6
 8024f78:	f2c0 8143 	blt.w	8025202 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024f7c:	3301      	adds	r3, #1
 8024f7e:	f100 8140 	bmi.w	8025202 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024f82:	429a      	cmp	r2, r3
 8024f84:	f2c0 813d 	blt.w	8025202 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8024f88:	9b06      	ldr	r3, [sp, #24]
 8024f8a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024f8e:	9f07      	ldr	r7, [sp, #28]
 8024f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8024f92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024f94:	2b00      	cmp	r3, #0
 8024f96:	f340 8166 	ble.w	8025266 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024f9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024f9c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8024f9e:	1418      	asrs	r0, r3, #16
 8024fa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024fa2:	142d      	asrs	r5, r5, #16
 8024fa4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024fa8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024faa:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024fae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024fb0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024fb4:	f100 81f0 	bmi.w	8025398 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024fb8:	f102 3eff 	add.w	lr, r2, #4294967295
 8024fbc:	4575      	cmp	r5, lr
 8024fbe:	f280 81eb 	bge.w	8025398 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024fc2:	2800      	cmp	r0, #0
 8024fc4:	f2c0 81e8 	blt.w	8025398 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024fc8:	f103 3eff 	add.w	lr, r3, #4294967295
 8024fcc:	4570      	cmp	r0, lr
 8024fce:	f280 81e3 	bge.w	8025398 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8024fd2:	b212      	sxth	r2, r2
 8024fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024fd6:	fa1f fe81 	uxth.w	lr, r1
 8024fda:	fb00 5002 	mla	r0, r0, r2, r5
 8024fde:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8024fe2:	eb03 0a00 	add.w	sl, r3, r0
 8024fe6:	f813 9000 	ldrb.w	r9, [r3, r0]
 8024fea:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8024fee:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024ff2:	b29b      	uxth	r3, r3
 8024ff4:	f1bc 0f00 	cmp.w	ip, #0
 8024ff8:	f000 817b 	beq.w	80252f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8024ffc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025000:	eb0a 0b02 	add.w	fp, sl, r2
 8025004:	fa1f fa8c 	uxth.w	sl, ip
 8025008:	940a      	str	r4, [sp, #40]	; 0x28
 802500a:	fb0a fe0e 	mul.w	lr, sl, lr
 802500e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025012:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025016:	eba5 050e 	sub.w	r5, r5, lr
 802501a:	940b      	str	r4, [sp, #44]	; 0x2c
 802501c:	fa1f fa8a 	uxth.w	sl, sl
 8025020:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025022:	b2ad      	uxth	r5, r5
 8025024:	eba3 030a 	sub.w	r3, r3, sl
 8025028:	fb08 f505 	mul.w	r5, r8, r5
 802502c:	b29b      	uxth	r3, r3
 802502e:	fb09 5303 	mla	r3, r9, r3, r5
 8025032:	fb0a 3304 	mla	r3, sl, r4, r3
 8025036:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025038:	fb0e 3304 	mla	r3, lr, r4, r3
 802503c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025040:	2b00      	cmp	r3, #0
 8025042:	f000 80d1 	beq.w	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025046:	9c08      	ldr	r4, [sp, #32]
 8025048:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802504c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025050:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025054:	f000 8152 	beq.w	80252fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025058:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802505c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025060:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025064:	fb0a fe0e 	mul.w	lr, sl, lr
 8025068:	fb09 f000 	mul.w	r0, r9, r0
 802506c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025070:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025074:	f100 0b20 	add.w	fp, r0, #32
 8025078:	44ce      	add	lr, r9
 802507a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 802507e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025082:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025086:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802508a:	ea4e 0909 	orr.w	r9, lr, r9
 802508e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025092:	8868      	ldrh	r0, [r5, #2]
 8025094:	d019      	beq.n	80250ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025096:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802509a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802509e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80250a2:	fb0a fe0e 	mul.w	lr, sl, lr
 80250a6:	fb08 f800 	mul.w	r8, r8, r0
 80250aa:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80250ae:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80250b2:	f108 0b20 	add.w	fp, r8, #32
 80250b6:	4486      	add	lr, r0
 80250b8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80250bc:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80250c0:	0a00      	lsrs	r0, r0, #8
 80250c2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80250c6:	ea4e 0000 	orr.w	r0, lr, r0
 80250ca:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80250ce:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80250d2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80250d6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80250da:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80250de:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80250e2:	ea4e 0909 	orr.w	r9, lr, r9
 80250e6:	ea4a 0000 	orr.w	r0, sl, r0
 80250ea:	f1bc 0f00 	cmp.w	ip, #0
 80250ee:	f000 8107 	beq.w	8025300 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80250f2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80250f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80250f8:	3a01      	subs	r2, #1
 80250fa:	2cff      	cmp	r4, #255	; 0xff
 80250fc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025100:	f102 0202 	add.w	r2, r2, #2
 8025104:	eb05 0e02 	add.w	lr, r5, r2
 8025108:	5aaa      	ldrh	r2, [r5, r2]
 802510a:	d018      	beq.n	802513e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 802510c:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025110:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025114:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025118:	fb04 fa02 	mul.w	sl, r4, r2
 802511c:	fb08 f805 	mul.w	r8, r8, r5
 8025120:	f10a 0520 	add.w	r5, sl, #32
 8025124:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025128:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802512c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025130:	4442      	add	r2, r8
 8025132:	0a2d      	lsrs	r5, r5, #8
 8025134:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025138:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802513c:	432a      	orrs	r2, r5
 802513e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025140:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025144:	2cff      	cmp	r4, #255	; 0xff
 8025146:	d01a      	beq.n	802517e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025148:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802514c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025150:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025154:	fb04 fa05 	mul.w	sl, r4, r5
 8025158:	fb08 f80e 	mul.w	r8, r8, lr
 802515c:	f10a 0e20 	add.w	lr, sl, #32
 8025160:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025164:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025168:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802516c:	4445      	add	r5, r8
 802516e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025172:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025176:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802517a:	ea45 050e 	orr.w	r5, r5, lr
 802517e:	fb1c fe01 	smulbb	lr, ip, r1
 8025182:	f1cc 0810 	rsb	r8, ip, #16
 8025186:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802518a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802518e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025192:	eba8 0801 	sub.w	r8, r8, r1
 8025196:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802519a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802519e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80251a2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80251a6:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80251aa:	ea4a 0202 	orr.w	r2, sl, r2
 80251ae:	4341      	muls	r1, r0
 80251b0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80251b4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80251b8:	fb09 1108 	mla	r1, r9, r8, r1
 80251bc:	ea4b 0505 	orr.w	r5, fp, r5
 80251c0:	fb0c 1102 	mla	r1, ip, r2, r1
 80251c4:	fb0e 1e05 	mla	lr, lr, r5, r1
 80251c8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80251cc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80251d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80251d4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80251d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80251dc:	fa1f f28e 	uxth.w	r2, lr
 80251e0:	2bff      	cmp	r3, #255	; 0xff
 80251e2:	f040 80a1 	bne.w	8025328 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80251e6:	803a      	strh	r2, [r7, #0]
 80251e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80251ea:	3702      	adds	r7, #2
 80251ec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80251ee:	4413      	add	r3, r2
 80251f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80251f2:	931d      	str	r3, [sp, #116]	; 0x74
 80251f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80251f6:	441a      	add	r2, r3
 80251f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80251fa:	3b01      	subs	r3, #1
 80251fc:	921e      	str	r2, [sp, #120]	; 0x78
 80251fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8025200:	e6c7      	b.n	8024f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025202:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025204:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8025206:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8025208:	4433      	add	r3, r6
 802520a:	931d      	str	r3, [sp, #116]	; 0x74
 802520c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802520e:	441c      	add	r4, r3
 8025210:	9b06      	ldr	r3, [sp, #24]
 8025212:	3b01      	subs	r3, #1
 8025214:	941e      	str	r4, [sp, #120]	; 0x78
 8025216:	9306      	str	r3, [sp, #24]
 8025218:	9b07      	ldr	r3, [sp, #28]
 802521a:	3302      	adds	r3, #2
 802521c:	9307      	str	r3, [sp, #28]
 802521e:	e696      	b.n	8024f4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025220:	d028      	beq.n	8025274 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025222:	9b06      	ldr	r3, [sp, #24]
 8025224:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025226:	3b01      	subs	r3, #1
 8025228:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802522a:	fb00 5003 	mla	r0, r0, r3, r5
 802522e:	1400      	asrs	r0, r0, #16
 8025230:	f53f aeaa 	bmi.w	8024f88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025234:	3901      	subs	r1, #1
 8025236:	4288      	cmp	r0, r1
 8025238:	f6bf aea6 	bge.w	8024f88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802523c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802523e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025240:	fb01 0303 	mla	r3, r1, r3, r0
 8025244:	141b      	asrs	r3, r3, #16
 8025246:	f53f ae9f 	bmi.w	8024f88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802524a:	3a01      	subs	r2, #1
 802524c:	4293      	cmp	r3, r2
 802524e:	f6bf ae9b 	bge.w	8024f88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025252:	9b06      	ldr	r3, [sp, #24]
 8025254:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025258:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802525c:	930f      	str	r3, [sp, #60]	; 0x3c
 802525e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025260:	2b00      	cmp	r3, #0
 8025262:	f300 80b6 	bgt.w	80253d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8025266:	9b06      	ldr	r3, [sp, #24]
 8025268:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802526c:	9b07      	ldr	r3, [sp, #28]
 802526e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025272:	9307      	str	r3, [sp, #28]
 8025274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025276:	2b00      	cmp	r3, #0
 8025278:	f340 8218 	ble.w	80256ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802527c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025280:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025282:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025286:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802528a:	eef0 6a62 	vmov.f32	s13, s5
 802528e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025292:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025296:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802529a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 802529e:	eef0 6a43 	vmov.f32	s13, s6
 80252a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252a6:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80252aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80252ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80252b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80252b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80252ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80252be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80252c2:	ee12 2a90 	vmov	r2, s5
 80252c6:	eef0 2a47 	vmov.f32	s5, s14
 80252ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80252ce:	ee13 2a10 	vmov	r2, s6
 80252d2:	931f      	str	r3, [sp, #124]	; 0x7c
 80252d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80252d6:	eeb0 3a67 	vmov.f32	s6, s15
 80252da:	fb92 f3f3 	sdiv	r3, r2, r3
 80252de:	9320      	str	r3, [sp, #128]	; 0x80
 80252e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80252e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80252e4:	3b01      	subs	r3, #1
 80252e6:	930e      	str	r3, [sp, #56]	; 0x38
 80252e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80252ea:	bf08      	it	eq
 80252ec:	4613      	moveq	r3, r2
 80252ee:	9306      	str	r3, [sp, #24]
 80252f0:	e61f      	b.n	8024f32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80252f2:	fb08 f505 	mul.w	r5, r8, r5
 80252f6:	fb09 5303 	mla	r3, r9, r3, r5
 80252fa:	e69f      	b.n	802503c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80252fc:	4681      	mov	r9, r0
 80252fe:	e6c6      	b.n	802508e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8025300:	f1c1 0210 	rsb	r2, r1, #16
 8025304:	4341      	muls	r1, r0
 8025306:	fb09 1902 	mla	r9, r9, r2, r1
 802530a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802530e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025312:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025316:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802531a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802531e:	ea42 0909 	orr.w	r9, r2, r9
 8025322:	fa1f f289 	uxth.w	r2, r9
 8025326:	e75b      	b.n	80251e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8025328:	f8b7 c000 	ldrh.w	ip, [r7]
 802532c:	43db      	mvns	r3, r3
 802532e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8025332:	fa5f fe83 	uxtb.w	lr, r3
 8025336:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802533a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802533e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8025342:	fb00 f00e 	mul.w	r0, r0, lr
 8025346:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802534a:	b2db      	uxtb	r3, r3
 802534c:	1c41      	adds	r1, r0, #1
 802534e:	fb05 f50e 	mul.w	r5, r5, lr
 8025352:	fb03 f30e 	mul.w	r3, r3, lr
 8025356:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802535a:	1211      	asrs	r1, r2, #8
 802535c:	f021 0107 	bic.w	r1, r1, #7
 8025360:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8025364:	48d3      	ldr	r0, [pc, #844]	; (80256b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8025366:	b2c9      	uxtb	r1, r1
 8025368:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802536c:	1c69      	adds	r1, r5, #1
 802536e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8025372:	10d1      	asrs	r1, r2, #3
 8025374:	00d2      	lsls	r2, r2, #3
 8025376:	f021 0103 	bic.w	r1, r1, #3
 802537a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802537e:	00c9      	lsls	r1, r1, #3
 8025380:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025384:	4301      	orrs	r1, r0
 8025386:	1c58      	adds	r0, r3, #1
 8025388:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802538c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025390:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025394:	430a      	orrs	r2, r1
 8025396:	e726      	b.n	80251e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025398:	f115 0e01 	adds.w	lr, r5, #1
 802539c:	f53f af24 	bmi.w	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80253a0:	4572      	cmp	r2, lr
 80253a2:	f6ff af21 	blt.w	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80253a6:	f110 0e01 	adds.w	lr, r0, #1
 80253aa:	f53f af1d 	bmi.w	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80253ae:	4573      	cmp	r3, lr
 80253b0:	f6ff af1a 	blt.w	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80253b4:	b21b      	sxth	r3, r3
 80253b6:	b212      	sxth	r2, r2
 80253b8:	9301      	str	r3, [sp, #4]
 80253ba:	9200      	str	r2, [sp, #0]
 80253bc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80253c0:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80253c4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80253c8:	4639      	mov	r1, r7
 80253ca:	9811      	ldr	r0, [sp, #68]	; 0x44
 80253cc:	f7ff fc22 	bl	8024c14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80253d0:	e70a      	b.n	80251e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80253d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80253d4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80253d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80253da:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80253de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80253e0:	fa1f fc82 	uxth.w	ip, r2
 80253e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80253e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80253ea:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80253ee:	141f      	asrs	r7, r3, #16
 80253f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80253f2:	141b      	asrs	r3, r3, #16
 80253f4:	fb01 3707 	mla	r7, r1, r7, r3
 80253f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80253fa:	eb03 0a07 	add.w	sl, r3, r7
 80253fe:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025402:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025406:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802540a:	b29b      	uxth	r3, r3
 802540c:	2d00      	cmp	r5, #0
 802540e:	f000 80fe 	beq.w	802560e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8025412:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025416:	eb0a 0b01 	add.w	fp, sl, r1
 802541a:	fa1f fa85 	uxth.w	sl, r5
 802541e:	940c      	str	r4, [sp, #48]	; 0x30
 8025420:	fb0a fc0c 	mul.w	ip, sl, ip
 8025424:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025428:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802542c:	eba0 000c 	sub.w	r0, r0, ip
 8025430:	940d      	str	r4, [sp, #52]	; 0x34
 8025432:	fa1f fa8a 	uxth.w	sl, sl
 8025436:	b280      	uxth	r0, r0
 8025438:	eba3 030a 	sub.w	r3, r3, sl
 802543c:	fb08 f000 	mul.w	r0, r8, r0
 8025440:	b29b      	uxth	r3, r3
 8025442:	fb09 0303 	mla	r3, r9, r3, r0
 8025446:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025448:	fb0a 3300 	mla	r3, sl, r0, r3
 802544c:	fb0c 3304 	mla	r3, ip, r4, r3
 8025450:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025454:	2b00      	cmp	r3, #0
 8025456:	f000 80cc 	beq.w	80255f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802545a:	9808      	ldr	r0, [sp, #32]
 802545c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025460:	9c08      	ldr	r4, [sp, #32]
 8025462:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025466:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802546a:	f000 80d5 	beq.w	8025618 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802546e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025472:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025476:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802547a:	fb0a fc0c 	mul.w	ip, sl, ip
 802547e:	fb09 f707 	mul.w	r7, r9, r7
 8025482:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025486:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802548a:	f107 0b20 	add.w	fp, r7, #32
 802548e:	44cc      	add	ip, r9
 8025490:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025494:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025498:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802549c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80254a0:	ea4c 0909 	orr.w	r9, ip, r9
 80254a4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80254a8:	8847      	ldrh	r7, [r0, #2]
 80254aa:	d019      	beq.n	80254e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 80254ac:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80254b0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80254b4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80254b8:	fb0a fc0c 	mul.w	ip, sl, ip
 80254bc:	fb08 f807 	mul.w	r8, r8, r7
 80254c0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80254c4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80254c8:	f108 0b20 	add.w	fp, r8, #32
 80254cc:	44bc      	add	ip, r7
 80254ce:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80254d2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80254d6:	0a3f      	lsrs	r7, r7, #8
 80254d8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80254dc:	ea4c 0707 	orr.w	r7, ip, r7
 80254e0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80254e4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80254e8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80254ec:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80254f0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80254f4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80254f8:	ea4c 0909 	orr.w	r9, ip, r9
 80254fc:	ea4a 0707 	orr.w	r7, sl, r7
 8025500:	2d00      	cmp	r5, #0
 8025502:	f000 808b 	beq.w	802561c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8025506:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802550a:	3901      	subs	r1, #1
 802550c:	0049      	lsls	r1, r1, #1
 802550e:	3102      	adds	r1, #2
 8025510:	eb00 0c01 	add.w	ip, r0, r1
 8025514:	5a41      	ldrh	r1, [r0, r1]
 8025516:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025518:	28ff      	cmp	r0, #255	; 0xff
 802551a:	d019      	beq.n	8025550 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 802551c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8025520:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025522:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025526:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802552a:	fb04 fa01 	mul.w	sl, r4, r1
 802552e:	fb08 f800 	mul.w	r8, r8, r0
 8025532:	f10a 0020 	add.w	r0, sl, #32
 8025536:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802553a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802553e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025542:	4441      	add	r1, r8
 8025544:	0a00      	lsrs	r0, r0, #8
 8025546:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802554a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802554e:	4301      	orrs	r1, r0
 8025550:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025552:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025556:	2cff      	cmp	r4, #255	; 0xff
 8025558:	d01a      	beq.n	8025590 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 802555a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802555e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025562:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025566:	fb04 fa00 	mul.w	sl, r4, r0
 802556a:	fb08 f80c 	mul.w	r8, r8, ip
 802556e:	f10a 0c20 	add.w	ip, sl, #32
 8025572:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025576:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802557a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802557e:	4440      	add	r0, r8
 8025580:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025584:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025588:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802558c:	ea40 000c 	orr.w	r0, r0, ip
 8025590:	fb15 fc02 	smulbb	ip, r5, r2
 8025594:	f1c5 0810 	rsb	r8, r5, #16
 8025598:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802559c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80255a0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80255a4:	eba8 0802 	sub.w	r8, r8, r2
 80255a8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80255ac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80255b0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80255b4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80255b8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80255bc:	ea4a 0101 	orr.w	r1, sl, r1
 80255c0:	437a      	muls	r2, r7
 80255c2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80255c6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80255ca:	fb09 2208 	mla	r2, r9, r8, r2
 80255ce:	ea4b 0000 	orr.w	r0, fp, r0
 80255d2:	fb05 2201 	mla	r2, r5, r1, r2
 80255d6:	fb0c 2200 	mla	r2, ip, r0, r2
 80255da:	0d57      	lsrs	r7, r2, #21
 80255dc:	0952      	lsrs	r2, r2, #5
 80255de:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80255e2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80255e6:	433a      	orrs	r2, r7
 80255e8:	2bff      	cmp	r3, #255	; 0xff
 80255ea:	b292      	uxth	r2, r2
 80255ec:	d127      	bne.n	802563e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 80255ee:	f8ae 2000 	strh.w	r2, [lr]
 80255f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80255f4:	f10e 0e02 	add.w	lr, lr, #2
 80255f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80255fa:	4413      	add	r3, r2
 80255fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80255fe:	931d      	str	r3, [sp, #116]	; 0x74
 8025600:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025602:	441a      	add	r2, r3
 8025604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025606:	3b01      	subs	r3, #1
 8025608:	921e      	str	r2, [sp, #120]	; 0x78
 802560a:	930f      	str	r3, [sp, #60]	; 0x3c
 802560c:	e627      	b.n	802525e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802560e:	fb08 f000 	mul.w	r0, r8, r0
 8025612:	fb09 0303 	mla	r3, r9, r3, r0
 8025616:	e71b      	b.n	8025450 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8025618:	46b9      	mov	r9, r7
 802561a:	e743      	b.n	80254a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 802561c:	f1c2 0110 	rsb	r1, r2, #16
 8025620:	437a      	muls	r2, r7
 8025622:	fb09 2901 	mla	r9, r9, r1, r2
 8025626:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802562a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802562e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025632:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025636:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802563a:	4302      	orrs	r2, r0
 802563c:	e7d4      	b.n	80255e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 802563e:	f8be 7000 	ldrh.w	r7, [lr]
 8025642:	43db      	mvns	r3, r3
 8025644:	4c1b      	ldr	r4, [pc, #108]	; (80256b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8025646:	1238      	asrs	r0, r7, #8
 8025648:	fa5f fc83 	uxtb.w	ip, r3
 802564c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025650:	10fd      	asrs	r5, r7, #3
 8025652:	00fb      	lsls	r3, r7, #3
 8025654:	fb00 f00c 	mul.w	r0, r0, ip
 8025658:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802565c:	b2db      	uxtb	r3, r3
 802565e:	fb05 f10c 	mul.w	r1, r5, ip
 8025662:	1c45      	adds	r5, r0, #1
 8025664:	fb03 f30c 	mul.w	r3, r3, ip
 8025668:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802566c:	1215      	asrs	r5, r2, #8
 802566e:	f025 0507 	bic.w	r5, r5, #7
 8025672:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8025676:	1c4d      	adds	r5, r1, #1
 8025678:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802567c:	10d1      	asrs	r1, r2, #3
 802567e:	b2c0      	uxtb	r0, r0
 8025680:	f021 0103 	bic.w	r1, r1, #3
 8025684:	00d2      	lsls	r2, r2, #3
 8025686:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802568a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802568e:	00c9      	lsls	r1, r1, #3
 8025690:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025694:	4308      	orrs	r0, r1
 8025696:	1c59      	adds	r1, r3, #1
 8025698:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802569c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80256a0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80256a4:	4318      	orrs	r0, r3
 80256a6:	f8ae 0000 	strh.w	r0, [lr]
 80256aa:	e7a2      	b.n	80255f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80256ac:	b013      	add	sp, #76	; 0x4c
 80256ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80256b2:	bf00      	nop
 80256b4:	fffff800 	.word	0xfffff800

080256b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80256b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80256bc:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 80256c0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80256c4:	fb05 4c03 	mla	ip, r5, r3, r4
 80256c8:	2d00      	cmp	r5, #0
 80256ca:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80256ce:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80256d2:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80256d6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80256da:	8808      	ldrh	r0, [r1, #0]
 80256dc:	f2c0 80a7 	blt.w	802582e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80256e0:	45aa      	cmp	sl, r5
 80256e2:	f340 80a4 	ble.w	802582e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80256e6:	2c00      	cmp	r4, #0
 80256e8:	f2c0 809f 	blt.w	802582a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80256ec:	42a3      	cmp	r3, r4
 80256ee:	f340 809c 	ble.w	802582a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80256f2:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80256f6:	1c62      	adds	r2, r4, #1
 80256f8:	f100 809c 	bmi.w	8025834 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80256fc:	4293      	cmp	r3, r2
 80256fe:	f340 8099 	ble.w	8025834 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8025702:	f1b9 0f00 	cmp.w	r9, #0
 8025706:	f000 8095 	beq.w	8025834 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802570a:	f8be c002 	ldrh.w	ip, [lr, #2]
 802570e:	3501      	adds	r5, #1
 8025710:	f100 8094 	bmi.w	802583c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8025714:	45aa      	cmp	sl, r5
 8025716:	f340 8091 	ble.w	802583c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802571a:	2f00      	cmp	r7, #0
 802571c:	f000 808e 	beq.w	802583c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8025720:	2c00      	cmp	r4, #0
 8025722:	f2c0 8089 	blt.w	8025838 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8025726:	42a3      	cmp	r3, r4
 8025728:	f340 8086 	ble.w	8025838 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802572c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8025730:	3401      	adds	r4, #1
 8025732:	f100 8086 	bmi.w	8025842 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025736:	42a3      	cmp	r3, r4
 8025738:	f340 8083 	ble.w	8025842 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802573c:	f1b9 0f00 	cmp.w	r9, #0
 8025740:	d07f      	beq.n	8025842 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8025742:	3301      	adds	r3, #1
 8025744:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8025748:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802574c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8025750:	fb19 fe07 	smulbb	lr, r9, r7
 8025754:	f1c7 0210 	rsb	r2, r7, #16
 8025758:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802575c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8025760:	eba2 0209 	sub.w	r2, r2, r9
 8025764:	ea44 0808 	orr.w	r8, r4, r8
 8025768:	ea4f 440c 	mov.w	r4, ip, lsl #16
 802576c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025770:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8025774:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8025778:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 802577c:	ea44 0c0c 	orr.w	ip, r4, ip
 8025780:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8025784:	fb04 f40c 	mul.w	r4, r4, ip
 8025788:	fb02 4808 	mla	r8, r2, r8, r4
 802578c:	041a      	lsls	r2, r3, #16
 802578e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025792:	b2b4      	uxth	r4, r6
 8025794:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025798:	43f6      	mvns	r6, r6
 802579a:	4313      	orrs	r3, r2
 802579c:	042a      	lsls	r2, r5, #16
 802579e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80257a2:	b2f6      	uxtb	r6, r6
 80257a4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80257a8:	fb0e 8303 	mla	r3, lr, r3, r8
 80257ac:	432a      	orrs	r2, r5
 80257ae:	fb07 3202 	mla	r2, r7, r2, r3
 80257b2:	10c7      	asrs	r7, r0, #3
 80257b4:	0d53      	lsrs	r3, r2, #21
 80257b6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80257ba:	0952      	lsrs	r2, r2, #5
 80257bc:	fb17 f706 	smulbb	r7, r7, r6
 80257c0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80257c4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80257c8:	431a      	orrs	r2, r3
 80257ca:	b293      	uxth	r3, r2
 80257cc:	1202      	asrs	r2, r0, #8
 80257ce:	121d      	asrs	r5, r3, #8
 80257d0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80257d4:	00c0      	lsls	r0, r0, #3
 80257d6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80257da:	fb12 f206 	smulbb	r2, r2, r6
 80257de:	b2c0      	uxtb	r0, r0
 80257e0:	fb05 2504 	mla	r5, r5, r4, r2
 80257e4:	10da      	asrs	r2, r3, #3
 80257e6:	fb10 f006 	smulbb	r0, r0, r6
 80257ea:	00db      	lsls	r3, r3, #3
 80257ec:	b2ad      	uxth	r5, r5
 80257ee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80257f2:	b2db      	uxtb	r3, r3
 80257f4:	fb02 7204 	mla	r2, r2, r4, r7
 80257f8:	fb03 0004 	mla	r0, r3, r4, r0
 80257fc:	1c6b      	adds	r3, r5, #1
 80257fe:	b292      	uxth	r2, r2
 8025800:	b280      	uxth	r0, r0
 8025802:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025806:	1c43      	adds	r3, r0, #1
 8025808:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802580c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025810:	1c50      	adds	r0, r2, #1
 8025812:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8025816:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802581a:	0952      	lsrs	r2, r2, #5
 802581c:	432b      	orrs	r3, r5
 802581e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025822:	4313      	orrs	r3, r2
 8025824:	800b      	strh	r3, [r1, #0]
 8025826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802582a:	4680      	mov	r8, r0
 802582c:	e763      	b.n	80256f6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802582e:	4684      	mov	ip, r0
 8025830:	4680      	mov	r8, r0
 8025832:	e76c      	b.n	802570e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8025834:	4684      	mov	ip, r0
 8025836:	e76a      	b.n	802570e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8025838:	4605      	mov	r5, r0
 802583a:	e779      	b.n	8025730 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 802583c:	4603      	mov	r3, r0
 802583e:	4605      	mov	r5, r0
 8025840:	e782      	b.n	8025748 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8025842:	4603      	mov	r3, r0
 8025844:	e780      	b.n	8025748 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08025846 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025846:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802584a:	b093      	sub	sp, #76	; 0x4c
 802584c:	461d      	mov	r5, r3
 802584e:	9210      	str	r2, [sp, #64]	; 0x40
 8025850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025852:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8025856:	910a      	str	r1, [sp, #40]	; 0x28
 8025858:	920b      	str	r2, [sp, #44]	; 0x2c
 802585a:	6859      	ldr	r1, [r3, #4]
 802585c:	681b      	ldr	r3, [r3, #0]
 802585e:	9011      	str	r0, [sp, #68]	; 0x44
 8025860:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8025864:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8025868:	fb01 2707 	mla	r7, r1, r7, r2
 802586c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8025870:	9307      	str	r3, [sp, #28]
 8025872:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025874:	681b      	ldr	r3, [r3, #0]
 8025876:	9309      	str	r3, [sp, #36]	; 0x24
 8025878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802587a:	43db      	mvns	r3, r3
 802587c:	b2db      	uxtb	r3, r3
 802587e:	9308      	str	r3, [sp, #32]
 8025880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025882:	2b00      	cmp	r3, #0
 8025884:	dc03      	bgt.n	802588e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025886:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025888:	2b00      	cmp	r3, #0
 802588a:	f340 8205 	ble.w	8025c98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802588e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025890:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025894:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025898:	1e48      	subs	r0, r1, #1
 802589a:	f102 3cff 	add.w	ip, r2, #4294967295
 802589e:	2d00      	cmp	r5, #0
 80258a0:	f340 80da 	ble.w	8025a58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80258a4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80258a8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80258ac:	d406      	bmi.n	80258bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80258ae:	4586      	cmp	lr, r0
 80258b0:	da04      	bge.n	80258bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80258b2:	2b00      	cmp	r3, #0
 80258b4:	db02      	blt.n	80258bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80258b6:	4563      	cmp	r3, ip
 80258b8:	f2c0 80cf 	blt.w	8025a5a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80258bc:	f11e 0e01 	adds.w	lr, lr, #1
 80258c0:	f100 80c1 	bmi.w	8025a46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80258c4:	4571      	cmp	r1, lr
 80258c6:	f2c0 80be 	blt.w	8025a46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80258ca:	3301      	adds	r3, #1
 80258cc:	f100 80bb 	bmi.w	8025a46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80258d0:	429a      	cmp	r2, r3
 80258d2:	f2c0 80b8 	blt.w	8025a46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80258d6:	46a9      	mov	r9, r5
 80258d8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80258dc:	f1b9 0f00 	cmp.w	r9, #0
 80258e0:	f340 80d8 	ble.w	8025a94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80258e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80258e6:	1421      	asrs	r1, r4, #16
 80258e8:	ea4f 4026 	mov.w	r0, r6, asr #16
 80258ec:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80258f0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80258f4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80258f8:	f100 8112 	bmi.w	8025b20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80258fc:	f10e 3aff 	add.w	sl, lr, #4294967295
 8025900:	4551      	cmp	r1, sl
 8025902:	f280 810d 	bge.w	8025b20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025906:	2800      	cmp	r0, #0
 8025908:	f2c0 810a 	blt.w	8025b20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802590c:	f103 3aff 	add.w	sl, r3, #4294967295
 8025910:	4550      	cmp	r0, sl
 8025912:	f280 8105 	bge.w	8025b20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8025916:	fa0f f38e 	sxth.w	r3, lr
 802591a:	fb00 1103 	mla	r1, r0, r3, r1
 802591e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025920:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8025924:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8025928:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802592c:	f1bc 0f00 	cmp.w	ip, #0
 8025930:	d007      	beq.n	8025942 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8025932:	005b      	lsls	r3, r3, #1
 8025934:	eb0a 0003 	add.w	r0, sl, r3
 8025938:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802593c:	930c      	str	r3, [sp, #48]	; 0x30
 802593e:	8843      	ldrh	r3, [r0, #2]
 8025940:	930d      	str	r3, [sp, #52]	; 0x34
 8025942:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8025946:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802594a:	fb12 f30c 	smulbb	r3, r2, ip
 802594e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025952:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025956:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802595a:	10db      	asrs	r3, r3, #3
 802595c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025960:	ea40 000e 	orr.w	r0, r0, lr
 8025964:	f1cc 0e10 	rsb	lr, ip, #16
 8025968:	ea4a 0101 	orr.w	r1, sl, r1
 802596c:	9f08      	ldr	r7, [sp, #32]
 802596e:	ebae 0e02 	sub.w	lr, lr, r2
 8025972:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025976:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802597a:	4351      	muls	r1, r2
 802597c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802597e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025982:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025984:	0410      	lsls	r0, r2, #16
 8025986:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802598a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802598e:	4310      	orrs	r0, r2
 8025990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025992:	0412      	lsls	r2, r2, #16
 8025994:	fb03 e000 	mla	r0, r3, r0, lr
 8025998:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802599c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80259a0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80259a4:	ea42 020e 	orr.w	r2, r2, lr
 80259a8:	fb03 0302 	mla	r3, r3, r2, r0
 80259ac:	f8b8 0000 	ldrh.w	r0, [r8]
 80259b0:	0d5a      	lsrs	r2, r3, #21
 80259b2:	095b      	lsrs	r3, r3, #5
 80259b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80259b8:	1201      	asrs	r1, r0, #8
 80259ba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80259be:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80259c2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80259c6:	00c0      	lsls	r0, r0, #3
 80259c8:	4313      	orrs	r3, r2
 80259ca:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80259ce:	fb11 f107 	smulbb	r1, r1, r7
 80259d2:	b2c0      	uxtb	r0, r0
 80259d4:	b29b      	uxth	r3, r3
 80259d6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80259da:	fb10 f007 	smulbb	r0, r0, r7
 80259de:	fb1e fe07 	smulbb	lr, lr, r7
 80259e2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80259e6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80259ea:	fb0c 1c02 	mla	ip, ip, r2, r1
 80259ee:	10d9      	asrs	r1, r3, #3
 80259f0:	00db      	lsls	r3, r3, #3
 80259f2:	fa1f fc8c 	uxth.w	ip, ip
 80259f6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80259fa:	b2db      	uxtb	r3, r3
 80259fc:	fb01 e102 	mla	r1, r1, r2, lr
 8025a00:	fb03 0302 	mla	r3, r3, r2, r0
 8025a04:	b289      	uxth	r1, r1
 8025a06:	b29a      	uxth	r2, r3
 8025a08:	f10c 0301 	add.w	r3, ip, #1
 8025a0c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025a10:	1c53      	adds	r3, r2, #1
 8025a12:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025a16:	1c4a      	adds	r2, r1, #1
 8025a18:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8025a1c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025a20:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025a24:	0949      	lsrs	r1, r1, #5
 8025a26:	ea43 030c 	orr.w	r3, r3, ip
 8025a2a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025a2e:	430b      	orrs	r3, r1
 8025a30:	f8a8 3000 	strh.w	r3, [r8]
 8025a34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025a36:	f108 0802 	add.w	r8, r8, #2
 8025a3a:	f109 39ff 	add.w	r9, r9, #4294967295
 8025a3e:	441c      	add	r4, r3
 8025a40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025a42:	441e      	add	r6, r3
 8025a44:	e74a      	b.n	80258dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8025a46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025a48:	3d01      	subs	r5, #1
 8025a4a:	441c      	add	r4, r3
 8025a4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025a4e:	441e      	add	r6, r3
 8025a50:	9b07      	ldr	r3, [sp, #28]
 8025a52:	3302      	adds	r3, #2
 8025a54:	9307      	str	r3, [sp, #28]
 8025a56:	e722      	b.n	802589e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025a58:	d022      	beq.n	8025aa0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8025a5a:	1e6b      	subs	r3, r5, #1
 8025a5c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025a5e:	fb00 4003 	mla	r0, r0, r3, r4
 8025a62:	1400      	asrs	r0, r0, #16
 8025a64:	f53f af37 	bmi.w	80258d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025a68:	3901      	subs	r1, #1
 8025a6a:	4288      	cmp	r0, r1
 8025a6c:	f6bf af33 	bge.w	80258d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025a70:	9920      	ldr	r1, [sp, #128]	; 0x80
 8025a72:	fb01 6303 	mla	r3, r1, r3, r6
 8025a76:	141b      	asrs	r3, r3, #16
 8025a78:	f53f af2d 	bmi.w	80258d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025a7c:	3a01      	subs	r2, #1
 8025a7e:	4293      	cmp	r3, r2
 8025a80:	f6bf af29 	bge.w	80258d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025a84:	46a8      	mov	r8, r5
 8025a86:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8025a8a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8025a8e:	f1b8 0f00 	cmp.w	r8, #0
 8025a92:	dc60      	bgt.n	8025b56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8025a94:	9b07      	ldr	r3, [sp, #28]
 8025a96:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025a9a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8025a9e:	9307      	str	r3, [sp, #28]
 8025aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025aa2:	2b00      	cmp	r3, #0
 8025aa4:	f340 80f8 	ble.w	8025c98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8025aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025aac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025aae:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025ab2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025ab6:	eef0 6a62 	vmov.f32	s13, s5
 8025aba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025abe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025ac2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ac6:	ee16 4a90 	vmov	r4, s13
 8025aca:	eef0 6a43 	vmov.f32	s13, s6
 8025ace:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ad2:	ee16 6a90 	vmov	r6, s13
 8025ad6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025ada:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025ade:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025ae2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025ae6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025aea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025aee:	ee12 2a90 	vmov	r2, s5
 8025af2:	eef0 2a47 	vmov.f32	s5, s14
 8025af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8025afa:	ee13 2a10 	vmov	r2, s6
 8025afe:	931f      	str	r3, [sp, #124]	; 0x7c
 8025b00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025b02:	eeb0 3a67 	vmov.f32	s6, s15
 8025b06:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b0a:	9320      	str	r3, [sp, #128]	; 0x80
 8025b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8025b10:	3b01      	subs	r3, #1
 8025b12:	930a      	str	r3, [sp, #40]	; 0x28
 8025b14:	bf08      	it	eq
 8025b16:	4615      	moveq	r5, r2
 8025b18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025b1a:	bf18      	it	ne
 8025b1c:	461d      	movne	r5, r3
 8025b1e:	e6af      	b.n	8025880 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025b20:	f111 0a01 	adds.w	sl, r1, #1
 8025b24:	d486      	bmi.n	8025a34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025b26:	45d6      	cmp	lr, sl
 8025b28:	db84      	blt.n	8025a34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025b2a:	f110 0a01 	adds.w	sl, r0, #1
 8025b2e:	d481      	bmi.n	8025a34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025b30:	4553      	cmp	r3, sl
 8025b32:	f6ff af7f 	blt.w	8025a34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025b36:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8025b38:	b21b      	sxth	r3, r3
 8025b3a:	9101      	str	r1, [sp, #4]
 8025b3c:	4641      	mov	r1, r8
 8025b3e:	9300      	str	r3, [sp, #0]
 8025b40:	fa0f f38e 	sxth.w	r3, lr
 8025b44:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8025b48:	e9cd c704 	strd	ip, r7, [sp, #16]
 8025b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025b4e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8025b50:	f7ff fdb2 	bl	80256b8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8025b54:	e76e      	b.n	8025a34 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8025b56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b58:	1430      	asrs	r0, r6, #16
 8025b5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025b5c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8025b60:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025b64:	1423      	asrs	r3, r4, #16
 8025b66:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025b6a:	fb01 3000 	mla	r0, r1, r0, r3
 8025b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b70:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8025b74:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8025b78:	8858      	ldrh	r0, [r3, #2]
 8025b7a:	f1be 0f00 	cmp.w	lr, #0
 8025b7e:	d00b      	beq.n	8025b98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8025b80:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025b84:	3901      	subs	r1, #1
 8025b86:	0049      	lsls	r1, r1, #1
 8025b88:	3102      	adds	r1, #2
 8025b8a:	eb03 0b01 	add.w	fp, r3, r1
 8025b8e:	5a5b      	ldrh	r3, [r3, r1]
 8025b90:	930e      	str	r3, [sp, #56]	; 0x38
 8025b92:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8025b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8025b98:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8025b9c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025ba0:	fb12 f30e 	smulbb	r3, r2, lr
 8025ba4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025ba8:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8025bac:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025bb0:	10db      	asrs	r3, r3, #3
 8025bb2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025bb6:	ea41 010c 	orr.w	r1, r1, ip
 8025bba:	f1ce 0c10 	rsb	ip, lr, #16
 8025bbe:	ea4b 0000 	orr.w	r0, fp, r0
 8025bc2:	9f08      	ldr	r7, [sp, #32]
 8025bc4:	ebac 0c02 	sub.w	ip, ip, r2
 8025bc8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025bcc:	f108 38ff 	add.w	r8, r8, #4294967295
 8025bd0:	4350      	muls	r0, r2
 8025bd2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8025bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025bd8:	fb0c 0c01 	mla	ip, ip, r1, r0
 8025bdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025bde:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8025be2:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8025be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025be8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025bec:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025bf0:	0412      	lsls	r2, r2, #16
 8025bf2:	ea4b 0101 	orr.w	r1, fp, r1
 8025bf6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025bfa:	fb03 c101 	mla	r1, r3, r1, ip
 8025bfe:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8025c02:	4302      	orrs	r2, r0
 8025c04:	fb03 1202 	mla	r2, r3, r2, r1
 8025c08:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8025c0c:	0952      	lsrs	r2, r2, #5
 8025c0e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025c12:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8025c16:	f8b9 2000 	ldrh.w	r2, [r9]
 8025c1a:	ea4b 0303 	orr.w	r3, fp, r3
 8025c1e:	1211      	asrs	r1, r2, #8
 8025c20:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8025c24:	b29b      	uxth	r3, r3
 8025c26:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025c2a:	00d2      	lsls	r2, r2, #3
 8025c2c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8025c30:	fb11 f107 	smulbb	r1, r1, r7
 8025c34:	1218      	asrs	r0, r3, #8
 8025c36:	fb1c fc07 	smulbb	ip, ip, r7
 8025c3a:	b2d2      	uxtb	r2, r2
 8025c3c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025c40:	fb12 f207 	smulbb	r2, r2, r7
 8025c44:	fb00 100a 	mla	r0, r0, sl, r1
 8025c48:	10d9      	asrs	r1, r3, #3
 8025c4a:	00db      	lsls	r3, r3, #3
 8025c4c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025c50:	b280      	uxth	r0, r0
 8025c52:	b2db      	uxtb	r3, r3
 8025c54:	fb01 c10a 	mla	r1, r1, sl, ip
 8025c58:	fb03 230a 	mla	r3, r3, sl, r2
 8025c5c:	1c42      	adds	r2, r0, #1
 8025c5e:	b289      	uxth	r1, r1
 8025c60:	b29b      	uxth	r3, r3
 8025c62:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025c66:	f101 0c01 	add.w	ip, r1, #1
 8025c6a:	1c5a      	adds	r2, r3, #1
 8025c6c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025c70:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025c74:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025c78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025c7a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025c7e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025c82:	441c      	add	r4, r3
 8025c84:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025c88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025c8a:	4310      	orrs	r0, r2
 8025c8c:	441e      	add	r6, r3
 8025c8e:	ea40 000c 	orr.w	r0, r0, ip
 8025c92:	f829 0b02 	strh.w	r0, [r9], #2
 8025c96:	e6fa      	b.n	8025a8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8025c98:	b013      	add	sp, #76	; 0x4c
 8025c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025c9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8025c9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025ca2:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8025ca6:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8025caa:	fb0e 4703 	mla	r7, lr, r3, r4
 8025cae:	f1be 0f00 	cmp.w	lr, #0
 8025cb2:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8025cb6:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8025cba:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8025cbe:	8808      	ldrh	r0, [r1, #0]
 8025cc0:	db60      	blt.n	8025d84 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8025cc2:	45f1      	cmp	r9, lr
 8025cc4:	dd5e      	ble.n	8025d84 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8025cc6:	2c00      	cmp	r4, #0
 8025cc8:	db5a      	blt.n	8025d80 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8025cca:	42a3      	cmp	r3, r4
 8025ccc:	dd58      	ble.n	8025d80 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8025cce:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8025cd2:	1c62      	adds	r2, r4, #1
 8025cd4:	d459      	bmi.n	8025d8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8025cd6:	4293      	cmp	r3, r2
 8025cd8:	dd57      	ble.n	8025d8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8025cda:	2d00      	cmp	r5, #0
 8025cdc:	d055      	beq.n	8025d8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8025cde:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8025ce2:	f11e 0e01 	adds.w	lr, lr, #1
 8025ce6:	d454      	bmi.n	8025d92 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8025ce8:	45f1      	cmp	r9, lr
 8025cea:	dd52      	ble.n	8025d92 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8025cec:	2e00      	cmp	r6, #0
 8025cee:	d050      	beq.n	8025d92 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8025cf0:	2c00      	cmp	r4, #0
 8025cf2:	db4c      	blt.n	8025d8e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8025cf4:	42a3      	cmp	r3, r4
 8025cf6:	dd4a      	ble.n	8025d8e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8025cf8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8025cfc:	3401      	adds	r4, #1
 8025cfe:	d405      	bmi.n	8025d0c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025d00:	42a3      	cmp	r3, r4
 8025d02:	dd03      	ble.n	8025d0c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025d04:	b115      	cbz	r5, 8025d0c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8025d06:	3301      	adds	r3, #1
 8025d08:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8025d0c:	fb15 f406 	smulbb	r4, r5, r6
 8025d10:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8025d14:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8025d18:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025d1c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025d20:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8025d24:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025d28:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025d2c:	ea43 0c0c 	orr.w	ip, r3, ip
 8025d30:	f1c6 0310 	rsb	r3, r6, #16
 8025d34:	ea4e 0707 	orr.w	r7, lr, r7
 8025d38:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8025d3c:	1b5b      	subs	r3, r3, r5
 8025d3e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8025d42:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8025d46:	437d      	muls	r5, r7
 8025d48:	fb03 5c0c 	mla	ip, r3, ip, r5
 8025d4c:	0403      	lsls	r3, r0, #16
 8025d4e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025d52:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025d56:	4318      	orrs	r0, r3
 8025d58:	0413      	lsls	r3, r2, #16
 8025d5a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025d5e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025d62:	fb04 c000 	mla	r0, r4, r0, ip
 8025d66:	4313      	orrs	r3, r2
 8025d68:	fb06 0003 	mla	r0, r6, r3, r0
 8025d6c:	0d43      	lsrs	r3, r0, #21
 8025d6e:	0940      	lsrs	r0, r0, #5
 8025d70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025d74:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025d78:	4318      	orrs	r0, r3
 8025d7a:	8008      	strh	r0, [r1, #0]
 8025d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025d80:	4684      	mov	ip, r0
 8025d82:	e7a6      	b.n	8025cd2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8025d84:	4607      	mov	r7, r0
 8025d86:	4684      	mov	ip, r0
 8025d88:	e7ab      	b.n	8025ce2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8025d8a:	4607      	mov	r7, r0
 8025d8c:	e7a9      	b.n	8025ce2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8025d8e:	4602      	mov	r2, r0
 8025d90:	e7b4      	b.n	8025cfc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8025d92:	4602      	mov	r2, r0
 8025d94:	e7ba      	b.n	8025d0c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08025d96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025d96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d9a:	b08f      	sub	sp, #60	; 0x3c
 8025d9c:	461d      	mov	r5, r3
 8025d9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025da0:	9107      	str	r1, [sp, #28]
 8025da2:	920c      	str	r2, [sp, #48]	; 0x30
 8025da4:	6859      	ldr	r1, [r3, #4]
 8025da6:	681b      	ldr	r3, [r3, #0]
 8025da8:	900d      	str	r0, [sp, #52]	; 0x34
 8025daa:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8025dae:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8025db2:	fb01 2707 	mla	r7, r1, r7, r2
 8025db6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8025dba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025dbc:	f8d3 8000 	ldr.w	r8, [r3]
 8025dc0:	9b07      	ldr	r3, [sp, #28]
 8025dc2:	2b00      	cmp	r3, #0
 8025dc4:	dc03      	bgt.n	8025dce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8025dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025dc8:	2b00      	cmp	r3, #0
 8025dca:	f340 8182 	ble.w	80260d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8025dce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025dd0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025dd4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025dd8:	1e48      	subs	r0, r1, #1
 8025dda:	f102 3cff 	add.w	ip, r2, #4294967295
 8025dde:	2d00      	cmp	r5, #0
 8025de0:	f340 809b 	ble.w	8025f1a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8025de4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025de8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025dec:	d406      	bmi.n	8025dfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025dee:	4586      	cmp	lr, r0
 8025df0:	da04      	bge.n	8025dfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025df2:	2b00      	cmp	r3, #0
 8025df4:	db02      	blt.n	8025dfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025df6:	4563      	cmp	r3, ip
 8025df8:	f2c0 8090 	blt.w	8025f1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025dfc:	f11e 0e01 	adds.w	lr, lr, #1
 8025e00:	f100 8084 	bmi.w	8025f0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8025e04:	4571      	cmp	r1, lr
 8025e06:	f2c0 8081 	blt.w	8025f0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8025e0a:	3301      	adds	r3, #1
 8025e0c:	d47e      	bmi.n	8025f0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8025e0e:	429a      	cmp	r2, r3
 8025e10:	db7c      	blt.n	8025f0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8025e12:	46aa      	mov	sl, r5
 8025e14:	46b9      	mov	r9, r7
 8025e16:	f1ba 0f00 	cmp.w	sl, #0
 8025e1a:	f340 8099 	ble.w	8025f50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025e1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025e20:	1421      	asrs	r1, r4, #16
 8025e22:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025e26:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025e2a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025e2e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025e32:	f100 80d1 	bmi.w	8025fd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025e36:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025e3a:	4559      	cmp	r1, fp
 8025e3c:	f280 80cc 	bge.w	8025fd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025e40:	2800      	cmp	r0, #0
 8025e42:	f2c0 80c9 	blt.w	8025fd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025e46:	f103 3bff 	add.w	fp, r3, #4294967295
 8025e4a:	4558      	cmp	r0, fp
 8025e4c:	f280 80c4 	bge.w	8025fd8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8025e50:	fa0f fe8e 	sxth.w	lr, lr
 8025e54:	fb00 110e 	mla	r1, r0, lr, r1
 8025e58:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8025e5c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8025e60:	8841      	ldrh	r1, [r0, #2]
 8025e62:	f1bc 0f00 	cmp.w	ip, #0
 8025e66:	d00b      	beq.n	8025e80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8025e68:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8025e6c:	3b01      	subs	r3, #1
 8025e6e:	005b      	lsls	r3, r3, #1
 8025e70:	3302      	adds	r3, #2
 8025e72:	eb00 0e03 	add.w	lr, r0, r3
 8025e76:	5ac3      	ldrh	r3, [r0, r3]
 8025e78:	9308      	str	r3, [sp, #32]
 8025e7a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8025e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8025e80:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8025e84:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025e88:	fb12 f30c 	smulbb	r3, r2, ip
 8025e8c:	f1cc 0e10 	rsb	lr, ip, #16
 8025e90:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025e94:	10db      	asrs	r3, r3, #3
 8025e96:	ebae 0e02 	sub.w	lr, lr, r2
 8025e9a:	ea40 000b 	orr.w	r0, r0, fp
 8025e9e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025ea2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025ea6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025eaa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025eae:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025eb2:	ea4b 0101 	orr.w	r1, fp, r1
 8025eb6:	4351      	muls	r1, r2
 8025eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025eba:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025ebe:	0410      	lsls	r0, r2, #16
 8025ec0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025ec4:	9908      	ldr	r1, [sp, #32]
 8025ec6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025eca:	4310      	orrs	r0, r2
 8025ecc:	9a08      	ldr	r2, [sp, #32]
 8025ece:	0412      	lsls	r2, r2, #16
 8025ed0:	fb03 e000 	mla	r0, r3, r0, lr
 8025ed4:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8025ed8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025edc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025ee0:	ea42 020e 	orr.w	r2, r2, lr
 8025ee4:	fb03 0302 	mla	r3, r3, r2, r0
 8025ee8:	0d5a      	lsrs	r2, r3, #21
 8025eea:	095b      	lsrs	r3, r3, #5
 8025eec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025ef0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025ef4:	4313      	orrs	r3, r2
 8025ef6:	f8a9 3000 	strh.w	r3, [r9]
 8025efa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025efc:	f109 0902 	add.w	r9, r9, #2
 8025f00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025f04:	441c      	add	r4, r3
 8025f06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025f08:	441e      	add	r6, r3
 8025f0a:	e784      	b.n	8025e16 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025f0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025f0e:	3d01      	subs	r5, #1
 8025f10:	3702      	adds	r7, #2
 8025f12:	441c      	add	r4, r3
 8025f14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025f16:	441e      	add	r6, r3
 8025f18:	e761      	b.n	8025dde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025f1a:	d01d      	beq.n	8025f58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8025f1c:	1e6b      	subs	r3, r5, #1
 8025f1e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025f20:	fb00 4003 	mla	r0, r0, r3, r4
 8025f24:	1400      	asrs	r0, r0, #16
 8025f26:	f53f af74 	bmi.w	8025e12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025f2a:	3901      	subs	r1, #1
 8025f2c:	4288      	cmp	r0, r1
 8025f2e:	f6bf af70 	bge.w	8025e12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025f32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8025f34:	fb01 6303 	mla	r3, r1, r3, r6
 8025f38:	141b      	asrs	r3, r3, #16
 8025f3a:	f53f af6a 	bmi.w	8025e12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025f3e:	3a01      	subs	r2, #1
 8025f40:	4293      	cmp	r3, r2
 8025f42:	f6bf af66 	bge.w	8025e12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025f46:	46a9      	mov	r9, r5
 8025f48:	46ba      	mov	sl, r7
 8025f4a:	f1b9 0f00 	cmp.w	r9, #0
 8025f4e:	dc5b      	bgt.n	8026008 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8025f50:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025f54:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8025f58:	9b07      	ldr	r3, [sp, #28]
 8025f5a:	2b00      	cmp	r3, #0
 8025f5c:	f340 80b9 	ble.w	80260d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8025f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025f64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025f66:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025f6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025f6e:	eef0 6a62 	vmov.f32	s13, s5
 8025f72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025f76:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025f7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f7e:	ee16 4a90 	vmov	r4, s13
 8025f82:	eef0 6a43 	vmov.f32	s13, s6
 8025f86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f8a:	ee16 6a90 	vmov	r6, s13
 8025f8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025f92:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025f96:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025f9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025f9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025fa2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025fa6:	ee12 2a90 	vmov	r2, s5
 8025faa:	eef0 2a47 	vmov.f32	s5, s14
 8025fae:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fb2:	ee13 2a10 	vmov	r2, s6
 8025fb6:	931b      	str	r3, [sp, #108]	; 0x6c
 8025fb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025fba:	eeb0 3a67 	vmov.f32	s6, s15
 8025fbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fc2:	931c      	str	r3, [sp, #112]	; 0x70
 8025fc4:	9b07      	ldr	r3, [sp, #28]
 8025fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025fc8:	3b01      	subs	r3, #1
 8025fca:	9307      	str	r3, [sp, #28]
 8025fcc:	bf08      	it	eq
 8025fce:	4615      	moveq	r5, r2
 8025fd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025fd2:	bf18      	it	ne
 8025fd4:	461d      	movne	r5, r3
 8025fd6:	e6f3      	b.n	8025dc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8025fd8:	f111 0b01 	adds.w	fp, r1, #1
 8025fdc:	d48d      	bmi.n	8025efa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8025fde:	45de      	cmp	lr, fp
 8025fe0:	db8b      	blt.n	8025efa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8025fe2:	f110 0b01 	adds.w	fp, r0, #1
 8025fe6:	d488      	bmi.n	8025efa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8025fe8:	455b      	cmp	r3, fp
 8025fea:	db86      	blt.n	8025efa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8025fec:	b21b      	sxth	r3, r3
 8025fee:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8025ff2:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8025ff6:	9300      	str	r3, [sp, #0]
 8025ff8:	4642      	mov	r2, r8
 8025ffa:	fa0f f38e 	sxth.w	r3, lr
 8025ffe:	4649      	mov	r1, r9
 8026000:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026002:	f7ff fe4c 	bl	8025c9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8026006:	e778      	b.n	8025efa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8026008:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802600a:	1420      	asrs	r0, r4, #16
 802600c:	1431      	asrs	r1, r6, #16
 802600e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026012:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8026016:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802601a:	fb03 0101 	mla	r1, r3, r1, r0
 802601e:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026022:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8026026:	8841      	ldrh	r1, [r0, #2]
 8026028:	f1be 0f00 	cmp.w	lr, #0
 802602c:	d00b      	beq.n	8026046 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802602e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8026032:	3b01      	subs	r3, #1
 8026034:	005b      	lsls	r3, r3, #1
 8026036:	3302      	adds	r3, #2
 8026038:	eb00 0b03 	add.w	fp, r0, r3
 802603c:	5ac3      	ldrh	r3, [r0, r3]
 802603e:	930a      	str	r3, [sp, #40]	; 0x28
 8026040:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026044:	930b      	str	r3, [sp, #44]	; 0x2c
 8026046:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802604a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802604e:	fb12 f30e 	smulbb	r3, r2, lr
 8026052:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026056:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802605a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802605e:	10db      	asrs	r3, r3, #3
 8026060:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026064:	ea40 000c 	orr.w	r0, r0, ip
 8026068:	f1ce 0c10 	rsb	ip, lr, #16
 802606c:	ea4b 0101 	orr.w	r1, fp, r1
 8026070:	f109 39ff 	add.w	r9, r9, #4294967295
 8026074:	ebac 0c02 	sub.w	ip, ip, r2
 8026078:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802607c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026080:	4351      	muls	r1, r2
 8026082:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026084:	fb0c 1c00 	mla	ip, ip, r0, r1
 8026088:	990a      	ldr	r1, [sp, #40]	; 0x28
 802608a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802608e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8026092:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026094:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026098:	0412      	lsls	r2, r2, #16
 802609a:	ea4b 0000 	orr.w	r0, fp, r0
 802609e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80260a2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80260a6:	fb03 c000 	mla	r0, r3, r0, ip
 80260aa:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80260ae:	ea42 0b0b 	orr.w	fp, r2, fp
 80260b2:	fb03 000b 	mla	r0, r3, fp, r0
 80260b6:	0d43      	lsrs	r3, r0, #21
 80260b8:	0940      	lsrs	r0, r0, #5
 80260ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80260be:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80260c2:	4318      	orrs	r0, r3
 80260c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80260c6:	441c      	add	r4, r3
 80260c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80260ca:	f82a 0b02 	strh.w	r0, [sl], #2
 80260ce:	441e      	add	r6, r3
 80260d0:	e73b      	b.n	8025f4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80260d2:	b00f      	add	sp, #60	; 0x3c
 80260d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080260d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80260d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80260dc:	b085      	sub	sp, #20
 80260de:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 80260e2:	9102      	str	r1, [sp, #8]
 80260e4:	2c00      	cmp	r4, #0
 80260e6:	fb04 7103 	mla	r1, r4, r3, r7
 80260ea:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 80260ee:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80260f2:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 80260f6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80260fa:	f2c0 811b 	blt.w	8026334 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 80260fe:	45a6      	cmp	lr, r4
 8026100:	f340 8118 	ble.w	8026334 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8026104:	2f00      	cmp	r7, #0
 8026106:	f2c0 8113 	blt.w	8026330 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802610a:	42bb      	cmp	r3, r7
 802610c:	f340 8110 	ble.w	8026330 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8026110:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8026114:	1c7a      	adds	r2, r7, #1
 8026116:	f100 8110 	bmi.w	802633a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802611a:	4293      	cmp	r3, r2
 802611c:	f340 810d 	ble.w	802633a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8026120:	2e00      	cmp	r6, #0
 8026122:	f000 810c 	beq.w	802633e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8026126:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802612a:	3401      	adds	r4, #1
 802612c:	f100 810b 	bmi.w	8026346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026130:	45a6      	cmp	lr, r4
 8026132:	f340 8108 	ble.w	8026346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8026136:	2800      	cmp	r0, #0
 8026138:	f000 8108 	beq.w	802634c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 802613c:	2f00      	cmp	r7, #0
 802613e:	f2c0 8100 	blt.w	8026342 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026142:	42bb      	cmp	r3, r7
 8026144:	f340 80fd 	ble.w	8026342 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8026148:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802614c:	3701      	adds	r7, #1
 802614e:	f100 8100 	bmi.w	8026352 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026152:	42bb      	cmp	r3, r7
 8026154:	f340 80fd 	ble.w	8026352 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8026158:	2e00      	cmp	r6, #0
 802615a:	f000 80fc 	beq.w	8026356 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802615e:	3301      	adds	r3, #1
 8026160:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8026164:	b2b6      	uxth	r6, r6
 8026166:	b280      	uxth	r0, r0
 8026168:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802616c:	fb00 fe06 	mul.w	lr, r0, r6
 8026170:	0136      	lsls	r6, r6, #4
 8026172:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026176:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802617a:	eba6 070e 	sub.w	r7, r6, lr
 802617e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8026182:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026186:	b280      	uxth	r0, r0
 8026188:	b2bf      	uxth	r7, r7
 802618a:	1a1b      	subs	r3, r3, r0
 802618c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026190:	fb0a f607 	mul.w	r6, sl, r7
 8026194:	b29b      	uxth	r3, r3
 8026196:	fb0b 6603 	mla	r6, fp, r3, r6
 802619a:	fb00 6609 	mla	r6, r0, r9, r6
 802619e:	fb0e 6608 	mla	r6, lr, r8, r6
 80261a2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80261a6:	9600      	str	r6, [sp, #0]
 80261a8:	2e00      	cmp	r6, #0
 80261aa:	f000 80be 	beq.w	802632a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80261ae:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80261b2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80261b6:	9e02      	ldr	r6, [sp, #8]
 80261b8:	fb0b fc0c 	mul.w	ip, fp, ip
 80261bc:	fb0b f505 	mul.w	r5, fp, r5
 80261c0:	8836      	ldrh	r6, [r6, #0]
 80261c2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80261c6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80261ca:	9501      	str	r5, [sp, #4]
 80261cc:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80261d0:	44dc      	add	ip, fp
 80261d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261d6:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80261da:	9503      	str	r5, [sp, #12]
 80261dc:	9d01      	ldr	r5, [sp, #4]
 80261de:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80261e2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80261e6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80261ea:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80261ee:	fb0a fc0c 	mul.w	ip, sl, ip
 80261f2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80261f6:	fb0a fa01 	mul.w	sl, sl, r1
 80261fa:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80261fe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026202:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8026206:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802620a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802620e:	4465      	add	r5, ip
 8026210:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026214:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026218:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802621c:	fb09 fc0c 	mul.w	ip, r9, ip
 8026220:	0a2d      	lsrs	r5, r5, #8
 8026222:	fb09 f904 	mul.w	r9, r9, r4
 8026226:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802622a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802622e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026232:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8026236:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802623a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802623e:	437d      	muls	r5, r7
 8026240:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026244:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8026248:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802624c:	4461      	add	r1, ip
 802624e:	fb08 f404 	mul.w	r4, r8, r4
 8026252:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026256:	fb08 f802 	mul.w	r8, r8, r2
 802625a:	0a09      	lsrs	r1, r1, #8
 802625c:	0a22      	lsrs	r2, r4, #8
 802625e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8026262:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026266:	fb07 f70a 	mul.w	r7, r7, sl
 802626a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802626e:	4414      	add	r4, r2
 8026270:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8026274:	0a24      	lsrs	r4, r4, #8
 8026276:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802627a:	9a03      	ldr	r2, [sp, #12]
 802627c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026280:	fb02 5503 	mla	r5, r2, r3, r5
 8026284:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026288:	9a00      	ldr	r2, [sp, #0]
 802628a:	fb04 540e 	mla	r4, r4, lr, r5
 802628e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026292:	1235      	asrs	r5, r6, #8
 8026294:	fb01 4100 	mla	r1, r1, r0, r4
 8026298:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802629c:	0a09      	lsrs	r1, r1, #8
 802629e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80262a2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80262a6:	fb03 7101 	mla	r1, r3, r1, r7
 80262aa:	fb0e 1e08 	mla	lr, lr, r8, r1
 80262ae:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80262b2:	fb00 e101 	mla	r1, r0, r1, lr
 80262b6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80262ba:	b287      	uxth	r7, r0
 80262bc:	0a09      	lsrs	r1, r1, #8
 80262be:	437a      	muls	r2, r7
 80262c0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80262c4:	1c53      	adds	r3, r2, #1
 80262c6:	4321      	orrs	r1, r4
 80262c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80262cc:	0c0a      	lsrs	r2, r1, #16
 80262ce:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80262d2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80262d6:	b2c8      	uxtb	r0, r1
 80262d8:	fb12 f207 	smulbb	r2, r2, r7
 80262dc:	fb14 f407 	smulbb	r4, r4, r7
 80262e0:	b2db      	uxtb	r3, r3
 80262e2:	fb10 f007 	smulbb	r0, r0, r7
 80262e6:	fb05 2503 	mla	r5, r5, r3, r2
 80262ea:	10f2      	asrs	r2, r6, #3
 80262ec:	00f6      	lsls	r6, r6, #3
 80262ee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80262f2:	b2ad      	uxth	r5, r5
 80262f4:	b2f6      	uxtb	r6, r6
 80262f6:	fb02 4203 	mla	r2, r2, r3, r4
 80262fa:	fb06 0303 	mla	r3, r6, r3, r0
 80262fe:	b294      	uxth	r4, r2
 8026300:	b299      	uxth	r1, r3
 8026302:	1c6b      	adds	r3, r5, #1
 8026304:	1c62      	adds	r2, r4, #1
 8026306:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802630a:	1c4b      	adds	r3, r1, #1
 802630c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026310:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026314:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026318:	0952      	lsrs	r2, r2, #5
 802631a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802631e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026322:	432b      	orrs	r3, r5
 8026324:	4313      	orrs	r3, r2
 8026326:	9a02      	ldr	r2, [sp, #8]
 8026328:	8013      	strh	r3, [r2, #0]
 802632a:	b005      	add	sp, #20
 802632c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026330:	2500      	movs	r5, #0
 8026332:	e6ef      	b.n	8026114 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8026334:	2100      	movs	r1, #0
 8026336:	460d      	mov	r5, r1
 8026338:	e6f7      	b.n	802612a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802633a:	2100      	movs	r1, #0
 802633c:	e6f5      	b.n	802612a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802633e:	4631      	mov	r1, r6
 8026340:	e6f3      	b.n	802612a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8026342:	2400      	movs	r4, #0
 8026344:	e702      	b.n	802614c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8026346:	2200      	movs	r2, #0
 8026348:	4614      	mov	r4, r2
 802634a:	e70b      	b.n	8026164 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802634c:	4602      	mov	r2, r0
 802634e:	4604      	mov	r4, r0
 8026350:	e708      	b.n	8026164 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026352:	2200      	movs	r2, #0
 8026354:	e706      	b.n	8026164 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8026356:	4632      	mov	r2, r6
 8026358:	e704      	b.n	8026164 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802635a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802635a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802635e:	b09d      	sub	sp, #116	; 0x74
 8026360:	9219      	str	r2, [sp, #100]	; 0x64
 8026362:	9307      	str	r3, [sp, #28]
 8026364:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026366:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802636a:	901b      	str	r0, [sp, #108]	; 0x6c
 802636c:	931a      	str	r3, [sp, #104]	; 0x68
 802636e:	6850      	ldr	r0, [r2, #4]
 8026370:	9117      	str	r1, [sp, #92]	; 0x5c
 8026372:	6812      	ldr	r2, [r2, #0]
 8026374:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8026378:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802637c:	fb00 1303 	mla	r3, r0, r3, r1
 8026380:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026384:	930a      	str	r3, [sp, #40]	; 0x28
 8026386:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8026388:	681b      	ldr	r3, [r3, #0]
 802638a:	9310      	str	r3, [sp, #64]	; 0x40
 802638c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8026390:	930b      	str	r3, [sp, #44]	; 0x2c
 8026392:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026394:	2b00      	cmp	r3, #0
 8026396:	dc03      	bgt.n	80263a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8026398:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802639a:	2b00      	cmp	r3, #0
 802639c:	f340 8375 	ble.w	8026a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80263a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80263a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80263a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80263aa:	1e48      	subs	r0, r1, #1
 80263ac:	1e57      	subs	r7, r2, #1
 80263ae:	9b07      	ldr	r3, [sp, #28]
 80263b0:	2b00      	cmp	r3, #0
 80263b2:	f340 818e 	ble.w	80266d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80263b6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80263ba:	ea4f 4326 	mov.w	r3, r6, asr #16
 80263be:	d406      	bmi.n	80263ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80263c0:	4584      	cmp	ip, r0
 80263c2:	da04      	bge.n	80263ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80263c4:	2b00      	cmp	r3, #0
 80263c6:	db02      	blt.n	80263ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80263c8:	42bb      	cmp	r3, r7
 80263ca:	f2c0 8183 	blt.w	80266d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80263ce:	f11c 0c01 	adds.w	ip, ip, #1
 80263d2:	f100 8173 	bmi.w	80266bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80263d6:	4561      	cmp	r1, ip
 80263d8:	f2c0 8170 	blt.w	80266bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80263dc:	3301      	adds	r3, #1
 80263de:	f100 816d 	bmi.w	80266bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80263e2:	429a      	cmp	r2, r3
 80263e4:	f2c0 816a 	blt.w	80266bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80263e8:	9b07      	ldr	r3, [sp, #28]
 80263ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80263ec:	9318      	str	r3, [sp, #96]	; 0x60
 80263ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80263f0:	2b00      	cmp	r3, #0
 80263f2:	f340 818c 	ble.w	802670e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80263f6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80263f8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80263fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80263fe:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026402:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026406:	1422      	asrs	r2, r4, #16
 8026408:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802640c:	689b      	ldr	r3, [r3, #8]
 802640e:	f100 81cd 	bmi.w	80267ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026412:	f103 38ff 	add.w	r8, r3, #4294967295
 8026416:	4542      	cmp	r2, r8
 8026418:	f280 81c8 	bge.w	80267ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802641c:	f1bc 0f00 	cmp.w	ip, #0
 8026420:	f2c0 81c4 	blt.w	80267ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026424:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026428:	45c4      	cmp	ip, r8
 802642a:	f280 81bf 	bge.w	80267ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802642e:	b21b      	sxth	r3, r3
 8026430:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026432:	fb0c 2203 	mla	r2, ip, r3, r2
 8026436:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802643a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802643e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026442:	2800      	cmp	r0, #0
 8026444:	f000 81a9 	beq.w	802679a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8026448:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802644c:	950c      	str	r5, [sp, #48]	; 0x30
 802644e:	0e2d      	lsrs	r5, r5, #24
 8026450:	9513      	str	r5, [sp, #76]	; 0x4c
 8026452:	b181      	cbz	r1, 8026476 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8026454:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026458:	3b01      	subs	r3, #1
 802645a:	009b      	lsls	r3, r3, #2
 802645c:	3304      	adds	r3, #4
 802645e:	eb08 0c03 	add.w	ip, r8, r3
 8026462:	f858 3003 	ldr.w	r3, [r8, r3]
 8026466:	9308      	str	r3, [sp, #32]
 8026468:	0e1b      	lsrs	r3, r3, #24
 802646a:	9311      	str	r3, [sp, #68]	; 0x44
 802646c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026470:	930d      	str	r3, [sp, #52]	; 0x34
 8026472:	0e1b      	lsrs	r3, r3, #24
 8026474:	9314      	str	r3, [sp, #80]	; 0x50
 8026476:	b280      	uxth	r0, r0
 8026478:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802647a:	b289      	uxth	r1, r1
 802647c:	fb00 f901 	mul.w	r9, r0, r1
 8026480:	0100      	lsls	r0, r0, #4
 8026482:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026486:	eba0 0809 	sub.w	r8, r0, r9
 802648a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802648e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8026490:	b289      	uxth	r1, r1
 8026492:	fa1f f888 	uxth.w	r8, r8
 8026496:	1a5b      	subs	r3, r3, r1
 8026498:	fb08 f000 	mul.w	r0, r8, r0
 802649c:	b29b      	uxth	r3, r3
 802649e:	fb03 000e 	mla	r0, r3, lr, r0
 80264a2:	fb01 0005 	mla	r0, r1, r5, r0
 80264a6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80264a8:	fb09 0005 	mla	r0, r9, r5, r0
 80264ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80264b0:	2800      	cmp	r0, #0
 80264b2:	f000 80fa 	beq.w	80266aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80264b6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80264ba:	d01b      	beq.n	80264f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80264bc:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80264c0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80264c4:	fb0e fa0a 	mul.w	sl, lr, sl
 80264c8:	fb0e fe02 	mul.w	lr, lr, r2
 80264cc:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80264d0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80264d4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80264d8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80264dc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80264e0:	4452      	add	r2, sl
 80264e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80264e6:	0a12      	lsrs	r2, r2, #8
 80264e8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80264ec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80264f0:	ea42 020c 	orr.w	r2, r2, ip
 80264f4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80264f6:	2dff      	cmp	r5, #255	; 0xff
 80264f8:	d021      	beq.n	802653e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80264fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80264fc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026500:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026502:	fb05 fb0b 	mul.w	fp, r5, fp
 8026506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026508:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802650c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802650e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026512:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026516:	fb05 fa0a 	mul.w	sl, r5, sl
 802651a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802651e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026522:	44de      	add	lr, fp
 8026524:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026528:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802652c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026530:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026534:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026538:	ea4e 050a 	orr.w	r5, lr, sl
 802653c:	950c      	str	r5, [sp, #48]	; 0x30
 802653e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026540:	2dff      	cmp	r5, #255	; 0xff
 8026542:	d021      	beq.n	8026588 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8026544:	9d08      	ldr	r5, [sp, #32]
 8026546:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802654a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802654c:	fb05 fb0b 	mul.w	fp, r5, fp
 8026550:	9d08      	ldr	r5, [sp, #32]
 8026552:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026556:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026558:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802655c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026560:	fb05 fa0a 	mul.w	sl, r5, sl
 8026564:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026568:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802656c:	44de      	add	lr, fp
 802656e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026572:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026576:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802657a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802657e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026582:	ea4e 050a 	orr.w	r5, lr, sl
 8026586:	9508      	str	r5, [sp, #32]
 8026588:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802658a:	2dff      	cmp	r5, #255	; 0xff
 802658c:	d021      	beq.n	80265d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802658e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8026590:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026594:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8026596:	fb05 fb0b 	mul.w	fp, r5, fp
 802659a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802659c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80265a0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80265a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80265a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80265aa:	fb05 fa0a 	mul.w	sl, r5, sl
 80265ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80265b2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80265b6:	44de      	add	lr, fp
 80265b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80265bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80265c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80265c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80265c8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80265cc:	ea4e 050a 	orr.w	r5, lr, sl
 80265d0:	950d      	str	r5, [sp, #52]	; 0x34
 80265d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80265d4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80265d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80265dc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80265e0:	9d08      	ldr	r5, [sp, #32]
 80265e2:	fb08 fc0c 	mul.w	ip, r8, ip
 80265e6:	fb03 cc0e 	mla	ip, r3, lr, ip
 80265ea:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80265ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80265f0:	fb01 cc0e 	mla	ip, r1, lr, ip
 80265f4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80265f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80265fa:	fb09 cc0e 	mla	ip, r9, lr, ip
 80265fe:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026602:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026604:	fb08 f80e 	mul.w	r8, r8, lr
 8026608:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802660c:	fb03 8202 	mla	r2, r3, r2, r8
 8026610:	9b08      	ldr	r3, [sp, #32]
 8026612:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026616:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802661a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802661c:	fb01 220a 	mla	r2, r1, sl, r2
 8026620:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8026624:	883b      	ldrh	r3, [r7, #0]
 8026626:	fb09 2901 	mla	r9, r9, r1, r2
 802662a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802662c:	1219      	asrs	r1, r3, #8
 802662e:	4342      	muls	r2, r0
 8026630:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026634:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026638:	1c50      	adds	r0, r2, #1
 802663a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802663e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026642:	ea4c 0c09 	orr.w	ip, ip, r9
 8026646:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802664a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802664e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026652:	fa5f fc8c 	uxtb.w	ip, ip
 8026656:	fb12 f205 	smulbb	r2, r2, r5
 802665a:	b2c0      	uxtb	r0, r0
 802665c:	fb1c fc05 	smulbb	ip, ip, r5
 8026660:	fb01 2100 	mla	r1, r1, r0, r2
 8026664:	10da      	asrs	r2, r3, #3
 8026666:	fb1e fe05 	smulbb	lr, lr, r5
 802666a:	00db      	lsls	r3, r3, #3
 802666c:	b289      	uxth	r1, r1
 802666e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026672:	b2db      	uxtb	r3, r3
 8026674:	fb02 e200 	mla	r2, r2, r0, lr
 8026678:	fb03 c300 	mla	r3, r3, r0, ip
 802667c:	b292      	uxth	r2, r2
 802667e:	fa1f fc83 	uxth.w	ip, r3
 8026682:	1c4b      	adds	r3, r1, #1
 8026684:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026688:	f10c 0301 	add.w	r3, ip, #1
 802668c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026690:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8026694:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026698:	430b      	orrs	r3, r1
 802669a:	1c51      	adds	r1, r2, #1
 802669c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80266a0:	0952      	lsrs	r2, r2, #5
 80266a2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80266a6:	4313      	orrs	r3, r2
 80266a8:	803b      	strh	r3, [r7, #0]
 80266aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80266ac:	3702      	adds	r7, #2
 80266ae:	441c      	add	r4, r3
 80266b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80266b2:	441e      	add	r6, r3
 80266b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80266b6:	3b01      	subs	r3, #1
 80266b8:	9318      	str	r3, [sp, #96]	; 0x60
 80266ba:	e698      	b.n	80263ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80266bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80266be:	441c      	add	r4, r3
 80266c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80266c2:	441e      	add	r6, r3
 80266c4:	9b07      	ldr	r3, [sp, #28]
 80266c6:	3b01      	subs	r3, #1
 80266c8:	9307      	str	r3, [sp, #28]
 80266ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80266cc:	3302      	adds	r3, #2
 80266ce:	930a      	str	r3, [sp, #40]	; 0x28
 80266d0:	e66d      	b.n	80263ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80266d2:	d023      	beq.n	802671c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80266d4:	9b07      	ldr	r3, [sp, #28]
 80266d6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80266d8:	3b01      	subs	r3, #1
 80266da:	fb00 4003 	mla	r0, r0, r3, r4
 80266de:	1400      	asrs	r0, r0, #16
 80266e0:	f53f ae82 	bmi.w	80263e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80266e4:	3901      	subs	r1, #1
 80266e6:	4288      	cmp	r0, r1
 80266e8:	f6bf ae7e 	bge.w	80263e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80266ec:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80266ee:	fb01 6303 	mla	r3, r1, r3, r6
 80266f2:	141b      	asrs	r3, r3, #16
 80266f4:	f53f ae78 	bmi.w	80263e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80266f8:	3a01      	subs	r2, #1
 80266fa:	4293      	cmp	r3, r2
 80266fc:	f6bf ae74 	bge.w	80263e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026700:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026704:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8026708:	f1bb 0f00 	cmp.w	fp, #0
 802670c:	dc6c      	bgt.n	80267e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802670e:	9b07      	ldr	r3, [sp, #28]
 8026710:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026716:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802671a:	930a      	str	r3, [sp, #40]	; 0x28
 802671c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802671e:	2b00      	cmp	r3, #0
 8026720:	f340 81b3 	ble.w	8026a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8026724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026728:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802672a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802672e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026732:	eef0 6a62 	vmov.f32	s13, s5
 8026736:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802673a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802673e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026742:	ee16 4a90 	vmov	r4, s13
 8026746:	eef0 6a43 	vmov.f32	s13, s6
 802674a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802674e:	ee16 6a90 	vmov	r6, s13
 8026752:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026756:	ee61 7a27 	vmul.f32	s15, s2, s15
 802675a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802675e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026762:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026766:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802676a:	ee12 2a90 	vmov	r2, s5
 802676e:	eef0 2a47 	vmov.f32	s5, s14
 8026772:	fb92 f3f3 	sdiv	r3, r2, r3
 8026776:	ee13 2a10 	vmov	r2, s6
 802677a:	9329      	str	r3, [sp, #164]	; 0xa4
 802677c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802677e:	eeb0 3a67 	vmov.f32	s6, s15
 8026782:	fb92 f3f3 	sdiv	r3, r2, r3
 8026786:	932a      	str	r3, [sp, #168]	; 0xa8
 8026788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802678a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802678c:	3b01      	subs	r3, #1
 802678e:	9317      	str	r3, [sp, #92]	; 0x5c
 8026790:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026792:	bf08      	it	eq
 8026794:	4613      	moveq	r3, r2
 8026796:	9307      	str	r3, [sp, #28]
 8026798:	e5fb      	b.n	8026392 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802679a:	2900      	cmp	r1, #0
 802679c:	f43f ae6b 	beq.w	8026476 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80267a0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80267a4:	9308      	str	r3, [sp, #32]
 80267a6:	0e1b      	lsrs	r3, r3, #24
 80267a8:	9311      	str	r3, [sp, #68]	; 0x44
 80267aa:	e664      	b.n	8026476 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80267ac:	f112 0801 	adds.w	r8, r2, #1
 80267b0:	f53f af7b 	bmi.w	80266aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80267b4:	4543      	cmp	r3, r8
 80267b6:	f6ff af78 	blt.w	80266aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80267ba:	f11c 0801 	adds.w	r8, ip, #1
 80267be:	f53f af74 	bmi.w	80266aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80267c2:	45c6      	cmp	lr, r8
 80267c4:	f6ff af71 	blt.w	80266aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80267c8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80267ca:	b21b      	sxth	r3, r3
 80267cc:	9201      	str	r2, [sp, #4]
 80267ce:	fa0f f28e 	sxth.w	r2, lr
 80267d2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80267d6:	e9cd c002 	strd	ip, r0, [sp, #8]
 80267da:	9200      	str	r2, [sp, #0]
 80267dc:	4639      	mov	r1, r7
 80267de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80267e0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80267e2:	f7ff fc79 	bl	80260d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80267e6:	e760      	b.n	80266aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80267e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80267ea:	1427      	asrs	r7, r4, #16
 80267ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80267ee:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80267f2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80267f6:	1433      	asrs	r3, r6, #16
 80267f8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80267fc:	fb01 7303 	mla	r3, r1, r3, r7
 8026800:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8026804:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8026808:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802680c:	2a00      	cmp	r2, #0
 802680e:	f000 8133 	beq.w	8026a78 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8026812:	687d      	ldr	r5, [r7, #4]
 8026814:	950e      	str	r5, [sp, #56]	; 0x38
 8026816:	0e2d      	lsrs	r5, r5, #24
 8026818:	9515      	str	r5, [sp, #84]	; 0x54
 802681a:	b178      	cbz	r0, 802683c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802681c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8026820:	3901      	subs	r1, #1
 8026822:	0089      	lsls	r1, r1, #2
 8026824:	3104      	adds	r1, #4
 8026826:	eb07 0e01 	add.w	lr, r7, r1
 802682a:	5879      	ldr	r1, [r7, r1]
 802682c:	9109      	str	r1, [sp, #36]	; 0x24
 802682e:	0e09      	lsrs	r1, r1, #24
 8026830:	9112      	str	r1, [sp, #72]	; 0x48
 8026832:	f8de 1004 	ldr.w	r1, [lr, #4]
 8026836:	910f      	str	r1, [sp, #60]	; 0x3c
 8026838:	0e09      	lsrs	r1, r1, #24
 802683a:	9116      	str	r1, [sp, #88]	; 0x58
 802683c:	b292      	uxth	r2, r2
 802683e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8026840:	b280      	uxth	r0, r0
 8026842:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026844:	fb02 f800 	mul.w	r8, r2, r0
 8026848:	0112      	lsls	r2, r2, #4
 802684a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802684e:	eba2 0e08 	sub.w	lr, r2, r8
 8026852:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026856:	b280      	uxth	r0, r0
 8026858:	fa1f fe8e 	uxth.w	lr, lr
 802685c:	1a12      	subs	r2, r2, r0
 802685e:	fb0e f101 	mul.w	r1, lr, r1
 8026862:	b292      	uxth	r2, r2
 8026864:	fb02 110c 	mla	r1, r2, ip, r1
 8026868:	fb00 1105 	mla	r1, r0, r5, r1
 802686c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802686e:	fb08 1105 	mla	r1, r8, r5, r1
 8026872:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026876:	2900      	cmp	r1, #0
 8026878:	f000 80f5 	beq.w	8026a66 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802687c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026880:	d019      	beq.n	80268b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8026882:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802688a:	fb0c fa0a 	mul.w	sl, ip, sl
 802688e:	fb0c fc03 	mul.w	ip, ip, r3
 8026892:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026896:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802689a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802689e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80268a2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80268a6:	4453      	add	r3, sl
 80268a8:	0a3f      	lsrs	r7, r7, #8
 80268aa:	0a1b      	lsrs	r3, r3, #8
 80268ac:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80268b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80268b4:	433b      	orrs	r3, r7
 80268b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80268b8:	2dff      	cmp	r5, #255	; 0xff
 80268ba:	d020      	beq.n	80268fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 80268bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80268be:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80268c2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80268c4:	436f      	muls	r7, r5
 80268c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80268c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80268cc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80268d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80268d2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80268d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268da:	fb05 fa0a 	mul.w	sl, r5, sl
 80268de:	44bc      	add	ip, r7
 80268e0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80268e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80268e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80268ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80268f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80268f8:	ea4c 050a 	orr.w	r5, ip, sl
 80268fc:	950e      	str	r5, [sp, #56]	; 0x38
 80268fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026900:	2dff      	cmp	r5, #255	; 0xff
 8026902:	d020      	beq.n	8026946 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8026904:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026906:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802690a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802690c:	436f      	muls	r7, r5
 802690e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8026910:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026914:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026918:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802691a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802691e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026922:	fb05 fa0a 	mul.w	sl, r5, sl
 8026926:	44bc      	add	ip, r7
 8026928:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802692c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026930:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026934:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026938:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802693c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026940:	ea4c 050a 	orr.w	r5, ip, sl
 8026944:	9509      	str	r5, [sp, #36]	; 0x24
 8026946:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8026948:	2dff      	cmp	r5, #255	; 0xff
 802694a:	d020      	beq.n	802698e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802694c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802694e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8026952:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8026954:	436f      	muls	r7, r5
 8026956:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026958:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802695c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026960:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8026962:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026966:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802696a:	fb05 fa0a 	mul.w	sl, r5, sl
 802696e:	44bc      	add	ip, r7
 8026970:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026974:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026978:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802697c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026980:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026984:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026988:	ea4c 050a 	orr.w	r5, ip, sl
 802698c:	950f      	str	r5, [sp, #60]	; 0x3c
 802698e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026990:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8026994:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026998:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802699c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802699e:	fb0e f707 	mul.w	r7, lr, r7
 80269a2:	fb02 770c 	mla	r7, r2, ip, r7
 80269a6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80269aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80269ac:	fb00 770c 	mla	r7, r0, ip, r7
 80269b0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80269b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80269b6:	fb08 770c 	mla	r7, r8, ip, r7
 80269ba:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80269be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80269c0:	fb0e fe0c 	mul.w	lr, lr, ip
 80269c4:	0a3f      	lsrs	r7, r7, #8
 80269c6:	fb02 e303 	mla	r3, r2, r3, lr
 80269ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80269cc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80269d0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80269d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80269d6:	fb00 330a 	mla	r3, r0, sl, r3
 80269da:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80269de:	f8b9 0000 	ldrh.w	r0, [r9]
 80269e2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80269e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80269e8:	1202      	asrs	r2, r0, #8
 80269ea:	4359      	muls	r1, r3
 80269ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80269f0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80269f4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80269f8:	1c4b      	adds	r3, r1, #1
 80269fa:	ea47 070c 	orr.w	r7, r7, ip
 80269fe:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026a02:	0c3b      	lsrs	r3, r7, #16
 8026a04:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026a08:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026a0c:	b2ff      	uxtb	r7, r7
 8026a0e:	fb13 f305 	smulbb	r3, r3, r5
 8026a12:	b2c9      	uxtb	r1, r1
 8026a14:	fb17 f705 	smulbb	r7, r7, r5
 8026a18:	fb02 3201 	mla	r2, r2, r1, r3
 8026a1c:	10c3      	asrs	r3, r0, #3
 8026a1e:	fb1c fc05 	smulbb	ip, ip, r5
 8026a22:	00c0      	lsls	r0, r0, #3
 8026a24:	b292      	uxth	r2, r2
 8026a26:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026a2a:	b2c0      	uxtb	r0, r0
 8026a2c:	fb03 c301 	mla	r3, r3, r1, ip
 8026a30:	fb00 7001 	mla	r0, r0, r1, r7
 8026a34:	1c51      	adds	r1, r2, #1
 8026a36:	b29b      	uxth	r3, r3
 8026a38:	b280      	uxth	r0, r0
 8026a3a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026a3e:	f100 0c01 	add.w	ip, r0, #1
 8026a42:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026a46:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8026a4a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8026a4e:	ea4c 0202 	orr.w	r2, ip, r2
 8026a52:	f103 0c01 	add.w	ip, r3, #1
 8026a56:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026a5a:	095b      	lsrs	r3, r3, #5
 8026a5c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026a60:	431a      	orrs	r2, r3
 8026a62:	f8a9 2000 	strh.w	r2, [r9]
 8026a66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026a68:	f109 0902 	add.w	r9, r9, #2
 8026a6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026a70:	441c      	add	r4, r3
 8026a72:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026a74:	441e      	add	r6, r3
 8026a76:	e647      	b.n	8026708 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026a78:	2800      	cmp	r0, #0
 8026a7a:	f43f aedf 	beq.w	802683c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026a7e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8026a82:	9109      	str	r1, [sp, #36]	; 0x24
 8026a84:	0e09      	lsrs	r1, r1, #24
 8026a86:	9112      	str	r1, [sp, #72]	; 0x48
 8026a88:	e6d8      	b.n	802683c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8026a8a:	b01d      	add	sp, #116	; 0x74
 8026a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026a90 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8026a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a94:	b085      	sub	sp, #20
 8026a96:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8026a9a:	9102      	str	r1, [sp, #8]
 8026a9c:	2c00      	cmp	r4, #0
 8026a9e:	fb04 7103 	mla	r1, r4, r3, r7
 8026aa2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8026aa6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8026aaa:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8026aae:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026ab2:	f2c0 810c 	blt.w	8026cce <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8026ab6:	45a6      	cmp	lr, r4
 8026ab8:	f340 8109 	ble.w	8026cce <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8026abc:	2f00      	cmp	r7, #0
 8026abe:	f2c0 8104 	blt.w	8026cca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8026ac2:	42bb      	cmp	r3, r7
 8026ac4:	f340 8101 	ble.w	8026cca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8026ac8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8026acc:	1c7a      	adds	r2, r7, #1
 8026ace:	f100 8101 	bmi.w	8026cd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8026ad2:	4293      	cmp	r3, r2
 8026ad4:	f340 80fe 	ble.w	8026cd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8026ad8:	2e00      	cmp	r6, #0
 8026ada:	f000 80fd 	beq.w	8026cd8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8026ade:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8026ae2:	3401      	adds	r4, #1
 8026ae4:	f100 80fc 	bmi.w	8026ce0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8026ae8:	45a6      	cmp	lr, r4
 8026aea:	f340 80f9 	ble.w	8026ce0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8026aee:	2800      	cmp	r0, #0
 8026af0:	f000 80f9 	beq.w	8026ce6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8026af4:	2f00      	cmp	r7, #0
 8026af6:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8026afa:	f2c0 80ef 	blt.w	8026cdc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8026afe:	42bb      	cmp	r3, r7
 8026b00:	f340 80ec 	ble.w	8026cdc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8026b04:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8026b08:	3701      	adds	r7, #1
 8026b0a:	f100 80ef 	bmi.w	8026cec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8026b0e:	42bb      	cmp	r3, r7
 8026b10:	f340 80ec 	ble.w	8026cec <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8026b14:	2e00      	cmp	r6, #0
 8026b16:	f000 80eb 	beq.w	8026cf0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8026b1a:	6852      	ldr	r2, [r2, #4]
 8026b1c:	b2b6      	uxth	r6, r6
 8026b1e:	b280      	uxth	r0, r0
 8026b20:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026b24:	fb00 fe06 	mul.w	lr, r0, r6
 8026b28:	0136      	lsls	r6, r6, #4
 8026b2a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026b2e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8026b32:	eba6 070e 	sub.w	r7, r6, lr
 8026b36:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8026b3a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026b3e:	b280      	uxth	r0, r0
 8026b40:	b2bf      	uxth	r7, r7
 8026b42:	1a1b      	subs	r3, r3, r0
 8026b44:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8026b48:	fb07 f60a 	mul.w	r6, r7, sl
 8026b4c:	b29b      	uxth	r3, r3
 8026b4e:	fb0b 6603 	mla	r6, fp, r3, r6
 8026b52:	fb00 6609 	mla	r6, r0, r9, r6
 8026b56:	fb0e 6608 	mla	r6, lr, r8, r6
 8026b5a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026b5e:	9600      	str	r6, [sp, #0]
 8026b60:	2e00      	cmp	r6, #0
 8026b62:	f000 80af 	beq.w	8026cc4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8026b66:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026b6a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026b6e:	9e02      	ldr	r6, [sp, #8]
 8026b70:	fb0b fc0c 	mul.w	ip, fp, ip
 8026b74:	fb0b f505 	mul.w	r5, fp, r5
 8026b78:	8836      	ldrh	r6, [r6, #0]
 8026b7a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026b7e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026b82:	9501      	str	r5, [sp, #4]
 8026b84:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8026b88:	44dc      	add	ip, fp
 8026b8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b8e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8026b92:	9503      	str	r5, [sp, #12]
 8026b94:	9d01      	ldr	r5, [sp, #4]
 8026b96:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8026b9a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026b9e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8026ba2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026ba6:	fb0a fc0c 	mul.w	ip, sl, ip
 8026baa:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026bae:	fb0a fa01 	mul.w	sl, sl, r1
 8026bb2:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026bb6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026bba:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8026bbe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026bc2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8026bc6:	4465      	add	r5, ip
 8026bc8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026bcc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026bd0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026bd4:	fb09 fc0c 	mul.w	ip, r9, ip
 8026bd8:	0a2d      	lsrs	r5, r5, #8
 8026bda:	fb09 f904 	mul.w	r9, r9, r4
 8026bde:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026be2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8026be6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026bea:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8026bee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026bf2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026bf6:	437d      	muls	r5, r7
 8026bf8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026bfc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8026c00:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026c04:	4461      	add	r1, ip
 8026c06:	fb08 f404 	mul.w	r4, r8, r4
 8026c0a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026c0e:	fb08 f802 	mul.w	r8, r8, r2
 8026c12:	0a09      	lsrs	r1, r1, #8
 8026c14:	0a22      	lsrs	r2, r4, #8
 8026c16:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8026c1a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026c1e:	fb07 f70a 	mul.w	r7, r7, sl
 8026c22:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026c26:	4414      	add	r4, r2
 8026c28:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8026c2c:	0a24      	lsrs	r4, r4, #8
 8026c2e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026c32:	9a03      	ldr	r2, [sp, #12]
 8026c34:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026c38:	fb02 5503 	mla	r5, r2, r3, r5
 8026c3c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026c40:	fb04 540e 	mla	r4, r4, lr, r5
 8026c44:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026c48:	fb01 4100 	mla	r1, r1, r0, r4
 8026c4c:	0a09      	lsrs	r1, r1, #8
 8026c4e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8026c52:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8026c56:	fb03 7101 	mla	r1, r3, r1, r7
 8026c5a:	9b00      	ldr	r3, [sp, #0]
 8026c5c:	fb0e 1e08 	mla	lr, lr, r8, r1
 8026c60:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8026c64:	43da      	mvns	r2, r3
 8026c66:	1233      	asrs	r3, r6, #8
 8026c68:	fb00 e101 	mla	r1, r0, r1, lr
 8026c6c:	10f0      	asrs	r0, r6, #3
 8026c6e:	b2d2      	uxtb	r2, r2
 8026c70:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026c74:	0a09      	lsrs	r1, r1, #8
 8026c76:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026c7a:	00f6      	lsls	r6, r6, #3
 8026c7c:	4353      	muls	r3, r2
 8026c7e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026c82:	4350      	muls	r0, r2
 8026c84:	b2f6      	uxtb	r6, r6
 8026c86:	4321      	orrs	r1, r4
 8026c88:	4356      	muls	r6, r2
 8026c8a:	1c5a      	adds	r2, r3, #1
 8026c8c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026c90:	0c0b      	lsrs	r3, r1, #16
 8026c92:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026c96:	1c42      	adds	r2, r0, #1
 8026c98:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026c9c:	0a0a      	lsrs	r2, r1, #8
 8026c9e:	021b      	lsls	r3, r3, #8
 8026ca0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026ca4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026ca8:	00d2      	lsls	r2, r2, #3
 8026caa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026cae:	4313      	orrs	r3, r2
 8026cb0:	1c72      	adds	r2, r6, #1
 8026cb2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8026cb6:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8026cba:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8026cbe:	4319      	orrs	r1, r3
 8026cc0:	9b02      	ldr	r3, [sp, #8]
 8026cc2:	8019      	strh	r1, [r3, #0]
 8026cc4:	b005      	add	sp, #20
 8026cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026cca:	2500      	movs	r5, #0
 8026ccc:	e6fe      	b.n	8026acc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8026cce:	2100      	movs	r1, #0
 8026cd0:	460d      	mov	r5, r1
 8026cd2:	e706      	b.n	8026ae2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8026cd4:	2100      	movs	r1, #0
 8026cd6:	e704      	b.n	8026ae2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8026cd8:	4631      	mov	r1, r6
 8026cda:	e702      	b.n	8026ae2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8026cdc:	2400      	movs	r4, #0
 8026cde:	e713      	b.n	8026b08 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8026ce0:	2200      	movs	r2, #0
 8026ce2:	4614      	mov	r4, r2
 8026ce4:	e71a      	b.n	8026b1c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8026ce6:	4602      	mov	r2, r0
 8026ce8:	4604      	mov	r4, r0
 8026cea:	e717      	b.n	8026b1c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8026cec:	2200      	movs	r2, #0
 8026cee:	e715      	b.n	8026b1c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8026cf0:	4632      	mov	r2, r6
 8026cf2:	e713      	b.n	8026b1c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08026cf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cf8:	b09b      	sub	sp, #108	; 0x6c
 8026cfa:	9218      	str	r2, [sp, #96]	; 0x60
 8026cfc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026cfe:	9019      	str	r0, [sp, #100]	; 0x64
 8026d00:	9116      	str	r1, [sp, #88]	; 0x58
 8026d02:	6850      	ldr	r0, [r2, #4]
 8026d04:	9307      	str	r3, [sp, #28]
 8026d06:	6812      	ldr	r2, [r2, #0]
 8026d08:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026d0c:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8026d10:	fb00 1303 	mla	r3, r0, r3, r1
 8026d14:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026d18:	930a      	str	r3, [sp, #40]	; 0x28
 8026d1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d1c:	681b      	ldr	r3, [r3, #0]
 8026d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026d20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026d22:	2b00      	cmp	r3, #0
 8026d24:	dc03      	bgt.n	8026d2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026d26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026d28:	2b00      	cmp	r3, #0
 8026d2a:	f340 8387 	ble.w	802743c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026d2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026d34:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026d38:	1e48      	subs	r0, r1, #1
 8026d3a:	1e57      	subs	r7, r2, #1
 8026d3c:	9b07      	ldr	r3, [sp, #28]
 8026d3e:	2b00      	cmp	r3, #0
 8026d40:	f340 8166 	ble.w	8027010 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8026d44:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026d48:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026d4c:	d406      	bmi.n	8026d5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026d4e:	4584      	cmp	ip, r0
 8026d50:	da04      	bge.n	8026d5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026d52:	2b00      	cmp	r3, #0
 8026d54:	db02      	blt.n	8026d5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026d56:	42bb      	cmp	r3, r7
 8026d58:	f2c0 815b 	blt.w	8027012 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8026d5c:	f11c 0c01 	adds.w	ip, ip, #1
 8026d60:	f100 814b 	bmi.w	8026ffa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026d64:	4561      	cmp	r1, ip
 8026d66:	f2c0 8148 	blt.w	8026ffa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026d6a:	3301      	adds	r3, #1
 8026d6c:	f100 8145 	bmi.w	8026ffa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026d70:	429a      	cmp	r2, r3
 8026d72:	f2c0 8142 	blt.w	8026ffa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026d76:	9b07      	ldr	r3, [sp, #28]
 8026d78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026d7a:	9317      	str	r3, [sp, #92]	; 0x5c
 8026d7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026d7e:	2b00      	cmp	r3, #0
 8026d80:	f340 8165 	ble.w	802704e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026d84:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8026d86:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026d8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d8c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8026d90:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026d94:	1422      	asrs	r2, r4, #16
 8026d96:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026d9a:	689b      	ldr	r3, [r3, #8]
 8026d9c:	f100 81d5 	bmi.w	802714a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026da0:	f103 38ff 	add.w	r8, r3, #4294967295
 8026da4:	4542      	cmp	r2, r8
 8026da6:	f280 81d0 	bge.w	802714a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026daa:	f1bc 0f00 	cmp.w	ip, #0
 8026dae:	f2c0 81cc 	blt.w	802714a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026db2:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026db6:	45c4      	cmp	ip, r8
 8026db8:	f280 81c7 	bge.w	802714a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8026dbc:	b21b      	sxth	r3, r3
 8026dbe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026dc0:	fb0c 2203 	mla	r2, ip, r3, r2
 8026dc4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8026dc8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8026dcc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8026dd0:	2900      	cmp	r1, #0
 8026dd2:	f000 8182 	beq.w	80270da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8026dd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8026dda:	950b      	str	r5, [sp, #44]	; 0x2c
 8026ddc:	0e2d      	lsrs	r5, r5, #24
 8026dde:	9512      	str	r5, [sp, #72]	; 0x48
 8026de0:	b180      	cbz	r0, 8026e04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8026de2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8026de6:	3b01      	subs	r3, #1
 8026de8:	009b      	lsls	r3, r3, #2
 8026dea:	3304      	adds	r3, #4
 8026dec:	eb08 0c03 	add.w	ip, r8, r3
 8026df0:	f858 3003 	ldr.w	r3, [r8, r3]
 8026df4:	9308      	str	r3, [sp, #32]
 8026df6:	0e1b      	lsrs	r3, r3, #24
 8026df8:	9310      	str	r3, [sp, #64]	; 0x40
 8026dfa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8026dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8026e00:	0e1b      	lsrs	r3, r3, #24
 8026e02:	9313      	str	r3, [sp, #76]	; 0x4c
 8026e04:	b289      	uxth	r1, r1
 8026e06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8026e08:	b280      	uxth	r0, r0
 8026e0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026e0c:	fb01 f900 	mul.w	r9, r1, r0
 8026e10:	0109      	lsls	r1, r1, #4
 8026e12:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026e16:	eba1 0809 	sub.w	r8, r1, r9
 8026e1a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8026e1e:	b280      	uxth	r0, r0
 8026e20:	fa1f f888 	uxth.w	r8, r8
 8026e24:	1a09      	subs	r1, r1, r0
 8026e26:	fb08 f303 	mul.w	r3, r8, r3
 8026e2a:	b289      	uxth	r1, r1
 8026e2c:	fb01 330e 	mla	r3, r1, lr, r3
 8026e30:	fb00 3305 	mla	r3, r0, r5, r3
 8026e34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026e36:	fb09 3305 	mla	r3, r9, r5, r3
 8026e3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026e3e:	2b00      	cmp	r3, #0
 8026e40:	f000 80d2 	beq.w	8026fe8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8026e44:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026e48:	d01b      	beq.n	8026e82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026e4a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8026e4e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026e52:	fb0e fa0a 	mul.w	sl, lr, sl
 8026e56:	fb0e fe02 	mul.w	lr, lr, r2
 8026e5a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8026e5e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026e62:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026e66:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026e6a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026e6e:	4452      	add	r2, sl
 8026e70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e74:	0a12      	lsrs	r2, r2, #8
 8026e76:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026e7a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026e7e:	ea42 020c 	orr.w	r2, r2, ip
 8026e82:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026e84:	2dff      	cmp	r5, #255	; 0xff
 8026e86:	d021      	beq.n	8026ecc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8026e88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026e8a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026e8e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026e90:	fb05 fb0b 	mul.w	fp, r5, fp
 8026e94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026e96:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026e9a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8026e9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026ea0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026ea4:	fb05 fa0a 	mul.w	sl, r5, sl
 8026ea8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026eac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026eb0:	44de      	add	lr, fp
 8026eb2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026eb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026eba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026ebe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ec2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026ec6:	ea4e 050a 	orr.w	r5, lr, sl
 8026eca:	950b      	str	r5, [sp, #44]	; 0x2c
 8026ecc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026ece:	2dff      	cmp	r5, #255	; 0xff
 8026ed0:	d021      	beq.n	8026f16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8026ed2:	9d08      	ldr	r5, [sp, #32]
 8026ed4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026ed8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026eda:	fb05 fb0b 	mul.w	fp, r5, fp
 8026ede:	9d08      	ldr	r5, [sp, #32]
 8026ee0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026ee4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8026ee6:	fb05 fa0e 	mul.w	sl, r5, lr
 8026eea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026eee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026ef2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026ef6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026efa:	44de      	add	lr, fp
 8026efc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026f00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026f0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026f10:	ea4e 050a 	orr.w	r5, lr, sl
 8026f14:	9508      	str	r5, [sp, #32]
 8026f16:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026f18:	2dff      	cmp	r5, #255	; 0xff
 8026f1a:	d021      	beq.n	8026f60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026f1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026f1e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8026f22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026f24:	fb05 fb0b 	mul.w	fp, r5, fp
 8026f28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026f2a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8026f2e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8026f30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026f34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026f38:	fb05 fa0a 	mul.w	sl, r5, sl
 8026f3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026f40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026f44:	44de      	add	lr, fp
 8026f46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026f4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026f52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026f56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026f5a:	ea4e 050a 	orr.w	r5, lr, sl
 8026f5e:	950c      	str	r5, [sp, #48]	; 0x30
 8026f60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026f62:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8026f66:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026f6a:	2bff      	cmp	r3, #255	; 0xff
 8026f6c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026f70:	9d08      	ldr	r5, [sp, #32]
 8026f72:	fb08 fc0c 	mul.w	ip, r8, ip
 8026f76:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026f7a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026f80:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026f84:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8026f88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8026f8a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026f8e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8026f92:	fb08 f80e 	mul.w	r8, r8, lr
 8026f96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026f9a:	fb01 8202 	mla	r2, r1, r2, r8
 8026f9e:	9908      	ldr	r1, [sp, #32]
 8026fa0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026fa4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8026fa8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026faa:	fb00 220a 	mla	r2, r0, sl, r2
 8026fae:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8026fb2:	fb09 2900 	mla	r9, r9, r0, r2
 8026fb6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026fba:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026fbe:	ea4c 0c09 	orr.w	ip, ip, r9
 8026fc2:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8026fc6:	f040 8091 	bne.w	80270ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8026fca:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8026fce:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8026fd2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026fd6:	f022 0207 	bic.w	r2, r2, #7
 8026fda:	431a      	orrs	r2, r3
 8026fdc:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8026fe0:	ea4c 0c02 	orr.w	ip, ip, r2
 8026fe4:	f8a7 c000 	strh.w	ip, [r7]
 8026fe8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026fea:	3702      	adds	r7, #2
 8026fec:	441c      	add	r4, r3
 8026fee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026ff0:	441e      	add	r6, r3
 8026ff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026ff4:	3b01      	subs	r3, #1
 8026ff6:	9317      	str	r3, [sp, #92]	; 0x5c
 8026ff8:	e6c0      	b.n	8026d7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8026ffa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026ffc:	441c      	add	r4, r3
 8026ffe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027000:	441e      	add	r6, r3
 8027002:	9b07      	ldr	r3, [sp, #28]
 8027004:	3b01      	subs	r3, #1
 8027006:	9307      	str	r3, [sp, #28]
 8027008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802700a:	3302      	adds	r3, #2
 802700c:	930a      	str	r3, [sp, #40]	; 0x28
 802700e:	e695      	b.n	8026d3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027010:	d024      	beq.n	802705c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8027012:	9b07      	ldr	r3, [sp, #28]
 8027014:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027016:	3b01      	subs	r3, #1
 8027018:	fb00 4003 	mla	r0, r0, r3, r4
 802701c:	1400      	asrs	r0, r0, #16
 802701e:	f53f aeaa 	bmi.w	8026d76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027022:	3901      	subs	r1, #1
 8027024:	4288      	cmp	r0, r1
 8027026:	f6bf aea6 	bge.w	8026d76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802702a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802702c:	fb01 6303 	mla	r3, r1, r3, r6
 8027030:	141b      	asrs	r3, r3, #16
 8027032:	f53f aea0 	bmi.w	8026d76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027036:	3a01      	subs	r2, #1
 8027038:	4293      	cmp	r3, r2
 802703a:	f6bf ae9c 	bge.w	8026d76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802703e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027042:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8027046:	f1bb 0f00 	cmp.w	fp, #0
 802704a:	f300 809a 	bgt.w	8027182 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802704e:	9b07      	ldr	r3, [sp, #28]
 8027050:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027056:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802705a:	930a      	str	r3, [sp, #40]	; 0x28
 802705c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802705e:	2b00      	cmp	r3, #0
 8027060:	f340 81ec 	ble.w	802743c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8027064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027068:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802706a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802706e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027072:	eef0 6a62 	vmov.f32	s13, s5
 8027076:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802707a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802707e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027082:	ee16 4a90 	vmov	r4, s13
 8027086:	eef0 6a43 	vmov.f32	s13, s6
 802708a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802708e:	ee16 6a90 	vmov	r6, s13
 8027092:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027096:	ee61 7a27 	vmul.f32	s15, s2, s15
 802709a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802709e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80270a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80270a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80270aa:	ee12 2a90 	vmov	r2, s5
 80270ae:	eef0 2a47 	vmov.f32	s5, s14
 80270b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80270b6:	ee13 2a10 	vmov	r2, s6
 80270ba:	9327      	str	r3, [sp, #156]	; 0x9c
 80270bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80270be:	eeb0 3a67 	vmov.f32	s6, s15
 80270c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80270c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80270c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80270ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80270cc:	3b01      	subs	r3, #1
 80270ce:	9316      	str	r3, [sp, #88]	; 0x58
 80270d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80270d2:	bf08      	it	eq
 80270d4:	4613      	moveq	r3, r2
 80270d6:	9307      	str	r3, [sp, #28]
 80270d8:	e622      	b.n	8026d20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 80270da:	2800      	cmp	r0, #0
 80270dc:	f43f ae92 	beq.w	8026e04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80270e0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80270e4:	9308      	str	r3, [sp, #32]
 80270e6:	0e1b      	lsrs	r3, r3, #24
 80270e8:	9310      	str	r3, [sp, #64]	; 0x40
 80270ea:	e68b      	b.n	8026e04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80270ec:	8839      	ldrh	r1, [r7, #0]
 80270ee:	43db      	mvns	r3, r3
 80270f0:	4dd4      	ldr	r5, [pc, #848]	; (8027444 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80270f2:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80270f6:	fa5f f883 	uxtb.w	r8, r3
 80270fa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80270fe:	10c8      	asrs	r0, r1, #3
 8027100:	00cb      	lsls	r3, r1, #3
 8027102:	fb0e fe08 	mul.w	lr, lr, r8
 8027106:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802710a:	b2db      	uxtb	r3, r3
 802710c:	f10e 0101 	add.w	r1, lr, #1
 8027110:	fb00 f008 	mul.w	r0, r0, r8
 8027114:	fb03 f308 	mul.w	r3, r3, r8
 8027118:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802711c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8027120:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8027124:	f100 0e01 	add.w	lr, r0, #1
 8027128:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802712c:	b2c9      	uxtb	r1, r1
 802712e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8027132:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8027136:	00d2      	lsls	r2, r2, #3
 8027138:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802713c:	430a      	orrs	r2, r1
 802713e:	1c59      	adds	r1, r3, #1
 8027140:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027144:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8027148:	e748      	b.n	8026fdc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802714a:	f112 0801 	adds.w	r8, r2, #1
 802714e:	f53f af4b 	bmi.w	8026fe8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027152:	4543      	cmp	r3, r8
 8027154:	f6ff af48 	blt.w	8026fe8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027158:	f11c 0801 	adds.w	r8, ip, #1
 802715c:	f53f af44 	bmi.w	8026fe8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027160:	45c6      	cmp	lr, r8
 8027162:	f6ff af41 	blt.w	8026fe8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027166:	b21b      	sxth	r3, r3
 8027168:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802716c:	fa0f f28e 	sxth.w	r2, lr
 8027170:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8027174:	9200      	str	r2, [sp, #0]
 8027176:	4639      	mov	r1, r7
 8027178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802717a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802717c:	f7ff fc88 	bl	8026a90 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8027180:	e732      	b.n	8026fe8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8027182:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027184:	1421      	asrs	r1, r4, #16
 8027186:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027188:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802718c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8027190:	1433      	asrs	r3, r6, #16
 8027192:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027196:	fb07 1303 	mla	r3, r7, r3, r1
 802719a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802719c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80271a0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80271a4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80271a8:	2a00      	cmp	r2, #0
 80271aa:	f000 8108 	beq.w	80273be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 80271ae:	684d      	ldr	r5, [r1, #4]
 80271b0:	950d      	str	r5, [sp, #52]	; 0x34
 80271b2:	0e2d      	lsrs	r5, r5, #24
 80271b4:	9514      	str	r5, [sp, #80]	; 0x50
 80271b6:	b178      	cbz	r0, 80271d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80271b8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80271bc:	3f01      	subs	r7, #1
 80271be:	00bf      	lsls	r7, r7, #2
 80271c0:	3704      	adds	r7, #4
 80271c2:	eb01 0e07 	add.w	lr, r1, r7
 80271c6:	59c9      	ldr	r1, [r1, r7]
 80271c8:	9109      	str	r1, [sp, #36]	; 0x24
 80271ca:	0e09      	lsrs	r1, r1, #24
 80271cc:	9111      	str	r1, [sp, #68]	; 0x44
 80271ce:	f8de 1004 	ldr.w	r1, [lr, #4]
 80271d2:	910e      	str	r1, [sp, #56]	; 0x38
 80271d4:	0e09      	lsrs	r1, r1, #24
 80271d6:	9115      	str	r1, [sp, #84]	; 0x54
 80271d8:	b292      	uxth	r2, r2
 80271da:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80271dc:	b280      	uxth	r0, r0
 80271de:	fb02 f900 	mul.w	r9, r2, r0
 80271e2:	0112      	lsls	r2, r2, #4
 80271e4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80271e8:	eba2 0e09 	sub.w	lr, r2, r9
 80271ec:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80271f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80271f2:	b280      	uxth	r0, r0
 80271f4:	fa1f fe8e 	uxth.w	lr, lr
 80271f8:	1a09      	subs	r1, r1, r0
 80271fa:	fb0e f202 	mul.w	r2, lr, r2
 80271fe:	b289      	uxth	r1, r1
 8027200:	fb01 220c 	mla	r2, r1, ip, r2
 8027204:	fb00 2205 	mla	r2, r0, r5, r2
 8027208:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802720a:	fb09 2205 	mla	r2, r9, r5, r2
 802720e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027212:	2a00      	cmp	r2, #0
 8027214:	f000 80ca 	beq.w	80273ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8027218:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802721c:	d019      	beq.n	8027252 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802721e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027222:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027226:	fb0c fa0a 	mul.w	sl, ip, sl
 802722a:	fb0c fc03 	mul.w	ip, ip, r3
 802722e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027232:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027236:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802723a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802723e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027242:	4453      	add	r3, sl
 8027244:	0a3f      	lsrs	r7, r7, #8
 8027246:	0a1b      	lsrs	r3, r3, #8
 8027248:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802724c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027250:	433b      	orrs	r3, r7
 8027252:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027254:	2dff      	cmp	r5, #255	; 0xff
 8027256:	d020      	beq.n	802729a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8027258:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802725a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802725e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027260:	436f      	muls	r7, r5
 8027262:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027264:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027268:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802726c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802726e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027272:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027276:	fb05 fa0a 	mul.w	sl, r5, sl
 802727a:	44bc      	add	ip, r7
 802727c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027280:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027284:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027288:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802728c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027290:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027294:	ea4c 050a 	orr.w	r5, ip, sl
 8027298:	950d      	str	r5, [sp, #52]	; 0x34
 802729a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802729c:	2dff      	cmp	r5, #255	; 0xff
 802729e:	d020      	beq.n	80272e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 80272a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80272a2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80272a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80272a8:	436f      	muls	r7, r5
 80272aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80272ac:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80272b0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80272b2:	fb05 fa0c 	mul.w	sl, r5, ip
 80272b6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80272ba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80272be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80272c2:	44bc      	add	ip, r7
 80272c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80272c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80272cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80272d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80272d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80272dc:	ea4c 050a 	orr.w	r5, ip, sl
 80272e0:	9509      	str	r5, [sp, #36]	; 0x24
 80272e2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80272e4:	2dff      	cmp	r5, #255	; 0xff
 80272e6:	d020      	beq.n	802732a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80272e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80272ea:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80272ee:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80272f0:	436f      	muls	r7, r5
 80272f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80272f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80272f8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80272fc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80272fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027302:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027306:	fb05 fa0a 	mul.w	sl, r5, sl
 802730a:	44bc      	add	ip, r7
 802730c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027310:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027314:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027318:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802731c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027320:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027324:	ea4c 050a 	orr.w	r5, ip, sl
 8027328:	950e      	str	r5, [sp, #56]	; 0x38
 802732a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802732c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027330:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027334:	2aff      	cmp	r2, #255	; 0xff
 8027336:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802733a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802733c:	fb0e f707 	mul.w	r7, lr, r7
 8027340:	fb01 770c 	mla	r7, r1, ip, r7
 8027344:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027348:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802734a:	fb00 770c 	mla	r7, r0, ip, r7
 802734e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027352:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027354:	fb09 770c 	mla	r7, r9, ip, r7
 8027358:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802735c:	fb0e fe0c 	mul.w	lr, lr, ip
 8027360:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8027364:	fb01 e303 	mla	r3, r1, r3, lr
 8027368:	9909      	ldr	r1, [sp, #36]	; 0x24
 802736a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802736e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027372:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027374:	fb00 330a 	mla	r3, r0, sl, r3
 8027378:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802737c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027380:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027384:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027388:	ea47 070c 	orr.w	r7, r7, ip
 802738c:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8027390:	d11e      	bne.n	80273d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8027392:	097a      	lsrs	r2, r7, #5
 8027394:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8027398:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802739c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80273a0:	f023 0307 	bic.w	r3, r3, #7
 80273a4:	4313      	orrs	r3, r2
 80273a6:	431f      	orrs	r7, r3
 80273a8:	f8a8 7000 	strh.w	r7, [r8]
 80273ac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80273ae:	f108 0802 	add.w	r8, r8, #2
 80273b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80273b6:	441c      	add	r4, r3
 80273b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80273ba:	441e      	add	r6, r3
 80273bc:	e643      	b.n	8027046 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 80273be:	2800      	cmp	r0, #0
 80273c0:	f43f af0a 	beq.w	80271d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80273c4:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80273c8:	9109      	str	r1, [sp, #36]	; 0x24
 80273ca:	0e09      	lsrs	r1, r1, #24
 80273cc:	9111      	str	r1, [sp, #68]	; 0x44
 80273ce:	e703      	b.n	80271d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80273d0:	f8b8 1000 	ldrh.w	r1, [r8]
 80273d4:	43d2      	mvns	r2, r2
 80273d6:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80273da:	fa5f fe82 	uxtb.w	lr, r2
 80273de:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80273e2:	10c8      	asrs	r0, r1, #3
 80273e4:	00ca      	lsls	r2, r1, #3
 80273e6:	fb0c fc0e 	mul.w	ip, ip, lr
 80273ea:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80273ee:	b2d2      	uxtb	r2, r2
 80273f0:	f10c 0101 	add.w	r1, ip, #1
 80273f4:	fb00 f00e 	mul.w	r0, r0, lr
 80273f8:	fb02 f20e 	mul.w	r2, r2, lr
 80273fc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027400:	0c39      	lsrs	r1, r7, #16
 8027402:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027406:	490f      	ldr	r1, [pc, #60]	; (8027444 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8027408:	fa5f fc8c 	uxtb.w	ip, ip
 802740c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8027410:	1c41      	adds	r1, r0, #1
 8027412:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027416:	1c51      	adds	r1, r2, #1
 8027418:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802741c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027420:	00c0      	lsls	r0, r0, #3
 8027422:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027426:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802742a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802742e:	ea4c 0c00 	orr.w	ip, ip, r0
 8027432:	ea47 0c0c 	orr.w	ip, r7, ip
 8027436:	f8a8 c000 	strh.w	ip, [r8]
 802743a:	e7b7      	b.n	80273ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802743c:	b01b      	add	sp, #108	; 0x6c
 802743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027442:	bf00      	nop
 8027444:	fffff800 	.word	0xfffff800

08027448 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8027448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802744c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8027450:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027454:	2d00      	cmp	r5, #0
 8027456:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802745a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802745e:	fb05 0e03 	mla	lr, r5, r3, r0
 8027462:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8027466:	f2c0 808c 	blt.w	8027582 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802746a:	45a9      	cmp	r9, r5
 802746c:	f340 8089 	ble.w	8027582 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8027470:	2800      	cmp	r0, #0
 8027472:	f2c0 8084 	blt.w	802757e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8027476:	4580      	cmp	r8, r0
 8027478:	f340 8081 	ble.w	802757e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802747c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027480:	f01e 0f01 	tst.w	lr, #1
 8027484:	5d16      	ldrb	r6, [r2, r4]
 8027486:	bf0c      	ite	eq
 8027488:	f006 060f 	andeq.w	r6, r6, #15
 802748c:	1136      	asrne	r6, r6, #4
 802748e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027492:	b2f6      	uxtb	r6, r6
 8027494:	1c44      	adds	r4, r0, #1
 8027496:	d477      	bmi.n	8027588 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8027498:	45a0      	cmp	r8, r4
 802749a:	dd75      	ble.n	8027588 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802749c:	2f00      	cmp	r7, #0
 802749e:	d075      	beq.n	802758c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 80274a0:	f10e 0a01 	add.w	sl, lr, #1
 80274a4:	ea4f 045a 	mov.w	r4, sl, lsr #1
 80274a8:	f01a 0f01 	tst.w	sl, #1
 80274ac:	5d14      	ldrb	r4, [r2, r4]
 80274ae:	bf0c      	ite	eq
 80274b0:	f004 040f 	andeq.w	r4, r4, #15
 80274b4:	1124      	asrne	r4, r4, #4
 80274b6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80274ba:	b2e4      	uxtb	r4, r4
 80274bc:	3501      	adds	r5, #1
 80274be:	d469      	bmi.n	8027594 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80274c0:	45a9      	cmp	r9, r5
 80274c2:	dd67      	ble.n	8027594 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80274c4:	f1bc 0f00 	cmp.w	ip, #0
 80274c8:	d067      	beq.n	802759a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80274ca:	2800      	cmp	r0, #0
 80274cc:	db60      	blt.n	8027590 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80274ce:	4580      	cmp	r8, r0
 80274d0:	dd5e      	ble.n	8027590 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80274d2:	eb03 090e 	add.w	r9, r3, lr
 80274d6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80274da:	f019 0f01 	tst.w	r9, #1
 80274de:	5d55      	ldrb	r5, [r2, r5]
 80274e0:	bf0c      	ite	eq
 80274e2:	f005 050f 	andeq.w	r5, r5, #15
 80274e6:	112d      	asrne	r5, r5, #4
 80274e8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80274ec:	b2ed      	uxtb	r5, r5
 80274ee:	3001      	adds	r0, #1
 80274f0:	d456      	bmi.n	80275a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80274f2:	4580      	cmp	r8, r0
 80274f4:	dd54      	ble.n	80275a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80274f6:	2f00      	cmp	r7, #0
 80274f8:	d054      	beq.n	80275a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80274fa:	3301      	adds	r3, #1
 80274fc:	449e      	add	lr, r3
 80274fe:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027502:	f01e 0f01 	tst.w	lr, #1
 8027506:	5cd0      	ldrb	r0, [r2, r3]
 8027508:	bf0c      	ite	eq
 802750a:	f000 000f 	andeq.w	r0, r0, #15
 802750e:	1100      	asrne	r0, r0, #4
 8027510:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027514:	b2c3      	uxtb	r3, r0
 8027516:	b2ba      	uxth	r2, r7
 8027518:	fa1f fc8c 	uxth.w	ip, ip
 802751c:	fb02 f00c 	mul.w	r0, r2, ip
 8027520:	0112      	lsls	r2, r2, #4
 8027522:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027526:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802752a:	1a12      	subs	r2, r2, r0
 802752c:	fa1f fc8c 	uxth.w	ip, ip
 8027530:	b292      	uxth	r2, r2
 8027532:	eba7 070c 	sub.w	r7, r7, ip
 8027536:	4362      	muls	r2, r4
 8027538:	b2bf      	uxth	r7, r7
 802753a:	fb06 2207 	mla	r2, r6, r7, r2
 802753e:	fb0c 2505 	mla	r5, ip, r5, r2
 8027542:	fb00 5303 	mla	r3, r0, r3, r5
 8027546:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802754a:	b1b3      	cbz	r3, 802757a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802754c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8027550:	435a      	muls	r2, r3
 8027552:	1c53      	adds	r3, r2, #1
 8027554:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027558:	4a2d      	ldr	r2, [pc, #180]	; (8027610 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802755a:	121b      	asrs	r3, r3, #8
 802755c:	6812      	ldr	r2, [r2, #0]
 802755e:	2bff      	cmp	r3, #255	; 0xff
 8027560:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8027564:	d120      	bne.n	80275a8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8027566:	0950      	lsrs	r0, r2, #5
 8027568:	4b2a      	ldr	r3, [pc, #168]	; (8027614 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802756a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802756e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027572:	4033      	ands	r3, r6
 8027574:	4318      	orrs	r0, r3
 8027576:	4302      	orrs	r2, r0
 8027578:	800a      	strh	r2, [r1, #0]
 802757a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802757e:	2600      	movs	r6, #0
 8027580:	e788      	b.n	8027494 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8027582:	2400      	movs	r4, #0
 8027584:	4626      	mov	r6, r4
 8027586:	e799      	b.n	80274bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027588:	2400      	movs	r4, #0
 802758a:	e797      	b.n	80274bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802758c:	463c      	mov	r4, r7
 802758e:	e795      	b.n	80274bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8027590:	2500      	movs	r5, #0
 8027592:	e7ac      	b.n	80274ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8027594:	2300      	movs	r3, #0
 8027596:	461d      	mov	r5, r3
 8027598:	e7bd      	b.n	8027516 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802759a:	4663      	mov	r3, ip
 802759c:	4665      	mov	r5, ip
 802759e:	e7ba      	b.n	8027516 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80275a0:	2300      	movs	r3, #0
 80275a2:	e7b8      	b.n	8027516 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80275a4:	463b      	mov	r3, r7
 80275a6:	e7b6      	b.n	8027516 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 80275a8:	880d      	ldrh	r5, [r1, #0]
 80275aa:	b29f      	uxth	r7, r3
 80275ac:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80275b0:	43db      	mvns	r3, r3
 80275b2:	122c      	asrs	r4, r5, #8
 80275b4:	fb10 f007 	smulbb	r0, r0, r7
 80275b8:	b2db      	uxtb	r3, r3
 80275ba:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80275be:	b2f6      	uxtb	r6, r6
 80275c0:	b2d2      	uxtb	r2, r2
 80275c2:	fb04 0403 	mla	r4, r4, r3, r0
 80275c6:	10e8      	asrs	r0, r5, #3
 80275c8:	fb12 f207 	smulbb	r2, r2, r7
 80275cc:	00ed      	lsls	r5, r5, #3
 80275ce:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80275d2:	b2a4      	uxth	r4, r4
 80275d4:	fb16 f607 	smulbb	r6, r6, r7
 80275d8:	b2ed      	uxtb	r5, r5
 80275da:	fb00 6603 	mla	r6, r0, r3, r6
 80275de:	fb05 2303 	mla	r3, r5, r3, r2
 80275e2:	b2b0      	uxth	r0, r6
 80275e4:	b29a      	uxth	r2, r3
 80275e6:	1c63      	adds	r3, r4, #1
 80275e8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80275ec:	1c53      	adds	r3, r2, #1
 80275ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80275f2:	1c42      	adds	r2, r0, #1
 80275f4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80275f8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80275fc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027600:	0940      	lsrs	r0, r0, #5
 8027602:	4323      	orrs	r3, r4
 8027604:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027608:	4303      	orrs	r3, r0
 802760a:	800b      	strh	r3, [r1, #0]
 802760c:	e7b5      	b.n	802757a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802760e:	bf00      	nop
 8027610:	200150fc 	.word	0x200150fc
 8027614:	00fff800 	.word	0x00fff800

08027618 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802761c:	b097      	sub	sp, #92	; 0x5c
 802761e:	9214      	str	r2, [sp, #80]	; 0x50
 8027620:	9309      	str	r3, [sp, #36]	; 0x24
 8027622:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027624:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8027628:	9015      	str	r0, [sp, #84]	; 0x54
 802762a:	910d      	str	r1, [sp, #52]	; 0x34
 802762c:	6850      	ldr	r0, [r2, #4]
 802762e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027630:	6812      	ldr	r2, [r2, #0]
 8027632:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8027636:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802763a:	fb00 1303 	mla	r3, r0, r3, r1
 802763e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8027642:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027644:	689b      	ldr	r3, [r3, #8]
 8027646:	3301      	adds	r3, #1
 8027648:	f023 0301 	bic.w	r3, r3, #1
 802764c:	930a      	str	r3, [sp, #40]	; 0x28
 802764e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027650:	681f      	ldr	r7, [r3, #0]
 8027652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027654:	2b00      	cmp	r3, #0
 8027656:	dc03      	bgt.n	8027660 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027658:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802765a:	2b00      	cmp	r3, #0
 802765c:	f340 8289 	ble.w	8027b72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8027660:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027662:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027666:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802766a:	1e48      	subs	r0, r1, #1
 802766c:	f102 3cff 	add.w	ip, r2, #4294967295
 8027670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027672:	2b00      	cmp	r3, #0
 8027674:	f340 80c5 	ble.w	8027802 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8027678:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802767c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027680:	d406      	bmi.n	8027690 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027682:	4586      	cmp	lr, r0
 8027684:	da04      	bge.n	8027690 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027686:	2b00      	cmp	r3, #0
 8027688:	db02      	blt.n	8027690 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802768a:	4563      	cmp	r3, ip
 802768c:	f2c0 80ba 	blt.w	8027804 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8027690:	f11e 0e01 	adds.w	lr, lr, #1
 8027694:	f100 80ab 	bmi.w	80277ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027698:	4571      	cmp	r1, lr
 802769a:	f2c0 80a8 	blt.w	80277ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802769e:	3301      	adds	r3, #1
 80276a0:	f100 80a5 	bmi.w	80277ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80276a4:	429a      	cmp	r2, r3
 80276a6:	f2c0 80a2 	blt.w	80277ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80276aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80276ac:	46c8      	mov	r8, r9
 80276ae:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 80276b2:	930e      	str	r3, [sp, #56]	; 0x38
 80276b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80276b6:	2b00      	cmp	r3, #0
 80276b8:	f340 80c4 	ble.w	8027844 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80276bc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80276be:	1430      	asrs	r0, r6, #16
 80276c0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80276c4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80276c8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80276cc:	1423      	asrs	r3, r4, #16
 80276ce:	f100 814f 	bmi.w	8027970 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80276d2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80276d6:	455b      	cmp	r3, fp
 80276d8:	f280 814a 	bge.w	8027970 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80276dc:	2800      	cmp	r0, #0
 80276de:	f2c0 8147 	blt.w	8027970 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80276e2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80276e6:	4558      	cmp	r0, fp
 80276e8:	f280 8142 	bge.w	8027970 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80276ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80276ee:	fb00 3305 	mla	r3, r0, r5, r3
 80276f2:	0858      	lsrs	r0, r3, #1
 80276f4:	07dd      	lsls	r5, r3, #31
 80276f6:	f817 c000 	ldrb.w	ip, [r7, r0]
 80276fa:	bf54      	ite	pl
 80276fc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027700:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027704:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027708:	fa5f fc8c 	uxtb.w	ip, ip
 802770c:	2a00      	cmp	r2, #0
 802770e:	f000 80dd 	beq.w	80278cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8027712:	1c58      	adds	r0, r3, #1
 8027714:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027718:	07c0      	lsls	r0, r0, #31
 802771a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802771e:	bf54      	ite	pl
 8027720:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027724:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027728:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802772c:	fa5f f08e 	uxtb.w	r0, lr
 8027730:	9010      	str	r0, [sp, #64]	; 0x40
 8027732:	b1d9      	cbz	r1, 802776c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8027734:	4453      	add	r3, sl
 8027736:	0858      	lsrs	r0, r3, #1
 8027738:	07dd      	lsls	r5, r3, #31
 802773a:	f103 0301 	add.w	r3, r3, #1
 802773e:	5c38      	ldrb	r0, [r7, r0]
 8027740:	bf54      	ite	pl
 8027742:	f000 000f 	andpl.w	r0, r0, #15
 8027746:	1100      	asrmi	r0, r0, #4
 8027748:	07dd      	lsls	r5, r3, #31
 802774a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802774e:	b2c0      	uxtb	r0, r0
 8027750:	900b      	str	r0, [sp, #44]	; 0x2c
 8027752:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027756:	f817 e000 	ldrb.w	lr, [r7, r0]
 802775a:	bf54      	ite	pl
 802775c:	f00e 030f 	andpl.w	r3, lr, #15
 8027760:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027764:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027768:	b2db      	uxtb	r3, r3
 802776a:	9311      	str	r3, [sp, #68]	; 0x44
 802776c:	b292      	uxth	r2, r2
 802776e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027770:	b289      	uxth	r1, r1
 8027772:	fb02 f301 	mul.w	r3, r2, r1
 8027776:	0112      	lsls	r2, r2, #4
 8027778:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802777c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8027780:	1ad2      	subs	r2, r2, r3
 8027782:	b289      	uxth	r1, r1
 8027784:	b292      	uxth	r2, r2
 8027786:	1a40      	subs	r0, r0, r1
 8027788:	436a      	muls	r2, r5
 802778a:	b280      	uxth	r0, r0
 802778c:	fb0c 2c00 	mla	ip, ip, r0, r2
 8027790:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027792:	fb01 c102 	mla	r1, r1, r2, ip
 8027796:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027798:	fb03 1302 	mla	r3, r3, r2, r1
 802779c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80277a0:	b1db      	cbz	r3, 80277da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80277a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80277a4:	4353      	muls	r3, r2
 80277a6:	1c5a      	adds	r2, r3, #1
 80277a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80277ac:	4ac6      	ldr	r2, [pc, #792]	; (8027ac8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80277ae:	121b      	asrs	r3, r3, #8
 80277b0:	6812      	ldr	r2, [r2, #0]
 80277b2:	2bff      	cmp	r3, #255	; 0xff
 80277b4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80277b8:	f040 8099 	bne.w	80278ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80277bc:	0953      	lsrs	r3, r2, #5
 80277be:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80277c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80277c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80277ca:	f02c 0c07 	bic.w	ip, ip, #7
 80277ce:	ea43 0c0c 	orr.w	ip, r3, ip
 80277d2:	ea4c 0202 	orr.w	r2, ip, r2
 80277d6:	f8a8 2000 	strh.w	r2, [r8]
 80277da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80277dc:	f108 0802 	add.w	r8, r8, #2
 80277e0:	441c      	add	r4, r3
 80277e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80277e4:	441e      	add	r6, r3
 80277e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80277e8:	3b01      	subs	r3, #1
 80277ea:	930e      	str	r3, [sp, #56]	; 0x38
 80277ec:	e762      	b.n	80276b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80277ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80277f0:	f109 0902 	add.w	r9, r9, #2
 80277f4:	441c      	add	r4, r3
 80277f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80277f8:	441e      	add	r6, r3
 80277fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80277fc:	3b01      	subs	r3, #1
 80277fe:	9309      	str	r3, [sp, #36]	; 0x24
 8027800:	e736      	b.n	8027670 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027802:	d024      	beq.n	802784e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8027804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027806:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8027808:	3b01      	subs	r3, #1
 802780a:	fb00 4003 	mla	r0, r0, r3, r4
 802780e:	1400      	asrs	r0, r0, #16
 8027810:	f53f af4b 	bmi.w	80276aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027814:	3901      	subs	r1, #1
 8027816:	4288      	cmp	r0, r1
 8027818:	f6bf af47 	bge.w	80276aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802781c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802781e:	fb01 6303 	mla	r3, r1, r3, r6
 8027822:	141b      	asrs	r3, r3, #16
 8027824:	f53f af41 	bmi.w	80276aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027828:	3a01      	subs	r2, #1
 802782a:	4293      	cmp	r3, r2
 802782c:	f6bf af3d 	bge.w	80276aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027830:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8027834:	46c8      	mov	r8, r9
 8027836:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802783a:	930e      	str	r3, [sp, #56]	; 0x38
 802783c:	f1bb 0f00 	cmp.w	fp, #0
 8027840:	f300 80b7 	bgt.w	80279b2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8027844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027846:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802784a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802784e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027850:	2b00      	cmp	r3, #0
 8027852:	f340 818e 	ble.w	8027b72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8027856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802785a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802785c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027860:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027864:	eef0 6a62 	vmov.f32	s13, s5
 8027868:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802786c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027870:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027874:	ee16 4a90 	vmov	r4, s13
 8027878:	eef0 6a43 	vmov.f32	s13, s6
 802787c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027880:	ee16 6a90 	vmov	r6, s13
 8027884:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027888:	ee61 7a27 	vmul.f32	s15, s2, s15
 802788c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027890:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027894:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027898:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802789c:	ee12 2a90 	vmov	r2, s5
 80278a0:	eef0 2a47 	vmov.f32	s5, s14
 80278a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80278a8:	ee13 2a10 	vmov	r2, s6
 80278ac:	9323      	str	r3, [sp, #140]	; 0x8c
 80278ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80278b0:	eeb0 3a67 	vmov.f32	s6, s15
 80278b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80278b8:	9324      	str	r3, [sp, #144]	; 0x90
 80278ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80278bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80278be:	3b01      	subs	r3, #1
 80278c0:	930d      	str	r3, [sp, #52]	; 0x34
 80278c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80278c4:	bf08      	it	eq
 80278c6:	4613      	moveq	r3, r2
 80278c8:	9309      	str	r3, [sp, #36]	; 0x24
 80278ca:	e6c2      	b.n	8027652 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80278cc:	2900      	cmp	r1, #0
 80278ce:	f43f af4d 	beq.w	802776c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80278d2:	eb0a 0003 	add.w	r0, sl, r3
 80278d6:	0843      	lsrs	r3, r0, #1
 80278d8:	07c0      	lsls	r0, r0, #31
 80278da:	5cfb      	ldrb	r3, [r7, r3]
 80278dc:	bf54      	ite	pl
 80278de:	f003 030f 	andpl.w	r3, r3, #15
 80278e2:	111b      	asrmi	r3, r3, #4
 80278e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80278e8:	b2db      	uxtb	r3, r3
 80278ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80278ec:	e73e      	b.n	802776c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80278ee:	f8b8 e000 	ldrh.w	lr, [r8]
 80278f2:	fa1f fb83 	uxth.w	fp, r3
 80278f6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80278fa:	43db      	mvns	r3, r3
 80278fc:	ea4f 202e 	mov.w	r0, lr, asr #8
 8027900:	fb11 f10b 	smulbb	r1, r1, fp
 8027904:	b2db      	uxtb	r3, r3
 8027906:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802790a:	fa5f fc8c 	uxtb.w	ip, ip
 802790e:	b2d2      	uxtb	r2, r2
 8027910:	fb00 1003 	mla	r0, r0, r3, r1
 8027914:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8027918:	fb1c fc0b 	smulbb	ip, ip, fp
 802791c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027920:	b280      	uxth	r0, r0
 8027922:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027926:	fb12 fb0b 	smulbb	fp, r2, fp
 802792a:	fa5f fe8e 	uxtb.w	lr, lr
 802792e:	fb01 cc03 	mla	ip, r1, r3, ip
 8027932:	fb0e bb03 	mla	fp, lr, r3, fp
 8027936:	1c43      	adds	r3, r0, #1
 8027938:	fa1f fc8c 	uxth.w	ip, ip
 802793c:	fa1f fb8b 	uxth.w	fp, fp
 8027940:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027944:	f10c 0101 	add.w	r1, ip, #1
 8027948:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802794c:	f10b 0001 	add.w	r0, fp, #1
 8027950:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027954:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027958:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802795c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8027960:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027964:	4318      	orrs	r0, r3
 8027966:	ea40 000c 	orr.w	r0, r0, ip
 802796a:	f8a8 0000 	strh.w	r0, [r8]
 802796e:	e734      	b.n	80277da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027970:	f113 0b01 	adds.w	fp, r3, #1
 8027974:	f53f af31 	bmi.w	80277da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027978:	45dc      	cmp	ip, fp
 802797a:	f6ff af2e 	blt.w	80277da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802797e:	f110 0b01 	adds.w	fp, r0, #1
 8027982:	f53f af2a 	bmi.w	80277da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027986:	45de      	cmp	lr, fp
 8027988:	f6ff af27 	blt.w	80277da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802798c:	9302      	str	r3, [sp, #8]
 802798e:	fa0f f38e 	sxth.w	r3, lr
 8027992:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027994:	9301      	str	r3, [sp, #4]
 8027996:	fa0f f38c 	sxth.w	r3, ip
 802799a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802799e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80279a2:	9300      	str	r3, [sp, #0]
 80279a4:	463a      	mov	r2, r7
 80279a6:	4653      	mov	r3, sl
 80279a8:	4641      	mov	r1, r8
 80279aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80279ac:	f7ff fd4c 	bl	8027448 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80279b0:	e713      	b.n	80277da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80279b2:	1422      	asrs	r2, r4, #16
 80279b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80279b6:	1433      	asrs	r3, r6, #16
 80279b8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80279bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80279c0:	fb05 2303 	mla	r3, r5, r3, r2
 80279c4:	085a      	lsrs	r2, r3, #1
 80279c6:	07dd      	lsls	r5, r3, #31
 80279c8:	5cba      	ldrb	r2, [r7, r2]
 80279ca:	bf54      	ite	pl
 80279cc:	f002 020f 	andpl.w	r2, r2, #15
 80279d0:	1112      	asrmi	r2, r2, #4
 80279d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80279d6:	b2d2      	uxtb	r2, r2
 80279d8:	2900      	cmp	r1, #0
 80279da:	d077      	beq.n	8027acc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80279dc:	f103 0e01 	add.w	lr, r3, #1
 80279e0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80279e4:	f01e 0f01 	tst.w	lr, #1
 80279e8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80279ec:	bf0c      	ite	eq
 80279ee:	f00c 0c0f 	andeq.w	ip, ip, #15
 80279f2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80279f6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80279fa:	fa5f f58c 	uxtb.w	r5, ip
 80279fe:	9512      	str	r5, [sp, #72]	; 0x48
 8027a00:	b308      	cbz	r0, 8027a46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027a02:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027a04:	442b      	add	r3, r5
 8027a06:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027a0a:	07dd      	lsls	r5, r3, #31
 8027a0c:	f103 0301 	add.w	r3, r3, #1
 8027a10:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027a14:	bf54      	ite	pl
 8027a16:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027a1a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027a1e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027a22:	fa5f f58c 	uxtb.w	r5, ip
 8027a26:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027a2a:	950c      	str	r5, [sp, #48]	; 0x30
 8027a2c:	07dd      	lsls	r5, r3, #31
 8027a2e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027a32:	bf54      	ite	pl
 8027a34:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027a38:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027a3c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027a40:	fa5f f38c 	uxtb.w	r3, ip
 8027a44:	9313      	str	r3, [sp, #76]	; 0x4c
 8027a46:	b289      	uxth	r1, r1
 8027a48:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027a4a:	b280      	uxth	r0, r0
 8027a4c:	fb01 f300 	mul.w	r3, r1, r0
 8027a50:	0109      	lsls	r1, r1, #4
 8027a52:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8027a56:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8027a5a:	1ac9      	subs	r1, r1, r3
 8027a5c:	b280      	uxth	r0, r0
 8027a5e:	b289      	uxth	r1, r1
 8027a60:	ebac 0c00 	sub.w	ip, ip, r0
 8027a64:	4369      	muls	r1, r5
 8027a66:	fa1f fc8c 	uxth.w	ip, ip
 8027a6a:	fb02 120c 	mla	r2, r2, ip, r1
 8027a6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8027a70:	fb00 2001 	mla	r0, r0, r1, r2
 8027a74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8027a76:	fb03 0302 	mla	r3, r3, r2, r0
 8027a7a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027a7e:	b1d3      	cbz	r3, 8027ab6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027a80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027a82:	4353      	muls	r3, r2
 8027a84:	1c5a      	adds	r2, r3, #1
 8027a86:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027a8a:	4a0f      	ldr	r2, [pc, #60]	; (8027ac8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8027a8c:	121b      	asrs	r3, r3, #8
 8027a8e:	6812      	ldr	r2, [r2, #0]
 8027a90:	2bff      	cmp	r3, #255	; 0xff
 8027a92:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8027a96:	d12d      	bne.n	8027af4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8027a98:	0953      	lsrs	r3, r2, #5
 8027a9a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8027a9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027aa2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027aa6:	f02c 0c07 	bic.w	ip, ip, #7
 8027aaa:	ea43 0c0c 	orr.w	ip, r3, ip
 8027aae:	ea4c 0202 	orr.w	r2, ip, r2
 8027ab2:	f8a8 2000 	strh.w	r2, [r8]
 8027ab6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027ab8:	f108 0802 	add.w	r8, r8, #2
 8027abc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027ac0:	441c      	add	r4, r3
 8027ac2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027ac4:	441e      	add	r6, r3
 8027ac6:	e6b9      	b.n	802783c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027ac8:	200150fc 	.word	0x200150fc
 8027acc:	2800      	cmp	r0, #0
 8027ace:	d0ba      	beq.n	8027a46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027ad0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027ad2:	442b      	add	r3, r5
 8027ad4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8027ad8:	07db      	lsls	r3, r3, #31
 8027ada:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8027ade:	bf54      	ite	pl
 8027ae0:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027ae4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027ae8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027aec:	fa5f f38c 	uxtb.w	r3, ip
 8027af0:	930c      	str	r3, [sp, #48]	; 0x30
 8027af2:	e7a8      	b.n	8027a46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8027af4:	f8b8 e000 	ldrh.w	lr, [r8]
 8027af8:	fa1f fa83 	uxth.w	sl, r3
 8027afc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8027b00:	43db      	mvns	r3, r3
 8027b02:	ea4f 202e 	mov.w	r0, lr, asr #8
 8027b06:	fb11 f10a 	smulbb	r1, r1, sl
 8027b0a:	b2db      	uxtb	r3, r3
 8027b0c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027b10:	b2d2      	uxtb	r2, r2
 8027b12:	fa5f fc8c 	uxtb.w	ip, ip
 8027b16:	fb00 1003 	mla	r0, r0, r3, r1
 8027b1a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8027b1e:	fb12 f20a 	smulbb	r2, r2, sl
 8027b22:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027b26:	b280      	uxth	r0, r0
 8027b28:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027b2c:	fb1c fc0a 	smulbb	ip, ip, sl
 8027b30:	fa5f fe8e 	uxtb.w	lr, lr
 8027b34:	fb0e 2203 	mla	r2, lr, r3, r2
 8027b38:	fb01 cc03 	mla	ip, r1, r3, ip
 8027b3c:	1c43      	adds	r3, r0, #1
 8027b3e:	b292      	uxth	r2, r2
 8027b40:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027b44:	1c51      	adds	r1, r2, #1
 8027b46:	fa1f fc8c 	uxth.w	ip, ip
 8027b4a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8027b4e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8027b52:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8027b56:	4308      	orrs	r0, r1
 8027b58:	f10c 0101 	add.w	r1, ip, #1
 8027b5c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8027b60:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027b64:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027b68:	ea40 000c 	orr.w	r0, r0, ip
 8027b6c:	f8a8 0000 	strh.w	r0, [r8]
 8027b70:	e7a1      	b.n	8027ab6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8027b72:	b017      	add	sp, #92	; 0x5c
 8027b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027b78 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8027b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027b7c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8027b80:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8027b84:	2d00      	cmp	r5, #0
 8027b86:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027b8a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8027b8e:	fb05 0e03 	mla	lr, r5, r3, r0
 8027b92:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8027b96:	f2c0 80b0 	blt.w	8027cfa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8027b9a:	45a9      	cmp	r9, r5
 8027b9c:	f340 80ad 	ble.w	8027cfa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8027ba0:	2800      	cmp	r0, #0
 8027ba2:	f2c0 80a8 	blt.w	8027cf6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8027ba6:	4580      	cmp	r8, r0
 8027ba8:	f340 80a5 	ble.w	8027cf6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8027bac:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027bb0:	f01e 0f01 	tst.w	lr, #1
 8027bb4:	5d16      	ldrb	r6, [r2, r4]
 8027bb6:	bf0c      	ite	eq
 8027bb8:	f006 060f 	andeq.w	r6, r6, #15
 8027bbc:	1136      	asrne	r6, r6, #4
 8027bbe:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8027bc2:	b2f6      	uxtb	r6, r6
 8027bc4:	1c44      	adds	r4, r0, #1
 8027bc6:	f100 809b 	bmi.w	8027d00 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8027bca:	45a0      	cmp	r8, r4
 8027bcc:	f340 8098 	ble.w	8027d00 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8027bd0:	2f00      	cmp	r7, #0
 8027bd2:	f000 8097 	beq.w	8027d04 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8027bd6:	f10e 0a01 	add.w	sl, lr, #1
 8027bda:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8027bde:	f01a 0f01 	tst.w	sl, #1
 8027be2:	5d14      	ldrb	r4, [r2, r4]
 8027be4:	bf0c      	ite	eq
 8027be6:	f004 040f 	andeq.w	r4, r4, #15
 8027bea:	1124      	asrne	r4, r4, #4
 8027bec:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027bf0:	b2e4      	uxtb	r4, r4
 8027bf2:	3501      	adds	r5, #1
 8027bf4:	f100 808a 	bmi.w	8027d0c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8027bf8:	45a9      	cmp	r9, r5
 8027bfa:	f340 8087 	ble.w	8027d0c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8027bfe:	f1bc 0f00 	cmp.w	ip, #0
 8027c02:	f000 8086 	beq.w	8027d12 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8027c06:	2800      	cmp	r0, #0
 8027c08:	db7e      	blt.n	8027d08 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8027c0a:	4580      	cmp	r8, r0
 8027c0c:	dd7c      	ble.n	8027d08 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8027c0e:	eb03 090e 	add.w	r9, r3, lr
 8027c12:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8027c16:	f019 0f01 	tst.w	r9, #1
 8027c1a:	5d55      	ldrb	r5, [r2, r5]
 8027c1c:	bf0c      	ite	eq
 8027c1e:	f005 050f 	andeq.w	r5, r5, #15
 8027c22:	112d      	asrne	r5, r5, #4
 8027c24:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027c28:	b2ed      	uxtb	r5, r5
 8027c2a:	3001      	adds	r0, #1
 8027c2c:	d474      	bmi.n	8027d18 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8027c2e:	4580      	cmp	r8, r0
 8027c30:	dd72      	ble.n	8027d18 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8027c32:	2f00      	cmp	r7, #0
 8027c34:	d072      	beq.n	8027d1c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8027c36:	3301      	adds	r3, #1
 8027c38:	449e      	add	lr, r3
 8027c3a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027c3e:	f01e 0f01 	tst.w	lr, #1
 8027c42:	5cd0      	ldrb	r0, [r2, r3]
 8027c44:	bf0c      	ite	eq
 8027c46:	f000 000f 	andeq.w	r0, r0, #15
 8027c4a:	1100      	asrne	r0, r0, #4
 8027c4c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027c50:	b2c3      	uxtb	r3, r0
 8027c52:	b2ba      	uxth	r2, r7
 8027c54:	fa1f fc8c 	uxth.w	ip, ip
 8027c58:	fb02 f00c 	mul.w	r0, r2, ip
 8027c5c:	0112      	lsls	r2, r2, #4
 8027c5e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8027c62:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8027c66:	1a12      	subs	r2, r2, r0
 8027c68:	fa1f fc8c 	uxth.w	ip, ip
 8027c6c:	b292      	uxth	r2, r2
 8027c6e:	eba7 070c 	sub.w	r7, r7, ip
 8027c72:	4362      	muls	r2, r4
 8027c74:	b2bf      	uxth	r7, r7
 8027c76:	fb06 2207 	mla	r2, r6, r7, r2
 8027c7a:	fb0c 2505 	mla	r5, ip, r5, r2
 8027c7e:	fb00 5303 	mla	r3, r0, r3, r5
 8027c82:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027c86:	b3a3      	cbz	r3, 8027cf2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8027c88:	4a25      	ldr	r2, [pc, #148]	; (8027d20 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8027c8a:	880e      	ldrh	r6, [r1, #0]
 8027c8c:	6815      	ldr	r5, [r2, #0]
 8027c8e:	b29a      	uxth	r2, r3
 8027c90:	1234      	asrs	r4, r6, #8
 8027c92:	43db      	mvns	r3, r3
 8027c94:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8027c98:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8027c9c:	b2db      	uxtb	r3, r3
 8027c9e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8027ca2:	fb10 f002 	smulbb	r0, r0, r2
 8027ca6:	b2ed      	uxtb	r5, r5
 8027ca8:	fb17 f702 	smulbb	r7, r7, r2
 8027cac:	fb04 0403 	mla	r4, r4, r3, r0
 8027cb0:	10f0      	asrs	r0, r6, #3
 8027cb2:	fb15 f202 	smulbb	r2, r5, r2
 8027cb6:	00f6      	lsls	r6, r6, #3
 8027cb8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027cbc:	b2a4      	uxth	r4, r4
 8027cbe:	b2f6      	uxtb	r6, r6
 8027cc0:	fb00 7003 	mla	r0, r0, r3, r7
 8027cc4:	fb06 2303 	mla	r3, r6, r3, r2
 8027cc8:	b280      	uxth	r0, r0
 8027cca:	b29a      	uxth	r2, r3
 8027ccc:	1c63      	adds	r3, r4, #1
 8027cce:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8027cd2:	1c53      	adds	r3, r2, #1
 8027cd4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027cd8:	1c42      	adds	r2, r0, #1
 8027cda:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8027cde:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027ce2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027ce6:	0940      	lsrs	r0, r0, #5
 8027ce8:	4323      	orrs	r3, r4
 8027cea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027cee:	4303      	orrs	r3, r0
 8027cf0:	800b      	strh	r3, [r1, #0]
 8027cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027cf6:	2600      	movs	r6, #0
 8027cf8:	e764      	b.n	8027bc4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8027cfa:	2400      	movs	r4, #0
 8027cfc:	4626      	mov	r6, r4
 8027cfe:	e778      	b.n	8027bf2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8027d00:	2400      	movs	r4, #0
 8027d02:	e776      	b.n	8027bf2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8027d04:	463c      	mov	r4, r7
 8027d06:	e774      	b.n	8027bf2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8027d08:	2500      	movs	r5, #0
 8027d0a:	e78e      	b.n	8027c2a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8027d0c:	2300      	movs	r3, #0
 8027d0e:	461d      	mov	r5, r3
 8027d10:	e79f      	b.n	8027c52 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027d12:	4663      	mov	r3, ip
 8027d14:	4665      	mov	r5, ip
 8027d16:	e79c      	b.n	8027c52 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027d18:	2300      	movs	r3, #0
 8027d1a:	e79a      	b.n	8027c52 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027d1c:	463b      	mov	r3, r7
 8027d1e:	e798      	b.n	8027c52 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8027d20:	200150fc 	.word	0x200150fc

08027d24 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d28:	b093      	sub	sp, #76	; 0x4c
 8027d2a:	461d      	mov	r5, r3
 8027d2c:	920c      	str	r2, [sp, #48]	; 0x30
 8027d2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027d30:	9011      	str	r0, [sp, #68]	; 0x44
 8027d32:	9107      	str	r1, [sp, #28]
 8027d34:	6850      	ldr	r0, [r2, #4]
 8027d36:	6812      	ldr	r2, [r2, #0]
 8027d38:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8027d3c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8027d40:	fb00 1303 	mla	r3, r0, r3, r1
 8027d44:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8027d48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d4a:	689b      	ldr	r3, [r3, #8]
 8027d4c:	3301      	adds	r3, #1
 8027d4e:	f023 0301 	bic.w	r3, r3, #1
 8027d52:	9306      	str	r3, [sp, #24]
 8027d54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d56:	681f      	ldr	r7, [r3, #0]
 8027d58:	9b07      	ldr	r3, [sp, #28]
 8027d5a:	2b00      	cmp	r3, #0
 8027d5c:	dc03      	bgt.n	8027d66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8027d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027d60:	2b00      	cmp	r3, #0
 8027d62:	f340 8267 	ble.w	8028234 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8027d66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027d68:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027d6c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027d70:	1e48      	subs	r0, r1, #1
 8027d72:	f102 3cff 	add.w	ip, r2, #4294967295
 8027d76:	2d00      	cmp	r5, #0
 8027d78:	f340 80b7 	ble.w	8027eea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8027d7c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027d80:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027d84:	d406      	bmi.n	8027d94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8027d86:	4586      	cmp	lr, r0
 8027d88:	da04      	bge.n	8027d94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8027d8a:	2b00      	cmp	r3, #0
 8027d8c:	db02      	blt.n	8027d94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8027d8e:	4563      	cmp	r3, ip
 8027d90:	f2c0 80ac 	blt.w	8027eec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8027d94:	f11e 0e01 	adds.w	lr, lr, #1
 8027d98:	f100 809f 	bmi.w	8027eda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027d9c:	4571      	cmp	r1, lr
 8027d9e:	f2c0 809c 	blt.w	8027eda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027da2:	3301      	adds	r3, #1
 8027da4:	f100 8099 	bmi.w	8027eda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027da8:	429a      	cmp	r2, r3
 8027daa:	f2c0 8096 	blt.w	8027eda <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8027dae:	46c8      	mov	r8, r9
 8027db0:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8027db4:	9509      	str	r5, [sp, #36]	; 0x24
 8027db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027db8:	2b00      	cmp	r3, #0
 8027dba:	f340 80b5 	ble.w	8027f28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8027dbe:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8027dc2:	1430      	asrs	r0, r6, #16
 8027dc4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027dc8:	9308      	str	r3, [sp, #32]
 8027dca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027dcc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8027dd0:	1423      	asrs	r3, r4, #16
 8027dd2:	f100 813f 	bmi.w	8028054 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027dd6:	f10c 3bff 	add.w	fp, ip, #4294967295
 8027dda:	455b      	cmp	r3, fp
 8027ddc:	f280 813a 	bge.w	8028054 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027de0:	2800      	cmp	r0, #0
 8027de2:	f2c0 8137 	blt.w	8028054 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027de6:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027dea:	4558      	cmp	r0, fp
 8027dec:	f280 8132 	bge.w	8028054 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8027df0:	9a06      	ldr	r2, [sp, #24]
 8027df2:	fb00 3302 	mla	r3, r0, r2, r3
 8027df6:	0858      	lsrs	r0, r3, #1
 8027df8:	07da      	lsls	r2, r3, #31
 8027dfa:	9a08      	ldr	r2, [sp, #32]
 8027dfc:	f817 c000 	ldrb.w	ip, [r7, r0]
 8027e00:	bf54      	ite	pl
 8027e02:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027e06:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027e0a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027e0e:	fa5f fc8c 	uxtb.w	ip, ip
 8027e12:	2a00      	cmp	r2, #0
 8027e14:	f000 80cc 	beq.w	8027fb0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8027e18:	1c58      	adds	r0, r3, #1
 8027e1a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8027e1e:	07c0      	lsls	r0, r0, #31
 8027e20:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8027e24:	bf54      	ite	pl
 8027e26:	f00e 0e0f 	andpl.w	lr, lr, #15
 8027e2a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027e2e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027e32:	fa5f fe8e 	uxtb.w	lr, lr
 8027e36:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8027e3a:	b1b9      	cbz	r1, 8027e6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8027e3c:	4453      	add	r3, sl
 8027e3e:	0858      	lsrs	r0, r3, #1
 8027e40:	07da      	lsls	r2, r3, #31
 8027e42:	5c38      	ldrb	r0, [r7, r0]
 8027e44:	bf54      	ite	pl
 8027e46:	f000 000f 	andpl.w	r0, r0, #15
 8027e4a:	1100      	asrmi	r0, r0, #4
 8027e4c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027e50:	b2c0      	uxtb	r0, r0
 8027e52:	900a      	str	r0, [sp, #40]	; 0x28
 8027e54:	1c58      	adds	r0, r3, #1
 8027e56:	0843      	lsrs	r3, r0, #1
 8027e58:	07c2      	lsls	r2, r0, #31
 8027e5a:	5cfb      	ldrb	r3, [r7, r3]
 8027e5c:	bf54      	ite	pl
 8027e5e:	f003 030f 	andpl.w	r3, r3, #15
 8027e62:	111b      	asrmi	r3, r3, #4
 8027e64:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027e68:	b2db      	uxtb	r3, r3
 8027e6a:	930e      	str	r3, [sp, #56]	; 0x38
 8027e6c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8027e70:	b289      	uxth	r1, r1
 8027e72:	fb02 f301 	mul.w	r3, r2, r1
 8027e76:	0112      	lsls	r2, r2, #4
 8027e78:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027e7c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8027e80:	1ad2      	subs	r2, r2, r3
 8027e82:	b289      	uxth	r1, r1
 8027e84:	b292      	uxth	r2, r2
 8027e86:	1a40      	subs	r0, r0, r1
 8027e88:	fa1f fe80 	uxth.w	lr, r0
 8027e8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027e8e:	4342      	muls	r2, r0
 8027e90:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8027e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027e96:	fb01 c102 	mla	r1, r1, r2, ip
 8027e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027e9c:	fb03 1302 	mla	r3, r3, r2, r1
 8027ea0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027ea4:	2bff      	cmp	r3, #255	; 0xff
 8027ea6:	f040 8094 	bne.w	8027fd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8027eaa:	4bbf      	ldr	r3, [pc, #764]	; (80281a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8027eac:	681a      	ldr	r2, [r3, #0]
 8027eae:	4bbf      	ldr	r3, [pc, #764]	; (80281ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8027eb0:	0951      	lsrs	r1, r2, #5
 8027eb2:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8027eb6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027eba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027ebe:	430b      	orrs	r3, r1
 8027ec0:	4313      	orrs	r3, r2
 8027ec2:	f8a8 3000 	strh.w	r3, [r8]
 8027ec6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027ec8:	f108 0802 	add.w	r8, r8, #2
 8027ecc:	441c      	add	r4, r3
 8027ece:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027ed0:	441e      	add	r6, r3
 8027ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027ed4:	3b01      	subs	r3, #1
 8027ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8027ed8:	e76d      	b.n	8027db6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027eda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027edc:	3d01      	subs	r5, #1
 8027ede:	f109 0902 	add.w	r9, r9, #2
 8027ee2:	441c      	add	r4, r3
 8027ee4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027ee6:	441e      	add	r6, r3
 8027ee8:	e745      	b.n	8027d76 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8027eea:	d021      	beq.n	8027f30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8027eec:	1e6b      	subs	r3, r5, #1
 8027eee:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8027ef0:	fb00 4003 	mla	r0, r0, r3, r4
 8027ef4:	1400      	asrs	r0, r0, #16
 8027ef6:	f53f af5a 	bmi.w	8027dae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027efa:	3901      	subs	r1, #1
 8027efc:	4288      	cmp	r0, r1
 8027efe:	f6bf af56 	bge.w	8027dae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027f02:	9920      	ldr	r1, [sp, #128]	; 0x80
 8027f04:	fb01 6303 	mla	r3, r1, r3, r6
 8027f08:	141b      	asrs	r3, r3, #16
 8027f0a:	f53f af50 	bmi.w	8027dae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027f0e:	3a01      	subs	r2, #1
 8027f10:	4293      	cmp	r3, r2
 8027f12:	f6bf af4c 	bge.w	8027dae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8027f16:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8027f1a:	46a8      	mov	r8, r5
 8027f1c:	46ce      	mov	lr, r9
 8027f1e:	9308      	str	r3, [sp, #32]
 8027f20:	f1b8 0f00 	cmp.w	r8, #0
 8027f24:	f300 80b6 	bgt.w	8028094 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027f28:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027f2c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8027f30:	9b07      	ldr	r3, [sp, #28]
 8027f32:	2b00      	cmp	r3, #0
 8027f34:	f340 817e 	ble.w	8028234 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8027f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027f3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027f3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027f42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027f46:	eef0 6a62 	vmov.f32	s13, s5
 8027f4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027f4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027f52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f56:	ee16 4a90 	vmov	r4, s13
 8027f5a:	eef0 6a43 	vmov.f32	s13, s6
 8027f5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027f62:	ee16 6a90 	vmov	r6, s13
 8027f66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027f6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027f6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027f72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027f76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027f7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027f7e:	ee12 2a90 	vmov	r2, s5
 8027f82:	eef0 2a47 	vmov.f32	s5, s14
 8027f86:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f8a:	ee13 2a10 	vmov	r2, s6
 8027f8e:	931f      	str	r3, [sp, #124]	; 0x7c
 8027f90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027f92:	eeb0 3a67 	vmov.f32	s6, s15
 8027f96:	fb92 f3f3 	sdiv	r3, r2, r3
 8027f9a:	9320      	str	r3, [sp, #128]	; 0x80
 8027f9c:	9b07      	ldr	r3, [sp, #28]
 8027f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027fa0:	3b01      	subs	r3, #1
 8027fa2:	9307      	str	r3, [sp, #28]
 8027fa4:	bf08      	it	eq
 8027fa6:	4615      	moveq	r5, r2
 8027fa8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027faa:	bf18      	it	ne
 8027fac:	461d      	movne	r5, r3
 8027fae:	e6d3      	b.n	8027d58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8027fb0:	2900      	cmp	r1, #0
 8027fb2:	f43f af5b 	beq.w	8027e6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8027fb6:	eb0a 0003 	add.w	r0, sl, r3
 8027fba:	0843      	lsrs	r3, r0, #1
 8027fbc:	07c0      	lsls	r0, r0, #31
 8027fbe:	5cfb      	ldrb	r3, [r7, r3]
 8027fc0:	bf54      	ite	pl
 8027fc2:	f003 030f 	andpl.w	r3, r3, #15
 8027fc6:	111b      	asrmi	r3, r3, #4
 8027fc8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027fcc:	b2db      	uxtb	r3, r3
 8027fce:	930a      	str	r3, [sp, #40]	; 0x28
 8027fd0:	e74c      	b.n	8027e6c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8027fd2:	2b00      	cmp	r3, #0
 8027fd4:	f43f af77 	beq.w	8027ec6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8027fd8:	4a73      	ldr	r2, [pc, #460]	; (80281a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8027fda:	fa1f fe83 	uxth.w	lr, r3
 8027fde:	f8b8 c000 	ldrh.w	ip, [r8]
 8027fe2:	43db      	mvns	r3, r3
 8027fe4:	6810      	ldr	r0, [r2, #0]
 8027fe6:	ea4f 212c 	mov.w	r1, ip, asr #8
 8027fea:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8027fee:	b2db      	uxtb	r3, r3
 8027ff0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027ff4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8027ff8:	fb12 f20e 	smulbb	r2, r2, lr
 8027ffc:	b2c0      	uxtb	r0, r0
 8027ffe:	fb1b fb0e 	smulbb	fp, fp, lr
 8028002:	fb01 2103 	mla	r1, r1, r3, r2
 8028006:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802800a:	fb10 fe0e 	smulbb	lr, r0, lr
 802800e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8028012:	b289      	uxth	r1, r1
 8028014:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028018:	fa5f fc8c 	uxtb.w	ip, ip
 802801c:	fb02 b203 	mla	r2, r2, r3, fp
 8028020:	1c48      	adds	r0, r1, #1
 8028022:	fb0c e303 	mla	r3, ip, r3, lr
 8028026:	b292      	uxth	r2, r2
 8028028:	b29b      	uxth	r3, r3
 802802a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802802e:	f102 0b01 	add.w	fp, r2, #1
 8028032:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8028036:	1c59      	adds	r1, r3, #1
 8028038:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802803c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8028040:	0952      	lsrs	r2, r2, #5
 8028042:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028046:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802804a:	4301      	orrs	r1, r0
 802804c:	4311      	orrs	r1, r2
 802804e:	f8a8 1000 	strh.w	r1, [r8]
 8028052:	e738      	b.n	8027ec6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028054:	f113 0b01 	adds.w	fp, r3, #1
 8028058:	f53f af35 	bmi.w	8027ec6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802805c:	45dc      	cmp	ip, fp
 802805e:	f6ff af32 	blt.w	8027ec6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028062:	f110 0b01 	adds.w	fp, r0, #1
 8028066:	f53f af2e 	bmi.w	8027ec6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802806a:	45de      	cmp	lr, fp
 802806c:	f6ff af2b 	blt.w	8027ec6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028070:	9302      	str	r3, [sp, #8]
 8028072:	fa0f f38e 	sxth.w	r3, lr
 8028076:	9a08      	ldr	r2, [sp, #32]
 8028078:	9301      	str	r3, [sp, #4]
 802807a:	fa0f f38c 	sxth.w	r3, ip
 802807e:	9105      	str	r1, [sp, #20]
 8028080:	4641      	mov	r1, r8
 8028082:	9300      	str	r3, [sp, #0]
 8028084:	4653      	mov	r3, sl
 8028086:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802808a:	463a      	mov	r2, r7
 802808c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802808e:	f7ff fd73 	bl	8027b78 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8028092:	e718      	b.n	8027ec6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8028094:	1422      	asrs	r2, r4, #16
 8028096:	9906      	ldr	r1, [sp, #24]
 8028098:	1433      	asrs	r3, r6, #16
 802809a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802809e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80280a2:	fb01 2303 	mla	r3, r1, r3, r2
 80280a6:	085a      	lsrs	r2, r3, #1
 80280a8:	07d9      	lsls	r1, r3, #31
 80280aa:	5cba      	ldrb	r2, [r7, r2]
 80280ac:	bf54      	ite	pl
 80280ae:	f002 020f 	andpl.w	r2, r2, #15
 80280b2:	1112      	asrmi	r2, r2, #4
 80280b4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80280b8:	b2d2      	uxtb	r2, r2
 80280ba:	2800      	cmp	r0, #0
 80280bc:	d063      	beq.n	8028186 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80280be:	f103 0a01 	add.w	sl, r3, #1
 80280c2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80280c6:	f01a 0f01 	tst.w	sl, #1
 80280ca:	5c79      	ldrb	r1, [r7, r1]
 80280cc:	bf0c      	ite	eq
 80280ce:	f001 010f 	andeq.w	r1, r1, #15
 80280d2:	1109      	asrne	r1, r1, #4
 80280d4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80280d8:	b2c9      	uxtb	r1, r1
 80280da:	910f      	str	r1, [sp, #60]	; 0x3c
 80280dc:	f1bc 0f00 	cmp.w	ip, #0
 80280e0:	d01a      	beq.n	8028118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80280e2:	9908      	ldr	r1, [sp, #32]
 80280e4:	440b      	add	r3, r1
 80280e6:	0859      	lsrs	r1, r3, #1
 80280e8:	f013 0f01 	tst.w	r3, #1
 80280ec:	f103 0301 	add.w	r3, r3, #1
 80280f0:	5c79      	ldrb	r1, [r7, r1]
 80280f2:	bf0c      	ite	eq
 80280f4:	f001 010f 	andeq.w	r1, r1, #15
 80280f8:	1109      	asrne	r1, r1, #4
 80280fa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80280fe:	b2c9      	uxtb	r1, r1
 8028100:	910b      	str	r1, [sp, #44]	; 0x2c
 8028102:	0859      	lsrs	r1, r3, #1
 8028104:	07db      	lsls	r3, r3, #31
 8028106:	5c79      	ldrb	r1, [r7, r1]
 8028108:	bf54      	ite	pl
 802810a:	f001 010f 	andpl.w	r1, r1, #15
 802810e:	1109      	asrmi	r1, r1, #4
 8028110:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028114:	b2c9      	uxtb	r1, r1
 8028116:	9110      	str	r1, [sp, #64]	; 0x40
 8028118:	b280      	uxth	r0, r0
 802811a:	fa1f fc8c 	uxth.w	ip, ip
 802811e:	fb00 f30c 	mul.w	r3, r0, ip
 8028122:	0100      	lsls	r0, r0, #4
 8028124:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8028128:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802812c:	1ac0      	subs	r0, r0, r3
 802812e:	fa1f fc8c 	uxth.w	ip, ip
 8028132:	b280      	uxth	r0, r0
 8028134:	eba1 010c 	sub.w	r1, r1, ip
 8028138:	fa1f fa81 	uxth.w	sl, r1
 802813c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802813e:	4348      	muls	r0, r1
 8028140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8028142:	fb02 020a 	mla	r2, r2, sl, r0
 8028146:	fb0c 2c01 	mla	ip, ip, r1, r2
 802814a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802814c:	fb03 c302 	mla	r3, r3, r2, ip
 8028150:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028154:	2bff      	cmp	r3, #255	; 0xff
 8028156:	d12b      	bne.n	80281b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8028158:	4b13      	ldr	r3, [pc, #76]	; (80281a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802815a:	681a      	ldr	r2, [r3, #0]
 802815c:	4b13      	ldr	r3, [pc, #76]	; (80281ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802815e:	0951      	lsrs	r1, r2, #5
 8028160:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8028164:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028168:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802816c:	430b      	orrs	r3, r1
 802816e:	4313      	orrs	r3, r2
 8028170:	f8ae 3000 	strh.w	r3, [lr]
 8028174:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8028176:	f10e 0e02 	add.w	lr, lr, #2
 802817a:	f108 38ff 	add.w	r8, r8, #4294967295
 802817e:	441c      	add	r4, r3
 8028180:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028182:	441e      	add	r6, r3
 8028184:	e6cc      	b.n	8027f20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8028186:	f1bc 0f00 	cmp.w	ip, #0
 802818a:	d0c5      	beq.n	8028118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802818c:	9908      	ldr	r1, [sp, #32]
 802818e:	440b      	add	r3, r1
 8028190:	0859      	lsrs	r1, r3, #1
 8028192:	07db      	lsls	r3, r3, #31
 8028194:	5c79      	ldrb	r1, [r7, r1]
 8028196:	bf54      	ite	pl
 8028198:	f001 010f 	andpl.w	r1, r1, #15
 802819c:	1109      	asrmi	r1, r1, #4
 802819e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80281a2:	b2c9      	uxtb	r1, r1
 80281a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80281a6:	e7b7      	b.n	8028118 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80281a8:	200150fc 	.word	0x200150fc
 80281ac:	fffff800 	.word	0xfffff800
 80281b0:	2b00      	cmp	r3, #0
 80281b2:	d0df      	beq.n	8028174 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80281b4:	4a21      	ldr	r2, [pc, #132]	; (802823c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 80281b6:	fa1f fa83 	uxth.w	sl, r3
 80281ba:	f8be c000 	ldrh.w	ip, [lr]
 80281be:	43db      	mvns	r3, r3
 80281c0:	6810      	ldr	r0, [r2, #0]
 80281c2:	ea4f 212c 	mov.w	r1, ip, asr #8
 80281c6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80281ca:	b2db      	uxtb	r3, r3
 80281cc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80281d0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80281d4:	fb12 f20a 	smulbb	r2, r2, sl
 80281d8:	b2c0      	uxtb	r0, r0
 80281da:	fb1b fb0a 	smulbb	fp, fp, sl
 80281de:	fb01 2103 	mla	r1, r1, r3, r2
 80281e2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80281e6:	fb10 f00a 	smulbb	r0, r0, sl
 80281ea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80281ee:	b289      	uxth	r1, r1
 80281f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80281f4:	fa5f fc8c 	uxtb.w	ip, ip
 80281f8:	fb02 b203 	mla	r2, r2, r3, fp
 80281fc:	fb0c 0003 	mla	r0, ip, r3, r0
 8028200:	1c4b      	adds	r3, r1, #1
 8028202:	b292      	uxth	r2, r2
 8028204:	b280      	uxth	r0, r0
 8028206:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802820a:	f100 0b01 	add.w	fp, r0, #1
 802820e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028212:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8028216:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802821a:	ea4b 0101 	orr.w	r1, fp, r1
 802821e:	f102 0b01 	add.w	fp, r2, #1
 8028222:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8028226:	0952      	lsrs	r2, r2, #5
 8028228:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802822c:	4311      	orrs	r1, r2
 802822e:	f8ae 1000 	strh.w	r1, [lr]
 8028232:	e79f      	b.n	8028174 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8028234:	b013      	add	sp, #76	; 0x4c
 8028236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802823a:	bf00      	nop
 802823c:	200150fc 	.word	0x200150fc

08028240 <CRC_Lock>:
 8028240:	4a20      	ldr	r2, [pc, #128]	; (80282c4 <CRC_Lock+0x84>)
 8028242:	b530      	push	{r4, r5, lr}
 8028244:	6813      	ldr	r3, [r2, #0]
 8028246:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802824a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802824e:	f023 0301 	bic.w	r3, r3, #1
 8028252:	6013      	str	r3, [r2, #0]
 8028254:	4b1c      	ldr	r3, [pc, #112]	; (80282c8 <CRC_Lock+0x88>)
 8028256:	681a      	ldr	r2, [r3, #0]
 8028258:	4022      	ands	r2, r4
 802825a:	42aa      	cmp	r2, r5
 802825c:	d005      	beq.n	802826a <CRC_Lock+0x2a>
 802825e:	681b      	ldr	r3, [r3, #0]
 8028260:	f24c 2270 	movw	r2, #49776	; 0xc270
 8028264:	4023      	ands	r3, r4
 8028266:	4293      	cmp	r3, r2
 8028268:	d124      	bne.n	80282b4 <CRC_Lock+0x74>
 802826a:	4b18      	ldr	r3, [pc, #96]	; (80282cc <CRC_Lock+0x8c>)
 802826c:	681b      	ldr	r3, [r3, #0]
 802826e:	bb0b      	cbnz	r3, 80282b4 <CRC_Lock+0x74>
 8028270:	4b17      	ldr	r3, [pc, #92]	; (80282d0 <CRC_Lock+0x90>)
 8028272:	681a      	ldr	r2, [r3, #0]
 8028274:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028278:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802827c:	d00d      	beq.n	802829a <CRC_Lock+0x5a>
 802827e:	681a      	ldr	r2, [r3, #0]
 8028280:	f240 4483 	movw	r4, #1155	; 0x483
 8028284:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8028288:	42a2      	cmp	r2, r4
 802828a:	d006      	beq.n	802829a <CRC_Lock+0x5a>
 802828c:	681b      	ldr	r3, [r3, #0]
 802828e:	f240 4285 	movw	r2, #1157	; 0x485
 8028292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028296:	4293      	cmp	r3, r2
 8028298:	d10c      	bne.n	80282b4 <CRC_Lock+0x74>
 802829a:	4b0e      	ldr	r3, [pc, #56]	; (80282d4 <CRC_Lock+0x94>)
 802829c:	2201      	movs	r2, #1
 802829e:	601a      	str	r2, [r3, #0]
 80282a0:	681a      	ldr	r2, [r3, #0]
 80282a2:	2a00      	cmp	r2, #0
 80282a4:	d1fc      	bne.n	80282a0 <CRC_Lock+0x60>
 80282a6:	4b0c      	ldr	r3, [pc, #48]	; (80282d8 <CRC_Lock+0x98>)
 80282a8:	6018      	str	r0, [r3, #0]
 80282aa:	6818      	ldr	r0, [r3, #0]
 80282ac:	1a43      	subs	r3, r0, r1
 80282ae:	4258      	negs	r0, r3
 80282b0:	4158      	adcs	r0, r3
 80282b2:	bd30      	pop	{r4, r5, pc}
 80282b4:	4b09      	ldr	r3, [pc, #36]	; (80282dc <CRC_Lock+0x9c>)
 80282b6:	2201      	movs	r2, #1
 80282b8:	601a      	str	r2, [r3, #0]
 80282ba:	681a      	ldr	r2, [r3, #0]
 80282bc:	2a00      	cmp	r2, #0
 80282be:	d1fc      	bne.n	80282ba <CRC_Lock+0x7a>
 80282c0:	4b07      	ldr	r3, [pc, #28]	; (80282e0 <CRC_Lock+0xa0>)
 80282c2:	e7f1      	b.n	80282a8 <CRC_Lock+0x68>
 80282c4:	e0002000 	.word	0xe0002000
 80282c8:	e000ed00 	.word	0xe000ed00
 80282cc:	e0042000 	.word	0xe0042000
 80282d0:	5c001000 	.word	0x5c001000
 80282d4:	58024c08 	.word	0x58024c08
 80282d8:	58024c00 	.word	0x58024c00
 80282dc:	40023008 	.word	0x40023008
 80282e0:	40023000 	.word	0x40023000

080282e4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80282e4:	6101      	str	r1, [r0, #16]
 80282e6:	4770      	bx	lr

080282e8 <_ZN8touchgfx8Gestures4tickEv>:
 80282e8:	7b83      	ldrb	r3, [r0, #14]
 80282ea:	b14b      	cbz	r3, 8028300 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80282ec:	8903      	ldrh	r3, [r0, #8]
 80282ee:	3301      	adds	r3, #1
 80282f0:	b29b      	uxth	r3, r3
 80282f2:	2b07      	cmp	r3, #7
 80282f4:	8103      	strh	r3, [r0, #8]
 80282f6:	bf81      	itttt	hi
 80282f8:	2300      	movhi	r3, #0
 80282fa:	8143      	strhhi	r3, [r0, #10]
 80282fc:	8183      	strhhi	r3, [r0, #12]
 80282fe:	7383      	strbhi	r3, [r0, #14]
 8028300:	4770      	bx	lr
	...

08028304 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028304:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028308:	4698      	mov	r8, r3
 802830a:	8883      	ldrh	r3, [r0, #4]
 802830c:	4604      	mov	r4, r0
 802830e:	4617      	mov	r7, r2
 8028310:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028314:	eba8 0303 	sub.w	r3, r8, r3
 8028318:	4a19      	ldr	r2, [pc, #100]	; (8028380 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802831a:	460e      	mov	r6, r1
 802831c:	b21b      	sxth	r3, r3
 802831e:	88c1      	ldrh	r1, [r0, #6]
 8028320:	9200      	str	r2, [sp, #0]
 8028322:	2000      	movs	r0, #0
 8028324:	2b00      	cmp	r3, #0
 8028326:	8aa2      	ldrh	r2, [r4, #20]
 8028328:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802832c:	bfb8      	it	lt
 802832e:	425b      	neglt	r3, r3
 8028330:	f88d 0004 	strb.w	r0, [sp, #4]
 8028334:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028338:	b21b      	sxth	r3, r3
 802833a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802833e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8028342:	4293      	cmp	r3, r2
 8028344:	dc07      	bgt.n	8028356 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028346:	1a69      	subs	r1, r5, r1
 8028348:	b209      	sxth	r1, r1
 802834a:	2900      	cmp	r1, #0
 802834c:	bfb8      	it	lt
 802834e:	4249      	neglt	r1, r1
 8028350:	b209      	sxth	r1, r1
 8028352:	428a      	cmp	r2, r1
 8028354:	da10      	bge.n	8028378 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028356:	6920      	ldr	r0, [r4, #16]
 8028358:	4669      	mov	r1, sp
 802835a:	eba8 0606 	sub.w	r6, r8, r6
 802835e:	1bef      	subs	r7, r5, r7
 8028360:	6803      	ldr	r3, [r0, #0]
 8028362:	685b      	ldr	r3, [r3, #4]
 8028364:	4798      	blx	r3
 8028366:	2300      	movs	r3, #0
 8028368:	2001      	movs	r0, #1
 802836a:	8166      	strh	r6, [r4, #10]
 802836c:	8123      	strh	r3, [r4, #8]
 802836e:	81a7      	strh	r7, [r4, #12]
 8028370:	f8a4 8004 	strh.w	r8, [r4, #4]
 8028374:	80e5      	strh	r5, [r4, #6]
 8028376:	73a0      	strb	r0, [r4, #14]
 8028378:	b004      	add	sp, #16
 802837a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802837e:	bf00      	nop
 8028380:	0802e034 	.word	0x0802e034

08028384 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8028384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028386:	461e      	mov	r6, r3
 8028388:	1e4b      	subs	r3, r1, #1
 802838a:	b085      	sub	sp, #20
 802838c:	4604      	mov	r4, r0
 802838e:	2b01      	cmp	r3, #1
 8028390:	460d      	mov	r5, r1
 8028392:	4617      	mov	r7, r2
 8028394:	d84b      	bhi.n	802842e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8028396:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802839a:	1cd3      	adds	r3, r2, #3
 802839c:	b29b      	uxth	r3, r3
 802839e:	2b06      	cmp	r3, #6
 80283a0:	d916      	bls.n	80283d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80283a2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8028444 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80283a6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80283aa:	f8cd c004 	str.w	ip, [sp, #4]
 80283ae:	f04f 0c00 	mov.w	ip, #0
 80283b2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80283b6:	6900      	ldr	r0, [r0, #16]
 80283b8:	f8ad 100c 	strh.w	r1, [sp, #12]
 80283bc:	a901      	add	r1, sp, #4
 80283be:	f88d c008 	strb.w	ip, [sp, #8]
 80283c2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80283c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80283ca:	6803      	ldr	r3, [r0, #0]
 80283cc:	689b      	ldr	r3, [r3, #8]
 80283ce:	4798      	blx	r3
 80283d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80283d4:	1cd3      	adds	r3, r2, #3
 80283d6:	b29b      	uxth	r3, r3
 80283d8:	2b06      	cmp	r3, #6
 80283da:	d916      	bls.n	802840a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80283dc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8028444 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80283e0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80283e4:	f8cd c004 	str.w	ip, [sp, #4]
 80283e8:	f04f 0c01 	mov.w	ip, #1
 80283ec:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80283f0:	6920      	ldr	r0, [r4, #16]
 80283f2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80283f6:	a901      	add	r1, sp, #4
 80283f8:	f88d c008 	strb.w	ip, [sp, #8]
 80283fc:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028400:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028404:	6803      	ldr	r3, [r0, #0]
 8028406:	689b      	ldr	r3, [r3, #8]
 8028408:	4798      	blx	r3
 802840a:	4b0d      	ldr	r3, [pc, #52]	; (8028440 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802840c:	a901      	add	r1, sp, #4
 802840e:	6920      	ldr	r0, [r4, #16]
 8028410:	9301      	str	r3, [sp, #4]
 8028412:	2300      	movs	r3, #0
 8028414:	f88d 5008 	strb.w	r5, [sp, #8]
 8028418:	f8ad 700a 	strh.w	r7, [sp, #10]
 802841c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8028420:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028424:	6803      	ldr	r3, [r0, #0]
 8028426:	681b      	ldr	r3, [r3, #0]
 8028428:	4798      	blx	r3
 802842a:	b005      	add	sp, #20
 802842c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802842e:	2900      	cmp	r1, #0
 8028430:	d1eb      	bne.n	802840a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028432:	80a2      	strh	r2, [r4, #4]
 8028434:	80c6      	strh	r6, [r0, #6]
 8028436:	60a1      	str	r1, [r4, #8]
 8028438:	81a1      	strh	r1, [r4, #12]
 802843a:	73a1      	strb	r1, [r4, #14]
 802843c:	e7e5      	b.n	802840a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802843e:	bf00      	nop
 8028440:	0802e020 	.word	0x0802e020
 8028444:	0802e048 	.word	0x0802e048

08028448 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8028448:	790b      	ldrb	r3, [r1, #4]
 802844a:	2b00      	cmp	r3, #0
 802844c:	bf0c      	ite	eq
 802844e:	2301      	moveq	r3, #1
 8028450:	2300      	movne	r3, #0
 8028452:	b570      	push	{r4, r5, r6, lr}
 8028454:	4604      	mov	r4, r0
 8028456:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 802845a:	460e      	mov	r6, r1
 802845c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8028460:	d109      	bne.n	8028476 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8028462:	b14d      	cbz	r5, 8028478 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8028464:	7933      	ldrb	r3, [r6, #4]
 8028466:	2b01      	cmp	r3, #1
 8028468:	d10c      	bne.n	8028484 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802846a:	6823      	ldr	r3, [r4, #0]
 802846c:	4620      	mov	r0, r4
 802846e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8028470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028474:	4718      	bx	r3
 8028476:	b12d      	cbz	r5, 8028484 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8028478:	6823      	ldr	r3, [r4, #0]
 802847a:	4620      	mov	r0, r4
 802847c:	695b      	ldr	r3, [r3, #20]
 802847e:	4798      	blx	r3
 8028480:	2d00      	cmp	r5, #0
 8028482:	d1ef      	bne.n	8028464 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8028484:	bd70      	pop	{r4, r5, r6, pc}

08028486 <__aeabi_atexit>:
 8028486:	460b      	mov	r3, r1
 8028488:	4601      	mov	r1, r0
 802848a:	4618      	mov	r0, r3
 802848c:	f000 b852 	b.w	8028534 <__cxa_atexit>

08028490 <_ZdlPvj>:
 8028490:	f000 b812 	b.w	80284b8 <_ZdlPv>

08028494 <__cxa_guard_acquire>:
 8028494:	6803      	ldr	r3, [r0, #0]
 8028496:	07db      	lsls	r3, r3, #31
 8028498:	d406      	bmi.n	80284a8 <__cxa_guard_acquire+0x14>
 802849a:	7843      	ldrb	r3, [r0, #1]
 802849c:	b103      	cbz	r3, 80284a0 <__cxa_guard_acquire+0xc>
 802849e:	deff      	udf	#255	; 0xff
 80284a0:	2301      	movs	r3, #1
 80284a2:	7043      	strb	r3, [r0, #1]
 80284a4:	4618      	mov	r0, r3
 80284a6:	4770      	bx	lr
 80284a8:	2000      	movs	r0, #0
 80284aa:	4770      	bx	lr

080284ac <__cxa_guard_release>:
 80284ac:	2301      	movs	r3, #1
 80284ae:	6003      	str	r3, [r0, #0]
 80284b0:	4770      	bx	lr

080284b2 <__cxa_pure_virtual>:
 80284b2:	b508      	push	{r3, lr}
 80284b4:	f000 f80e 	bl	80284d4 <_ZSt9terminatev>

080284b8 <_ZdlPv>:
 80284b8:	f000 b892 	b.w	80285e0 <free>

080284bc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80284bc:	b508      	push	{r3, lr}
 80284be:	4780      	blx	r0
 80284c0:	f000 f80d 	bl	80284de <abort>

080284c4 <_ZSt13get_terminatev>:
 80284c4:	4b02      	ldr	r3, [pc, #8]	; (80284d0 <_ZSt13get_terminatev+0xc>)
 80284c6:	6818      	ldr	r0, [r3, #0]
 80284c8:	f3bf 8f5b 	dmb	ish
 80284cc:	4770      	bx	lr
 80284ce:	bf00      	nop
 80284d0:	200000b8 	.word	0x200000b8

080284d4 <_ZSt9terminatev>:
 80284d4:	b508      	push	{r3, lr}
 80284d6:	f7ff fff5 	bl	80284c4 <_ZSt13get_terminatev>
 80284da:	f7ff ffef 	bl	80284bc <_ZN10__cxxabiv111__terminateEPFvvE>

080284de <abort>:
 80284de:	b508      	push	{r3, lr}
 80284e0:	2006      	movs	r0, #6
 80284e2:	f000 fca1 	bl	8028e28 <raise>
 80284e6:	2001      	movs	r0, #1
 80284e8:	f7d9 fa00 	bl	80018ec <_exit>

080284ec <__assert_func>:
 80284ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80284ee:	4614      	mov	r4, r2
 80284f0:	461a      	mov	r2, r3
 80284f2:	4b09      	ldr	r3, [pc, #36]	; (8028518 <__assert_func+0x2c>)
 80284f4:	681b      	ldr	r3, [r3, #0]
 80284f6:	4605      	mov	r5, r0
 80284f8:	68d8      	ldr	r0, [r3, #12]
 80284fa:	b14c      	cbz	r4, 8028510 <__assert_func+0x24>
 80284fc:	4b07      	ldr	r3, [pc, #28]	; (802851c <__assert_func+0x30>)
 80284fe:	9100      	str	r1, [sp, #0]
 8028500:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028504:	4906      	ldr	r1, [pc, #24]	; (8028520 <__assert_func+0x34>)
 8028506:	462b      	mov	r3, r5
 8028508:	f000 f828 	bl	802855c <fiprintf>
 802850c:	f7ff ffe7 	bl	80284de <abort>
 8028510:	4b04      	ldr	r3, [pc, #16]	; (8028524 <__assert_func+0x38>)
 8028512:	461c      	mov	r4, r3
 8028514:	e7f3      	b.n	80284fe <__assert_func+0x12>
 8028516:	bf00      	nop
 8028518:	200000bc 	.word	0x200000bc
 802851c:	0802e310 	.word	0x0802e310
 8028520:	0802e31d 	.word	0x0802e31d
 8028524:	0802e34b 	.word	0x0802e34b

08028528 <atexit>:
 8028528:	2300      	movs	r3, #0
 802852a:	4601      	mov	r1, r0
 802852c:	461a      	mov	r2, r3
 802852e:	4618      	mov	r0, r3
 8028530:	f000 bd8a 	b.w	8029048 <__register_exitproc>

08028534 <__cxa_atexit>:
 8028534:	b510      	push	{r4, lr}
 8028536:	4c05      	ldr	r4, [pc, #20]	; (802854c <__cxa_atexit+0x18>)
 8028538:	4613      	mov	r3, r2
 802853a:	b12c      	cbz	r4, 8028548 <__cxa_atexit+0x14>
 802853c:	460a      	mov	r2, r1
 802853e:	4601      	mov	r1, r0
 8028540:	2002      	movs	r0, #2
 8028542:	f000 fd81 	bl	8029048 <__register_exitproc>
 8028546:	bd10      	pop	{r4, pc}
 8028548:	4620      	mov	r0, r4
 802854a:	e7fc      	b.n	8028546 <__cxa_atexit+0x12>
 802854c:	08029049 	.word	0x08029049

08028550 <__errno>:
 8028550:	4b01      	ldr	r3, [pc, #4]	; (8028558 <__errno+0x8>)
 8028552:	6818      	ldr	r0, [r3, #0]
 8028554:	4770      	bx	lr
 8028556:	bf00      	nop
 8028558:	200000bc 	.word	0x200000bc

0802855c <fiprintf>:
 802855c:	b40e      	push	{r1, r2, r3}
 802855e:	b503      	push	{r0, r1, lr}
 8028560:	4601      	mov	r1, r0
 8028562:	ab03      	add	r3, sp, #12
 8028564:	4805      	ldr	r0, [pc, #20]	; (802857c <fiprintf+0x20>)
 8028566:	f853 2b04 	ldr.w	r2, [r3], #4
 802856a:	6800      	ldr	r0, [r0, #0]
 802856c:	9301      	str	r3, [sp, #4]
 802856e:	f000 f95f 	bl	8028830 <_vfiprintf_r>
 8028572:	b002      	add	sp, #8
 8028574:	f85d eb04 	ldr.w	lr, [sp], #4
 8028578:	b003      	add	sp, #12
 802857a:	4770      	bx	lr
 802857c:	200000bc 	.word	0x200000bc

08028580 <__libc_init_array>:
 8028580:	b570      	push	{r4, r5, r6, lr}
 8028582:	4d0d      	ldr	r5, [pc, #52]	; (80285b8 <__libc_init_array+0x38>)
 8028584:	4c0d      	ldr	r4, [pc, #52]	; (80285bc <__libc_init_array+0x3c>)
 8028586:	1b64      	subs	r4, r4, r5
 8028588:	10a4      	asrs	r4, r4, #2
 802858a:	2600      	movs	r6, #0
 802858c:	42a6      	cmp	r6, r4
 802858e:	d109      	bne.n	80285a4 <__libc_init_array+0x24>
 8028590:	4d0b      	ldr	r5, [pc, #44]	; (80285c0 <__libc_init_array+0x40>)
 8028592:	4c0c      	ldr	r4, [pc, #48]	; (80285c4 <__libc_init_array+0x44>)
 8028594:	f001 fa3a 	bl	8029a0c <_init>
 8028598:	1b64      	subs	r4, r4, r5
 802859a:	10a4      	asrs	r4, r4, #2
 802859c:	2600      	movs	r6, #0
 802859e:	42a6      	cmp	r6, r4
 80285a0:	d105      	bne.n	80285ae <__libc_init_array+0x2e>
 80285a2:	bd70      	pop	{r4, r5, r6, pc}
 80285a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80285a8:	4798      	blx	r3
 80285aa:	3601      	adds	r6, #1
 80285ac:	e7ee      	b.n	802858c <__libc_init_array+0xc>
 80285ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80285b2:	4798      	blx	r3
 80285b4:	3601      	adds	r6, #1
 80285b6:	e7f2      	b.n	802859e <__libc_init_array+0x1e>
 80285b8:	0802e408 	.word	0x0802e408
 80285bc:	0802e408 	.word	0x0802e408
 80285c0:	0802e408 	.word	0x0802e408
 80285c4:	0802e424 	.word	0x0802e424

080285c8 <__retarget_lock_init_recursive>:
 80285c8:	4770      	bx	lr

080285ca <__retarget_lock_acquire_recursive>:
 80285ca:	4770      	bx	lr

080285cc <__retarget_lock_release>:
 80285cc:	4770      	bx	lr

080285ce <__retarget_lock_release_recursive>:
 80285ce:	4770      	bx	lr

080285d0 <malloc>:
 80285d0:	4b02      	ldr	r3, [pc, #8]	; (80285dc <malloc+0xc>)
 80285d2:	4601      	mov	r1, r0
 80285d4:	6818      	ldr	r0, [r3, #0]
 80285d6:	f000 b88d 	b.w	80286f4 <_malloc_r>
 80285da:	bf00      	nop
 80285dc:	200000bc 	.word	0x200000bc

080285e0 <free>:
 80285e0:	4b02      	ldr	r3, [pc, #8]	; (80285ec <free+0xc>)
 80285e2:	4601      	mov	r1, r0
 80285e4:	6818      	ldr	r0, [r3, #0]
 80285e6:	f000 b819 	b.w	802861c <_free_r>
 80285ea:	bf00      	nop
 80285ec:	200000bc 	.word	0x200000bc

080285f0 <memcpy>:
 80285f0:	440a      	add	r2, r1
 80285f2:	4291      	cmp	r1, r2
 80285f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80285f8:	d100      	bne.n	80285fc <memcpy+0xc>
 80285fa:	4770      	bx	lr
 80285fc:	b510      	push	{r4, lr}
 80285fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028606:	4291      	cmp	r1, r2
 8028608:	d1f9      	bne.n	80285fe <memcpy+0xe>
 802860a:	bd10      	pop	{r4, pc}

0802860c <memset>:
 802860c:	4402      	add	r2, r0
 802860e:	4603      	mov	r3, r0
 8028610:	4293      	cmp	r3, r2
 8028612:	d100      	bne.n	8028616 <memset+0xa>
 8028614:	4770      	bx	lr
 8028616:	f803 1b01 	strb.w	r1, [r3], #1
 802861a:	e7f9      	b.n	8028610 <memset+0x4>

0802861c <_free_r>:
 802861c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802861e:	2900      	cmp	r1, #0
 8028620:	d044      	beq.n	80286ac <_free_r+0x90>
 8028622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028626:	9001      	str	r0, [sp, #4]
 8028628:	2b00      	cmp	r3, #0
 802862a:	f1a1 0404 	sub.w	r4, r1, #4
 802862e:	bfb8      	it	lt
 8028630:	18e4      	addlt	r4, r4, r3
 8028632:	f000 ffa1 	bl	8029578 <__malloc_lock>
 8028636:	4a1e      	ldr	r2, [pc, #120]	; (80286b0 <_free_r+0x94>)
 8028638:	9801      	ldr	r0, [sp, #4]
 802863a:	6813      	ldr	r3, [r2, #0]
 802863c:	b933      	cbnz	r3, 802864c <_free_r+0x30>
 802863e:	6063      	str	r3, [r4, #4]
 8028640:	6014      	str	r4, [r2, #0]
 8028642:	b003      	add	sp, #12
 8028644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028648:	f000 bf9c 	b.w	8029584 <__malloc_unlock>
 802864c:	42a3      	cmp	r3, r4
 802864e:	d908      	bls.n	8028662 <_free_r+0x46>
 8028650:	6825      	ldr	r5, [r4, #0]
 8028652:	1961      	adds	r1, r4, r5
 8028654:	428b      	cmp	r3, r1
 8028656:	bf01      	itttt	eq
 8028658:	6819      	ldreq	r1, [r3, #0]
 802865a:	685b      	ldreq	r3, [r3, #4]
 802865c:	1949      	addeq	r1, r1, r5
 802865e:	6021      	streq	r1, [r4, #0]
 8028660:	e7ed      	b.n	802863e <_free_r+0x22>
 8028662:	461a      	mov	r2, r3
 8028664:	685b      	ldr	r3, [r3, #4]
 8028666:	b10b      	cbz	r3, 802866c <_free_r+0x50>
 8028668:	42a3      	cmp	r3, r4
 802866a:	d9fa      	bls.n	8028662 <_free_r+0x46>
 802866c:	6811      	ldr	r1, [r2, #0]
 802866e:	1855      	adds	r5, r2, r1
 8028670:	42a5      	cmp	r5, r4
 8028672:	d10b      	bne.n	802868c <_free_r+0x70>
 8028674:	6824      	ldr	r4, [r4, #0]
 8028676:	4421      	add	r1, r4
 8028678:	1854      	adds	r4, r2, r1
 802867a:	42a3      	cmp	r3, r4
 802867c:	6011      	str	r1, [r2, #0]
 802867e:	d1e0      	bne.n	8028642 <_free_r+0x26>
 8028680:	681c      	ldr	r4, [r3, #0]
 8028682:	685b      	ldr	r3, [r3, #4]
 8028684:	6053      	str	r3, [r2, #4]
 8028686:	4421      	add	r1, r4
 8028688:	6011      	str	r1, [r2, #0]
 802868a:	e7da      	b.n	8028642 <_free_r+0x26>
 802868c:	d902      	bls.n	8028694 <_free_r+0x78>
 802868e:	230c      	movs	r3, #12
 8028690:	6003      	str	r3, [r0, #0]
 8028692:	e7d6      	b.n	8028642 <_free_r+0x26>
 8028694:	6825      	ldr	r5, [r4, #0]
 8028696:	1961      	adds	r1, r4, r5
 8028698:	428b      	cmp	r3, r1
 802869a:	bf04      	itt	eq
 802869c:	6819      	ldreq	r1, [r3, #0]
 802869e:	685b      	ldreq	r3, [r3, #4]
 80286a0:	6063      	str	r3, [r4, #4]
 80286a2:	bf04      	itt	eq
 80286a4:	1949      	addeq	r1, r1, r5
 80286a6:	6021      	streq	r1, [r4, #0]
 80286a8:	6054      	str	r4, [r2, #4]
 80286aa:	e7ca      	b.n	8028642 <_free_r+0x26>
 80286ac:	b003      	add	sp, #12
 80286ae:	bd30      	pop	{r4, r5, pc}
 80286b0:	200151f4 	.word	0x200151f4

080286b4 <sbrk_aligned>:
 80286b4:	b570      	push	{r4, r5, r6, lr}
 80286b6:	4e0e      	ldr	r6, [pc, #56]	; (80286f0 <sbrk_aligned+0x3c>)
 80286b8:	460c      	mov	r4, r1
 80286ba:	6831      	ldr	r1, [r6, #0]
 80286bc:	4605      	mov	r5, r0
 80286be:	b911      	cbnz	r1, 80286c6 <sbrk_aligned+0x12>
 80286c0:	f000 fb7a 	bl	8028db8 <_sbrk_r>
 80286c4:	6030      	str	r0, [r6, #0]
 80286c6:	4621      	mov	r1, r4
 80286c8:	4628      	mov	r0, r5
 80286ca:	f000 fb75 	bl	8028db8 <_sbrk_r>
 80286ce:	1c43      	adds	r3, r0, #1
 80286d0:	d00a      	beq.n	80286e8 <sbrk_aligned+0x34>
 80286d2:	1cc4      	adds	r4, r0, #3
 80286d4:	f024 0403 	bic.w	r4, r4, #3
 80286d8:	42a0      	cmp	r0, r4
 80286da:	d007      	beq.n	80286ec <sbrk_aligned+0x38>
 80286dc:	1a21      	subs	r1, r4, r0
 80286de:	4628      	mov	r0, r5
 80286e0:	f000 fb6a 	bl	8028db8 <_sbrk_r>
 80286e4:	3001      	adds	r0, #1
 80286e6:	d101      	bne.n	80286ec <sbrk_aligned+0x38>
 80286e8:	f04f 34ff 	mov.w	r4, #4294967295
 80286ec:	4620      	mov	r0, r4
 80286ee:	bd70      	pop	{r4, r5, r6, pc}
 80286f0:	200151f8 	.word	0x200151f8

080286f4 <_malloc_r>:
 80286f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80286f8:	1ccd      	adds	r5, r1, #3
 80286fa:	f025 0503 	bic.w	r5, r5, #3
 80286fe:	3508      	adds	r5, #8
 8028700:	2d0c      	cmp	r5, #12
 8028702:	bf38      	it	cc
 8028704:	250c      	movcc	r5, #12
 8028706:	2d00      	cmp	r5, #0
 8028708:	4607      	mov	r7, r0
 802870a:	db01      	blt.n	8028710 <_malloc_r+0x1c>
 802870c:	42a9      	cmp	r1, r5
 802870e:	d905      	bls.n	802871c <_malloc_r+0x28>
 8028710:	230c      	movs	r3, #12
 8028712:	603b      	str	r3, [r7, #0]
 8028714:	2600      	movs	r6, #0
 8028716:	4630      	mov	r0, r6
 8028718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802871c:	4e2e      	ldr	r6, [pc, #184]	; (80287d8 <_malloc_r+0xe4>)
 802871e:	f000 ff2b 	bl	8029578 <__malloc_lock>
 8028722:	6833      	ldr	r3, [r6, #0]
 8028724:	461c      	mov	r4, r3
 8028726:	bb34      	cbnz	r4, 8028776 <_malloc_r+0x82>
 8028728:	4629      	mov	r1, r5
 802872a:	4638      	mov	r0, r7
 802872c:	f7ff ffc2 	bl	80286b4 <sbrk_aligned>
 8028730:	1c43      	adds	r3, r0, #1
 8028732:	4604      	mov	r4, r0
 8028734:	d14d      	bne.n	80287d2 <_malloc_r+0xde>
 8028736:	6834      	ldr	r4, [r6, #0]
 8028738:	4626      	mov	r6, r4
 802873a:	2e00      	cmp	r6, #0
 802873c:	d140      	bne.n	80287c0 <_malloc_r+0xcc>
 802873e:	6823      	ldr	r3, [r4, #0]
 8028740:	4631      	mov	r1, r6
 8028742:	4638      	mov	r0, r7
 8028744:	eb04 0803 	add.w	r8, r4, r3
 8028748:	f000 fb36 	bl	8028db8 <_sbrk_r>
 802874c:	4580      	cmp	r8, r0
 802874e:	d13a      	bne.n	80287c6 <_malloc_r+0xd2>
 8028750:	6821      	ldr	r1, [r4, #0]
 8028752:	3503      	adds	r5, #3
 8028754:	1a6d      	subs	r5, r5, r1
 8028756:	f025 0503 	bic.w	r5, r5, #3
 802875a:	3508      	adds	r5, #8
 802875c:	2d0c      	cmp	r5, #12
 802875e:	bf38      	it	cc
 8028760:	250c      	movcc	r5, #12
 8028762:	4629      	mov	r1, r5
 8028764:	4638      	mov	r0, r7
 8028766:	f7ff ffa5 	bl	80286b4 <sbrk_aligned>
 802876a:	3001      	adds	r0, #1
 802876c:	d02b      	beq.n	80287c6 <_malloc_r+0xd2>
 802876e:	6823      	ldr	r3, [r4, #0]
 8028770:	442b      	add	r3, r5
 8028772:	6023      	str	r3, [r4, #0]
 8028774:	e00e      	b.n	8028794 <_malloc_r+0xa0>
 8028776:	6822      	ldr	r2, [r4, #0]
 8028778:	1b52      	subs	r2, r2, r5
 802877a:	d41e      	bmi.n	80287ba <_malloc_r+0xc6>
 802877c:	2a0b      	cmp	r2, #11
 802877e:	d916      	bls.n	80287ae <_malloc_r+0xba>
 8028780:	1961      	adds	r1, r4, r5
 8028782:	42a3      	cmp	r3, r4
 8028784:	6025      	str	r5, [r4, #0]
 8028786:	bf18      	it	ne
 8028788:	6059      	strne	r1, [r3, #4]
 802878a:	6863      	ldr	r3, [r4, #4]
 802878c:	bf08      	it	eq
 802878e:	6031      	streq	r1, [r6, #0]
 8028790:	5162      	str	r2, [r4, r5]
 8028792:	604b      	str	r3, [r1, #4]
 8028794:	4638      	mov	r0, r7
 8028796:	f104 060b 	add.w	r6, r4, #11
 802879a:	f000 fef3 	bl	8029584 <__malloc_unlock>
 802879e:	f026 0607 	bic.w	r6, r6, #7
 80287a2:	1d23      	adds	r3, r4, #4
 80287a4:	1af2      	subs	r2, r6, r3
 80287a6:	d0b6      	beq.n	8028716 <_malloc_r+0x22>
 80287a8:	1b9b      	subs	r3, r3, r6
 80287aa:	50a3      	str	r3, [r4, r2]
 80287ac:	e7b3      	b.n	8028716 <_malloc_r+0x22>
 80287ae:	6862      	ldr	r2, [r4, #4]
 80287b0:	42a3      	cmp	r3, r4
 80287b2:	bf0c      	ite	eq
 80287b4:	6032      	streq	r2, [r6, #0]
 80287b6:	605a      	strne	r2, [r3, #4]
 80287b8:	e7ec      	b.n	8028794 <_malloc_r+0xa0>
 80287ba:	4623      	mov	r3, r4
 80287bc:	6864      	ldr	r4, [r4, #4]
 80287be:	e7b2      	b.n	8028726 <_malloc_r+0x32>
 80287c0:	4634      	mov	r4, r6
 80287c2:	6876      	ldr	r6, [r6, #4]
 80287c4:	e7b9      	b.n	802873a <_malloc_r+0x46>
 80287c6:	230c      	movs	r3, #12
 80287c8:	603b      	str	r3, [r7, #0]
 80287ca:	4638      	mov	r0, r7
 80287cc:	f000 feda 	bl	8029584 <__malloc_unlock>
 80287d0:	e7a1      	b.n	8028716 <_malloc_r+0x22>
 80287d2:	6025      	str	r5, [r4, #0]
 80287d4:	e7de      	b.n	8028794 <_malloc_r+0xa0>
 80287d6:	bf00      	nop
 80287d8:	200151f4 	.word	0x200151f4

080287dc <__sfputc_r>:
 80287dc:	6893      	ldr	r3, [r2, #8]
 80287de:	3b01      	subs	r3, #1
 80287e0:	2b00      	cmp	r3, #0
 80287e2:	b410      	push	{r4}
 80287e4:	6093      	str	r3, [r2, #8]
 80287e6:	da08      	bge.n	80287fa <__sfputc_r+0x1e>
 80287e8:	6994      	ldr	r4, [r2, #24]
 80287ea:	42a3      	cmp	r3, r4
 80287ec:	db01      	blt.n	80287f2 <__sfputc_r+0x16>
 80287ee:	290a      	cmp	r1, #10
 80287f0:	d103      	bne.n	80287fa <__sfputc_r+0x1e>
 80287f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80287f6:	f000 bb67 	b.w	8028ec8 <__swbuf_r>
 80287fa:	6813      	ldr	r3, [r2, #0]
 80287fc:	1c58      	adds	r0, r3, #1
 80287fe:	6010      	str	r0, [r2, #0]
 8028800:	7019      	strb	r1, [r3, #0]
 8028802:	4608      	mov	r0, r1
 8028804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028808:	4770      	bx	lr

0802880a <__sfputs_r>:
 802880a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802880c:	4606      	mov	r6, r0
 802880e:	460f      	mov	r7, r1
 8028810:	4614      	mov	r4, r2
 8028812:	18d5      	adds	r5, r2, r3
 8028814:	42ac      	cmp	r4, r5
 8028816:	d101      	bne.n	802881c <__sfputs_r+0x12>
 8028818:	2000      	movs	r0, #0
 802881a:	e007      	b.n	802882c <__sfputs_r+0x22>
 802881c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028820:	463a      	mov	r2, r7
 8028822:	4630      	mov	r0, r6
 8028824:	f7ff ffda 	bl	80287dc <__sfputc_r>
 8028828:	1c43      	adds	r3, r0, #1
 802882a:	d1f3      	bne.n	8028814 <__sfputs_r+0xa>
 802882c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028830 <_vfiprintf_r>:
 8028830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028834:	460d      	mov	r5, r1
 8028836:	b09d      	sub	sp, #116	; 0x74
 8028838:	4614      	mov	r4, r2
 802883a:	4698      	mov	r8, r3
 802883c:	4606      	mov	r6, r0
 802883e:	b118      	cbz	r0, 8028848 <_vfiprintf_r+0x18>
 8028840:	6983      	ldr	r3, [r0, #24]
 8028842:	b90b      	cbnz	r3, 8028848 <_vfiprintf_r+0x18>
 8028844:	f000 fd7c 	bl	8029340 <__sinit>
 8028848:	4b89      	ldr	r3, [pc, #548]	; (8028a70 <_vfiprintf_r+0x240>)
 802884a:	429d      	cmp	r5, r3
 802884c:	d11b      	bne.n	8028886 <_vfiprintf_r+0x56>
 802884e:	6875      	ldr	r5, [r6, #4]
 8028850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028852:	07d9      	lsls	r1, r3, #31
 8028854:	d405      	bmi.n	8028862 <_vfiprintf_r+0x32>
 8028856:	89ab      	ldrh	r3, [r5, #12]
 8028858:	059a      	lsls	r2, r3, #22
 802885a:	d402      	bmi.n	8028862 <_vfiprintf_r+0x32>
 802885c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802885e:	f7ff feb4 	bl	80285ca <__retarget_lock_acquire_recursive>
 8028862:	89ab      	ldrh	r3, [r5, #12]
 8028864:	071b      	lsls	r3, r3, #28
 8028866:	d501      	bpl.n	802886c <_vfiprintf_r+0x3c>
 8028868:	692b      	ldr	r3, [r5, #16]
 802886a:	b9eb      	cbnz	r3, 80288a8 <_vfiprintf_r+0x78>
 802886c:	4629      	mov	r1, r5
 802886e:	4630      	mov	r0, r6
 8028870:	f000 fb7c 	bl	8028f6c <__swsetup_r>
 8028874:	b1c0      	cbz	r0, 80288a8 <_vfiprintf_r+0x78>
 8028876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028878:	07dc      	lsls	r4, r3, #31
 802887a:	d50e      	bpl.n	802889a <_vfiprintf_r+0x6a>
 802887c:	f04f 30ff 	mov.w	r0, #4294967295
 8028880:	b01d      	add	sp, #116	; 0x74
 8028882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028886:	4b7b      	ldr	r3, [pc, #492]	; (8028a74 <_vfiprintf_r+0x244>)
 8028888:	429d      	cmp	r5, r3
 802888a:	d101      	bne.n	8028890 <_vfiprintf_r+0x60>
 802888c:	68b5      	ldr	r5, [r6, #8]
 802888e:	e7df      	b.n	8028850 <_vfiprintf_r+0x20>
 8028890:	4b79      	ldr	r3, [pc, #484]	; (8028a78 <_vfiprintf_r+0x248>)
 8028892:	429d      	cmp	r5, r3
 8028894:	bf08      	it	eq
 8028896:	68f5      	ldreq	r5, [r6, #12]
 8028898:	e7da      	b.n	8028850 <_vfiprintf_r+0x20>
 802889a:	89ab      	ldrh	r3, [r5, #12]
 802889c:	0598      	lsls	r0, r3, #22
 802889e:	d4ed      	bmi.n	802887c <_vfiprintf_r+0x4c>
 80288a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80288a2:	f7ff fe94 	bl	80285ce <__retarget_lock_release_recursive>
 80288a6:	e7e9      	b.n	802887c <_vfiprintf_r+0x4c>
 80288a8:	2300      	movs	r3, #0
 80288aa:	9309      	str	r3, [sp, #36]	; 0x24
 80288ac:	2320      	movs	r3, #32
 80288ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80288b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80288b6:	2330      	movs	r3, #48	; 0x30
 80288b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028a7c <_vfiprintf_r+0x24c>
 80288bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80288c0:	f04f 0901 	mov.w	r9, #1
 80288c4:	4623      	mov	r3, r4
 80288c6:	469a      	mov	sl, r3
 80288c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80288cc:	b10a      	cbz	r2, 80288d2 <_vfiprintf_r+0xa2>
 80288ce:	2a25      	cmp	r2, #37	; 0x25
 80288d0:	d1f9      	bne.n	80288c6 <_vfiprintf_r+0x96>
 80288d2:	ebba 0b04 	subs.w	fp, sl, r4
 80288d6:	d00b      	beq.n	80288f0 <_vfiprintf_r+0xc0>
 80288d8:	465b      	mov	r3, fp
 80288da:	4622      	mov	r2, r4
 80288dc:	4629      	mov	r1, r5
 80288de:	4630      	mov	r0, r6
 80288e0:	f7ff ff93 	bl	802880a <__sfputs_r>
 80288e4:	3001      	adds	r0, #1
 80288e6:	f000 80aa 	beq.w	8028a3e <_vfiprintf_r+0x20e>
 80288ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80288ec:	445a      	add	r2, fp
 80288ee:	9209      	str	r2, [sp, #36]	; 0x24
 80288f0:	f89a 3000 	ldrb.w	r3, [sl]
 80288f4:	2b00      	cmp	r3, #0
 80288f6:	f000 80a2 	beq.w	8028a3e <_vfiprintf_r+0x20e>
 80288fa:	2300      	movs	r3, #0
 80288fc:	f04f 32ff 	mov.w	r2, #4294967295
 8028900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028904:	f10a 0a01 	add.w	sl, sl, #1
 8028908:	9304      	str	r3, [sp, #16]
 802890a:	9307      	str	r3, [sp, #28]
 802890c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028910:	931a      	str	r3, [sp, #104]	; 0x68
 8028912:	4654      	mov	r4, sl
 8028914:	2205      	movs	r2, #5
 8028916:	f814 1b01 	ldrb.w	r1, [r4], #1
 802891a:	4858      	ldr	r0, [pc, #352]	; (8028a7c <_vfiprintf_r+0x24c>)
 802891c:	f7d7 fc78 	bl	8000210 <memchr>
 8028920:	9a04      	ldr	r2, [sp, #16]
 8028922:	b9d8      	cbnz	r0, 802895c <_vfiprintf_r+0x12c>
 8028924:	06d1      	lsls	r1, r2, #27
 8028926:	bf44      	itt	mi
 8028928:	2320      	movmi	r3, #32
 802892a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802892e:	0713      	lsls	r3, r2, #28
 8028930:	bf44      	itt	mi
 8028932:	232b      	movmi	r3, #43	; 0x2b
 8028934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028938:	f89a 3000 	ldrb.w	r3, [sl]
 802893c:	2b2a      	cmp	r3, #42	; 0x2a
 802893e:	d015      	beq.n	802896c <_vfiprintf_r+0x13c>
 8028940:	9a07      	ldr	r2, [sp, #28]
 8028942:	4654      	mov	r4, sl
 8028944:	2000      	movs	r0, #0
 8028946:	f04f 0c0a 	mov.w	ip, #10
 802894a:	4621      	mov	r1, r4
 802894c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028950:	3b30      	subs	r3, #48	; 0x30
 8028952:	2b09      	cmp	r3, #9
 8028954:	d94e      	bls.n	80289f4 <_vfiprintf_r+0x1c4>
 8028956:	b1b0      	cbz	r0, 8028986 <_vfiprintf_r+0x156>
 8028958:	9207      	str	r2, [sp, #28]
 802895a:	e014      	b.n	8028986 <_vfiprintf_r+0x156>
 802895c:	eba0 0308 	sub.w	r3, r0, r8
 8028960:	fa09 f303 	lsl.w	r3, r9, r3
 8028964:	4313      	orrs	r3, r2
 8028966:	9304      	str	r3, [sp, #16]
 8028968:	46a2      	mov	sl, r4
 802896a:	e7d2      	b.n	8028912 <_vfiprintf_r+0xe2>
 802896c:	9b03      	ldr	r3, [sp, #12]
 802896e:	1d19      	adds	r1, r3, #4
 8028970:	681b      	ldr	r3, [r3, #0]
 8028972:	9103      	str	r1, [sp, #12]
 8028974:	2b00      	cmp	r3, #0
 8028976:	bfbb      	ittet	lt
 8028978:	425b      	neglt	r3, r3
 802897a:	f042 0202 	orrlt.w	r2, r2, #2
 802897e:	9307      	strge	r3, [sp, #28]
 8028980:	9307      	strlt	r3, [sp, #28]
 8028982:	bfb8      	it	lt
 8028984:	9204      	strlt	r2, [sp, #16]
 8028986:	7823      	ldrb	r3, [r4, #0]
 8028988:	2b2e      	cmp	r3, #46	; 0x2e
 802898a:	d10c      	bne.n	80289a6 <_vfiprintf_r+0x176>
 802898c:	7863      	ldrb	r3, [r4, #1]
 802898e:	2b2a      	cmp	r3, #42	; 0x2a
 8028990:	d135      	bne.n	80289fe <_vfiprintf_r+0x1ce>
 8028992:	9b03      	ldr	r3, [sp, #12]
 8028994:	1d1a      	adds	r2, r3, #4
 8028996:	681b      	ldr	r3, [r3, #0]
 8028998:	9203      	str	r2, [sp, #12]
 802899a:	2b00      	cmp	r3, #0
 802899c:	bfb8      	it	lt
 802899e:	f04f 33ff 	movlt.w	r3, #4294967295
 80289a2:	3402      	adds	r4, #2
 80289a4:	9305      	str	r3, [sp, #20]
 80289a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028a8c <_vfiprintf_r+0x25c>
 80289aa:	7821      	ldrb	r1, [r4, #0]
 80289ac:	2203      	movs	r2, #3
 80289ae:	4650      	mov	r0, sl
 80289b0:	f7d7 fc2e 	bl	8000210 <memchr>
 80289b4:	b140      	cbz	r0, 80289c8 <_vfiprintf_r+0x198>
 80289b6:	2340      	movs	r3, #64	; 0x40
 80289b8:	eba0 000a 	sub.w	r0, r0, sl
 80289bc:	fa03 f000 	lsl.w	r0, r3, r0
 80289c0:	9b04      	ldr	r3, [sp, #16]
 80289c2:	4303      	orrs	r3, r0
 80289c4:	3401      	adds	r4, #1
 80289c6:	9304      	str	r3, [sp, #16]
 80289c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80289cc:	482c      	ldr	r0, [pc, #176]	; (8028a80 <_vfiprintf_r+0x250>)
 80289ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80289d2:	2206      	movs	r2, #6
 80289d4:	f7d7 fc1c 	bl	8000210 <memchr>
 80289d8:	2800      	cmp	r0, #0
 80289da:	d03f      	beq.n	8028a5c <_vfiprintf_r+0x22c>
 80289dc:	4b29      	ldr	r3, [pc, #164]	; (8028a84 <_vfiprintf_r+0x254>)
 80289de:	bb1b      	cbnz	r3, 8028a28 <_vfiprintf_r+0x1f8>
 80289e0:	9b03      	ldr	r3, [sp, #12]
 80289e2:	3307      	adds	r3, #7
 80289e4:	f023 0307 	bic.w	r3, r3, #7
 80289e8:	3308      	adds	r3, #8
 80289ea:	9303      	str	r3, [sp, #12]
 80289ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80289ee:	443b      	add	r3, r7
 80289f0:	9309      	str	r3, [sp, #36]	; 0x24
 80289f2:	e767      	b.n	80288c4 <_vfiprintf_r+0x94>
 80289f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80289f8:	460c      	mov	r4, r1
 80289fa:	2001      	movs	r0, #1
 80289fc:	e7a5      	b.n	802894a <_vfiprintf_r+0x11a>
 80289fe:	2300      	movs	r3, #0
 8028a00:	3401      	adds	r4, #1
 8028a02:	9305      	str	r3, [sp, #20]
 8028a04:	4619      	mov	r1, r3
 8028a06:	f04f 0c0a 	mov.w	ip, #10
 8028a0a:	4620      	mov	r0, r4
 8028a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028a10:	3a30      	subs	r2, #48	; 0x30
 8028a12:	2a09      	cmp	r2, #9
 8028a14:	d903      	bls.n	8028a1e <_vfiprintf_r+0x1ee>
 8028a16:	2b00      	cmp	r3, #0
 8028a18:	d0c5      	beq.n	80289a6 <_vfiprintf_r+0x176>
 8028a1a:	9105      	str	r1, [sp, #20]
 8028a1c:	e7c3      	b.n	80289a6 <_vfiprintf_r+0x176>
 8028a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8028a22:	4604      	mov	r4, r0
 8028a24:	2301      	movs	r3, #1
 8028a26:	e7f0      	b.n	8028a0a <_vfiprintf_r+0x1da>
 8028a28:	ab03      	add	r3, sp, #12
 8028a2a:	9300      	str	r3, [sp, #0]
 8028a2c:	462a      	mov	r2, r5
 8028a2e:	4b16      	ldr	r3, [pc, #88]	; (8028a88 <_vfiprintf_r+0x258>)
 8028a30:	a904      	add	r1, sp, #16
 8028a32:	4630      	mov	r0, r6
 8028a34:	f3af 8000 	nop.w
 8028a38:	4607      	mov	r7, r0
 8028a3a:	1c78      	adds	r0, r7, #1
 8028a3c:	d1d6      	bne.n	80289ec <_vfiprintf_r+0x1bc>
 8028a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028a40:	07d9      	lsls	r1, r3, #31
 8028a42:	d405      	bmi.n	8028a50 <_vfiprintf_r+0x220>
 8028a44:	89ab      	ldrh	r3, [r5, #12]
 8028a46:	059a      	lsls	r2, r3, #22
 8028a48:	d402      	bmi.n	8028a50 <_vfiprintf_r+0x220>
 8028a4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028a4c:	f7ff fdbf 	bl	80285ce <__retarget_lock_release_recursive>
 8028a50:	89ab      	ldrh	r3, [r5, #12]
 8028a52:	065b      	lsls	r3, r3, #25
 8028a54:	f53f af12 	bmi.w	802887c <_vfiprintf_r+0x4c>
 8028a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028a5a:	e711      	b.n	8028880 <_vfiprintf_r+0x50>
 8028a5c:	ab03      	add	r3, sp, #12
 8028a5e:	9300      	str	r3, [sp, #0]
 8028a60:	462a      	mov	r2, r5
 8028a62:	4b09      	ldr	r3, [pc, #36]	; (8028a88 <_vfiprintf_r+0x258>)
 8028a64:	a904      	add	r1, sp, #16
 8028a66:	4630      	mov	r0, r6
 8028a68:	f000 f880 	bl	8028b6c <_printf_i>
 8028a6c:	e7e4      	b.n	8028a38 <_vfiprintf_r+0x208>
 8028a6e:	bf00      	nop
 8028a70:	0802e3a8 	.word	0x0802e3a8
 8028a74:	0802e3c8 	.word	0x0802e3c8
 8028a78:	0802e388 	.word	0x0802e388
 8028a7c:	0802e350 	.word	0x0802e350
 8028a80:	0802e35a 	.word	0x0802e35a
 8028a84:	00000000 	.word	0x00000000
 8028a88:	0802880b 	.word	0x0802880b
 8028a8c:	0802e356 	.word	0x0802e356

08028a90 <_printf_common>:
 8028a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028a94:	4616      	mov	r6, r2
 8028a96:	4699      	mov	r9, r3
 8028a98:	688a      	ldr	r2, [r1, #8]
 8028a9a:	690b      	ldr	r3, [r1, #16]
 8028a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8028aa0:	4293      	cmp	r3, r2
 8028aa2:	bfb8      	it	lt
 8028aa4:	4613      	movlt	r3, r2
 8028aa6:	6033      	str	r3, [r6, #0]
 8028aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8028aac:	4607      	mov	r7, r0
 8028aae:	460c      	mov	r4, r1
 8028ab0:	b10a      	cbz	r2, 8028ab6 <_printf_common+0x26>
 8028ab2:	3301      	adds	r3, #1
 8028ab4:	6033      	str	r3, [r6, #0]
 8028ab6:	6823      	ldr	r3, [r4, #0]
 8028ab8:	0699      	lsls	r1, r3, #26
 8028aba:	bf42      	ittt	mi
 8028abc:	6833      	ldrmi	r3, [r6, #0]
 8028abe:	3302      	addmi	r3, #2
 8028ac0:	6033      	strmi	r3, [r6, #0]
 8028ac2:	6825      	ldr	r5, [r4, #0]
 8028ac4:	f015 0506 	ands.w	r5, r5, #6
 8028ac8:	d106      	bne.n	8028ad8 <_printf_common+0x48>
 8028aca:	f104 0a19 	add.w	sl, r4, #25
 8028ace:	68e3      	ldr	r3, [r4, #12]
 8028ad0:	6832      	ldr	r2, [r6, #0]
 8028ad2:	1a9b      	subs	r3, r3, r2
 8028ad4:	42ab      	cmp	r3, r5
 8028ad6:	dc26      	bgt.n	8028b26 <_printf_common+0x96>
 8028ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8028adc:	1e13      	subs	r3, r2, #0
 8028ade:	6822      	ldr	r2, [r4, #0]
 8028ae0:	bf18      	it	ne
 8028ae2:	2301      	movne	r3, #1
 8028ae4:	0692      	lsls	r2, r2, #26
 8028ae6:	d42b      	bmi.n	8028b40 <_printf_common+0xb0>
 8028ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8028aec:	4649      	mov	r1, r9
 8028aee:	4638      	mov	r0, r7
 8028af0:	47c0      	blx	r8
 8028af2:	3001      	adds	r0, #1
 8028af4:	d01e      	beq.n	8028b34 <_printf_common+0xa4>
 8028af6:	6823      	ldr	r3, [r4, #0]
 8028af8:	68e5      	ldr	r5, [r4, #12]
 8028afa:	6832      	ldr	r2, [r6, #0]
 8028afc:	f003 0306 	and.w	r3, r3, #6
 8028b00:	2b04      	cmp	r3, #4
 8028b02:	bf08      	it	eq
 8028b04:	1aad      	subeq	r5, r5, r2
 8028b06:	68a3      	ldr	r3, [r4, #8]
 8028b08:	6922      	ldr	r2, [r4, #16]
 8028b0a:	bf0c      	ite	eq
 8028b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028b10:	2500      	movne	r5, #0
 8028b12:	4293      	cmp	r3, r2
 8028b14:	bfc4      	itt	gt
 8028b16:	1a9b      	subgt	r3, r3, r2
 8028b18:	18ed      	addgt	r5, r5, r3
 8028b1a:	2600      	movs	r6, #0
 8028b1c:	341a      	adds	r4, #26
 8028b1e:	42b5      	cmp	r5, r6
 8028b20:	d11a      	bne.n	8028b58 <_printf_common+0xc8>
 8028b22:	2000      	movs	r0, #0
 8028b24:	e008      	b.n	8028b38 <_printf_common+0xa8>
 8028b26:	2301      	movs	r3, #1
 8028b28:	4652      	mov	r2, sl
 8028b2a:	4649      	mov	r1, r9
 8028b2c:	4638      	mov	r0, r7
 8028b2e:	47c0      	blx	r8
 8028b30:	3001      	adds	r0, #1
 8028b32:	d103      	bne.n	8028b3c <_printf_common+0xac>
 8028b34:	f04f 30ff 	mov.w	r0, #4294967295
 8028b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028b3c:	3501      	adds	r5, #1
 8028b3e:	e7c6      	b.n	8028ace <_printf_common+0x3e>
 8028b40:	18e1      	adds	r1, r4, r3
 8028b42:	1c5a      	adds	r2, r3, #1
 8028b44:	2030      	movs	r0, #48	; 0x30
 8028b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8028b4a:	4422      	add	r2, r4
 8028b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8028b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8028b54:	3302      	adds	r3, #2
 8028b56:	e7c7      	b.n	8028ae8 <_printf_common+0x58>
 8028b58:	2301      	movs	r3, #1
 8028b5a:	4622      	mov	r2, r4
 8028b5c:	4649      	mov	r1, r9
 8028b5e:	4638      	mov	r0, r7
 8028b60:	47c0      	blx	r8
 8028b62:	3001      	adds	r0, #1
 8028b64:	d0e6      	beq.n	8028b34 <_printf_common+0xa4>
 8028b66:	3601      	adds	r6, #1
 8028b68:	e7d9      	b.n	8028b1e <_printf_common+0x8e>
	...

08028b6c <_printf_i>:
 8028b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028b70:	7e0f      	ldrb	r7, [r1, #24]
 8028b72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028b74:	2f78      	cmp	r7, #120	; 0x78
 8028b76:	4691      	mov	r9, r2
 8028b78:	4680      	mov	r8, r0
 8028b7a:	460c      	mov	r4, r1
 8028b7c:	469a      	mov	sl, r3
 8028b7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8028b82:	d807      	bhi.n	8028b94 <_printf_i+0x28>
 8028b84:	2f62      	cmp	r7, #98	; 0x62
 8028b86:	d80a      	bhi.n	8028b9e <_printf_i+0x32>
 8028b88:	2f00      	cmp	r7, #0
 8028b8a:	f000 80d8 	beq.w	8028d3e <_printf_i+0x1d2>
 8028b8e:	2f58      	cmp	r7, #88	; 0x58
 8028b90:	f000 80a3 	beq.w	8028cda <_printf_i+0x16e>
 8028b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8028b9c:	e03a      	b.n	8028c14 <_printf_i+0xa8>
 8028b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8028ba2:	2b15      	cmp	r3, #21
 8028ba4:	d8f6      	bhi.n	8028b94 <_printf_i+0x28>
 8028ba6:	a101      	add	r1, pc, #4	; (adr r1, 8028bac <_printf_i+0x40>)
 8028ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028bac:	08028c05 	.word	0x08028c05
 8028bb0:	08028c19 	.word	0x08028c19
 8028bb4:	08028b95 	.word	0x08028b95
 8028bb8:	08028b95 	.word	0x08028b95
 8028bbc:	08028b95 	.word	0x08028b95
 8028bc0:	08028b95 	.word	0x08028b95
 8028bc4:	08028c19 	.word	0x08028c19
 8028bc8:	08028b95 	.word	0x08028b95
 8028bcc:	08028b95 	.word	0x08028b95
 8028bd0:	08028b95 	.word	0x08028b95
 8028bd4:	08028b95 	.word	0x08028b95
 8028bd8:	08028d25 	.word	0x08028d25
 8028bdc:	08028c49 	.word	0x08028c49
 8028be0:	08028d07 	.word	0x08028d07
 8028be4:	08028b95 	.word	0x08028b95
 8028be8:	08028b95 	.word	0x08028b95
 8028bec:	08028d47 	.word	0x08028d47
 8028bf0:	08028b95 	.word	0x08028b95
 8028bf4:	08028c49 	.word	0x08028c49
 8028bf8:	08028b95 	.word	0x08028b95
 8028bfc:	08028b95 	.word	0x08028b95
 8028c00:	08028d0f 	.word	0x08028d0f
 8028c04:	682b      	ldr	r3, [r5, #0]
 8028c06:	1d1a      	adds	r2, r3, #4
 8028c08:	681b      	ldr	r3, [r3, #0]
 8028c0a:	602a      	str	r2, [r5, #0]
 8028c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8028c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8028c14:	2301      	movs	r3, #1
 8028c16:	e0a3      	b.n	8028d60 <_printf_i+0x1f4>
 8028c18:	6820      	ldr	r0, [r4, #0]
 8028c1a:	6829      	ldr	r1, [r5, #0]
 8028c1c:	0606      	lsls	r6, r0, #24
 8028c1e:	f101 0304 	add.w	r3, r1, #4
 8028c22:	d50a      	bpl.n	8028c3a <_printf_i+0xce>
 8028c24:	680e      	ldr	r6, [r1, #0]
 8028c26:	602b      	str	r3, [r5, #0]
 8028c28:	2e00      	cmp	r6, #0
 8028c2a:	da03      	bge.n	8028c34 <_printf_i+0xc8>
 8028c2c:	232d      	movs	r3, #45	; 0x2d
 8028c2e:	4276      	negs	r6, r6
 8028c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028c34:	485e      	ldr	r0, [pc, #376]	; (8028db0 <_printf_i+0x244>)
 8028c36:	230a      	movs	r3, #10
 8028c38:	e019      	b.n	8028c6e <_printf_i+0x102>
 8028c3a:	680e      	ldr	r6, [r1, #0]
 8028c3c:	602b      	str	r3, [r5, #0]
 8028c3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8028c42:	bf18      	it	ne
 8028c44:	b236      	sxthne	r6, r6
 8028c46:	e7ef      	b.n	8028c28 <_printf_i+0xbc>
 8028c48:	682b      	ldr	r3, [r5, #0]
 8028c4a:	6820      	ldr	r0, [r4, #0]
 8028c4c:	1d19      	adds	r1, r3, #4
 8028c4e:	6029      	str	r1, [r5, #0]
 8028c50:	0601      	lsls	r1, r0, #24
 8028c52:	d501      	bpl.n	8028c58 <_printf_i+0xec>
 8028c54:	681e      	ldr	r6, [r3, #0]
 8028c56:	e002      	b.n	8028c5e <_printf_i+0xf2>
 8028c58:	0646      	lsls	r6, r0, #25
 8028c5a:	d5fb      	bpl.n	8028c54 <_printf_i+0xe8>
 8028c5c:	881e      	ldrh	r6, [r3, #0]
 8028c5e:	4854      	ldr	r0, [pc, #336]	; (8028db0 <_printf_i+0x244>)
 8028c60:	2f6f      	cmp	r7, #111	; 0x6f
 8028c62:	bf0c      	ite	eq
 8028c64:	2308      	moveq	r3, #8
 8028c66:	230a      	movne	r3, #10
 8028c68:	2100      	movs	r1, #0
 8028c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8028c6e:	6865      	ldr	r5, [r4, #4]
 8028c70:	60a5      	str	r5, [r4, #8]
 8028c72:	2d00      	cmp	r5, #0
 8028c74:	bfa2      	ittt	ge
 8028c76:	6821      	ldrge	r1, [r4, #0]
 8028c78:	f021 0104 	bicge.w	r1, r1, #4
 8028c7c:	6021      	strge	r1, [r4, #0]
 8028c7e:	b90e      	cbnz	r6, 8028c84 <_printf_i+0x118>
 8028c80:	2d00      	cmp	r5, #0
 8028c82:	d04d      	beq.n	8028d20 <_printf_i+0x1b4>
 8028c84:	4615      	mov	r5, r2
 8028c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8028c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8028c8e:	5dc7      	ldrb	r7, [r0, r7]
 8028c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8028c94:	4637      	mov	r7, r6
 8028c96:	42bb      	cmp	r3, r7
 8028c98:	460e      	mov	r6, r1
 8028c9a:	d9f4      	bls.n	8028c86 <_printf_i+0x11a>
 8028c9c:	2b08      	cmp	r3, #8
 8028c9e:	d10b      	bne.n	8028cb8 <_printf_i+0x14c>
 8028ca0:	6823      	ldr	r3, [r4, #0]
 8028ca2:	07de      	lsls	r6, r3, #31
 8028ca4:	d508      	bpl.n	8028cb8 <_printf_i+0x14c>
 8028ca6:	6923      	ldr	r3, [r4, #16]
 8028ca8:	6861      	ldr	r1, [r4, #4]
 8028caa:	4299      	cmp	r1, r3
 8028cac:	bfde      	ittt	le
 8028cae:	2330      	movle	r3, #48	; 0x30
 8028cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8028cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8028cb8:	1b52      	subs	r2, r2, r5
 8028cba:	6122      	str	r2, [r4, #16]
 8028cbc:	f8cd a000 	str.w	sl, [sp]
 8028cc0:	464b      	mov	r3, r9
 8028cc2:	aa03      	add	r2, sp, #12
 8028cc4:	4621      	mov	r1, r4
 8028cc6:	4640      	mov	r0, r8
 8028cc8:	f7ff fee2 	bl	8028a90 <_printf_common>
 8028ccc:	3001      	adds	r0, #1
 8028cce:	d14c      	bne.n	8028d6a <_printf_i+0x1fe>
 8028cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8028cd4:	b004      	add	sp, #16
 8028cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028cda:	4835      	ldr	r0, [pc, #212]	; (8028db0 <_printf_i+0x244>)
 8028cdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8028ce0:	6829      	ldr	r1, [r5, #0]
 8028ce2:	6823      	ldr	r3, [r4, #0]
 8028ce4:	f851 6b04 	ldr.w	r6, [r1], #4
 8028ce8:	6029      	str	r1, [r5, #0]
 8028cea:	061d      	lsls	r5, r3, #24
 8028cec:	d514      	bpl.n	8028d18 <_printf_i+0x1ac>
 8028cee:	07df      	lsls	r7, r3, #31
 8028cf0:	bf44      	itt	mi
 8028cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8028cf6:	6023      	strmi	r3, [r4, #0]
 8028cf8:	b91e      	cbnz	r6, 8028d02 <_printf_i+0x196>
 8028cfa:	6823      	ldr	r3, [r4, #0]
 8028cfc:	f023 0320 	bic.w	r3, r3, #32
 8028d00:	6023      	str	r3, [r4, #0]
 8028d02:	2310      	movs	r3, #16
 8028d04:	e7b0      	b.n	8028c68 <_printf_i+0xfc>
 8028d06:	6823      	ldr	r3, [r4, #0]
 8028d08:	f043 0320 	orr.w	r3, r3, #32
 8028d0c:	6023      	str	r3, [r4, #0]
 8028d0e:	2378      	movs	r3, #120	; 0x78
 8028d10:	4828      	ldr	r0, [pc, #160]	; (8028db4 <_printf_i+0x248>)
 8028d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8028d16:	e7e3      	b.n	8028ce0 <_printf_i+0x174>
 8028d18:	0659      	lsls	r1, r3, #25
 8028d1a:	bf48      	it	mi
 8028d1c:	b2b6      	uxthmi	r6, r6
 8028d1e:	e7e6      	b.n	8028cee <_printf_i+0x182>
 8028d20:	4615      	mov	r5, r2
 8028d22:	e7bb      	b.n	8028c9c <_printf_i+0x130>
 8028d24:	682b      	ldr	r3, [r5, #0]
 8028d26:	6826      	ldr	r6, [r4, #0]
 8028d28:	6961      	ldr	r1, [r4, #20]
 8028d2a:	1d18      	adds	r0, r3, #4
 8028d2c:	6028      	str	r0, [r5, #0]
 8028d2e:	0635      	lsls	r5, r6, #24
 8028d30:	681b      	ldr	r3, [r3, #0]
 8028d32:	d501      	bpl.n	8028d38 <_printf_i+0x1cc>
 8028d34:	6019      	str	r1, [r3, #0]
 8028d36:	e002      	b.n	8028d3e <_printf_i+0x1d2>
 8028d38:	0670      	lsls	r0, r6, #25
 8028d3a:	d5fb      	bpl.n	8028d34 <_printf_i+0x1c8>
 8028d3c:	8019      	strh	r1, [r3, #0]
 8028d3e:	2300      	movs	r3, #0
 8028d40:	6123      	str	r3, [r4, #16]
 8028d42:	4615      	mov	r5, r2
 8028d44:	e7ba      	b.n	8028cbc <_printf_i+0x150>
 8028d46:	682b      	ldr	r3, [r5, #0]
 8028d48:	1d1a      	adds	r2, r3, #4
 8028d4a:	602a      	str	r2, [r5, #0]
 8028d4c:	681d      	ldr	r5, [r3, #0]
 8028d4e:	6862      	ldr	r2, [r4, #4]
 8028d50:	2100      	movs	r1, #0
 8028d52:	4628      	mov	r0, r5
 8028d54:	f7d7 fa5c 	bl	8000210 <memchr>
 8028d58:	b108      	cbz	r0, 8028d5e <_printf_i+0x1f2>
 8028d5a:	1b40      	subs	r0, r0, r5
 8028d5c:	6060      	str	r0, [r4, #4]
 8028d5e:	6863      	ldr	r3, [r4, #4]
 8028d60:	6123      	str	r3, [r4, #16]
 8028d62:	2300      	movs	r3, #0
 8028d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028d68:	e7a8      	b.n	8028cbc <_printf_i+0x150>
 8028d6a:	6923      	ldr	r3, [r4, #16]
 8028d6c:	462a      	mov	r2, r5
 8028d6e:	4649      	mov	r1, r9
 8028d70:	4640      	mov	r0, r8
 8028d72:	47d0      	blx	sl
 8028d74:	3001      	adds	r0, #1
 8028d76:	d0ab      	beq.n	8028cd0 <_printf_i+0x164>
 8028d78:	6823      	ldr	r3, [r4, #0]
 8028d7a:	079b      	lsls	r3, r3, #30
 8028d7c:	d413      	bmi.n	8028da6 <_printf_i+0x23a>
 8028d7e:	68e0      	ldr	r0, [r4, #12]
 8028d80:	9b03      	ldr	r3, [sp, #12]
 8028d82:	4298      	cmp	r0, r3
 8028d84:	bfb8      	it	lt
 8028d86:	4618      	movlt	r0, r3
 8028d88:	e7a4      	b.n	8028cd4 <_printf_i+0x168>
 8028d8a:	2301      	movs	r3, #1
 8028d8c:	4632      	mov	r2, r6
 8028d8e:	4649      	mov	r1, r9
 8028d90:	4640      	mov	r0, r8
 8028d92:	47d0      	blx	sl
 8028d94:	3001      	adds	r0, #1
 8028d96:	d09b      	beq.n	8028cd0 <_printf_i+0x164>
 8028d98:	3501      	adds	r5, #1
 8028d9a:	68e3      	ldr	r3, [r4, #12]
 8028d9c:	9903      	ldr	r1, [sp, #12]
 8028d9e:	1a5b      	subs	r3, r3, r1
 8028da0:	42ab      	cmp	r3, r5
 8028da2:	dcf2      	bgt.n	8028d8a <_printf_i+0x21e>
 8028da4:	e7eb      	b.n	8028d7e <_printf_i+0x212>
 8028da6:	2500      	movs	r5, #0
 8028da8:	f104 0619 	add.w	r6, r4, #25
 8028dac:	e7f5      	b.n	8028d9a <_printf_i+0x22e>
 8028dae:	bf00      	nop
 8028db0:	0802e361 	.word	0x0802e361
 8028db4:	0802e372 	.word	0x0802e372

08028db8 <_sbrk_r>:
 8028db8:	b538      	push	{r3, r4, r5, lr}
 8028dba:	4d06      	ldr	r5, [pc, #24]	; (8028dd4 <_sbrk_r+0x1c>)
 8028dbc:	2300      	movs	r3, #0
 8028dbe:	4604      	mov	r4, r0
 8028dc0:	4608      	mov	r0, r1
 8028dc2:	602b      	str	r3, [r5, #0]
 8028dc4:	f7d8 fdc0 	bl	8001948 <_sbrk>
 8028dc8:	1c43      	adds	r3, r0, #1
 8028dca:	d102      	bne.n	8028dd2 <_sbrk_r+0x1a>
 8028dcc:	682b      	ldr	r3, [r5, #0]
 8028dce:	b103      	cbz	r3, 8028dd2 <_sbrk_r+0x1a>
 8028dd0:	6023      	str	r3, [r4, #0]
 8028dd2:	bd38      	pop	{r3, r4, r5, pc}
 8028dd4:	20015394 	.word	0x20015394

08028dd8 <_raise_r>:
 8028dd8:	291f      	cmp	r1, #31
 8028dda:	b538      	push	{r3, r4, r5, lr}
 8028ddc:	4604      	mov	r4, r0
 8028dde:	460d      	mov	r5, r1
 8028de0:	d904      	bls.n	8028dec <_raise_r+0x14>
 8028de2:	2316      	movs	r3, #22
 8028de4:	6003      	str	r3, [r0, #0]
 8028de6:	f04f 30ff 	mov.w	r0, #4294967295
 8028dea:	bd38      	pop	{r3, r4, r5, pc}
 8028dec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028dee:	b112      	cbz	r2, 8028df6 <_raise_r+0x1e>
 8028df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028df4:	b94b      	cbnz	r3, 8028e0a <_raise_r+0x32>
 8028df6:	4620      	mov	r0, r4
 8028df8:	f000 f830 	bl	8028e5c <_getpid_r>
 8028dfc:	462a      	mov	r2, r5
 8028dfe:	4601      	mov	r1, r0
 8028e00:	4620      	mov	r0, r4
 8028e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028e06:	f000 b817 	b.w	8028e38 <_kill_r>
 8028e0a:	2b01      	cmp	r3, #1
 8028e0c:	d00a      	beq.n	8028e24 <_raise_r+0x4c>
 8028e0e:	1c59      	adds	r1, r3, #1
 8028e10:	d103      	bne.n	8028e1a <_raise_r+0x42>
 8028e12:	2316      	movs	r3, #22
 8028e14:	6003      	str	r3, [r0, #0]
 8028e16:	2001      	movs	r0, #1
 8028e18:	e7e7      	b.n	8028dea <_raise_r+0x12>
 8028e1a:	2400      	movs	r4, #0
 8028e1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028e20:	4628      	mov	r0, r5
 8028e22:	4798      	blx	r3
 8028e24:	2000      	movs	r0, #0
 8028e26:	e7e0      	b.n	8028dea <_raise_r+0x12>

08028e28 <raise>:
 8028e28:	4b02      	ldr	r3, [pc, #8]	; (8028e34 <raise+0xc>)
 8028e2a:	4601      	mov	r1, r0
 8028e2c:	6818      	ldr	r0, [r3, #0]
 8028e2e:	f7ff bfd3 	b.w	8028dd8 <_raise_r>
 8028e32:	bf00      	nop
 8028e34:	200000bc 	.word	0x200000bc

08028e38 <_kill_r>:
 8028e38:	b538      	push	{r3, r4, r5, lr}
 8028e3a:	4d07      	ldr	r5, [pc, #28]	; (8028e58 <_kill_r+0x20>)
 8028e3c:	2300      	movs	r3, #0
 8028e3e:	4604      	mov	r4, r0
 8028e40:	4608      	mov	r0, r1
 8028e42:	4611      	mov	r1, r2
 8028e44:	602b      	str	r3, [r5, #0]
 8028e46:	f7d8 fd49 	bl	80018dc <_kill>
 8028e4a:	1c43      	adds	r3, r0, #1
 8028e4c:	d102      	bne.n	8028e54 <_kill_r+0x1c>
 8028e4e:	682b      	ldr	r3, [r5, #0]
 8028e50:	b103      	cbz	r3, 8028e54 <_kill_r+0x1c>
 8028e52:	6023      	str	r3, [r4, #0]
 8028e54:	bd38      	pop	{r3, r4, r5, pc}
 8028e56:	bf00      	nop
 8028e58:	20015394 	.word	0x20015394

08028e5c <_getpid_r>:
 8028e5c:	f7d8 bd3c 	b.w	80018d8 <_getpid>

08028e60 <siprintf>:
 8028e60:	b40e      	push	{r1, r2, r3}
 8028e62:	b500      	push	{lr}
 8028e64:	b09c      	sub	sp, #112	; 0x70
 8028e66:	ab1d      	add	r3, sp, #116	; 0x74
 8028e68:	9002      	str	r0, [sp, #8]
 8028e6a:	9006      	str	r0, [sp, #24]
 8028e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8028e70:	4809      	ldr	r0, [pc, #36]	; (8028e98 <siprintf+0x38>)
 8028e72:	9107      	str	r1, [sp, #28]
 8028e74:	9104      	str	r1, [sp, #16]
 8028e76:	4909      	ldr	r1, [pc, #36]	; (8028e9c <siprintf+0x3c>)
 8028e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8028e7c:	9105      	str	r1, [sp, #20]
 8028e7e:	6800      	ldr	r0, [r0, #0]
 8028e80:	9301      	str	r3, [sp, #4]
 8028e82:	a902      	add	r1, sp, #8
 8028e84:	f000 fc0e 	bl	80296a4 <_svfiprintf_r>
 8028e88:	9b02      	ldr	r3, [sp, #8]
 8028e8a:	2200      	movs	r2, #0
 8028e8c:	701a      	strb	r2, [r3, #0]
 8028e8e:	b01c      	add	sp, #112	; 0x70
 8028e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8028e94:	b003      	add	sp, #12
 8028e96:	4770      	bx	lr
 8028e98:	200000bc 	.word	0x200000bc
 8028e9c:	ffff0208 	.word	0xffff0208

08028ea0 <strncmp>:
 8028ea0:	b510      	push	{r4, lr}
 8028ea2:	b17a      	cbz	r2, 8028ec4 <strncmp+0x24>
 8028ea4:	4603      	mov	r3, r0
 8028ea6:	3901      	subs	r1, #1
 8028ea8:	1884      	adds	r4, r0, r2
 8028eaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8028eae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8028eb2:	4290      	cmp	r0, r2
 8028eb4:	d101      	bne.n	8028eba <strncmp+0x1a>
 8028eb6:	42a3      	cmp	r3, r4
 8028eb8:	d101      	bne.n	8028ebe <strncmp+0x1e>
 8028eba:	1a80      	subs	r0, r0, r2
 8028ebc:	bd10      	pop	{r4, pc}
 8028ebe:	2800      	cmp	r0, #0
 8028ec0:	d1f3      	bne.n	8028eaa <strncmp+0xa>
 8028ec2:	e7fa      	b.n	8028eba <strncmp+0x1a>
 8028ec4:	4610      	mov	r0, r2
 8028ec6:	e7f9      	b.n	8028ebc <strncmp+0x1c>

08028ec8 <__swbuf_r>:
 8028ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028eca:	460e      	mov	r6, r1
 8028ecc:	4614      	mov	r4, r2
 8028ece:	4605      	mov	r5, r0
 8028ed0:	b118      	cbz	r0, 8028eda <__swbuf_r+0x12>
 8028ed2:	6983      	ldr	r3, [r0, #24]
 8028ed4:	b90b      	cbnz	r3, 8028eda <__swbuf_r+0x12>
 8028ed6:	f000 fa33 	bl	8029340 <__sinit>
 8028eda:	4b21      	ldr	r3, [pc, #132]	; (8028f60 <__swbuf_r+0x98>)
 8028edc:	429c      	cmp	r4, r3
 8028ede:	d12b      	bne.n	8028f38 <__swbuf_r+0x70>
 8028ee0:	686c      	ldr	r4, [r5, #4]
 8028ee2:	69a3      	ldr	r3, [r4, #24]
 8028ee4:	60a3      	str	r3, [r4, #8]
 8028ee6:	89a3      	ldrh	r3, [r4, #12]
 8028ee8:	071a      	lsls	r2, r3, #28
 8028eea:	d52f      	bpl.n	8028f4c <__swbuf_r+0x84>
 8028eec:	6923      	ldr	r3, [r4, #16]
 8028eee:	b36b      	cbz	r3, 8028f4c <__swbuf_r+0x84>
 8028ef0:	6923      	ldr	r3, [r4, #16]
 8028ef2:	6820      	ldr	r0, [r4, #0]
 8028ef4:	1ac0      	subs	r0, r0, r3
 8028ef6:	6963      	ldr	r3, [r4, #20]
 8028ef8:	b2f6      	uxtb	r6, r6
 8028efa:	4283      	cmp	r3, r0
 8028efc:	4637      	mov	r7, r6
 8028efe:	dc04      	bgt.n	8028f0a <__swbuf_r+0x42>
 8028f00:	4621      	mov	r1, r4
 8028f02:	4628      	mov	r0, r5
 8028f04:	f000 f988 	bl	8029218 <_fflush_r>
 8028f08:	bb30      	cbnz	r0, 8028f58 <__swbuf_r+0x90>
 8028f0a:	68a3      	ldr	r3, [r4, #8]
 8028f0c:	3b01      	subs	r3, #1
 8028f0e:	60a3      	str	r3, [r4, #8]
 8028f10:	6823      	ldr	r3, [r4, #0]
 8028f12:	1c5a      	adds	r2, r3, #1
 8028f14:	6022      	str	r2, [r4, #0]
 8028f16:	701e      	strb	r6, [r3, #0]
 8028f18:	6963      	ldr	r3, [r4, #20]
 8028f1a:	3001      	adds	r0, #1
 8028f1c:	4283      	cmp	r3, r0
 8028f1e:	d004      	beq.n	8028f2a <__swbuf_r+0x62>
 8028f20:	89a3      	ldrh	r3, [r4, #12]
 8028f22:	07db      	lsls	r3, r3, #31
 8028f24:	d506      	bpl.n	8028f34 <__swbuf_r+0x6c>
 8028f26:	2e0a      	cmp	r6, #10
 8028f28:	d104      	bne.n	8028f34 <__swbuf_r+0x6c>
 8028f2a:	4621      	mov	r1, r4
 8028f2c:	4628      	mov	r0, r5
 8028f2e:	f000 f973 	bl	8029218 <_fflush_r>
 8028f32:	b988      	cbnz	r0, 8028f58 <__swbuf_r+0x90>
 8028f34:	4638      	mov	r0, r7
 8028f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028f38:	4b0a      	ldr	r3, [pc, #40]	; (8028f64 <__swbuf_r+0x9c>)
 8028f3a:	429c      	cmp	r4, r3
 8028f3c:	d101      	bne.n	8028f42 <__swbuf_r+0x7a>
 8028f3e:	68ac      	ldr	r4, [r5, #8]
 8028f40:	e7cf      	b.n	8028ee2 <__swbuf_r+0x1a>
 8028f42:	4b09      	ldr	r3, [pc, #36]	; (8028f68 <__swbuf_r+0xa0>)
 8028f44:	429c      	cmp	r4, r3
 8028f46:	bf08      	it	eq
 8028f48:	68ec      	ldreq	r4, [r5, #12]
 8028f4a:	e7ca      	b.n	8028ee2 <__swbuf_r+0x1a>
 8028f4c:	4621      	mov	r1, r4
 8028f4e:	4628      	mov	r0, r5
 8028f50:	f000 f80c 	bl	8028f6c <__swsetup_r>
 8028f54:	2800      	cmp	r0, #0
 8028f56:	d0cb      	beq.n	8028ef0 <__swbuf_r+0x28>
 8028f58:	f04f 37ff 	mov.w	r7, #4294967295
 8028f5c:	e7ea      	b.n	8028f34 <__swbuf_r+0x6c>
 8028f5e:	bf00      	nop
 8028f60:	0802e3a8 	.word	0x0802e3a8
 8028f64:	0802e3c8 	.word	0x0802e3c8
 8028f68:	0802e388 	.word	0x0802e388

08028f6c <__swsetup_r>:
 8028f6c:	4b32      	ldr	r3, [pc, #200]	; (8029038 <__swsetup_r+0xcc>)
 8028f6e:	b570      	push	{r4, r5, r6, lr}
 8028f70:	681d      	ldr	r5, [r3, #0]
 8028f72:	4606      	mov	r6, r0
 8028f74:	460c      	mov	r4, r1
 8028f76:	b125      	cbz	r5, 8028f82 <__swsetup_r+0x16>
 8028f78:	69ab      	ldr	r3, [r5, #24]
 8028f7a:	b913      	cbnz	r3, 8028f82 <__swsetup_r+0x16>
 8028f7c:	4628      	mov	r0, r5
 8028f7e:	f000 f9df 	bl	8029340 <__sinit>
 8028f82:	4b2e      	ldr	r3, [pc, #184]	; (802903c <__swsetup_r+0xd0>)
 8028f84:	429c      	cmp	r4, r3
 8028f86:	d10f      	bne.n	8028fa8 <__swsetup_r+0x3c>
 8028f88:	686c      	ldr	r4, [r5, #4]
 8028f8a:	89a3      	ldrh	r3, [r4, #12]
 8028f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028f90:	0719      	lsls	r1, r3, #28
 8028f92:	d42c      	bmi.n	8028fee <__swsetup_r+0x82>
 8028f94:	06dd      	lsls	r5, r3, #27
 8028f96:	d411      	bmi.n	8028fbc <__swsetup_r+0x50>
 8028f98:	2309      	movs	r3, #9
 8028f9a:	6033      	str	r3, [r6, #0]
 8028f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028fa0:	81a3      	strh	r3, [r4, #12]
 8028fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8028fa6:	e03e      	b.n	8029026 <__swsetup_r+0xba>
 8028fa8:	4b25      	ldr	r3, [pc, #148]	; (8029040 <__swsetup_r+0xd4>)
 8028faa:	429c      	cmp	r4, r3
 8028fac:	d101      	bne.n	8028fb2 <__swsetup_r+0x46>
 8028fae:	68ac      	ldr	r4, [r5, #8]
 8028fb0:	e7eb      	b.n	8028f8a <__swsetup_r+0x1e>
 8028fb2:	4b24      	ldr	r3, [pc, #144]	; (8029044 <__swsetup_r+0xd8>)
 8028fb4:	429c      	cmp	r4, r3
 8028fb6:	bf08      	it	eq
 8028fb8:	68ec      	ldreq	r4, [r5, #12]
 8028fba:	e7e6      	b.n	8028f8a <__swsetup_r+0x1e>
 8028fbc:	0758      	lsls	r0, r3, #29
 8028fbe:	d512      	bpl.n	8028fe6 <__swsetup_r+0x7a>
 8028fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028fc2:	b141      	cbz	r1, 8028fd6 <__swsetup_r+0x6a>
 8028fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028fc8:	4299      	cmp	r1, r3
 8028fca:	d002      	beq.n	8028fd2 <__swsetup_r+0x66>
 8028fcc:	4630      	mov	r0, r6
 8028fce:	f7ff fb25 	bl	802861c <_free_r>
 8028fd2:	2300      	movs	r3, #0
 8028fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8028fd6:	89a3      	ldrh	r3, [r4, #12]
 8028fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028fdc:	81a3      	strh	r3, [r4, #12]
 8028fde:	2300      	movs	r3, #0
 8028fe0:	6063      	str	r3, [r4, #4]
 8028fe2:	6923      	ldr	r3, [r4, #16]
 8028fe4:	6023      	str	r3, [r4, #0]
 8028fe6:	89a3      	ldrh	r3, [r4, #12]
 8028fe8:	f043 0308 	orr.w	r3, r3, #8
 8028fec:	81a3      	strh	r3, [r4, #12]
 8028fee:	6923      	ldr	r3, [r4, #16]
 8028ff0:	b94b      	cbnz	r3, 8029006 <__swsetup_r+0x9a>
 8028ff2:	89a3      	ldrh	r3, [r4, #12]
 8028ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8028ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028ffc:	d003      	beq.n	8029006 <__swsetup_r+0x9a>
 8028ffe:	4621      	mov	r1, r4
 8029000:	4630      	mov	r0, r6
 8029002:	f000 fa5f 	bl	80294c4 <__smakebuf_r>
 8029006:	89a0      	ldrh	r0, [r4, #12]
 8029008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802900c:	f010 0301 	ands.w	r3, r0, #1
 8029010:	d00a      	beq.n	8029028 <__swsetup_r+0xbc>
 8029012:	2300      	movs	r3, #0
 8029014:	60a3      	str	r3, [r4, #8]
 8029016:	6963      	ldr	r3, [r4, #20]
 8029018:	425b      	negs	r3, r3
 802901a:	61a3      	str	r3, [r4, #24]
 802901c:	6923      	ldr	r3, [r4, #16]
 802901e:	b943      	cbnz	r3, 8029032 <__swsetup_r+0xc6>
 8029020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8029024:	d1ba      	bne.n	8028f9c <__swsetup_r+0x30>
 8029026:	bd70      	pop	{r4, r5, r6, pc}
 8029028:	0781      	lsls	r1, r0, #30
 802902a:	bf58      	it	pl
 802902c:	6963      	ldrpl	r3, [r4, #20]
 802902e:	60a3      	str	r3, [r4, #8]
 8029030:	e7f4      	b.n	802901c <__swsetup_r+0xb0>
 8029032:	2000      	movs	r0, #0
 8029034:	e7f7      	b.n	8029026 <__swsetup_r+0xba>
 8029036:	bf00      	nop
 8029038:	200000bc 	.word	0x200000bc
 802903c:	0802e3a8 	.word	0x0802e3a8
 8029040:	0802e3c8 	.word	0x0802e3c8
 8029044:	0802e388 	.word	0x0802e388

08029048 <__register_exitproc>:
 8029048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802904c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8029108 <__register_exitproc+0xc0>
 8029050:	4606      	mov	r6, r0
 8029052:	f8d8 0000 	ldr.w	r0, [r8]
 8029056:	461f      	mov	r7, r3
 8029058:	460d      	mov	r5, r1
 802905a:	4691      	mov	r9, r2
 802905c:	f7ff fab5 	bl	80285ca <__retarget_lock_acquire_recursive>
 8029060:	4b25      	ldr	r3, [pc, #148]	; (80290f8 <__register_exitproc+0xb0>)
 8029062:	681c      	ldr	r4, [r3, #0]
 8029064:	b934      	cbnz	r4, 8029074 <__register_exitproc+0x2c>
 8029066:	4c25      	ldr	r4, [pc, #148]	; (80290fc <__register_exitproc+0xb4>)
 8029068:	601c      	str	r4, [r3, #0]
 802906a:	4b25      	ldr	r3, [pc, #148]	; (8029100 <__register_exitproc+0xb8>)
 802906c:	b113      	cbz	r3, 8029074 <__register_exitproc+0x2c>
 802906e:	681b      	ldr	r3, [r3, #0]
 8029070:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8029074:	6863      	ldr	r3, [r4, #4]
 8029076:	2b1f      	cmp	r3, #31
 8029078:	dd07      	ble.n	802908a <__register_exitproc+0x42>
 802907a:	f8d8 0000 	ldr.w	r0, [r8]
 802907e:	f7ff faa6 	bl	80285ce <__retarget_lock_release_recursive>
 8029082:	f04f 30ff 	mov.w	r0, #4294967295
 8029086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802908a:	b34e      	cbz	r6, 80290e0 <__register_exitproc+0x98>
 802908c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8029090:	b988      	cbnz	r0, 80290b6 <__register_exitproc+0x6e>
 8029092:	4b1c      	ldr	r3, [pc, #112]	; (8029104 <__register_exitproc+0xbc>)
 8029094:	b923      	cbnz	r3, 80290a0 <__register_exitproc+0x58>
 8029096:	f8d8 0000 	ldr.w	r0, [r8]
 802909a:	f7ff fa97 	bl	80285cc <__retarget_lock_release>
 802909e:	e7f0      	b.n	8029082 <__register_exitproc+0x3a>
 80290a0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80290a4:	f7ff fa94 	bl	80285d0 <malloc>
 80290a8:	2800      	cmp	r0, #0
 80290aa:	d0f4      	beq.n	8029096 <__register_exitproc+0x4e>
 80290ac:	2300      	movs	r3, #0
 80290ae:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80290b2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80290b6:	6863      	ldr	r3, [r4, #4]
 80290b8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80290bc:	2201      	movs	r2, #1
 80290be:	409a      	lsls	r2, r3
 80290c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80290c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80290c8:	4313      	orrs	r3, r2
 80290ca:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80290ce:	2e02      	cmp	r6, #2
 80290d0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80290d4:	bf02      	ittt	eq
 80290d6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80290da:	4313      	orreq	r3, r2
 80290dc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80290e0:	6863      	ldr	r3, [r4, #4]
 80290e2:	f8d8 0000 	ldr.w	r0, [r8]
 80290e6:	1c5a      	adds	r2, r3, #1
 80290e8:	3302      	adds	r3, #2
 80290ea:	6062      	str	r2, [r4, #4]
 80290ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80290f0:	f7ff fa6d 	bl	80285ce <__retarget_lock_release_recursive>
 80290f4:	2000      	movs	r0, #0
 80290f6:	e7c6      	b.n	8029086 <__register_exitproc+0x3e>
 80290f8:	20015390 	.word	0x20015390
 80290fc:	20015304 	.word	0x20015304
 8029100:	0802e384 	.word	0x0802e384
 8029104:	080285d1 	.word	0x080285d1
 8029108:	20000120 	.word	0x20000120

0802910c <__sflush_r>:
 802910c:	898a      	ldrh	r2, [r1, #12]
 802910e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029112:	4605      	mov	r5, r0
 8029114:	0710      	lsls	r0, r2, #28
 8029116:	460c      	mov	r4, r1
 8029118:	d458      	bmi.n	80291cc <__sflush_r+0xc0>
 802911a:	684b      	ldr	r3, [r1, #4]
 802911c:	2b00      	cmp	r3, #0
 802911e:	dc05      	bgt.n	802912c <__sflush_r+0x20>
 8029120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8029122:	2b00      	cmp	r3, #0
 8029124:	dc02      	bgt.n	802912c <__sflush_r+0x20>
 8029126:	2000      	movs	r0, #0
 8029128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802912c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802912e:	2e00      	cmp	r6, #0
 8029130:	d0f9      	beq.n	8029126 <__sflush_r+0x1a>
 8029132:	2300      	movs	r3, #0
 8029134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8029138:	682f      	ldr	r7, [r5, #0]
 802913a:	602b      	str	r3, [r5, #0]
 802913c:	d032      	beq.n	80291a4 <__sflush_r+0x98>
 802913e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8029140:	89a3      	ldrh	r3, [r4, #12]
 8029142:	075a      	lsls	r2, r3, #29
 8029144:	d505      	bpl.n	8029152 <__sflush_r+0x46>
 8029146:	6863      	ldr	r3, [r4, #4]
 8029148:	1ac0      	subs	r0, r0, r3
 802914a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802914c:	b10b      	cbz	r3, 8029152 <__sflush_r+0x46>
 802914e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8029150:	1ac0      	subs	r0, r0, r3
 8029152:	2300      	movs	r3, #0
 8029154:	4602      	mov	r2, r0
 8029156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8029158:	6a21      	ldr	r1, [r4, #32]
 802915a:	4628      	mov	r0, r5
 802915c:	47b0      	blx	r6
 802915e:	1c43      	adds	r3, r0, #1
 8029160:	89a3      	ldrh	r3, [r4, #12]
 8029162:	d106      	bne.n	8029172 <__sflush_r+0x66>
 8029164:	6829      	ldr	r1, [r5, #0]
 8029166:	291d      	cmp	r1, #29
 8029168:	d82c      	bhi.n	80291c4 <__sflush_r+0xb8>
 802916a:	4a2a      	ldr	r2, [pc, #168]	; (8029214 <__sflush_r+0x108>)
 802916c:	40ca      	lsrs	r2, r1
 802916e:	07d6      	lsls	r6, r2, #31
 8029170:	d528      	bpl.n	80291c4 <__sflush_r+0xb8>
 8029172:	2200      	movs	r2, #0
 8029174:	6062      	str	r2, [r4, #4]
 8029176:	04d9      	lsls	r1, r3, #19
 8029178:	6922      	ldr	r2, [r4, #16]
 802917a:	6022      	str	r2, [r4, #0]
 802917c:	d504      	bpl.n	8029188 <__sflush_r+0x7c>
 802917e:	1c42      	adds	r2, r0, #1
 8029180:	d101      	bne.n	8029186 <__sflush_r+0x7a>
 8029182:	682b      	ldr	r3, [r5, #0]
 8029184:	b903      	cbnz	r3, 8029188 <__sflush_r+0x7c>
 8029186:	6560      	str	r0, [r4, #84]	; 0x54
 8029188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802918a:	602f      	str	r7, [r5, #0]
 802918c:	2900      	cmp	r1, #0
 802918e:	d0ca      	beq.n	8029126 <__sflush_r+0x1a>
 8029190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8029194:	4299      	cmp	r1, r3
 8029196:	d002      	beq.n	802919e <__sflush_r+0x92>
 8029198:	4628      	mov	r0, r5
 802919a:	f7ff fa3f 	bl	802861c <_free_r>
 802919e:	2000      	movs	r0, #0
 80291a0:	6360      	str	r0, [r4, #52]	; 0x34
 80291a2:	e7c1      	b.n	8029128 <__sflush_r+0x1c>
 80291a4:	6a21      	ldr	r1, [r4, #32]
 80291a6:	2301      	movs	r3, #1
 80291a8:	4628      	mov	r0, r5
 80291aa:	47b0      	blx	r6
 80291ac:	1c41      	adds	r1, r0, #1
 80291ae:	d1c7      	bne.n	8029140 <__sflush_r+0x34>
 80291b0:	682b      	ldr	r3, [r5, #0]
 80291b2:	2b00      	cmp	r3, #0
 80291b4:	d0c4      	beq.n	8029140 <__sflush_r+0x34>
 80291b6:	2b1d      	cmp	r3, #29
 80291b8:	d001      	beq.n	80291be <__sflush_r+0xb2>
 80291ba:	2b16      	cmp	r3, #22
 80291bc:	d101      	bne.n	80291c2 <__sflush_r+0xb6>
 80291be:	602f      	str	r7, [r5, #0]
 80291c0:	e7b1      	b.n	8029126 <__sflush_r+0x1a>
 80291c2:	89a3      	ldrh	r3, [r4, #12]
 80291c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80291c8:	81a3      	strh	r3, [r4, #12]
 80291ca:	e7ad      	b.n	8029128 <__sflush_r+0x1c>
 80291cc:	690f      	ldr	r7, [r1, #16]
 80291ce:	2f00      	cmp	r7, #0
 80291d0:	d0a9      	beq.n	8029126 <__sflush_r+0x1a>
 80291d2:	0793      	lsls	r3, r2, #30
 80291d4:	680e      	ldr	r6, [r1, #0]
 80291d6:	bf08      	it	eq
 80291d8:	694b      	ldreq	r3, [r1, #20]
 80291da:	600f      	str	r7, [r1, #0]
 80291dc:	bf18      	it	ne
 80291de:	2300      	movne	r3, #0
 80291e0:	eba6 0807 	sub.w	r8, r6, r7
 80291e4:	608b      	str	r3, [r1, #8]
 80291e6:	f1b8 0f00 	cmp.w	r8, #0
 80291ea:	dd9c      	ble.n	8029126 <__sflush_r+0x1a>
 80291ec:	6a21      	ldr	r1, [r4, #32]
 80291ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80291f0:	4643      	mov	r3, r8
 80291f2:	463a      	mov	r2, r7
 80291f4:	4628      	mov	r0, r5
 80291f6:	47b0      	blx	r6
 80291f8:	2800      	cmp	r0, #0
 80291fa:	dc06      	bgt.n	802920a <__sflush_r+0xfe>
 80291fc:	89a3      	ldrh	r3, [r4, #12]
 80291fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029202:	81a3      	strh	r3, [r4, #12]
 8029204:	f04f 30ff 	mov.w	r0, #4294967295
 8029208:	e78e      	b.n	8029128 <__sflush_r+0x1c>
 802920a:	4407      	add	r7, r0
 802920c:	eba8 0800 	sub.w	r8, r8, r0
 8029210:	e7e9      	b.n	80291e6 <__sflush_r+0xda>
 8029212:	bf00      	nop
 8029214:	20400001 	.word	0x20400001

08029218 <_fflush_r>:
 8029218:	b538      	push	{r3, r4, r5, lr}
 802921a:	690b      	ldr	r3, [r1, #16]
 802921c:	4605      	mov	r5, r0
 802921e:	460c      	mov	r4, r1
 8029220:	b913      	cbnz	r3, 8029228 <_fflush_r+0x10>
 8029222:	2500      	movs	r5, #0
 8029224:	4628      	mov	r0, r5
 8029226:	bd38      	pop	{r3, r4, r5, pc}
 8029228:	b118      	cbz	r0, 8029232 <_fflush_r+0x1a>
 802922a:	6983      	ldr	r3, [r0, #24]
 802922c:	b90b      	cbnz	r3, 8029232 <_fflush_r+0x1a>
 802922e:	f000 f887 	bl	8029340 <__sinit>
 8029232:	4b14      	ldr	r3, [pc, #80]	; (8029284 <_fflush_r+0x6c>)
 8029234:	429c      	cmp	r4, r3
 8029236:	d11b      	bne.n	8029270 <_fflush_r+0x58>
 8029238:	686c      	ldr	r4, [r5, #4]
 802923a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802923e:	2b00      	cmp	r3, #0
 8029240:	d0ef      	beq.n	8029222 <_fflush_r+0xa>
 8029242:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8029244:	07d0      	lsls	r0, r2, #31
 8029246:	d404      	bmi.n	8029252 <_fflush_r+0x3a>
 8029248:	0599      	lsls	r1, r3, #22
 802924a:	d402      	bmi.n	8029252 <_fflush_r+0x3a>
 802924c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802924e:	f7ff f9bc 	bl	80285ca <__retarget_lock_acquire_recursive>
 8029252:	4628      	mov	r0, r5
 8029254:	4621      	mov	r1, r4
 8029256:	f7ff ff59 	bl	802910c <__sflush_r>
 802925a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802925c:	07da      	lsls	r2, r3, #31
 802925e:	4605      	mov	r5, r0
 8029260:	d4e0      	bmi.n	8029224 <_fflush_r+0xc>
 8029262:	89a3      	ldrh	r3, [r4, #12]
 8029264:	059b      	lsls	r3, r3, #22
 8029266:	d4dd      	bmi.n	8029224 <_fflush_r+0xc>
 8029268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802926a:	f7ff f9b0 	bl	80285ce <__retarget_lock_release_recursive>
 802926e:	e7d9      	b.n	8029224 <_fflush_r+0xc>
 8029270:	4b05      	ldr	r3, [pc, #20]	; (8029288 <_fflush_r+0x70>)
 8029272:	429c      	cmp	r4, r3
 8029274:	d101      	bne.n	802927a <_fflush_r+0x62>
 8029276:	68ac      	ldr	r4, [r5, #8]
 8029278:	e7df      	b.n	802923a <_fflush_r+0x22>
 802927a:	4b04      	ldr	r3, [pc, #16]	; (802928c <_fflush_r+0x74>)
 802927c:	429c      	cmp	r4, r3
 802927e:	bf08      	it	eq
 8029280:	68ec      	ldreq	r4, [r5, #12]
 8029282:	e7da      	b.n	802923a <_fflush_r+0x22>
 8029284:	0802e3a8 	.word	0x0802e3a8
 8029288:	0802e3c8 	.word	0x0802e3c8
 802928c:	0802e388 	.word	0x0802e388

08029290 <std>:
 8029290:	2300      	movs	r3, #0
 8029292:	b510      	push	{r4, lr}
 8029294:	4604      	mov	r4, r0
 8029296:	e9c0 3300 	strd	r3, r3, [r0]
 802929a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802929e:	6083      	str	r3, [r0, #8]
 80292a0:	8181      	strh	r1, [r0, #12]
 80292a2:	6643      	str	r3, [r0, #100]	; 0x64
 80292a4:	81c2      	strh	r2, [r0, #14]
 80292a6:	6183      	str	r3, [r0, #24]
 80292a8:	4619      	mov	r1, r3
 80292aa:	2208      	movs	r2, #8
 80292ac:	305c      	adds	r0, #92	; 0x5c
 80292ae:	f7ff f9ad 	bl	802860c <memset>
 80292b2:	4b05      	ldr	r3, [pc, #20]	; (80292c8 <std+0x38>)
 80292b4:	6263      	str	r3, [r4, #36]	; 0x24
 80292b6:	4b05      	ldr	r3, [pc, #20]	; (80292cc <std+0x3c>)
 80292b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80292ba:	4b05      	ldr	r3, [pc, #20]	; (80292d0 <std+0x40>)
 80292bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80292be:	4b05      	ldr	r3, [pc, #20]	; (80292d4 <std+0x44>)
 80292c0:	6224      	str	r4, [r4, #32]
 80292c2:	6323      	str	r3, [r4, #48]	; 0x30
 80292c4:	bd10      	pop	{r4, pc}
 80292c6:	bf00      	nop
 80292c8:	080298a5 	.word	0x080298a5
 80292cc:	080298c7 	.word	0x080298c7
 80292d0:	080298ff 	.word	0x080298ff
 80292d4:	08029923 	.word	0x08029923

080292d8 <_cleanup_r>:
 80292d8:	4901      	ldr	r1, [pc, #4]	; (80292e0 <_cleanup_r+0x8>)
 80292da:	f000 b8af 	b.w	802943c <_fwalk_reent>
 80292de:	bf00      	nop
 80292e0:	08029219 	.word	0x08029219

080292e4 <__sfmoreglue>:
 80292e4:	b570      	push	{r4, r5, r6, lr}
 80292e6:	2268      	movs	r2, #104	; 0x68
 80292e8:	1e4d      	subs	r5, r1, #1
 80292ea:	4355      	muls	r5, r2
 80292ec:	460e      	mov	r6, r1
 80292ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80292f2:	f7ff f9ff 	bl	80286f4 <_malloc_r>
 80292f6:	4604      	mov	r4, r0
 80292f8:	b140      	cbz	r0, 802930c <__sfmoreglue+0x28>
 80292fa:	2100      	movs	r1, #0
 80292fc:	e9c0 1600 	strd	r1, r6, [r0]
 8029300:	300c      	adds	r0, #12
 8029302:	60a0      	str	r0, [r4, #8]
 8029304:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8029308:	f7ff f980 	bl	802860c <memset>
 802930c:	4620      	mov	r0, r4
 802930e:	bd70      	pop	{r4, r5, r6, pc}

08029310 <__sfp_lock_acquire>:
 8029310:	4801      	ldr	r0, [pc, #4]	; (8029318 <__sfp_lock_acquire+0x8>)
 8029312:	f7ff b95a 	b.w	80285ca <__retarget_lock_acquire_recursive>
 8029316:	bf00      	nop
 8029318:	200151f2 	.word	0x200151f2

0802931c <__sfp_lock_release>:
 802931c:	4801      	ldr	r0, [pc, #4]	; (8029324 <__sfp_lock_release+0x8>)
 802931e:	f7ff b956 	b.w	80285ce <__retarget_lock_release_recursive>
 8029322:	bf00      	nop
 8029324:	200151f2 	.word	0x200151f2

08029328 <__sinit_lock_acquire>:
 8029328:	4801      	ldr	r0, [pc, #4]	; (8029330 <__sinit_lock_acquire+0x8>)
 802932a:	f7ff b94e 	b.w	80285ca <__retarget_lock_acquire_recursive>
 802932e:	bf00      	nop
 8029330:	200151f3 	.word	0x200151f3

08029334 <__sinit_lock_release>:
 8029334:	4801      	ldr	r0, [pc, #4]	; (802933c <__sinit_lock_release+0x8>)
 8029336:	f7ff b94a 	b.w	80285ce <__retarget_lock_release_recursive>
 802933a:	bf00      	nop
 802933c:	200151f3 	.word	0x200151f3

08029340 <__sinit>:
 8029340:	b510      	push	{r4, lr}
 8029342:	4604      	mov	r4, r0
 8029344:	f7ff fff0 	bl	8029328 <__sinit_lock_acquire>
 8029348:	69a3      	ldr	r3, [r4, #24]
 802934a:	b11b      	cbz	r3, 8029354 <__sinit+0x14>
 802934c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029350:	f7ff bff0 	b.w	8029334 <__sinit_lock_release>
 8029354:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8029358:	6523      	str	r3, [r4, #80]	; 0x50
 802935a:	4b13      	ldr	r3, [pc, #76]	; (80293a8 <__sinit+0x68>)
 802935c:	4a13      	ldr	r2, [pc, #76]	; (80293ac <__sinit+0x6c>)
 802935e:	681b      	ldr	r3, [r3, #0]
 8029360:	62a2      	str	r2, [r4, #40]	; 0x28
 8029362:	42a3      	cmp	r3, r4
 8029364:	bf04      	itt	eq
 8029366:	2301      	moveq	r3, #1
 8029368:	61a3      	streq	r3, [r4, #24]
 802936a:	4620      	mov	r0, r4
 802936c:	f000 f820 	bl	80293b0 <__sfp>
 8029370:	6060      	str	r0, [r4, #4]
 8029372:	4620      	mov	r0, r4
 8029374:	f000 f81c 	bl	80293b0 <__sfp>
 8029378:	60a0      	str	r0, [r4, #8]
 802937a:	4620      	mov	r0, r4
 802937c:	f000 f818 	bl	80293b0 <__sfp>
 8029380:	2200      	movs	r2, #0
 8029382:	60e0      	str	r0, [r4, #12]
 8029384:	2104      	movs	r1, #4
 8029386:	6860      	ldr	r0, [r4, #4]
 8029388:	f7ff ff82 	bl	8029290 <std>
 802938c:	68a0      	ldr	r0, [r4, #8]
 802938e:	2201      	movs	r2, #1
 8029390:	2109      	movs	r1, #9
 8029392:	f7ff ff7d 	bl	8029290 <std>
 8029396:	68e0      	ldr	r0, [r4, #12]
 8029398:	2202      	movs	r2, #2
 802939a:	2112      	movs	r1, #18
 802939c:	f7ff ff78 	bl	8029290 <std>
 80293a0:	2301      	movs	r3, #1
 80293a2:	61a3      	str	r3, [r4, #24]
 80293a4:	e7d2      	b.n	802934c <__sinit+0xc>
 80293a6:	bf00      	nop
 80293a8:	0802e34c 	.word	0x0802e34c
 80293ac:	080292d9 	.word	0x080292d9

080293b0 <__sfp>:
 80293b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293b2:	4607      	mov	r7, r0
 80293b4:	f7ff ffac 	bl	8029310 <__sfp_lock_acquire>
 80293b8:	4b1e      	ldr	r3, [pc, #120]	; (8029434 <__sfp+0x84>)
 80293ba:	681e      	ldr	r6, [r3, #0]
 80293bc:	69b3      	ldr	r3, [r6, #24]
 80293be:	b913      	cbnz	r3, 80293c6 <__sfp+0x16>
 80293c0:	4630      	mov	r0, r6
 80293c2:	f7ff ffbd 	bl	8029340 <__sinit>
 80293c6:	3648      	adds	r6, #72	; 0x48
 80293c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80293cc:	3b01      	subs	r3, #1
 80293ce:	d503      	bpl.n	80293d8 <__sfp+0x28>
 80293d0:	6833      	ldr	r3, [r6, #0]
 80293d2:	b30b      	cbz	r3, 8029418 <__sfp+0x68>
 80293d4:	6836      	ldr	r6, [r6, #0]
 80293d6:	e7f7      	b.n	80293c8 <__sfp+0x18>
 80293d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80293dc:	b9d5      	cbnz	r5, 8029414 <__sfp+0x64>
 80293de:	4b16      	ldr	r3, [pc, #88]	; (8029438 <__sfp+0x88>)
 80293e0:	60e3      	str	r3, [r4, #12]
 80293e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80293e6:	6665      	str	r5, [r4, #100]	; 0x64
 80293e8:	f7ff f8ee 	bl	80285c8 <__retarget_lock_init_recursive>
 80293ec:	f7ff ff96 	bl	802931c <__sfp_lock_release>
 80293f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80293f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80293f8:	6025      	str	r5, [r4, #0]
 80293fa:	61a5      	str	r5, [r4, #24]
 80293fc:	2208      	movs	r2, #8
 80293fe:	4629      	mov	r1, r5
 8029400:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029404:	f7ff f902 	bl	802860c <memset>
 8029408:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802940c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029410:	4620      	mov	r0, r4
 8029412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029414:	3468      	adds	r4, #104	; 0x68
 8029416:	e7d9      	b.n	80293cc <__sfp+0x1c>
 8029418:	2104      	movs	r1, #4
 802941a:	4638      	mov	r0, r7
 802941c:	f7ff ff62 	bl	80292e4 <__sfmoreglue>
 8029420:	4604      	mov	r4, r0
 8029422:	6030      	str	r0, [r6, #0]
 8029424:	2800      	cmp	r0, #0
 8029426:	d1d5      	bne.n	80293d4 <__sfp+0x24>
 8029428:	f7ff ff78 	bl	802931c <__sfp_lock_release>
 802942c:	230c      	movs	r3, #12
 802942e:	603b      	str	r3, [r7, #0]
 8029430:	e7ee      	b.n	8029410 <__sfp+0x60>
 8029432:	bf00      	nop
 8029434:	0802e34c 	.word	0x0802e34c
 8029438:	ffff0001 	.word	0xffff0001

0802943c <_fwalk_reent>:
 802943c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029440:	4606      	mov	r6, r0
 8029442:	4688      	mov	r8, r1
 8029444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029448:	2700      	movs	r7, #0
 802944a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802944e:	f1b9 0901 	subs.w	r9, r9, #1
 8029452:	d505      	bpl.n	8029460 <_fwalk_reent+0x24>
 8029454:	6824      	ldr	r4, [r4, #0]
 8029456:	2c00      	cmp	r4, #0
 8029458:	d1f7      	bne.n	802944a <_fwalk_reent+0xe>
 802945a:	4638      	mov	r0, r7
 802945c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029460:	89ab      	ldrh	r3, [r5, #12]
 8029462:	2b01      	cmp	r3, #1
 8029464:	d907      	bls.n	8029476 <_fwalk_reent+0x3a>
 8029466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802946a:	3301      	adds	r3, #1
 802946c:	d003      	beq.n	8029476 <_fwalk_reent+0x3a>
 802946e:	4629      	mov	r1, r5
 8029470:	4630      	mov	r0, r6
 8029472:	47c0      	blx	r8
 8029474:	4307      	orrs	r7, r0
 8029476:	3568      	adds	r5, #104	; 0x68
 8029478:	e7e9      	b.n	802944e <_fwalk_reent+0x12>

0802947a <__swhatbuf_r>:
 802947a:	b570      	push	{r4, r5, r6, lr}
 802947c:	460e      	mov	r6, r1
 802947e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029482:	2900      	cmp	r1, #0
 8029484:	b096      	sub	sp, #88	; 0x58
 8029486:	4614      	mov	r4, r2
 8029488:	461d      	mov	r5, r3
 802948a:	da08      	bge.n	802949e <__swhatbuf_r+0x24>
 802948c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8029490:	2200      	movs	r2, #0
 8029492:	602a      	str	r2, [r5, #0]
 8029494:	061a      	lsls	r2, r3, #24
 8029496:	d410      	bmi.n	80294ba <__swhatbuf_r+0x40>
 8029498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802949c:	e00e      	b.n	80294bc <__swhatbuf_r+0x42>
 802949e:	466a      	mov	r2, sp
 80294a0:	f000 fa66 	bl	8029970 <_fstat_r>
 80294a4:	2800      	cmp	r0, #0
 80294a6:	dbf1      	blt.n	802948c <__swhatbuf_r+0x12>
 80294a8:	9a01      	ldr	r2, [sp, #4]
 80294aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80294ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80294b2:	425a      	negs	r2, r3
 80294b4:	415a      	adcs	r2, r3
 80294b6:	602a      	str	r2, [r5, #0]
 80294b8:	e7ee      	b.n	8029498 <__swhatbuf_r+0x1e>
 80294ba:	2340      	movs	r3, #64	; 0x40
 80294bc:	2000      	movs	r0, #0
 80294be:	6023      	str	r3, [r4, #0]
 80294c0:	b016      	add	sp, #88	; 0x58
 80294c2:	bd70      	pop	{r4, r5, r6, pc}

080294c4 <__smakebuf_r>:
 80294c4:	898b      	ldrh	r3, [r1, #12]
 80294c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80294c8:	079d      	lsls	r5, r3, #30
 80294ca:	4606      	mov	r6, r0
 80294cc:	460c      	mov	r4, r1
 80294ce:	d507      	bpl.n	80294e0 <__smakebuf_r+0x1c>
 80294d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80294d4:	6023      	str	r3, [r4, #0]
 80294d6:	6123      	str	r3, [r4, #16]
 80294d8:	2301      	movs	r3, #1
 80294da:	6163      	str	r3, [r4, #20]
 80294dc:	b002      	add	sp, #8
 80294de:	bd70      	pop	{r4, r5, r6, pc}
 80294e0:	ab01      	add	r3, sp, #4
 80294e2:	466a      	mov	r2, sp
 80294e4:	f7ff ffc9 	bl	802947a <__swhatbuf_r>
 80294e8:	9900      	ldr	r1, [sp, #0]
 80294ea:	4605      	mov	r5, r0
 80294ec:	4630      	mov	r0, r6
 80294ee:	f7ff f901 	bl	80286f4 <_malloc_r>
 80294f2:	b948      	cbnz	r0, 8029508 <__smakebuf_r+0x44>
 80294f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80294f8:	059a      	lsls	r2, r3, #22
 80294fa:	d4ef      	bmi.n	80294dc <__smakebuf_r+0x18>
 80294fc:	f023 0303 	bic.w	r3, r3, #3
 8029500:	f043 0302 	orr.w	r3, r3, #2
 8029504:	81a3      	strh	r3, [r4, #12]
 8029506:	e7e3      	b.n	80294d0 <__smakebuf_r+0xc>
 8029508:	4b0d      	ldr	r3, [pc, #52]	; (8029540 <__smakebuf_r+0x7c>)
 802950a:	62b3      	str	r3, [r6, #40]	; 0x28
 802950c:	89a3      	ldrh	r3, [r4, #12]
 802950e:	6020      	str	r0, [r4, #0]
 8029510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029514:	81a3      	strh	r3, [r4, #12]
 8029516:	9b00      	ldr	r3, [sp, #0]
 8029518:	6163      	str	r3, [r4, #20]
 802951a:	9b01      	ldr	r3, [sp, #4]
 802951c:	6120      	str	r0, [r4, #16]
 802951e:	b15b      	cbz	r3, 8029538 <__smakebuf_r+0x74>
 8029520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029524:	4630      	mov	r0, r6
 8029526:	f000 fa35 	bl	8029994 <_isatty_r>
 802952a:	b128      	cbz	r0, 8029538 <__smakebuf_r+0x74>
 802952c:	89a3      	ldrh	r3, [r4, #12]
 802952e:	f023 0303 	bic.w	r3, r3, #3
 8029532:	f043 0301 	orr.w	r3, r3, #1
 8029536:	81a3      	strh	r3, [r4, #12]
 8029538:	89a0      	ldrh	r0, [r4, #12]
 802953a:	4305      	orrs	r5, r0
 802953c:	81a5      	strh	r5, [r4, #12]
 802953e:	e7cd      	b.n	80294dc <__smakebuf_r+0x18>
 8029540:	080292d9 	.word	0x080292d9

08029544 <memmove>:
 8029544:	4288      	cmp	r0, r1
 8029546:	b510      	push	{r4, lr}
 8029548:	eb01 0402 	add.w	r4, r1, r2
 802954c:	d902      	bls.n	8029554 <memmove+0x10>
 802954e:	4284      	cmp	r4, r0
 8029550:	4623      	mov	r3, r4
 8029552:	d807      	bhi.n	8029564 <memmove+0x20>
 8029554:	1e43      	subs	r3, r0, #1
 8029556:	42a1      	cmp	r1, r4
 8029558:	d008      	beq.n	802956c <memmove+0x28>
 802955a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802955e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029562:	e7f8      	b.n	8029556 <memmove+0x12>
 8029564:	4402      	add	r2, r0
 8029566:	4601      	mov	r1, r0
 8029568:	428a      	cmp	r2, r1
 802956a:	d100      	bne.n	802956e <memmove+0x2a>
 802956c:	bd10      	pop	{r4, pc}
 802956e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8029572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8029576:	e7f7      	b.n	8029568 <memmove+0x24>

08029578 <__malloc_lock>:
 8029578:	4801      	ldr	r0, [pc, #4]	; (8029580 <__malloc_lock+0x8>)
 802957a:	f7ff b826 	b.w	80285ca <__retarget_lock_acquire_recursive>
 802957e:	bf00      	nop
 8029580:	200151f1 	.word	0x200151f1

08029584 <__malloc_unlock>:
 8029584:	4801      	ldr	r0, [pc, #4]	; (802958c <__malloc_unlock+0x8>)
 8029586:	f7ff b822 	b.w	80285ce <__retarget_lock_release_recursive>
 802958a:	bf00      	nop
 802958c:	200151f1 	.word	0x200151f1

08029590 <_realloc_r>:
 8029590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029594:	4680      	mov	r8, r0
 8029596:	4614      	mov	r4, r2
 8029598:	460e      	mov	r6, r1
 802959a:	b921      	cbnz	r1, 80295a6 <_realloc_r+0x16>
 802959c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80295a0:	4611      	mov	r1, r2
 80295a2:	f7ff b8a7 	b.w	80286f4 <_malloc_r>
 80295a6:	b92a      	cbnz	r2, 80295b4 <_realloc_r+0x24>
 80295a8:	f7ff f838 	bl	802861c <_free_r>
 80295ac:	4625      	mov	r5, r4
 80295ae:	4628      	mov	r0, r5
 80295b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80295b4:	f000 fa10 	bl	80299d8 <_malloc_usable_size_r>
 80295b8:	4284      	cmp	r4, r0
 80295ba:	4607      	mov	r7, r0
 80295bc:	d802      	bhi.n	80295c4 <_realloc_r+0x34>
 80295be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80295c2:	d812      	bhi.n	80295ea <_realloc_r+0x5a>
 80295c4:	4621      	mov	r1, r4
 80295c6:	4640      	mov	r0, r8
 80295c8:	f7ff f894 	bl	80286f4 <_malloc_r>
 80295cc:	4605      	mov	r5, r0
 80295ce:	2800      	cmp	r0, #0
 80295d0:	d0ed      	beq.n	80295ae <_realloc_r+0x1e>
 80295d2:	42bc      	cmp	r4, r7
 80295d4:	4622      	mov	r2, r4
 80295d6:	4631      	mov	r1, r6
 80295d8:	bf28      	it	cs
 80295da:	463a      	movcs	r2, r7
 80295dc:	f7ff f808 	bl	80285f0 <memcpy>
 80295e0:	4631      	mov	r1, r6
 80295e2:	4640      	mov	r0, r8
 80295e4:	f7ff f81a 	bl	802861c <_free_r>
 80295e8:	e7e1      	b.n	80295ae <_realloc_r+0x1e>
 80295ea:	4635      	mov	r5, r6
 80295ec:	e7df      	b.n	80295ae <_realloc_r+0x1e>

080295ee <__ssputs_r>:
 80295ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80295f2:	688e      	ldr	r6, [r1, #8]
 80295f4:	429e      	cmp	r6, r3
 80295f6:	4682      	mov	sl, r0
 80295f8:	460c      	mov	r4, r1
 80295fa:	4690      	mov	r8, r2
 80295fc:	461f      	mov	r7, r3
 80295fe:	d838      	bhi.n	8029672 <__ssputs_r+0x84>
 8029600:	898a      	ldrh	r2, [r1, #12]
 8029602:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8029606:	d032      	beq.n	802966e <__ssputs_r+0x80>
 8029608:	6825      	ldr	r5, [r4, #0]
 802960a:	6909      	ldr	r1, [r1, #16]
 802960c:	eba5 0901 	sub.w	r9, r5, r1
 8029610:	6965      	ldr	r5, [r4, #20]
 8029612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029616:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802961a:	3301      	adds	r3, #1
 802961c:	444b      	add	r3, r9
 802961e:	106d      	asrs	r5, r5, #1
 8029620:	429d      	cmp	r5, r3
 8029622:	bf38      	it	cc
 8029624:	461d      	movcc	r5, r3
 8029626:	0553      	lsls	r3, r2, #21
 8029628:	d531      	bpl.n	802968e <__ssputs_r+0xa0>
 802962a:	4629      	mov	r1, r5
 802962c:	f7ff f862 	bl	80286f4 <_malloc_r>
 8029630:	4606      	mov	r6, r0
 8029632:	b950      	cbnz	r0, 802964a <__ssputs_r+0x5c>
 8029634:	230c      	movs	r3, #12
 8029636:	f8ca 3000 	str.w	r3, [sl]
 802963a:	89a3      	ldrh	r3, [r4, #12]
 802963c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8029640:	81a3      	strh	r3, [r4, #12]
 8029642:	f04f 30ff 	mov.w	r0, #4294967295
 8029646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802964a:	6921      	ldr	r1, [r4, #16]
 802964c:	464a      	mov	r2, r9
 802964e:	f7fe ffcf 	bl	80285f0 <memcpy>
 8029652:	89a3      	ldrh	r3, [r4, #12]
 8029654:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8029658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802965c:	81a3      	strh	r3, [r4, #12]
 802965e:	6126      	str	r6, [r4, #16]
 8029660:	6165      	str	r5, [r4, #20]
 8029662:	444e      	add	r6, r9
 8029664:	eba5 0509 	sub.w	r5, r5, r9
 8029668:	6026      	str	r6, [r4, #0]
 802966a:	60a5      	str	r5, [r4, #8]
 802966c:	463e      	mov	r6, r7
 802966e:	42be      	cmp	r6, r7
 8029670:	d900      	bls.n	8029674 <__ssputs_r+0x86>
 8029672:	463e      	mov	r6, r7
 8029674:	6820      	ldr	r0, [r4, #0]
 8029676:	4632      	mov	r2, r6
 8029678:	4641      	mov	r1, r8
 802967a:	f7ff ff63 	bl	8029544 <memmove>
 802967e:	68a3      	ldr	r3, [r4, #8]
 8029680:	1b9b      	subs	r3, r3, r6
 8029682:	60a3      	str	r3, [r4, #8]
 8029684:	6823      	ldr	r3, [r4, #0]
 8029686:	4433      	add	r3, r6
 8029688:	6023      	str	r3, [r4, #0]
 802968a:	2000      	movs	r0, #0
 802968c:	e7db      	b.n	8029646 <__ssputs_r+0x58>
 802968e:	462a      	mov	r2, r5
 8029690:	f7ff ff7e 	bl	8029590 <_realloc_r>
 8029694:	4606      	mov	r6, r0
 8029696:	2800      	cmp	r0, #0
 8029698:	d1e1      	bne.n	802965e <__ssputs_r+0x70>
 802969a:	6921      	ldr	r1, [r4, #16]
 802969c:	4650      	mov	r0, sl
 802969e:	f7fe ffbd 	bl	802861c <_free_r>
 80296a2:	e7c7      	b.n	8029634 <__ssputs_r+0x46>

080296a4 <_svfiprintf_r>:
 80296a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296a8:	4698      	mov	r8, r3
 80296aa:	898b      	ldrh	r3, [r1, #12]
 80296ac:	061b      	lsls	r3, r3, #24
 80296ae:	b09d      	sub	sp, #116	; 0x74
 80296b0:	4607      	mov	r7, r0
 80296b2:	460d      	mov	r5, r1
 80296b4:	4614      	mov	r4, r2
 80296b6:	d50e      	bpl.n	80296d6 <_svfiprintf_r+0x32>
 80296b8:	690b      	ldr	r3, [r1, #16]
 80296ba:	b963      	cbnz	r3, 80296d6 <_svfiprintf_r+0x32>
 80296bc:	2140      	movs	r1, #64	; 0x40
 80296be:	f7ff f819 	bl	80286f4 <_malloc_r>
 80296c2:	6028      	str	r0, [r5, #0]
 80296c4:	6128      	str	r0, [r5, #16]
 80296c6:	b920      	cbnz	r0, 80296d2 <_svfiprintf_r+0x2e>
 80296c8:	230c      	movs	r3, #12
 80296ca:	603b      	str	r3, [r7, #0]
 80296cc:	f04f 30ff 	mov.w	r0, #4294967295
 80296d0:	e0d1      	b.n	8029876 <_svfiprintf_r+0x1d2>
 80296d2:	2340      	movs	r3, #64	; 0x40
 80296d4:	616b      	str	r3, [r5, #20]
 80296d6:	2300      	movs	r3, #0
 80296d8:	9309      	str	r3, [sp, #36]	; 0x24
 80296da:	2320      	movs	r3, #32
 80296dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80296e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80296e4:	2330      	movs	r3, #48	; 0x30
 80296e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8029890 <_svfiprintf_r+0x1ec>
 80296ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80296ee:	f04f 0901 	mov.w	r9, #1
 80296f2:	4623      	mov	r3, r4
 80296f4:	469a      	mov	sl, r3
 80296f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80296fa:	b10a      	cbz	r2, 8029700 <_svfiprintf_r+0x5c>
 80296fc:	2a25      	cmp	r2, #37	; 0x25
 80296fe:	d1f9      	bne.n	80296f4 <_svfiprintf_r+0x50>
 8029700:	ebba 0b04 	subs.w	fp, sl, r4
 8029704:	d00b      	beq.n	802971e <_svfiprintf_r+0x7a>
 8029706:	465b      	mov	r3, fp
 8029708:	4622      	mov	r2, r4
 802970a:	4629      	mov	r1, r5
 802970c:	4638      	mov	r0, r7
 802970e:	f7ff ff6e 	bl	80295ee <__ssputs_r>
 8029712:	3001      	adds	r0, #1
 8029714:	f000 80aa 	beq.w	802986c <_svfiprintf_r+0x1c8>
 8029718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802971a:	445a      	add	r2, fp
 802971c:	9209      	str	r2, [sp, #36]	; 0x24
 802971e:	f89a 3000 	ldrb.w	r3, [sl]
 8029722:	2b00      	cmp	r3, #0
 8029724:	f000 80a2 	beq.w	802986c <_svfiprintf_r+0x1c8>
 8029728:	2300      	movs	r3, #0
 802972a:	f04f 32ff 	mov.w	r2, #4294967295
 802972e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029732:	f10a 0a01 	add.w	sl, sl, #1
 8029736:	9304      	str	r3, [sp, #16]
 8029738:	9307      	str	r3, [sp, #28]
 802973a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802973e:	931a      	str	r3, [sp, #104]	; 0x68
 8029740:	4654      	mov	r4, sl
 8029742:	2205      	movs	r2, #5
 8029744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029748:	4851      	ldr	r0, [pc, #324]	; (8029890 <_svfiprintf_r+0x1ec>)
 802974a:	f7d6 fd61 	bl	8000210 <memchr>
 802974e:	9a04      	ldr	r2, [sp, #16]
 8029750:	b9d8      	cbnz	r0, 802978a <_svfiprintf_r+0xe6>
 8029752:	06d0      	lsls	r0, r2, #27
 8029754:	bf44      	itt	mi
 8029756:	2320      	movmi	r3, #32
 8029758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802975c:	0711      	lsls	r1, r2, #28
 802975e:	bf44      	itt	mi
 8029760:	232b      	movmi	r3, #43	; 0x2b
 8029762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029766:	f89a 3000 	ldrb.w	r3, [sl]
 802976a:	2b2a      	cmp	r3, #42	; 0x2a
 802976c:	d015      	beq.n	802979a <_svfiprintf_r+0xf6>
 802976e:	9a07      	ldr	r2, [sp, #28]
 8029770:	4654      	mov	r4, sl
 8029772:	2000      	movs	r0, #0
 8029774:	f04f 0c0a 	mov.w	ip, #10
 8029778:	4621      	mov	r1, r4
 802977a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802977e:	3b30      	subs	r3, #48	; 0x30
 8029780:	2b09      	cmp	r3, #9
 8029782:	d94e      	bls.n	8029822 <_svfiprintf_r+0x17e>
 8029784:	b1b0      	cbz	r0, 80297b4 <_svfiprintf_r+0x110>
 8029786:	9207      	str	r2, [sp, #28]
 8029788:	e014      	b.n	80297b4 <_svfiprintf_r+0x110>
 802978a:	eba0 0308 	sub.w	r3, r0, r8
 802978e:	fa09 f303 	lsl.w	r3, r9, r3
 8029792:	4313      	orrs	r3, r2
 8029794:	9304      	str	r3, [sp, #16]
 8029796:	46a2      	mov	sl, r4
 8029798:	e7d2      	b.n	8029740 <_svfiprintf_r+0x9c>
 802979a:	9b03      	ldr	r3, [sp, #12]
 802979c:	1d19      	adds	r1, r3, #4
 802979e:	681b      	ldr	r3, [r3, #0]
 80297a0:	9103      	str	r1, [sp, #12]
 80297a2:	2b00      	cmp	r3, #0
 80297a4:	bfbb      	ittet	lt
 80297a6:	425b      	neglt	r3, r3
 80297a8:	f042 0202 	orrlt.w	r2, r2, #2
 80297ac:	9307      	strge	r3, [sp, #28]
 80297ae:	9307      	strlt	r3, [sp, #28]
 80297b0:	bfb8      	it	lt
 80297b2:	9204      	strlt	r2, [sp, #16]
 80297b4:	7823      	ldrb	r3, [r4, #0]
 80297b6:	2b2e      	cmp	r3, #46	; 0x2e
 80297b8:	d10c      	bne.n	80297d4 <_svfiprintf_r+0x130>
 80297ba:	7863      	ldrb	r3, [r4, #1]
 80297bc:	2b2a      	cmp	r3, #42	; 0x2a
 80297be:	d135      	bne.n	802982c <_svfiprintf_r+0x188>
 80297c0:	9b03      	ldr	r3, [sp, #12]
 80297c2:	1d1a      	adds	r2, r3, #4
 80297c4:	681b      	ldr	r3, [r3, #0]
 80297c6:	9203      	str	r2, [sp, #12]
 80297c8:	2b00      	cmp	r3, #0
 80297ca:	bfb8      	it	lt
 80297cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80297d0:	3402      	adds	r4, #2
 80297d2:	9305      	str	r3, [sp, #20]
 80297d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80298a0 <_svfiprintf_r+0x1fc>
 80297d8:	7821      	ldrb	r1, [r4, #0]
 80297da:	2203      	movs	r2, #3
 80297dc:	4650      	mov	r0, sl
 80297de:	f7d6 fd17 	bl	8000210 <memchr>
 80297e2:	b140      	cbz	r0, 80297f6 <_svfiprintf_r+0x152>
 80297e4:	2340      	movs	r3, #64	; 0x40
 80297e6:	eba0 000a 	sub.w	r0, r0, sl
 80297ea:	fa03 f000 	lsl.w	r0, r3, r0
 80297ee:	9b04      	ldr	r3, [sp, #16]
 80297f0:	4303      	orrs	r3, r0
 80297f2:	3401      	adds	r4, #1
 80297f4:	9304      	str	r3, [sp, #16]
 80297f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80297fa:	4826      	ldr	r0, [pc, #152]	; (8029894 <_svfiprintf_r+0x1f0>)
 80297fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029800:	2206      	movs	r2, #6
 8029802:	f7d6 fd05 	bl	8000210 <memchr>
 8029806:	2800      	cmp	r0, #0
 8029808:	d038      	beq.n	802987c <_svfiprintf_r+0x1d8>
 802980a:	4b23      	ldr	r3, [pc, #140]	; (8029898 <_svfiprintf_r+0x1f4>)
 802980c:	bb1b      	cbnz	r3, 8029856 <_svfiprintf_r+0x1b2>
 802980e:	9b03      	ldr	r3, [sp, #12]
 8029810:	3307      	adds	r3, #7
 8029812:	f023 0307 	bic.w	r3, r3, #7
 8029816:	3308      	adds	r3, #8
 8029818:	9303      	str	r3, [sp, #12]
 802981a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802981c:	4433      	add	r3, r6
 802981e:	9309      	str	r3, [sp, #36]	; 0x24
 8029820:	e767      	b.n	80296f2 <_svfiprintf_r+0x4e>
 8029822:	fb0c 3202 	mla	r2, ip, r2, r3
 8029826:	460c      	mov	r4, r1
 8029828:	2001      	movs	r0, #1
 802982a:	e7a5      	b.n	8029778 <_svfiprintf_r+0xd4>
 802982c:	2300      	movs	r3, #0
 802982e:	3401      	adds	r4, #1
 8029830:	9305      	str	r3, [sp, #20]
 8029832:	4619      	mov	r1, r3
 8029834:	f04f 0c0a 	mov.w	ip, #10
 8029838:	4620      	mov	r0, r4
 802983a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802983e:	3a30      	subs	r2, #48	; 0x30
 8029840:	2a09      	cmp	r2, #9
 8029842:	d903      	bls.n	802984c <_svfiprintf_r+0x1a8>
 8029844:	2b00      	cmp	r3, #0
 8029846:	d0c5      	beq.n	80297d4 <_svfiprintf_r+0x130>
 8029848:	9105      	str	r1, [sp, #20]
 802984a:	e7c3      	b.n	80297d4 <_svfiprintf_r+0x130>
 802984c:	fb0c 2101 	mla	r1, ip, r1, r2
 8029850:	4604      	mov	r4, r0
 8029852:	2301      	movs	r3, #1
 8029854:	e7f0      	b.n	8029838 <_svfiprintf_r+0x194>
 8029856:	ab03      	add	r3, sp, #12
 8029858:	9300      	str	r3, [sp, #0]
 802985a:	462a      	mov	r2, r5
 802985c:	4b0f      	ldr	r3, [pc, #60]	; (802989c <_svfiprintf_r+0x1f8>)
 802985e:	a904      	add	r1, sp, #16
 8029860:	4638      	mov	r0, r7
 8029862:	f3af 8000 	nop.w
 8029866:	1c42      	adds	r2, r0, #1
 8029868:	4606      	mov	r6, r0
 802986a:	d1d6      	bne.n	802981a <_svfiprintf_r+0x176>
 802986c:	89ab      	ldrh	r3, [r5, #12]
 802986e:	065b      	lsls	r3, r3, #25
 8029870:	f53f af2c 	bmi.w	80296cc <_svfiprintf_r+0x28>
 8029874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029876:	b01d      	add	sp, #116	; 0x74
 8029878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802987c:	ab03      	add	r3, sp, #12
 802987e:	9300      	str	r3, [sp, #0]
 8029880:	462a      	mov	r2, r5
 8029882:	4b06      	ldr	r3, [pc, #24]	; (802989c <_svfiprintf_r+0x1f8>)
 8029884:	a904      	add	r1, sp, #16
 8029886:	4638      	mov	r0, r7
 8029888:	f7ff f970 	bl	8028b6c <_printf_i>
 802988c:	e7eb      	b.n	8029866 <_svfiprintf_r+0x1c2>
 802988e:	bf00      	nop
 8029890:	0802e350 	.word	0x0802e350
 8029894:	0802e35a 	.word	0x0802e35a
 8029898:	00000000 	.word	0x00000000
 802989c:	080295ef 	.word	0x080295ef
 80298a0:	0802e356 	.word	0x0802e356

080298a4 <__sread>:
 80298a4:	b510      	push	{r4, lr}
 80298a6:	460c      	mov	r4, r1
 80298a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80298ac:	f000 f89c 	bl	80299e8 <_read_r>
 80298b0:	2800      	cmp	r0, #0
 80298b2:	bfab      	itete	ge
 80298b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80298b6:	89a3      	ldrhlt	r3, [r4, #12]
 80298b8:	181b      	addge	r3, r3, r0
 80298ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80298be:	bfac      	ite	ge
 80298c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80298c2:	81a3      	strhlt	r3, [r4, #12]
 80298c4:	bd10      	pop	{r4, pc}

080298c6 <__swrite>:
 80298c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80298ca:	461f      	mov	r7, r3
 80298cc:	898b      	ldrh	r3, [r1, #12]
 80298ce:	05db      	lsls	r3, r3, #23
 80298d0:	4605      	mov	r5, r0
 80298d2:	460c      	mov	r4, r1
 80298d4:	4616      	mov	r6, r2
 80298d6:	d505      	bpl.n	80298e4 <__swrite+0x1e>
 80298d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80298dc:	2302      	movs	r3, #2
 80298de:	2200      	movs	r2, #0
 80298e0:	f000 f868 	bl	80299b4 <_lseek_r>
 80298e4:	89a3      	ldrh	r3, [r4, #12]
 80298e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80298ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80298ee:	81a3      	strh	r3, [r4, #12]
 80298f0:	4632      	mov	r2, r6
 80298f2:	463b      	mov	r3, r7
 80298f4:	4628      	mov	r0, r5
 80298f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80298fa:	f000 b817 	b.w	802992c <_write_r>

080298fe <__sseek>:
 80298fe:	b510      	push	{r4, lr}
 8029900:	460c      	mov	r4, r1
 8029902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029906:	f000 f855 	bl	80299b4 <_lseek_r>
 802990a:	1c43      	adds	r3, r0, #1
 802990c:	89a3      	ldrh	r3, [r4, #12]
 802990e:	bf15      	itete	ne
 8029910:	6560      	strne	r0, [r4, #84]	; 0x54
 8029912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802991a:	81a3      	strheq	r3, [r4, #12]
 802991c:	bf18      	it	ne
 802991e:	81a3      	strhne	r3, [r4, #12]
 8029920:	bd10      	pop	{r4, pc}

08029922 <__sclose>:
 8029922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029926:	f000 b813 	b.w	8029950 <_close_r>
	...

0802992c <_write_r>:
 802992c:	b538      	push	{r3, r4, r5, lr}
 802992e:	4d07      	ldr	r5, [pc, #28]	; (802994c <_write_r+0x20>)
 8029930:	4604      	mov	r4, r0
 8029932:	4608      	mov	r0, r1
 8029934:	4611      	mov	r1, r2
 8029936:	2200      	movs	r2, #0
 8029938:	602a      	str	r2, [r5, #0]
 802993a:	461a      	mov	r2, r3
 802993c:	f7d7 ffea 	bl	8001914 <_write>
 8029940:	1c43      	adds	r3, r0, #1
 8029942:	d102      	bne.n	802994a <_write_r+0x1e>
 8029944:	682b      	ldr	r3, [r5, #0]
 8029946:	b103      	cbz	r3, 802994a <_write_r+0x1e>
 8029948:	6023      	str	r3, [r4, #0]
 802994a:	bd38      	pop	{r3, r4, r5, pc}
 802994c:	20015394 	.word	0x20015394

08029950 <_close_r>:
 8029950:	b538      	push	{r3, r4, r5, lr}
 8029952:	4d06      	ldr	r5, [pc, #24]	; (802996c <_close_r+0x1c>)
 8029954:	2300      	movs	r3, #0
 8029956:	4604      	mov	r4, r0
 8029958:	4608      	mov	r0, r1
 802995a:	602b      	str	r3, [r5, #0]
 802995c:	f7d7 ffe8 	bl	8001930 <_close>
 8029960:	1c43      	adds	r3, r0, #1
 8029962:	d102      	bne.n	802996a <_close_r+0x1a>
 8029964:	682b      	ldr	r3, [r5, #0]
 8029966:	b103      	cbz	r3, 802996a <_close_r+0x1a>
 8029968:	6023      	str	r3, [r4, #0]
 802996a:	bd38      	pop	{r3, r4, r5, pc}
 802996c:	20015394 	.word	0x20015394

08029970 <_fstat_r>:
 8029970:	b538      	push	{r3, r4, r5, lr}
 8029972:	4d07      	ldr	r5, [pc, #28]	; (8029990 <_fstat_r+0x20>)
 8029974:	2300      	movs	r3, #0
 8029976:	4604      	mov	r4, r0
 8029978:	4608      	mov	r0, r1
 802997a:	4611      	mov	r1, r2
 802997c:	602b      	str	r3, [r5, #0]
 802997e:	f7d7 ffda 	bl	8001936 <_fstat>
 8029982:	1c43      	adds	r3, r0, #1
 8029984:	d102      	bne.n	802998c <_fstat_r+0x1c>
 8029986:	682b      	ldr	r3, [r5, #0]
 8029988:	b103      	cbz	r3, 802998c <_fstat_r+0x1c>
 802998a:	6023      	str	r3, [r4, #0]
 802998c:	bd38      	pop	{r3, r4, r5, pc}
 802998e:	bf00      	nop
 8029990:	20015394 	.word	0x20015394

08029994 <_isatty_r>:
 8029994:	b538      	push	{r3, r4, r5, lr}
 8029996:	4d06      	ldr	r5, [pc, #24]	; (80299b0 <_isatty_r+0x1c>)
 8029998:	2300      	movs	r3, #0
 802999a:	4604      	mov	r4, r0
 802999c:	4608      	mov	r0, r1
 802999e:	602b      	str	r3, [r5, #0]
 80299a0:	f7d7 ffce 	bl	8001940 <_isatty>
 80299a4:	1c43      	adds	r3, r0, #1
 80299a6:	d102      	bne.n	80299ae <_isatty_r+0x1a>
 80299a8:	682b      	ldr	r3, [r5, #0]
 80299aa:	b103      	cbz	r3, 80299ae <_isatty_r+0x1a>
 80299ac:	6023      	str	r3, [r4, #0]
 80299ae:	bd38      	pop	{r3, r4, r5, pc}
 80299b0:	20015394 	.word	0x20015394

080299b4 <_lseek_r>:
 80299b4:	b538      	push	{r3, r4, r5, lr}
 80299b6:	4d07      	ldr	r5, [pc, #28]	; (80299d4 <_lseek_r+0x20>)
 80299b8:	4604      	mov	r4, r0
 80299ba:	4608      	mov	r0, r1
 80299bc:	4611      	mov	r1, r2
 80299be:	2200      	movs	r2, #0
 80299c0:	602a      	str	r2, [r5, #0]
 80299c2:	461a      	mov	r2, r3
 80299c4:	f7d7 ffbe 	bl	8001944 <_lseek>
 80299c8:	1c43      	adds	r3, r0, #1
 80299ca:	d102      	bne.n	80299d2 <_lseek_r+0x1e>
 80299cc:	682b      	ldr	r3, [r5, #0]
 80299ce:	b103      	cbz	r3, 80299d2 <_lseek_r+0x1e>
 80299d0:	6023      	str	r3, [r4, #0]
 80299d2:	bd38      	pop	{r3, r4, r5, pc}
 80299d4:	20015394 	.word	0x20015394

080299d8 <_malloc_usable_size_r>:
 80299d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80299dc:	1f18      	subs	r0, r3, #4
 80299de:	2b00      	cmp	r3, #0
 80299e0:	bfbc      	itt	lt
 80299e2:	580b      	ldrlt	r3, [r1, r0]
 80299e4:	18c0      	addlt	r0, r0, r3
 80299e6:	4770      	bx	lr

080299e8 <_read_r>:
 80299e8:	b538      	push	{r3, r4, r5, lr}
 80299ea:	4d07      	ldr	r5, [pc, #28]	; (8029a08 <_read_r+0x20>)
 80299ec:	4604      	mov	r4, r0
 80299ee:	4608      	mov	r0, r1
 80299f0:	4611      	mov	r1, r2
 80299f2:	2200      	movs	r2, #0
 80299f4:	602a      	str	r2, [r5, #0]
 80299f6:	461a      	mov	r2, r3
 80299f8:	f7d7 ff7e 	bl	80018f8 <_read>
 80299fc:	1c43      	adds	r3, r0, #1
 80299fe:	d102      	bne.n	8029a06 <_read_r+0x1e>
 8029a00:	682b      	ldr	r3, [r5, #0]
 8029a02:	b103      	cbz	r3, 8029a06 <_read_r+0x1e>
 8029a04:	6023      	str	r3, [r4, #0]
 8029a06:	bd38      	pop	{r3, r4, r5, pc}
 8029a08:	20015394 	.word	0x20015394

08029a0c <_init>:
 8029a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a0e:	bf00      	nop
 8029a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a12:	bc08      	pop	{r3}
 8029a14:	469e      	mov	lr, r3
 8029a16:	4770      	bx	lr

08029a18 <_fini>:
 8029a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a1a:	bf00      	nop
 8029a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a1e:	bc08      	pop	{r3}
 8029a20:	469e      	mov	lr, r3
 8029a22:	4770      	bx	lr
